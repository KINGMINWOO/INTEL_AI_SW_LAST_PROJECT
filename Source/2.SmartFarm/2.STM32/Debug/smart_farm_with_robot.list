
smart_farm_with_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b4e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  0800b688  0800b688  0000c688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bed8  0800bed8  0000d1f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bed8  0800bed8  0000ced8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bee0  0800bee0  0000d1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bee0  0800bee0  0000cee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bee4  0800bee4  0000cee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800bee8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  200001f8  0800c0dc  0000d1f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  0800c0dc  0000d79c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010993  00000000  00000000  0000d224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002665  00000000  00000000  0001dbb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00020220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c74  00000000  00000000  00021218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018c28  00000000  00000000  00021e8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f93  00000000  00000000  0003aab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c84c  00000000  00000000  0004ca47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9293  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a70  00000000  00000000  000e92d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000eed48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b66c 	.word	0x0800b66c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	0800b66c 	.word	0x0800b66c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9be 	b.w	800104c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	468e      	mov	lr, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	4688      	mov	r8, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d962      	bls.n	8000e30 <__udivmoddi4+0xdc>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	b14e      	cbz	r6, 8000d84 <__udivmoddi4+0x30>
 8000d70:	f1c6 0320 	rsb	r3, r6, #32
 8000d74:	fa01 f806 	lsl.w	r8, r1, r6
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	40b7      	lsls	r7, r6
 8000d7e:	ea43 0808 	orr.w	r8, r3, r8
 8000d82:	40b4      	lsls	r4, r6
 8000d84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d90:	0c23      	lsrs	r3, r4, #16
 8000d92:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000da8:	f080 80ea 	bcs.w	8000f80 <__udivmoddi4+0x22c>
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f240 80e7 	bls.w	8000f80 <__udivmoddi4+0x22c>
 8000db2:	3902      	subs	r1, #2
 8000db4:	443b      	add	r3, r7
 8000db6:	1a9a      	subs	r2, r3, r2
 8000db8:	b2a3      	uxth	r3, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dc6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dca:	459c      	cmp	ip, r3
 8000dcc:	d909      	bls.n	8000de2 <__udivmoddi4+0x8e>
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd4:	f080 80d6 	bcs.w	8000f84 <__udivmoddi4+0x230>
 8000dd8:	459c      	cmp	ip, r3
 8000dda:	f240 80d3 	bls.w	8000f84 <__udivmoddi4+0x230>
 8000dde:	443b      	add	r3, r7
 8000de0:	3802      	subs	r0, #2
 8000de2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de6:	eba3 030c 	sub.w	r3, r3, ip
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11d      	cbz	r5, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40f3      	lsrs	r3, r6
 8000df0:	2200      	movs	r2, #0
 8000df2:	e9c5 3200 	strd	r3, r2, [r5]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d905      	bls.n	8000e0a <__udivmoddi4+0xb6>
 8000dfe:	b10d      	cbz	r5, 8000e04 <__udivmoddi4+0xb0>
 8000e00:	e9c5 0100 	strd	r0, r1, [r5]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4608      	mov	r0, r1
 8000e08:	e7f5      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e0a:	fab3 f183 	clz	r1, r3
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	d146      	bne.n	8000ea0 <__udivmoddi4+0x14c>
 8000e12:	4573      	cmp	r3, lr
 8000e14:	d302      	bcc.n	8000e1c <__udivmoddi4+0xc8>
 8000e16:	4282      	cmp	r2, r0
 8000e18:	f200 8105 	bhi.w	8001026 <__udivmoddi4+0x2d2>
 8000e1c:	1a84      	subs	r4, r0, r2
 8000e1e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e22:	2001      	movs	r0, #1
 8000e24:	4690      	mov	r8, r2
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d0e5      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e2a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e2e:	e7e2      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	f000 8090 	beq.w	8000f56 <__udivmoddi4+0x202>
 8000e36:	fab2 f682 	clz	r6, r2
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	f040 80a4 	bne.w	8000f88 <__udivmoddi4+0x234>
 8000e40:	1a8a      	subs	r2, r1, r2
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e48:	b280      	uxth	r0, r0
 8000e4a:	b2bc      	uxth	r4, r7
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e52:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e5a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x11e>
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x11c>
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	f200 80e0 	bhi.w	8001030 <__udivmoddi4+0x2dc>
 8000e70:	46c4      	mov	ip, r8
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e78:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e80:	fb02 f404 	mul.w	r4, r2, r4
 8000e84:	429c      	cmp	r4, r3
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x144>
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x142>
 8000e90:	429c      	cmp	r4, r3
 8000e92:	f200 80ca 	bhi.w	800102a <__udivmoddi4+0x2d6>
 8000e96:	4602      	mov	r2, r0
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e9e:	e7a5      	b.n	8000dec <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eaa:	431f      	orrs	r7, r3
 8000eac:	fa0e f401 	lsl.w	r4, lr, r1
 8000eb0:	fa20 f306 	lsr.w	r3, r0, r6
 8000eb4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000eb8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ebc:	4323      	orrs	r3, r4
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	fa1f fc87 	uxth.w	ip, r7
 8000ec6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eca:	0c1c      	lsrs	r4, r3, #16
 8000ecc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ed0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ed4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ed8:	45a6      	cmp	lr, r4
 8000eda:	fa02 f201 	lsl.w	r2, r2, r1
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x1a0>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ee6:	f080 809c 	bcs.w	8001022 <__udivmoddi4+0x2ce>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	f240 8099 	bls.w	8001022 <__udivmoddi4+0x2ce>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	443c      	add	r4, r7
 8000ef4:	eba4 040e 	sub.w	r4, r4, lr
 8000ef8:	fa1f fe83 	uxth.w	lr, r3
 8000efc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f00:	fb09 4413 	mls	r4, r9, r3, r4
 8000f04:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f0c:	45a4      	cmp	ip, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x1ce>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f16:	f080 8082 	bcs.w	800101e <__udivmoddi4+0x2ca>
 8000f1a:	45a4      	cmp	ip, r4
 8000f1c:	d97f      	bls.n	800101e <__udivmoddi4+0x2ca>
 8000f1e:	3b02      	subs	r3, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f26:	eba4 040c 	sub.w	r4, r4, ip
 8000f2a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f2e:	4564      	cmp	r4, ip
 8000f30:	4673      	mov	r3, lr
 8000f32:	46e1      	mov	r9, ip
 8000f34:	d362      	bcc.n	8000ffc <__udivmoddi4+0x2a8>
 8000f36:	d05f      	beq.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x1fe>
 8000f3a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f3e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f42:	fa04 f606 	lsl.w	r6, r4, r6
 8000f46:	fa22 f301 	lsr.w	r3, r2, r1
 8000f4a:	431e      	orrs	r6, r3
 8000f4c:	40cc      	lsrs	r4, r1
 8000f4e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f52:	2100      	movs	r1, #0
 8000f54:	e74f      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000f56:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f5a:	0c01      	lsrs	r1, r0, #16
 8000f5c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f60:	b280      	uxth	r0, r0
 8000f62:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f66:	463b      	mov	r3, r7
 8000f68:	4638      	mov	r0, r7
 8000f6a:	463c      	mov	r4, r7
 8000f6c:	46b8      	mov	r8, r7
 8000f6e:	46be      	mov	lr, r7
 8000f70:	2620      	movs	r6, #32
 8000f72:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f76:	eba2 0208 	sub.w	r2, r2, r8
 8000f7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f7e:	e766      	b.n	8000e4e <__udivmoddi4+0xfa>
 8000f80:	4601      	mov	r1, r0
 8000f82:	e718      	b.n	8000db6 <__udivmoddi4+0x62>
 8000f84:	4610      	mov	r0, r2
 8000f86:	e72c      	b.n	8000de2 <__udivmoddi4+0x8e>
 8000f88:	f1c6 0220 	rsb	r2, r6, #32
 8000f8c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f90:	40b7      	lsls	r7, r6
 8000f92:	40b1      	lsls	r1, r6
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fa2:	b2bc      	uxth	r4, r7
 8000fa4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fae:	fb08 f904 	mul.w	r9, r8, r4
 8000fb2:	40b0      	lsls	r0, r6
 8000fb4:	4589      	cmp	r9, r1
 8000fb6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fba:	b280      	uxth	r0, r0
 8000fbc:	d93e      	bls.n	800103c <__udivmoddi4+0x2e8>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fc4:	d201      	bcs.n	8000fca <__udivmoddi4+0x276>
 8000fc6:	4589      	cmp	r9, r1
 8000fc8:	d81f      	bhi.n	800100a <__udivmoddi4+0x2b6>
 8000fca:	eba1 0109 	sub.w	r1, r1, r9
 8000fce:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd2:	fb09 f804 	mul.w	r8, r9, r4
 8000fd6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fda:	b292      	uxth	r2, r2
 8000fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe0:	4542      	cmp	r2, r8
 8000fe2:	d229      	bcs.n	8001038 <__udivmoddi4+0x2e4>
 8000fe4:	18ba      	adds	r2, r7, r2
 8000fe6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fea:	d2c4      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000fec:	4542      	cmp	r2, r8
 8000fee:	d2c2      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000ff0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ff4:	443a      	add	r2, r7
 8000ff6:	e7be      	b.n	8000f76 <__udivmoddi4+0x222>
 8000ff8:	45f0      	cmp	r8, lr
 8000ffa:	d29d      	bcs.n	8000f38 <__udivmoddi4+0x1e4>
 8000ffc:	ebbe 0302 	subs.w	r3, lr, r2
 8001000:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001004:	3801      	subs	r0, #1
 8001006:	46e1      	mov	r9, ip
 8001008:	e796      	b.n	8000f38 <__udivmoddi4+0x1e4>
 800100a:	eba7 0909 	sub.w	r9, r7, r9
 800100e:	4449      	add	r1, r9
 8001010:	f1a8 0c02 	sub.w	ip, r8, #2
 8001014:	fbb1 f9fe 	udiv	r9, r1, lr
 8001018:	fb09 f804 	mul.w	r8, r9, r4
 800101c:	e7db      	b.n	8000fd6 <__udivmoddi4+0x282>
 800101e:	4673      	mov	r3, lr
 8001020:	e77f      	b.n	8000f22 <__udivmoddi4+0x1ce>
 8001022:	4650      	mov	r0, sl
 8001024:	e766      	b.n	8000ef4 <__udivmoddi4+0x1a0>
 8001026:	4608      	mov	r0, r1
 8001028:	e6fd      	b.n	8000e26 <__udivmoddi4+0xd2>
 800102a:	443b      	add	r3, r7
 800102c:	3a02      	subs	r2, #2
 800102e:	e733      	b.n	8000e98 <__udivmoddi4+0x144>
 8001030:	f1ac 0c02 	sub.w	ip, ip, #2
 8001034:	443b      	add	r3, r7
 8001036:	e71c      	b.n	8000e72 <__udivmoddi4+0x11e>
 8001038:	4649      	mov	r1, r9
 800103a:	e79c      	b.n	8000f76 <__udivmoddi4+0x222>
 800103c:	eba1 0109 	sub.w	r1, r1, r9
 8001040:	46c4      	mov	ip, r8
 8001042:	fbb1 f9fe 	udiv	r9, r1, lr
 8001046:	fb09 f804 	mul.w	r8, r9, r4
 800104a:	e7c4      	b.n	8000fd6 <__udivmoddi4+0x282>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <DWT_Delay_Init>:
#include "dht22.h"
#include <string.h>

/* ====================== DWT 기반 마이크로초 지연 ====================== */
uint32_t DWT_Delay_Init(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001054:	4b14      	ldr	r3, [pc, #80]	@ (80010a8 <DWT_Delay_Init+0x58>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	4a13      	ldr	r2, [pc, #76]	@ (80010a8 <DWT_Delay_Init+0x58>)
 800105a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800105e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001060:	4b11      	ldr	r3, [pc, #68]	@ (80010a8 <DWT_Delay_Init+0x58>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	4a10      	ldr	r2, [pc, #64]	@ (80010a8 <DWT_Delay_Init+0x58>)
 8001066:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800106a:	60d3      	str	r3, [r2, #12]

  /* Disable cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk;
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <DWT_Delay_Init+0x5c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a0e      	ldr	r2, [pc, #56]	@ (80010ac <DWT_Delay_Init+0x5c>)
 8001072:	f023 0301 	bic.w	r3, r3, #1
 8001076:	6013      	str	r3, [r2, #0]
  /* Enable cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk;
 8001078:	4b0c      	ldr	r3, [pc, #48]	@ (80010ac <DWT_Delay_Init+0x5c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a0b      	ldr	r2, [pc, #44]	@ (80010ac <DWT_Delay_Init+0x5c>)
 800107e:	f043 0301 	orr.w	r3, r3, #1
 8001082:	6013      	str	r3, [r2, #0]

  /* Reset counter */
  DWT->CYCCNT = 0;
 8001084:	4b09      	ldr	r3, [pc, #36]	@ (80010ac <DWT_Delay_Init+0x5c>)
 8001086:	2200      	movs	r2, #0
 8001088:	605a      	str	r2, [r3, #4]

  __ASM volatile ("NOP");
 800108a:	bf00      	nop
  __ASM volatile ("NOP");
 800108c:	bf00      	nop
  __ASM volatile ("NOP");
 800108e:	bf00      	nop

  return (DWT->CYCCNT) ? 0 : 1;
 8001090:	4b06      	ldr	r3, [pc, #24]	@ (80010ac <DWT_Delay_Init+0x5c>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	2b00      	cmp	r3, #0
 8001096:	bf0c      	ite	eq
 8001098:	2301      	moveq	r3, #1
 800109a:	2300      	movne	r3, #0
 800109c:	b2db      	uxtb	r3, r3
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000edf0 	.word	0xe000edf0
 80010ac:	e0001000 	.word	0xe0001000

080010b0 <DWT_Delay_us>:

void DWT_Delay_us(volatile uint32_t microseconds)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 80010b8:	4b0d      	ldr	r3, [pc, #52]	@ (80010f0 <DWT_Delay_us+0x40>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000U);
 80010be:	f003 fbf9 	bl	80048b4 <HAL_RCC_GetHCLKFreq>
 80010c2:	4603      	mov	r3, r0
 80010c4:	4a0b      	ldr	r2, [pc, #44]	@ (80010f4 <DWT_Delay_us+0x44>)
 80010c6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ca:	0c9b      	lsrs	r3, r3, #18
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	fb02 f303 	mul.w	r3, r2, r3
 80010d2:	607b      	str	r3, [r7, #4]
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds) { __NOP(); }
 80010d4:	e000      	b.n	80010d8 <DWT_Delay_us+0x28>
 80010d6:	bf00      	nop
 80010d8:	4b05      	ldr	r3, [pc, #20]	@ (80010f0 <DWT_Delay_us+0x40>)
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	1ad2      	subs	r2, r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d3f7      	bcc.n	80010d6 <DWT_Delay_us+0x26>
}
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	e0001000 	.word	0xe0001000
 80010f4:	431bde83 	.word	0x431bde83

080010f8 <Set_Pin_Output>:

/* ====================== GPIO 방향 전환 유틸 ====================== */
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_Pin;
 8001114:	887b      	ldrh	r3, [r7, #2]
 8001116:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2300      	movs	r3, #0
 8001122:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	4619      	mov	r1, r3
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f002 fd84 	bl	8003c38 <HAL_GPIO_Init>
}
 8001130:	bf00      	nop
 8001132:	3720      	adds	r7, #32
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b088      	sub	sp, #32
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	460b      	mov	r3, r1
 8001142:	807b      	strh	r3, [r7, #2]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = GPIO_Pin;
 8001154:	887b      	ldrh	r3, [r7, #2]
 8001156:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;   // 외부 풀업 권장(4.7~5.1kΩ)
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	4619      	mov	r1, r3
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f002 fd66 	bl	8003c38 <HAL_GPIO_Init>
}
 800116c:	bf00      	nop
 800116e:	3720      	adds	r7, #32
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}

08001174 <DHT22_Start>:

/* ====================== DHT22 프로토콜 ====================== */
/* Start: MCU 0.8~1.0ms Low -> 20~30us High -> Input */
static void DHT22_Start(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
  Set_Pin_Output(DHT22_PORT, DHT22_PIN);
 8001178:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800117c:	4812      	ldr	r0, [pc, #72]	@ (80011c8 <DHT22_Start+0x54>)
 800117e:	f7ff ffbb 	bl	80010f8 <Set_Pin_Output>
  HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, GPIO_PIN_SET);
 8001182:	2201      	movs	r2, #1
 8001184:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001188:	480f      	ldr	r0, [pc, #60]	@ (80011c8 <DHT22_Start+0x54>)
 800118a:	f002 fef1 	bl	8003f70 <HAL_GPIO_WritePin>
  DWT_Delay_us(10);
 800118e:	200a      	movs	r0, #10
 8001190:	f7ff ff8e 	bl	80010b0 <DWT_Delay_us>

  HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, GPIO_PIN_RESET);
 8001194:	2200      	movs	r2, #0
 8001196:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800119a:	480b      	ldr	r0, [pc, #44]	@ (80011c8 <DHT22_Start+0x54>)
 800119c:	f002 fee8 	bl	8003f70 <HAL_GPIO_WritePin>
  DWT_Delay_us(1000);   // >= 0.8ms (보통 1ms)
 80011a0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011a4:	f7ff ff84 	bl	80010b0 <DWT_Delay_us>
  HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, GPIO_PIN_SET);
 80011a8:	2201      	movs	r2, #1
 80011aa:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011ae:	4806      	ldr	r0, [pc, #24]	@ (80011c8 <DHT22_Start+0x54>)
 80011b0:	f002 fede 	bl	8003f70 <HAL_GPIO_WritePin>
  DWT_Delay_us(30);     // 20~30us
 80011b4:	201e      	movs	r0, #30
 80011b6:	f7ff ff7b 	bl	80010b0 <DWT_Delay_us>
  Set_Pin_Input(DHT22_PORT, DHT22_PIN); // 센서 응답 대기
 80011ba:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011be:	4802      	ldr	r0, [pc, #8]	@ (80011c8 <DHT22_Start+0x54>)
 80011c0:	f7ff ffba 	bl	8001138 <Set_Pin_Input>
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	40020800 	.word	0x40020800

080011cc <DHT22_Check_Response>:

/* Response: ~80us Low + ~80us High */
static int8_t DHT22_Check_Response(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
  int8_t rsp = -1;
 80011d2:	23ff      	movs	r3, #255	@ 0xff
 80011d4:	71fb      	strb	r3, [r7, #7]

  if (!HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) {
 80011d6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011da:	4812      	ldr	r0, [pc, #72]	@ (8001224 <DHT22_Check_Response+0x58>)
 80011dc:	f002 feb0 	bl	8003f40 <HAL_GPIO_ReadPin>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d118      	bne.n	8001218 <DHT22_Check_Response+0x4c>
    DWT_Delay_us(80);
 80011e6:	2050      	movs	r0, #80	@ 0x50
 80011e8:	f7ff ff62 	bl	80010b0 <DWT_Delay_us>
    if (HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) {
 80011ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80011f0:	480c      	ldr	r0, [pc, #48]	@ (8001224 <DHT22_Check_Response+0x58>)
 80011f2:	f002 fea5 	bl	8003f40 <HAL_GPIO_ReadPin>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d002      	beq.n	8001202 <DHT22_Check_Response+0x36>
      rsp = 1; // OK
 80011fc:	2301      	movs	r3, #1
 80011fe:	71fb      	strb	r3, [r7, #7]
 8001200:	e001      	b.n	8001206 <DHT22_Check_Response+0x3a>
    } else {
      rsp = -2; // unexpected level
 8001202:	23fe      	movs	r3, #254	@ 0xfe
 8001204:	71fb      	strb	r3, [r7, #7]
    }
    // 응답 High 종료까지 대기
    while (HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN));
 8001206:	bf00      	nop
 8001208:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800120c:	4805      	ldr	r0, [pc, #20]	@ (8001224 <DHT22_Check_Response+0x58>)
 800120e:	f002 fe97 	bl	8003f40 <HAL_GPIO_ReadPin>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d1f7      	bne.n	8001208 <DHT22_Check_Response+0x3c>
  }
  return rsp;
 8001218:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40020800 	.word	0x40020800

08001228 <DHT22_ReadByte>:

/* 비트 읽기: High가 시작된 뒤 40us에서 샘플링
   - '0'이면 40us 시점에는 이미 Low
   - '1'이면 40us 시점에도 High */
static uint8_t DHT22_ReadByte(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
  uint8_t val = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	71fb      	strb	r3, [r7, #7]
  for (int j = 0; j < 8; j++) {
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	e026      	b.n	8001286 <DHT22_ReadByte+0x5e>
    // High 시작 대기
    while (!HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN));
 8001238:	bf00      	nop
 800123a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800123e:	4816      	ldr	r0, [pc, #88]	@ (8001298 <DHT22_ReadByte+0x70>)
 8001240:	f002 fe7e 	bl	8003f40 <HAL_GPIO_ReadPin>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f7      	beq.n	800123a <DHT22_ReadByte+0x12>
    DWT_Delay_us(40);
 800124a:	2028      	movs	r0, #40	@ 0x28
 800124c:	f7ff ff30 	bl	80010b0 <DWT_Delay_us>
    val <<= 1;
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	005b      	lsls	r3, r3, #1
 8001254:	71fb      	strb	r3, [r7, #7]
    if (HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) {
 8001256:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800125a:	480f      	ldr	r0, [pc, #60]	@ (8001298 <DHT22_ReadByte+0x70>)
 800125c:	f002 fe70 	bl	8003f40 <HAL_GPIO_ReadPin>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d003      	beq.n	800126e <DHT22_ReadByte+0x46>
      val |= 1;
 8001266:	79fb      	ldrb	r3, [r7, #7]
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	71fb      	strb	r3, [r7, #7]
    }
    // 다음 비트로 넘어가기 전, 현재 High가 끝나도록 대기
    while (HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN));
 800126e:	bf00      	nop
 8001270:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001274:	4808      	ldr	r0, [pc, #32]	@ (8001298 <DHT22_ReadByte+0x70>)
 8001276:	f002 fe63 	bl	8003f40 <HAL_GPIO_ReadPin>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d1f7      	bne.n	8001270 <DHT22_ReadByte+0x48>
  for (int j = 0; j < 8; j++) {
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	2b07      	cmp	r3, #7
 800128a:	ddd5      	ble.n	8001238 <DHT22_ReadByte+0x10>
  }
  return val;
 800128c:	79fb      	ldrb	r3, [r7, #7]
}
 800128e:	4618      	mov	r0, r3
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40020800 	.word	0x40020800

0800129c <DHT22_ReadData>:

/* 읽기 1회: RH(2) + T(2) + CHK(1) → 변환/검증 */
DHT22_TypeDef DHT22_ReadData(void)
{
 800129c:	b590      	push	{r4, r7, lr}
 800129e:	b089      	sub	sp, #36	@ 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  DHT22_TypeDef d;
  memset(&d, 0, sizeof(d));
 80012a4:	f107 0308 	add.w	r3, r7, #8
 80012a8:	2210      	movs	r2, #16
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f007 fca9 	bl	8008c04 <memset>

  DHT22_Start();
 80012b2:	f7ff ff5f 	bl	8001174 <DHT22_Start>
  d.status = DHT22_Check_Response();
 80012b6:	f7ff ff89 	bl	80011cc <DHT22_Check_Response>
 80012ba:	4603      	mov	r3, r0
 80012bc:	723b      	strb	r3, [r7, #8]
  if (d.status < 0) return d;
 80012be:	f997 3008 	ldrsb.w	r3, [r7, #8]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	da07      	bge.n	80012d6 <DHT22_ReadData+0x3a>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	461c      	mov	r4, r3
 80012ca:	f107 0308 	add.w	r3, r7, #8
 80012ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80012d4:	e07d      	b.n	80013d2 <DHT22_ReadData+0x136>

  d.rh_hi   = DHT22_ReadByte();
 80012d6:	f7ff ffa7 	bl	8001228 <DHT22_ReadByte>
 80012da:	4603      	mov	r3, r0
 80012dc:	727b      	strb	r3, [r7, #9]
  d.rh_lo   = DHT22_ReadByte();
 80012de:	f7ff ffa3 	bl	8001228 <DHT22_ReadByte>
 80012e2:	4603      	mov	r3, r0
 80012e4:	72bb      	strb	r3, [r7, #10]
  d.t_hi    = DHT22_ReadByte();
 80012e6:	f7ff ff9f 	bl	8001228 <DHT22_ReadByte>
 80012ea:	4603      	mov	r3, r0
 80012ec:	72fb      	strb	r3, [r7, #11]
  d.t_lo    = DHT22_ReadByte();
 80012ee:	f7ff ff9b 	bl	8001228 <DHT22_ReadByte>
 80012f2:	4603      	mov	r3, r0
 80012f4:	733b      	strb	r3, [r7, #12]
  d.checksum= DHT22_ReadByte();
 80012f6:	f7ff ff97 	bl	8001228 <DHT22_ReadByte>
 80012fa:	4603      	mov	r3, r0
 80012fc:	737b      	strb	r3, [r7, #13]

  /* 라인 해제(High 유지) */
  Set_Pin_Output(DHT22_PORT, DHT22_PIN);
 80012fe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001302:	4836      	ldr	r0, [pc, #216]	@ (80013dc <DHT22_ReadData+0x140>)
 8001304:	f7ff fef8 	bl	80010f8 <Set_Pin_Output>
  HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, GPIO_PIN_SET);
 8001308:	2201      	movs	r2, #1
 800130a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800130e:	4833      	ldr	r0, [pc, #204]	@ (80013dc <DHT22_ReadData+0x140>)
 8001310:	f002 fe2e 	bl	8003f70 <HAL_GPIO_WritePin>

  /* 체크섬 검증 */
  uint8_t sum = (uint8_t)(d.rh_hi + d.rh_lo + d.t_hi + d.t_lo);
 8001314:	7a7a      	ldrb	r2, [r7, #9]
 8001316:	7abb      	ldrb	r3, [r7, #10]
 8001318:	4413      	add	r3, r2
 800131a:	b2da      	uxtb	r2, r3
 800131c:	7afb      	ldrb	r3, [r7, #11]
 800131e:	4413      	add	r3, r2
 8001320:	b2da      	uxtb	r2, r3
 8001322:	7b3b      	ldrb	r3, [r7, #12]
 8001324:	4413      	add	r3, r2
 8001326:	77fb      	strb	r3, [r7, #31]
  if (sum != d.checksum) {
 8001328:	7b7b      	ldrb	r3, [r7, #13]
 800132a:	7ffa      	ldrb	r2, [r7, #31]
 800132c:	429a      	cmp	r2, r3
 800132e:	d009      	beq.n	8001344 <DHT22_ReadData+0xa8>
    d.status = -3; // checksum fail
 8001330:	23fd      	movs	r3, #253	@ 0xfd
 8001332:	723b      	strb	r3, [r7, #8]
    return d;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	461c      	mov	r4, r3
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800133e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001342:	e046      	b.n	80013d2 <DHT22_ReadData+0x136>
  }

  /* 값 변환 */
  uint16_t rh_raw = ((uint16_t)d.rh_hi << 8) | d.rh_lo;
 8001344:	7a7b      	ldrb	r3, [r7, #9]
 8001346:	b21b      	sxth	r3, r3
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	b21a      	sxth	r2, r3
 800134c:	7abb      	ldrb	r3, [r7, #10]
 800134e:	b21b      	sxth	r3, r3
 8001350:	4313      	orrs	r3, r2
 8001352:	b21b      	sxth	r3, r3
 8001354:	83bb      	strh	r3, [r7, #28]
  d.humidity = rh_raw / 10.0f;
 8001356:	8bbb      	ldrh	r3, [r7, #28]
 8001358:	ee07 3a90 	vmov	s15, r3
 800135c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001360:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001364:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001368:	edc7 7a04 	vstr	s15, [r7, #16]

  uint16_t t_raw = ((uint16_t)d.t_hi << 8) | d.t_lo;
 800136c:	7afb      	ldrb	r3, [r7, #11]
 800136e:	b21b      	sxth	r3, r3
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	b21a      	sxth	r2, r3
 8001374:	7b3b      	ldrb	r3, [r7, #12]
 8001376:	b21b      	sxth	r3, r3
 8001378:	4313      	orrs	r3, r2
 800137a:	b21b      	sxth	r3, r3
 800137c:	837b      	strh	r3, [r7, #26]
  if (t_raw & 0x8000) { // 음수
 800137e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001382:	2b00      	cmp	r3, #0
 8001384:	da11      	bge.n	80013aa <DHT22_ReadData+0x10e>
    t_raw &= 0x7FFF;
 8001386:	8b7b      	ldrh	r3, [r7, #26]
 8001388:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800138c:	837b      	strh	r3, [r7, #26]
    d.temperature = -((int)t_raw / 10.0f);
 800138e:	8b7b      	ldrh	r3, [r7, #26]
 8001390:	ee07 3a90 	vmov	s15, r3
 8001394:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001398:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800139c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013a0:	eef1 7a67 	vneg.f32	s15, s15
 80013a4:	edc7 7a05 	vstr	s15, [r7, #20]
 80013a8:	e00a      	b.n	80013c0 <DHT22_ReadData+0x124>
  } else {
    d.temperature = t_raw / 10.0f;
 80013aa:	8b7b      	ldrh	r3, [r7, #26]
 80013ac:	ee07 3a90 	vmov	s15, r3
 80013b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013b4:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80013b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013bc:	edc7 7a05 	vstr	s15, [r7, #20]
  }

  d.status = 1;
 80013c0:	2301      	movs	r3, #1
 80013c2:	723b      	strb	r3, [r7, #8]
  return d;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	461c      	mov	r4, r3
 80013c8:	f107 0308 	add.w	r3, r7, #8
 80013cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	3724      	adds	r7, #36	@ 0x24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd90      	pop	{r4, r7, pc}
 80013da:	bf00      	nop
 80013dc:	40020800 	.word	0x40020800

080013e0 <DHT22_Init>:

/* 선택: 최소 2초 간격 주기 읽기 헬퍼 */
void DHT22_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  DWT_Delay_Init();
 80013e4:	f7ff fe34 	bl	8001050 <DWT_Delay_Init>
  Set_Pin_Output(DHT22_PORT, DHT22_PIN);
 80013e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013ec:	4807      	ldr	r0, [pc, #28]	@ (800140c <DHT22_Init+0x2c>)
 80013ee:	f7ff fe83 	bl	80010f8 <Set_Pin_Output>
  HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, GPIO_PIN_SET); // idle=High
 80013f2:	2201      	movs	r2, #1
 80013f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013f8:	4804      	ldr	r0, [pc, #16]	@ (800140c <DHT22_Init+0x2c>)
 80013fa:	f002 fdb9 	bl	8003f70 <HAL_GPIO_WritePin>
  HAL_Delay(2000); // 전원 인가 후 안정화
 80013fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001402:	f001 fde5 	bl	8002fd0 <HAL_Delay>
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40020800 	.word	0x40020800

08001410 <DHT22_ReadPeriodic>:

void DHT22_ReadPeriodic(void)
{
 8001410:	b5b0      	push	{r4, r5, r7, lr}
 8001412:	b088      	sub	sp, #32
 8001414:	af02      	add	r7, sp, #8
  static uint32_t last_ms = 0;
  uint32_t now = HAL_GetTick();
 8001416:	f001 fdcf 	bl	8002fb8 <HAL_GetTick>
 800141a:	6178      	str	r0, [r7, #20]
  if ((now - last_ms) < 5000U) return; // DHT22는 최소 2초 간격 권장
 800141c:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <DHT22_ReadPeriodic+0x70>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001428:	4293      	cmp	r3, r2
 800142a:	d925      	bls.n	8001478 <DHT22_ReadPeriodic+0x68>
  last_ms = now;
 800142c:	4a14      	ldr	r2, [pc, #80]	@ (8001480 <DHT22_ReadPeriodic+0x70>)
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	6013      	str	r3, [r2, #0]

  DHT22_TypeDef d = DHT22_ReadData();
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff31 	bl	800129c <DHT22_ReadData>
  if (d.status == 1) {
 800143a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d113      	bne.n	800146a <DHT22_ReadPeriodic+0x5a>
     //필요 시 printf로 출력
     printf("<실내 온습도> 온도=%.1f C  습도=%.1f %%RH\r\n", d.temperature, d.humidity);
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f897 	bl	8000578 <__aeabi_f2d>
 800144a:	4604      	mov	r4, r0
 800144c:	460d      	mov	r5, r1
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff f891 	bl	8000578 <__aeabi_f2d>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	e9cd 2300 	strd	r2, r3, [sp]
 800145e:	4622      	mov	r2, r4
 8001460:	462b      	mov	r3, r5
 8001462:	4808      	ldr	r0, [pc, #32]	@ (8001484 <DHT22_ReadPeriodic+0x74>)
 8001464:	f007 fa2e 	bl	80088c4 <iprintf>
 8001468:	e007      	b.n	800147a <DHT22_ReadPeriodic+0x6a>
  } else {
     printf("DHT22 read fail: %d\r\n", d.status);
 800146a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800146e:	4619      	mov	r1, r3
 8001470:	4805      	ldr	r0, [pc, #20]	@ (8001488 <DHT22_ReadPeriodic+0x78>)
 8001472:	f007 fa27 	bl	80088c4 <iprintf>
 8001476:	e000      	b.n	800147a <DHT22_ReadPeriodic+0x6a>
  if ((now - last_ms) < 5000U) return; // DHT22는 최소 2초 간격 권장
 8001478:	bf00      	nop
  }
}
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bdb0      	pop	{r4, r5, r7, pc}
 8001480:	20000214 	.word	0x20000214
 8001484:	0800b688 	.word	0x0800b688
 8001488:	0800b6c0 	.word	0x0800b6c0

0800148c <UART6_RxStart_IT>:
void MX_GPIO_LED_ON(int flag);
void MX_GPIO_LED_OFF(int flag);
void UART6_OnCommand(const char* line_in);

static inline void UART6_RxStart_IT(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart6, (uint8_t*)&rx_ch, 1);
 8001490:	2201      	movs	r2, #1
 8001492:	4903      	ldr	r1, [pc, #12]	@ (80014a0 <UART6_RxStart_IT+0x14>)
 8001494:	4803      	ldr	r0, [pc, #12]	@ (80014a4 <UART6_RxStart_IT+0x18>)
 8001496:	f004 fc6b 	bl	8005d70 <HAL_UART_Receive_IT>
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000530 	.word	0x20000530
 80014a4:	200003c8 	.word	0x200003c8

080014a8 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* ======================================= 디버깅용 print ===========================================*/
int __io_putchar(int ch) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint8_t c = (uint8_t)ch;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	73fb      	strb	r3, [r7, #15]
  HAL_UART_Transmit(&huart2, &c, 1, HAL_MAX_DELAY);
 80014b6:	f107 010f 	add.w	r1, r7, #15
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	2201      	movs	r2, #1
 80014c0:	4803      	ldr	r0, [pc, #12]	@ (80014d0 <__io_putchar+0x28>)
 80014c2:	f004 fb33 	bl	8005b2c <HAL_UART_Transmit>
  return ch;
 80014c6:	687b      	ldr	r3, [r7, #4]
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000380 	.word	0x20000380

080014d4 <MX_GPIO_LED_ON>:

/* ======================================= 모듈 ON/OFF ===========================================*/
void MX_GPIO_LED_ON(int pin)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_SET);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	b29b      	uxth	r3, r3
 80014e0:	2201      	movs	r2, #1
 80014e2:	4619      	mov	r1, r3
 80014e4:	4803      	ldr	r0, [pc, #12]	@ (80014f4 <MX_GPIO_LED_ON+0x20>)
 80014e6:	f002 fd43 	bl	8003f70 <HAL_GPIO_WritePin>
}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40020000 	.word	0x40020000

080014f8 <MX_GPIO_LED_OFF>:
void MX_GPIO_LED_OFF(int pin)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	b29b      	uxth	r3, r3
 8001504:	2200      	movs	r2, #0
 8001506:	4619      	mov	r1, r3
 8001508:	4803      	ldr	r0, [pc, #12]	@ (8001518 <MX_GPIO_LED_OFF+0x20>)
 800150a:	f002 fd31 	bl	8003f70 <HAL_GPIO_WritePin>
}
 800150e:	bf00      	nop
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40020000 	.word	0x40020000

0800151c <MX_GPIO_FAN_ON>:

void MX_GPIO_FAN_ON(int pin)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(FAN_GPIO_Port, pin, GPIO_PIN_SET);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	b29b      	uxth	r3, r3
 8001528:	2201      	movs	r2, #1
 800152a:	4619      	mov	r1, r3
 800152c:	4803      	ldr	r0, [pc, #12]	@ (800153c <MX_GPIO_FAN_ON+0x20>)
 800152e:	f002 fd1f 	bl	8003f70 <HAL_GPIO_WritePin>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40020400 	.word	0x40020400

08001540 <MX_GPIO_FAN_OFF>:
void MX_GPIO_FAN_OFF(int pin)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(FAN_GPIO_Port, pin, GPIO_PIN_RESET);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	b29b      	uxth	r3, r3
 800154c:	2200      	movs	r2, #0
 800154e:	4619      	mov	r1, r3
 8001550:	4803      	ldr	r0, [pc, #12]	@ (8001560 <MX_GPIO_FAN_OFF+0x20>)
 8001552:	f002 fd0d 	bl	8003f70 <HAL_GPIO_WritePin>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40020400 	.word	0x40020400

08001564 <MX_GPIO_AC_ON>:

void MX_GPIO_AC_ON(int pin)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(AC_GPIO_Port, pin, GPIO_PIN_SET);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	b29b      	uxth	r3, r3
 8001570:	2201      	movs	r2, #1
 8001572:	4619      	mov	r1, r3
 8001574:	4803      	ldr	r0, [pc, #12]	@ (8001584 <MX_GPIO_AC_ON+0x20>)
 8001576:	f002 fcfb 	bl	8003f70 <HAL_GPIO_WritePin>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40020400 	.word	0x40020400

08001588 <MX_GPIO_AC_OFF>:
void MX_GPIO_AC_OFF(int pin)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(AC_GPIO_Port, pin, GPIO_PIN_RESET);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	b29b      	uxth	r3, r3
 8001594:	2200      	movs	r2, #0
 8001596:	4619      	mov	r1, r3
 8001598:	4803      	ldr	r0, [pc, #12]	@ (80015a8 <MX_GPIO_AC_OFF+0x20>)
 800159a:	f002 fce9 	bl	8003f70 <HAL_GPIO_WritePin>
}
 800159e:	bf00      	nop
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40020400 	.word	0x40020400

080015ac <MX_GPIO_WATER_ON>:

void MX_GPIO_WATER_ON(int pin)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(WATER_GPIO_Port, pin, GPIO_PIN_SET);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	2201      	movs	r2, #1
 80015ba:	4619      	mov	r1, r3
 80015bc:	4803      	ldr	r0, [pc, #12]	@ (80015cc <MX_GPIO_WATER_ON+0x20>)
 80015be:	f002 fcd7 	bl	8003f70 <HAL_GPIO_WritePin>
}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40020400 	.word	0x40020400

080015d0 <MX_GPIO_WATER_OFF>:
void MX_GPIO_WATER_OFF(int pin)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(WATER_GPIO_Port, pin, GPIO_PIN_RESET);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	b29b      	uxth	r3, r3
 80015dc:	2200      	movs	r2, #0
 80015de:	4619      	mov	r1, r3
 80015e0:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <MX_GPIO_WATER_OFF+0x20>)
 80015e2:	f002 fcc5 	bl	8003f70 <HAL_GPIO_WritePin>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40020400 	.word	0x40020400

080015f4 <MX_GPIO_NUTRIENTS_ON>:

void MX_GPIO_NUTRIENTS_ON(int pin)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(NUTRIENTS_GPIO_Port, pin, GPIO_PIN_SET);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	2201      	movs	r2, #1
 8001602:	4619      	mov	r1, r3
 8001604:	4803      	ldr	r0, [pc, #12]	@ (8001614 <MX_GPIO_NUTRIENTS_ON+0x20>)
 8001606:	f002 fcb3 	bl	8003f70 <HAL_GPIO_WritePin>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40020400 	.word	0x40020400

08001618 <MX_GPIO_NUTRIENTS_OFF>:
void MX_GPIO_NUTRIENTS_OFF(int pin)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(NUTRIENTS_GPIO_Port, pin, GPIO_PIN_RESET);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	b29b      	uxth	r3, r3
 8001624:	2200      	movs	r2, #0
 8001626:	4619      	mov	r1, r3
 8001628:	4803      	ldr	r0, [pc, #12]	@ (8001638 <MX_GPIO_NUTRIENTS_OFF+0x20>)
 800162a:	f002 fca1 	bl	8003f70 <HAL_GPIO_WritePin>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40020400 	.word	0x40020400

0800163c <ReadTempHumECPH>:
{
	HAL_GPIO_WritePin(PLANT_LED_GPIO_Port, pin, GPIO_PIN_RESET);
}
/* =======================================온도, 습도, EC, PH 값 읽어오기============================================== */
static void ReadTempHumECPH()
{
 800163c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001640:	b08f      	sub	sp, #60	@ 0x3c
 8001642:	af06      	add	r7, sp, #24
	uint8_t tx_data[8] = {0x01, 0x03, 0x00, 0x00, 0x00, 0x07, 0x04, 0x08};
 8001644:	4a3d      	ldr	r2, [pc, #244]	@ (800173c <ReadTempHumECPH+0x100>)
 8001646:	f107 0318 	add.w	r3, r7, #24
 800164a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800164e:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rx_data[19] = {0,};
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	f8c3 200f 	str.w	r2, [r3, #15]

	HAL_UART_Transmit(&huart1, tx_data, 8, 100);
 8001662:	f107 0118 	add.w	r1, r7, #24
 8001666:	2364      	movs	r3, #100	@ 0x64
 8001668:	2208      	movs	r2, #8
 800166a:	4835      	ldr	r0, [pc, #212]	@ (8001740 <ReadTempHumECPH+0x104>)
 800166c:	f004 fa5e 	bl	8005b2c <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, rx_data, 19, 100);
 8001670:	1d39      	adds	r1, r7, #4
 8001672:	2364      	movs	r3, #100	@ 0x64
 8001674:	2213      	movs	r2, #19
 8001676:	4832      	ldr	r0, [pc, #200]	@ (8001740 <ReadTempHumECPH+0x104>)
 8001678:	f004 fae3 	bl	8005c42 <HAL_UART_Receive>

	if(rx_data[0] == 1 && rx_data[1] == 3)
 800167c:	793b      	ldrb	r3, [r7, #4]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d156      	bne.n	8001730 <ReadTempHumECPH+0xf4>
 8001682:	797b      	ldrb	r3, [r7, #5]
 8001684:	2b03      	cmp	r3, #3
 8001686:	d153      	bne.n	8001730 <ReadTempHumECPH+0xf4>
	{
	  humi = (float)((rx_data[3] << 8) | rx_data[4]) / 10.0;
 8001688:	79fb      	ldrb	r3, [r7, #7]
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	7a3a      	ldrb	r2, [r7, #8]
 800168e:	4313      	orrs	r3, r2
 8001690:	ee07 3a90 	vmov	s15, r3
 8001694:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001698:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 800169c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016a0:	4b28      	ldr	r3, [pc, #160]	@ (8001744 <ReadTempHumECPH+0x108>)
 80016a2:	edc3 7a00 	vstr	s15, [r3]
	  temp = (float)((rx_data[5] << 8) | rx_data[6]) / 10.0;
 80016a6:	7a7b      	ldrb	r3, [r7, #9]
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	7aba      	ldrb	r2, [r7, #10]
 80016ac:	4313      	orrs	r3, r2
 80016ae:	ee07 3a90 	vmov	s15, r3
 80016b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016b6:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80016ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016be:	4b22      	ldr	r3, [pc, #136]	@ (8001748 <ReadTempHumECPH+0x10c>)
 80016c0:	edc3 7a00 	vstr	s15, [r3]
	  ec = (int)((rx_data[7] << 8) | rx_data[8]);
 80016c4:	7afb      	ldrb	r3, [r7, #11]
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	7b3a      	ldrb	r2, [r7, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	4a1f      	ldr	r2, [pc, #124]	@ (800174c <ReadTempHumECPH+0x110>)
 80016ce:	6013      	str	r3, [r2, #0]
	  ph = (float)((rx_data[9] << 8) | rx_data[10]) / 10.0;
 80016d0:	7b7b      	ldrb	r3, [r7, #13]
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	7bba      	ldrb	r2, [r7, #14]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	ee07 3a90 	vmov	s15, r3
 80016dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016e0:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80016e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016e8:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <ReadTempHumECPH+0x114>)
 80016ea:	edc3 7a00 	vstr	s15, [r3]

	  printf("<토양센서> 온도=%.1f C  습도=%.1f %%RH EC=%d us/cm  PH=%.1f\r\n",
 80016ee:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <ReadTempHumECPH+0x10c>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe ff40 	bl	8000578 <__aeabi_f2d>
 80016f8:	4680      	mov	r8, r0
 80016fa:	4689      	mov	r9, r1
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <ReadTempHumECPH+0x108>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe ff39 	bl	8000578 <__aeabi_f2d>
 8001706:	4604      	mov	r4, r0
 8001708:	460d      	mov	r5, r1
 800170a:	4b10      	ldr	r3, [pc, #64]	@ (800174c <ReadTempHumECPH+0x110>)
 800170c:	681e      	ldr	r6, [r3, #0]
 800170e:	4b10      	ldr	r3, [pc, #64]	@ (8001750 <ReadTempHumECPH+0x114>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe ff30 	bl	8000578 <__aeabi_f2d>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001720:	9602      	str	r6, [sp, #8]
 8001722:	e9cd 4500 	strd	r4, r5, [sp]
 8001726:	4642      	mov	r2, r8
 8001728:	464b      	mov	r3, r9
 800172a:	480a      	ldr	r0, [pc, #40]	@ (8001754 <ReadTempHumECPH+0x118>)
 800172c:	f007 f8ca 	bl	80088c4 <iprintf>
			  temp, humi, ec, ph);
	}
}
 8001730:	bf00      	nop
 8001732:	3724      	adds	r7, #36	@ 0x24
 8001734:	46bd      	mov	sp, r7
 8001736:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800173a:	bf00      	nop
 800173c:	0800b720 	.word	0x0800b720
 8001740:	20000338 	.word	0x20000338
 8001744:	20000414 	.word	0x20000414
 8001748:	20000410 	.word	0x20000410
 800174c:	2000041c 	.word	0x2000041c
 8001750:	20000418 	.word	0x20000418
 8001754:	0800b6d8 	.word	0x0800b6d8

08001758 <HAL_TIM_PeriodElapsedCallback>:

/* =======================================1초 카운트 타이머(TIM3)============================================== */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)		//1ms 마다 호출
{
 8001758:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a34      	ldr	r2, [pc, #208]	@ (8001838 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d15f      	bne.n	800182c <HAL_TIM_PeriodElapsedCallback+0xd4>
    {
        static int tim3Cnt = 0;

        // 논블로킹 펌프 타이머 처리: 1ms 단위
        if (g_water_ms_left > 0) {
 800176c:	4b33      	ldr	r3, [pc, #204]	@ (800183c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	b29b      	uxth	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d010      	beq.n	8001798 <HAL_TIM_PeriodElapsedCallback+0x40>
            if (--g_water_ms_left == 0) {
 8001776:	4b31      	ldr	r3, [pc, #196]	@ (800183c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	b29b      	uxth	r3, r3
 800177c:	3b01      	subs	r3, #1
 800177e:	b29b      	uxth	r3, r3
 8001780:	4a2e      	ldr	r2, [pc, #184]	@ (800183c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001782:	4619      	mov	r1, r3
 8001784:	8011      	strh	r1, [r2, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d106      	bne.n	8001798 <HAL_TIM_PeriodElapsedCallback+0x40>
                MX_GPIO_WATER_OFF(WATER_Pin);   // 2초 만료 → 펌프 OFF
 800178a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800178e:	f7ff ff1f 	bl	80015d0 <MX_GPIO_WATER_OFF>
                printf("[WATER] OFF\r\n");
 8001792:	482b      	ldr	r0, [pc, #172]	@ (8001840 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001794:	f007 f8fe 	bl	8008994 <puts>
            }
        }
        if (g_nutr_ms_left > 0) {
 8001798:	4b2a      	ldr	r3, [pc, #168]	@ (8001844 <HAL_TIM_PeriodElapsedCallback+0xec>)
 800179a:	881b      	ldrh	r3, [r3, #0]
 800179c:	b29b      	uxth	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d010      	beq.n	80017c4 <HAL_TIM_PeriodElapsedCallback+0x6c>
            if (--g_nutr_ms_left == 0) {
 80017a2:	4b28      	ldr	r3, [pc, #160]	@ (8001844 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	b29b      	uxth	r3, r3
 80017a8:	3b01      	subs	r3, #1
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4a25      	ldr	r2, [pc, #148]	@ (8001844 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80017ae:	4619      	mov	r1, r3
 80017b0:	8011      	strh	r1, [r2, #0]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d106      	bne.n	80017c4 <HAL_TIM_PeriodElapsedCallback+0x6c>
                MX_GPIO_NUTRIENTS_OFF(NUTRIENTS_Pin); // 1초 만료 → 영양제 OFF
 80017b6:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80017ba:	f7ff ff2d 	bl	8001618 <MX_GPIO_NUTRIENTS_OFF>
                printf("[NUTRIENTS] OFF\r\n");
 80017be:	4822      	ldr	r0, [pc, #136]	@ (8001848 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80017c0:	f007 f8e8 	bl	8008994 <puts>
            }
        }

        // 1초 플래그 로직
        tim3Cnt++;
 80017c4:	4b21      	ldr	r3, [pc, #132]	@ (800184c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	3301      	adds	r3, #1
 80017ca:	4a20      	ldr	r2, [pc, #128]	@ (800184c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80017cc:	6013      	str	r3, [r2, #0]
        if (tim3Cnt >= 1000) // 1ms * 1000 = 1초
 80017ce:	4b1f      	ldr	r3, [pc, #124]	@ (800184c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017d6:	db0f      	blt.n	80017f8 <HAL_TIM_PeriodElapsedCallback+0xa0>
        {
            tim3Flag1Sec = 1;
 80017d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001850 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80017da:	2201      	movs	r2, #1
 80017dc:	601a      	str	r2, [r3, #0]
            tim3Sec++;
 80017de:	4b1d      	ldr	r3, [pc, #116]	@ (8001854 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	f112 0801 	adds.w	r8, r2, #1
 80017e8:	f143 0900 	adc.w	r9, r3, #0
 80017ec:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80017ee:	e9c3 8900 	strd	r8, r9, [r3]
            tim3Cnt = 0;
 80017f2:	4b16      	ldr	r3, [pc, #88]	@ (800184c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
        }

        if (tim3Sec >= 60) // 1분마다
 80017f8:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 80017fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fe:	2a3c      	cmp	r2, #60	@ 0x3c
 8001800:	f173 0300 	sbcs.w	r3, r3, #0
 8001804:	d312      	bcc.n	800182c <HAL_TIM_PeriodElapsedCallback+0xd4>
        {
        	tim3Flag1Min = 1;
 8001806:	4b14      	ldr	r3, [pc, #80]	@ (8001858 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001808:	2201      	movs	r2, #1
 800180a:	601a      	str	r2, [r3, #0]
        	tim3Min++;
 800180c:	4b13      	ldr	r3, [pc, #76]	@ (800185c <HAL_TIM_PeriodElapsedCallback+0x104>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	1c54      	adds	r4, r2, #1
 8001814:	f143 0500 	adc.w	r5, r3, #0
 8001818:	4b10      	ldr	r3, [pc, #64]	@ (800185c <HAL_TIM_PeriodElapsedCallback+0x104>)
 800181a:	e9c3 4500 	strd	r4, r5, [r3]
        	tim3Sec = 0;
 800181e:	490d      	ldr	r1, [pc, #52]	@ (8001854 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	f04f 0300 	mov.w	r3, #0
 8001828:	e9c1 2300 	strd	r2, r3, [r1]
    // TIM2는 ADC 트리거 용으로 쓰고 있으므로 여기서는 아무 것도 안 함.
    if (htim->Instance == TIM2)
    {
    	/* no-op */
    }
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001836:	bf00      	nop
 8001838:	40000400 	.word	0x40000400
 800183c:	2000053c 	.word	0x2000053c
 8001840:	0800b728 	.word	0x0800b728
 8001844:	2000053e 	.word	0x2000053e
 8001848:	0800b738 	.word	0x0800b738
 800184c:	20000540 	.word	0x20000540
 8001850:	20000000 	.word	0x20000000
 8001854:	20000420 	.word	0x20000420
 8001858:	20000004 	.word	0x20000004
 800185c:	20000428 	.word	0x20000428

08001860 <HAL_UART_RxCpltCallback>:

/* =======================================라즈베리파이에서 명령어 받아오기(UART6)============================================== */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART6)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a14      	ldr	r2, [pc, #80]	@ (80018c0 <HAL_UART_RxCpltCallback+0x60>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d121      	bne.n	80018b6 <HAL_UART_RxCpltCallback+0x56>
	{
		if (rx_ch == '\n' || rx_ch == '\r')
 8001872:	4b14      	ldr	r3, [pc, #80]	@ (80018c4 <HAL_UART_RxCpltCallback+0x64>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	b2db      	uxtb	r3, r3
 8001878:	2b0a      	cmp	r3, #10
 800187a:	d004      	beq.n	8001886 <HAL_UART_RxCpltCallback+0x26>
 800187c:	4b11      	ldr	r3, [pc, #68]	@ (80018c4 <HAL_UART_RxCpltCallback+0x64>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b0d      	cmp	r3, #13
 8001884:	d103      	bne.n	800188e <HAL_UART_RxCpltCallback+0x2e>
		{
			line_received = 1;
 8001886:	4b10      	ldr	r3, [pc, #64]	@ (80018c8 <HAL_UART_RxCpltCallback+0x68>)
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
 800188c:	e011      	b.n	80018b2 <HAL_UART_RxCpltCallback+0x52>
		}
		else
		{
			if (rx_idx < RX_BUF_SIZE - 1)
 800188e:	4b0f      	ldr	r3, [pc, #60]	@ (80018cc <HAL_UART_RxCpltCallback+0x6c>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2bff      	cmp	r3, #255	@ 0xff
 8001896:	d00c      	beq.n	80018b2 <HAL_UART_RxCpltCallback+0x52>
			{
				rxBuf[rx_idx++] = rx_ch;
 8001898:	4b0c      	ldr	r3, [pc, #48]	@ (80018cc <HAL_UART_RxCpltCallback+0x6c>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	b2d1      	uxtb	r1, r2
 80018a2:	4a0a      	ldr	r2, [pc, #40]	@ (80018cc <HAL_UART_RxCpltCallback+0x6c>)
 80018a4:	7011      	strb	r1, [r2, #0]
 80018a6:	461a      	mov	r2, r3
 80018a8:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <HAL_UART_RxCpltCallback+0x64>)
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b2d9      	uxtb	r1, r3
 80018ae:	4b08      	ldr	r3, [pc, #32]	@ (80018d0 <HAL_UART_RxCpltCallback+0x70>)
 80018b0:	5499      	strb	r1, [r3, r2]
			}
		}

		UART6_RxStart_IT(); // 다음 바이트 계속 수신
 80018b2:	f7ff fdeb 	bl	800148c <UART6_RxStart_IT>
	}
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40011400 	.word	0x40011400
 80018c4:	20000530 	.word	0x20000530
 80018c8:	20000532 	.word	0x20000532
 80018cc:	20000531 	.word	0x20000531
 80018d0:	20000430 	.word	0x20000430

080018d4 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART6) {
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a04      	ldr	r2, [pc, #16]	@ (80018f4 <HAL_UART_ErrorCallback+0x20>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d101      	bne.n	80018ea <HAL_UART_ErrorCallback+0x16>
    UART6_RxStart_IT();
 80018e6:	f7ff fdd1 	bl	800148c <UART6_RxStart_IT>
  }
}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40011400 	.word	0x40011400

080018f8 <UART6_HandleLine>:

/* =======================================명령어 수신 시 실행되는 함수============================================== */
void UART6_HandleLine(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
    // 빠른 반환: 이벤트 없으면 끝
    if (!line_received) return;
 80018fe:	4b17      	ldr	r3, [pc, #92]	@ (800195c <UART6_HandleLine+0x64>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	d024      	beq.n	8001952 <UART6_HandleLine+0x5a>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001908:	b672      	cpsid	i
}
 800190a:	bf00      	nop

    // ---- 크리티컬 섹션: ISR과 경합 방지용 ----
    __disable_irq();
    uint16_t n = rx_idx;
 800190c:	4b14      	ldr	r3, [pc, #80]	@ (8001960 <UART6_HandleLine+0x68>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	80fb      	strh	r3, [r7, #6]
    if (n >= RX_BUF_SIZE) n = RX_BUF_SIZE - 1;
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	2bff      	cmp	r3, #255	@ 0xff
 8001918:	d901      	bls.n	800191e <UART6_HandleLine+0x26>
 800191a:	23ff      	movs	r3, #255	@ 0xff
 800191c:	80fb      	strh	r3, [r7, #6]

    static char line[RX_BUF_SIZE];              // 로컬(정적) 라인 버퍼
    memcpy(line, (const void*)rxBuf, n);        // 전역 -> 로컬 복사
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	461a      	mov	r2, r3
 8001922:	4910      	ldr	r1, [pc, #64]	@ (8001964 <UART6_HandleLine+0x6c>)
 8001924:	4810      	ldr	r0, [pc, #64]	@ (8001968 <UART6_HandleLine+0x70>)
 8001926:	f007 fa6e 	bl	8008e06 <memcpy>
    rx_idx = 0;                                 // 전역 인덱스 리셋
 800192a:	4b0d      	ldr	r3, [pc, #52]	@ (8001960 <UART6_HandleLine+0x68>)
 800192c:	2200      	movs	r2, #0
 800192e:	701a      	strb	r2, [r3, #0]
    line_received = 0;                          // 이벤트 플래그 클리어
 8001930:	4b0a      	ldr	r3, [pc, #40]	@ (800195c <UART6_HandleLine+0x64>)
 8001932:	2200      	movs	r2, #0
 8001934:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001936:	b662      	cpsie	i
}
 8001938:	bf00      	nop
    __enable_irq();
    // ---- 크리티컬 섹션 종료 ----

    // NUL-terminate
    line[n] = '\0';
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	4a0a      	ldr	r2, [pc, #40]	@ (8001968 <UART6_HandleLine+0x70>)
 800193e:	2100      	movs	r1, #0
 8001940:	54d1      	strb	r1, [r2, r3]

    // 1) 디버그 출력(UART2)
    printf("%s\r\n", line);
 8001942:	4909      	ldr	r1, [pc, #36]	@ (8001968 <UART6_HandleLine+0x70>)
 8001944:	4809      	ldr	r0, [pc, #36]	@ (800196c <UART6_HandleLine+0x74>)
 8001946:	f006 ffbd 	bl	80088c4 <iprintf>

    // 2) 콜백 훅
	UART6_OnCommand(line);
 800194a:	4807      	ldr	r0, [pc, #28]	@ (8001968 <UART6_HandleLine+0x70>)
 800194c:	f000 f844 	bl	80019d8 <UART6_OnCommand>
 8001950:	e000      	b.n	8001954 <UART6_HandleLine+0x5c>
    if (!line_received) return;
 8001952:	bf00      	nop
    // 3) 에코: '\n' 하나 붙여서 UART6로 돌려보내기
//    if (n < RX_BUF_SIZE - 1) {
//        line[n++] = '\n';
//    }
//    HAL_UART_Transmit(&huart6, (uint8_t*)line, n, HAL_MAX_DELAY);
}
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000532 	.word	0x20000532
 8001960:	20000531 	.word	0x20000531
 8001964:	20000430 	.word	0x20000430
 8001968:	20000544 	.word	0x20000544
 800196c:	0800b74c 	.word	0x0800b74c

08001970 <rstrip>:

/* =======================================명령어 처리============================================== */
/* line 끝의 \r, \n, 공백 제거 */
static void rstrip(char *s)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
    size_t n = strlen(s);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7fe fc91 	bl	80002a0 <strlen>
 800197e:	60f8      	str	r0, [r7, #12]
    while (n && (s[n-1] == '\r' || s[n-1] == '\n' || s[n-1] == ' ' || s[n-1] == '\t')) {
 8001980:	e007      	b.n	8001992 <rstrip+0x22>
        s[--n] = '\0';
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3b01      	subs	r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	4413      	add	r3, r2
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
    while (n && (s[n-1] == '\r' || s[n-1] == '\n' || s[n-1] == ' ' || s[n-1] == '\t')) {
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d01b      	beq.n	80019d0 <rstrip+0x60>
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	3b01      	subs	r3, #1
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	4413      	add	r3, r2
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b0d      	cmp	r3, #13
 80019a4:	d0ed      	beq.n	8001982 <rstrip+0x12>
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3b01      	subs	r3, #1
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b0a      	cmp	r3, #10
 80019b2:	d0e6      	beq.n	8001982 <rstrip+0x12>
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	4413      	add	r3, r2
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b20      	cmp	r3, #32
 80019c0:	d0df      	beq.n	8001982 <rstrip+0x12>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3b01      	subs	r3, #1
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b09      	cmp	r3, #9
 80019ce:	d0d8      	beq.n	8001982 <rstrip+0x12>
    }
}
 80019d0:	bf00      	nop
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <UART6_OnCommand>:
__attribute__((weak)) void UART6_OnCommand(const char* line_in)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b09a      	sub	sp, #104	@ 0x68
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
    /* 주의: line_in은 상수 포인터일 수 있으므로 안전하게 로컬 버퍼로 복사 */
    char line[64];
    strncpy(line, line_in, sizeof(line)-1);
 80019e0:	f107 0320 	add.w	r3, r7, #32
 80019e4:	223f      	movs	r2, #63	@ 0x3f
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f007 f925 	bl	8008c38 <strncpy>
    line[sizeof(line)-1] = '\0';
 80019ee:	2300      	movs	r3, #0
 80019f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    rstrip(line);
 80019f4:	f107 0320 	add.w	r3, r7, #32
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ffb9 	bl	8001970 <rstrip>

    // 받아온 명령어 파싱을 위한 변수
    int i = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	667b      	str	r3, [r7, #100]	@ 0x64
    char * pToken;
    char * pArray[ARR_CNT]={0};
 8001a02:	f107 0308 	add.w	r3, r7, #8
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]
 8001a0e:	60da      	str	r2, [r3, #12]
 8001a10:	611a      	str	r2, [r3, #16]
 8001a12:	615a      	str	r2, [r3, #20]

    pToken = strtok(line, "[@]");
 8001a14:	f107 0320 	add.w	r3, r7, #32
 8001a18:	4997      	ldr	r1, [pc, #604]	@ (8001c78 <UART6_OnCommand+0x2a0>)
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f007 f920 	bl	8008c60 <strtok>
 8001a20:	6638      	str	r0, [r7, #96]	@ 0x60
    while (pToken != NULL)
 8001a22:	e011      	b.n	8001a48 <UART6_OnCommand+0x70>
    {
    	pArray[i] = pToken;
 8001a24:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	3368      	adds	r3, #104	@ 0x68
 8001a2a:	443b      	add	r3, r7
 8001a2c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001a2e:	f843 2c60 	str.w	r2, [r3, #-96]
    	if(++i >= ARR_CNT)
 8001a32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a34:	3301      	adds	r3, #1
 8001a36:	667b      	str	r3, [r7, #100]	@ 0x64
 8001a38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001a3a:	2b05      	cmp	r3, #5
 8001a3c:	dc08      	bgt.n	8001a50 <UART6_OnCommand+0x78>
    		break;
    	pToken = strtok(NULL, "[@]");
 8001a3e:	498e      	ldr	r1, [pc, #568]	@ (8001c78 <UART6_OnCommand+0x2a0>)
 8001a40:	2000      	movs	r0, #0
 8001a42:	f007 f90d 	bl	8008c60 <strtok>
 8001a46:	6638      	str	r0, [r7, #96]	@ 0x60
    while (pToken != NULL)
 8001a48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1ea      	bne.n	8001a24 <UART6_OnCommand+0x4c>
 8001a4e:	e000      	b.n	8001a52 <UART6_OnCommand+0x7a>
    		break;
 8001a50:	bf00      	nop
    }

    if(!strcmp(pArray[0], "LED")) // 생장등 컨트롤
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	4989      	ldr	r1, [pc, #548]	@ (8001c7c <UART6_OnCommand+0x2a4>)
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fbc2 	bl	80001e0 <strcmp>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d15a      	bne.n	8001b18 <UART6_OnCommand+0x140>
    {
    	if(!strcmp(pArray[1], "ON"))
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	4986      	ldr	r1, [pc, #536]	@ (8001c80 <UART6_OnCommand+0x2a8>)
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fbba 	bl	80001e0 <strcmp>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d10b      	bne.n	8001a8a <UART6_OnCommand+0xb2>
    	{
    		MX_GPIO_LED_ON(LD2_Pin);   // LD2 켬
 8001a72:	2020      	movs	r0, #32
 8001a74:	f7ff fd2e 	bl	80014d4 <MX_GPIO_LED_ON>
    		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, 65535); // 생장등 최대
 8001a78:	4b82      	ldr	r3, [pc, #520]	@ (8001c84 <UART6_OnCommand+0x2ac>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a80:	641a      	str	r2, [r3, #64]	@ 0x40
			printf("LED ON\r\n");
 8001a82:	4881      	ldr	r0, [pc, #516]	@ (8001c88 <UART6_OnCommand+0x2b0>)
 8001a84:	f006 ff86 	bl	8008994 <puts>
    {
        // 알 수 없는 명령 (원하면 NAK 회신)
        // const char *nak = "ERR Unknown command\n";
        // HAL_UART_Transmit(&huart6, (uint8_t*)nak, strlen(nak), 50);
    }
}
 8001a88:	e0f1      	b.n	8001c6e <UART6_OnCommand+0x296>
    	else if(!strcmp(pArray[1], "OFF"))
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	497f      	ldr	r1, [pc, #508]	@ (8001c8c <UART6_OnCommand+0x2b4>)
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fba6 	bl	80001e0 <strcmp>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d10a      	bne.n	8001ab0 <UART6_OnCommand+0xd8>
    		MX_GPIO_LED_OFF(LD2_Pin);   // LD2 끔
 8001a9a:	2020      	movs	r0, #32
 8001a9c:	f7ff fd2c 	bl	80014f8 <MX_GPIO_LED_OFF>
    		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, 0); // 생장등 끔
 8001aa0:	4b78      	ldr	r3, [pc, #480]	@ (8001c84 <UART6_OnCommand+0x2ac>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	641a      	str	r2, [r3, #64]	@ 0x40
			printf("LED OFF\r\n");
 8001aa8:	4879      	ldr	r0, [pc, #484]	@ (8001c90 <UART6_OnCommand+0x2b8>)
 8001aaa:	f006 ff73 	bl	8008994 <puts>
}
 8001aae:	e0de      	b.n	8001c6e <UART6_OnCommand+0x296>
    	else if(!strcmp(pArray[1],"LOW"))
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4978      	ldr	r1, [pc, #480]	@ (8001c94 <UART6_OnCommand+0x2bc>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe fb93 	bl	80001e0 <strcmp>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d108      	bne.n	8001ad2 <UART6_OnCommand+0xfa>
    		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, 21854); // 생장등 LOW
 8001ac0:	4b70      	ldr	r3, [pc, #448]	@ (8001c84 <UART6_OnCommand+0x2ac>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f245 525e 	movw	r2, #21854	@ 0x555e
 8001ac8:	641a      	str	r2, [r3, #64]	@ 0x40
    		printf("LED LOW\r\n");
 8001aca:	4873      	ldr	r0, [pc, #460]	@ (8001c98 <UART6_OnCommand+0x2c0>)
 8001acc:	f006 ff62 	bl	8008994 <puts>
}
 8001ad0:	e0cd      	b.n	8001c6e <UART6_OnCommand+0x296>
    	else if(!strcmp(pArray[1],"MID"))
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	4971      	ldr	r1, [pc, #452]	@ (8001c9c <UART6_OnCommand+0x2c4>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fb82 	bl	80001e0 <strcmp>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d108      	bne.n	8001af4 <UART6_OnCommand+0x11c>
    		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, 43690); // 생장등 MID
 8001ae2:	4b68      	ldr	r3, [pc, #416]	@ (8001c84 <UART6_OnCommand+0x2ac>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8001aea:	641a      	str	r2, [r3, #64]	@ 0x40
    		printf("LED MID\r\n");
 8001aec:	486c      	ldr	r0, [pc, #432]	@ (8001ca0 <UART6_OnCommand+0x2c8>)
 8001aee:	f006 ff51 	bl	8008994 <puts>
}
 8001af2:	e0bc      	b.n	8001c6e <UART6_OnCommand+0x296>
    	else if(!strcmp(pArray[1],"HIGH"))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	496b      	ldr	r1, [pc, #428]	@ (8001ca4 <UART6_OnCommand+0x2cc>)
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7fe fb71 	bl	80001e0 <strcmp>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f040 80b4 	bne.w	8001c6e <UART6_OnCommand+0x296>
    		__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, 65535); // 생장등 HIGH
 8001b06:	4b5f      	ldr	r3, [pc, #380]	@ (8001c84 <UART6_OnCommand+0x2ac>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b0e:	641a      	str	r2, [r3, #64]	@ 0x40
    		printf("LED HIGH\r\n");
 8001b10:	4865      	ldr	r0, [pc, #404]	@ (8001ca8 <UART6_OnCommand+0x2d0>)
 8001b12:	f006 ff3f 	bl	8008994 <puts>
}
 8001b16:	e0aa      	b.n	8001c6e <UART6_OnCommand+0x296>
    else if(!strcmp(pArray[0], "AIR")) // 실내 환경 임계 값 변경
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	4964      	ldr	r1, [pc, #400]	@ (8001cac <UART6_OnCommand+0x2d4>)
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fb5f 	bl	80001e0 <strcmp>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d14d      	bne.n	8001bc4 <UART6_OnCommand+0x1ec>
    	if(!strcmp(pArray[1], "TEMP"))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4961      	ldr	r1, [pc, #388]	@ (8001cb0 <UART6_OnCommand+0x2d8>)
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7fe fb57 	bl	80001e0 <strcmp>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d113      	bne.n	8001b60 <UART6_OnCommand+0x188>
    		airTemp = atoff(pArray[2]);
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f005 f8a0 	bl	8006c80 <atoff>
 8001b40:	eef0 7a40 	vmov.f32	s15, s0
 8001b44:	4b5b      	ldr	r3, [pc, #364]	@ (8001cb4 <UART6_OnCommand+0x2dc>)
 8001b46:	edc3 7a00 	vstr	s15, [r3]
    		printf("실내 온도 조정: %.1f\r\n", airTemp);
 8001b4a:	4b5a      	ldr	r3, [pc, #360]	@ (8001cb4 <UART6_OnCommand+0x2dc>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fd12 	bl	8000578 <__aeabi_f2d>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4857      	ldr	r0, [pc, #348]	@ (8001cb8 <UART6_OnCommand+0x2e0>)
 8001b5a:	f006 feb3 	bl	80088c4 <iprintf>
}
 8001b5e:	e086      	b.n	8001c6e <UART6_OnCommand+0x296>
    	else if(!strcmp(pArray[1], "HUMI"))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4956      	ldr	r1, [pc, #344]	@ (8001cbc <UART6_OnCommand+0x2e4>)
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fb3b 	bl	80001e0 <strcmp>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d113      	bne.n	8001b98 <UART6_OnCommand+0x1c0>
    		airHumi = atoff(pArray[2]);
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f005 f884 	bl	8006c80 <atoff>
 8001b78:	eef0 7a40 	vmov.f32	s15, s0
 8001b7c:	4b50      	ldr	r3, [pc, #320]	@ (8001cc0 <UART6_OnCommand+0x2e8>)
 8001b7e:	edc3 7a00 	vstr	s15, [r3]
    		printf("실내 습도 조정: %.1f\r\n", airHumi);
 8001b82:	4b4f      	ldr	r3, [pc, #316]	@ (8001cc0 <UART6_OnCommand+0x2e8>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fcf6 	bl	8000578 <__aeabi_f2d>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	484c      	ldr	r0, [pc, #304]	@ (8001cc4 <UART6_OnCommand+0x2ec>)
 8001b92:	f006 fe97 	bl	80088c4 <iprintf>
}
 8001b96:	e06a      	b.n	8001c6e <UART6_OnCommand+0x296>
    	else if(!strcmp(pArray[1], "QUALITY"))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	494b      	ldr	r1, [pc, #300]	@ (8001cc8 <UART6_OnCommand+0x2f0>)
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe fb1f 	bl	80001e0 <strcmp>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d162      	bne.n	8001c6e <UART6_OnCommand+0x296>
    		airQuality = atoi(pArray[2]);
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f005 f86b 	bl	8006c86 <atoi>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4a46      	ldr	r2, [pc, #280]	@ (8001ccc <UART6_OnCommand+0x2f4>)
 8001bb4:	6013      	str	r3, [r2, #0]
    		printf("실내 공기질 조정: %d\r\n", airQuality);
 8001bb6:	4b45      	ldr	r3, [pc, #276]	@ (8001ccc <UART6_OnCommand+0x2f4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4619      	mov	r1, r3
 8001bbc:	4844      	ldr	r0, [pc, #272]	@ (8001cd0 <UART6_OnCommand+0x2f8>)
 8001bbe:	f006 fe81 	bl	80088c4 <iprintf>
}
 8001bc2:	e054      	b.n	8001c6e <UART6_OnCommand+0x296>
    else if(!strcmp(pArray[0], "LAND")) // 토양 환경 임계 값 변경
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4943      	ldr	r1, [pc, #268]	@ (8001cd4 <UART6_OnCommand+0x2fc>)
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fb09 	bl	80001e0 <strcmp>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d14c      	bne.n	8001c6e <UART6_OnCommand+0x296>
    	if(!strcmp(pArray[1], "PH"))
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4940      	ldr	r1, [pc, #256]	@ (8001cd8 <UART6_OnCommand+0x300>)
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fb01 	bl	80001e0 <strcmp>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d113      	bne.n	8001c0c <UART6_OnCommand+0x234>
    		landPH = atoff(pArray[2]);
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f005 f84a 	bl	8006c80 <atoff>
 8001bec:	eef0 7a40 	vmov.f32	s15, s0
 8001bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8001cdc <UART6_OnCommand+0x304>)
 8001bf2:	edc3 7a00 	vstr	s15, [r3]
    		printf("토양 PH 조정: %.1f\r\n", landPH);
 8001bf6:	4b39      	ldr	r3, [pc, #228]	@ (8001cdc <UART6_OnCommand+0x304>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f7fe fcbc 	bl	8000578 <__aeabi_f2d>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4836      	ldr	r0, [pc, #216]	@ (8001ce0 <UART6_OnCommand+0x308>)
 8001c06:	f006 fe5d 	bl	80088c4 <iprintf>
}
 8001c0a:	e030      	b.n	8001c6e <UART6_OnCommand+0x296>
    	else if(!strcmp(pArray[1], "HUMI"))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	492b      	ldr	r1, [pc, #172]	@ (8001cbc <UART6_OnCommand+0x2e4>)
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fae5 	bl	80001e0 <strcmp>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d113      	bne.n	8001c44 <UART6_OnCommand+0x26c>
    		landHumi = atoff(pArray[2]);
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f005 f82e 	bl	8006c80 <atoff>
 8001c24:	eef0 7a40 	vmov.f32	s15, s0
 8001c28:	4b2e      	ldr	r3, [pc, #184]	@ (8001ce4 <UART6_OnCommand+0x30c>)
 8001c2a:	edc3 7a00 	vstr	s15, [r3]
    		printf("토양 습도 조정: %.1f\r\n", landHumi);
 8001c2e:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce4 <UART6_OnCommand+0x30c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fca0 	bl	8000578 <__aeabi_f2d>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	482a      	ldr	r0, [pc, #168]	@ (8001ce8 <UART6_OnCommand+0x310>)
 8001c3e:	f006 fe41 	bl	80088c4 <iprintf>
}
 8001c42:	e014      	b.n	8001c6e <UART6_OnCommand+0x296>
    	else if(!strcmp(pArray[1], "EC"))
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4929      	ldr	r1, [pc, #164]	@ (8001cec <UART6_OnCommand+0x314>)
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fac9 	bl	80001e0 <strcmp>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d10c      	bne.n	8001c6e <UART6_OnCommand+0x296>
    		landEC = atoi(pArray[2]);
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f005 f815 	bl	8006c86 <atoi>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	4a24      	ldr	r2, [pc, #144]	@ (8001cf0 <UART6_OnCommand+0x318>)
 8001c60:	6013      	str	r3, [r2, #0]
    		printf("토양 EC 조정: %d\r\n", landEC);
 8001c62:	4b23      	ldr	r3, [pc, #140]	@ (8001cf0 <UART6_OnCommand+0x318>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4619      	mov	r1, r3
 8001c68:	4822      	ldr	r0, [pc, #136]	@ (8001cf4 <UART6_OnCommand+0x31c>)
 8001c6a:	f006 fe2b 	bl	80088c4 <iprintf>
}
 8001c6e:	bf00      	nop
 8001c70:	3768      	adds	r7, #104	@ 0x68
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	0800b754 	.word	0x0800b754
 8001c7c:	0800b758 	.word	0x0800b758
 8001c80:	0800b75c 	.word	0x0800b75c
 8001c84:	20000260 	.word	0x20000260
 8001c88:	0800b760 	.word	0x0800b760
 8001c8c:	0800b768 	.word	0x0800b768
 8001c90:	0800b76c 	.word	0x0800b76c
 8001c94:	0800b778 	.word	0x0800b778
 8001c98:	0800b77c 	.word	0x0800b77c
 8001c9c:	0800b788 	.word	0x0800b788
 8001ca0:	0800b78c 	.word	0x0800b78c
 8001ca4:	0800b798 	.word	0x0800b798
 8001ca8:	0800b7a0 	.word	0x0800b7a0
 8001cac:	0800b7ac 	.word	0x0800b7ac
 8001cb0:	0800b7b0 	.word	0x0800b7b0
 8001cb4:	20000010 	.word	0x20000010
 8001cb8:	0800b7b8 	.word	0x0800b7b8
 8001cbc:	0800b7d8 	.word	0x0800b7d8
 8001cc0:	20000014 	.word	0x20000014
 8001cc4:	0800b7e0 	.word	0x0800b7e0
 8001cc8:	0800b800 	.word	0x0800b800
 8001ccc:	20000008 	.word	0x20000008
 8001cd0:	0800b808 	.word	0x0800b808
 8001cd4:	0800b828 	.word	0x0800b828
 8001cd8:	0800b830 	.word	0x0800b830
 8001cdc:	2000001c 	.word	0x2000001c
 8001ce0:	0800b834 	.word	0x0800b834
 8001ce4:	20000018 	.word	0x20000018
 8001ce8:	0800b850 	.word	0x0800b850
 8001cec:	0800b870 	.word	0x0800b870
 8001cf0:	2000000c 	.word	0x2000000c
 8001cf4:	0800b874 	.word	0x0800b874

08001cf8 <HAL_ADC_ConvCpltCallback>:



/* =======================================아날로그 신호(조도, 가스) 받아오기============================================= */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	static int channel = 0;
	if (channel == 0)
 8001d00:	4b25      	ldr	r3, [pc, #148]	@ (8001d98 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d120      	bne.n	8001d4a <HAL_ADC_ConvCpltCallback+0x52>
	{
		uint32_t reverse = (uint32_t)4095 - (uint32_t)HAL_ADC_GetValue(hadc);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f001 fb97 	bl	800343c <HAL_ADC_GetValue>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8001d14:	330f      	adds	r3, #15
 8001d16:	613b      	str	r3, [r7, #16]
		uint32_t cds = (reverse * 100 + 2047) / 4095;
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	2264      	movs	r2, #100	@ 0x64
 8001d1c:	fb02 f303 	mul.w	r3, r2, r3
 8001d20:	f203 72ff 	addw	r2, r3, #2047	@ 0x7ff
 8001d24:	4b1d      	ldr	r3, [pc, #116]	@ (8001d9c <HAL_ADC_ConvCpltCallback+0xa4>)
 8001d26:	fba3 1302 	umull	r1, r3, r3, r2
 8001d2a:	1ad2      	subs	r2, r2, r3
 8001d2c:	0852      	lsrs	r2, r2, #1
 8001d2e:	4413      	add	r3, r2
 8001d30:	0adb      	lsrs	r3, r3, #11
 8001d32:	60fb      	str	r3, [r7, #12]
		ADC1xConvertValue[channel] = cds;
 8001d34:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	b291      	uxth	r1, r2
 8001d3c:	4a18      	ldr	r2, [pc, #96]	@ (8001da0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001d3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		channel = 1;
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001d44:	2201      	movs	r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
		ADC1xConvertValue[channel] = gas;
		channel = 0;
		adcFlag = 1;
	}

}
 8001d48:	e021      	b.n	8001d8e <HAL_ADC_ConvCpltCallback+0x96>
	else if (channel == 1)
 8001d4a:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d11d      	bne.n	8001d8e <HAL_ADC_ConvCpltCallback+0x96>
		uint32_t gas = ((uint32_t)HAL_ADC_GetValue(hadc) * 100 + 2047) / 4095;
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f001 fb72 	bl	800343c <HAL_ADC_GetValue>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2264      	movs	r2, #100	@ 0x64
 8001d5c:	fb02 f303 	mul.w	r3, r2, r3
 8001d60:	f203 72ff 	addw	r2, r3, #2047	@ 0x7ff
 8001d64:	4b0d      	ldr	r3, [pc, #52]	@ (8001d9c <HAL_ADC_ConvCpltCallback+0xa4>)
 8001d66:	fba3 1302 	umull	r1, r3, r3, r2
 8001d6a:	1ad2      	subs	r2, r2, r3
 8001d6c:	0852      	lsrs	r2, r2, #1
 8001d6e:	4413      	add	r3, r2
 8001d70:	0adb      	lsrs	r3, r3, #11
 8001d72:	617b      	str	r3, [r7, #20]
		ADC1xConvertValue[channel] = gas;
 8001d74:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	b291      	uxth	r1, r2
 8001d7c:	4a08      	ldr	r2, [pc, #32]	@ (8001da0 <HAL_ADC_ConvCpltCallback+0xa8>)
 8001d7e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		channel = 0;
 8001d82:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
		adcFlag = 1;
 8001d88:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <HAL_ADC_ConvCpltCallback+0xac>)
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	601a      	str	r2, [r3, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20000644 	.word	0x20000644
 8001d9c:	00100101 	.word	0x00100101
 8001da0:	20000534 	.word	0x20000534
 8001da4:	20000538 	.word	0x20000538

08001da8 <ADC_HandleLine>:

/* =======================================아날로그 신호(조도, 가스) 수신 시 실행되는 함수============================================= */
void ADC_HandleLine(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
	if (!adcFlag) return;
 8001dac:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd8 <ADC_HandleLine+0x30>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00e      	beq.n	8001dd2 <ADC_HandleLine+0x2a>

	adcFlag = 0;
 8001db4:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <ADC_HandleLine+0x30>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
	printf("조도 : %d, 가스: %d\r\n", ADC1xConvertValue[0], ADC1xConvertValue[1]);
 8001dba:	4b08      	ldr	r3, [pc, #32]	@ (8001ddc <ADC_HandleLine+0x34>)
 8001dbc:	881b      	ldrh	r3, [r3, #0]
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4b06      	ldr	r3, [pc, #24]	@ (8001ddc <ADC_HandleLine+0x34>)
 8001dc4:	885b      	ldrh	r3, [r3, #2]
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <ADC_HandleLine+0x38>)
 8001dcc:	f006 fd7a 	bl	80088c4 <iprintf>
 8001dd0:	e000      	b.n	8001dd4 <ADC_HandleLine+0x2c>
	if (!adcFlag) return;
 8001dd2:	bf00      	nop
}
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000538 	.word	0x20000538
 8001ddc:	20000534 	.word	0x20000534
 8001de0:	0800b88c 	.word	0x0800b88c

08001de4 <WaterPump5Sec>:

/* =======================================물 주기 함수============================================= */
void WaterPump5Sec(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
    // 이미 동작 중이면 재시작하지 않고 무시
    if (g_water_ms_left > 0) {
 8001de8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <WaterPump5Sec+0x38>)
 8001dea:	881b      	ldrh	r3, [r3, #0]
 8001dec:	b29b      	uxth	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d007      	beq.n	8001e02 <WaterPump5Sec+0x1e>
        printf("[WATER] busy (%ums left)\r\n", (unsigned)g_water_ms_left);
 8001df2:	4b0a      	ldr	r3, [pc, #40]	@ (8001e1c <WaterPump5Sec+0x38>)
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	b29b      	uxth	r3, r3
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4809      	ldr	r0, [pc, #36]	@ (8001e20 <WaterPump5Sec+0x3c>)
 8001dfc:	f006 fd62 	bl	80088c4 <iprintf>
        return;
 8001e00:	e00a      	b.n	8001e18 <WaterPump5Sec+0x34>
    }

    MX_GPIO_WATER_ON(WATER_Pin);
 8001e02:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001e06:	f7ff fbd1 	bl	80015ac <MX_GPIO_WATER_ON>
    g_water_ms_left = 5000;   // 5초
 8001e0a:	4b04      	ldr	r3, [pc, #16]	@ (8001e1c <WaterPump5Sec+0x38>)
 8001e0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e10:	801a      	strh	r2, [r3, #0]
    printf("[WATER] ON\r\n");
 8001e12:	4804      	ldr	r0, [pc, #16]	@ (8001e24 <WaterPump5Sec+0x40>)
 8001e14:	f006 fdbe 	bl	8008994 <puts>
}
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	2000053c 	.word	0x2000053c
 8001e20:	0800b8a8 	.word	0x0800b8a8
 8001e24:	0800b8c4 	.word	0x0800b8c4

08001e28 <NutrientsPump2Sec>:

/* =======================================영양제 주기 함수============================================= */
void NutrientsPump2Sec(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	// 이미 동작 중이면 재시작하지 않고 무시
    if (g_nutr_ms_left > 0) {
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e60 <NutrientsPump2Sec+0x38>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d007      	beq.n	8001e46 <NutrientsPump2Sec+0x1e>
        printf("[NUTRIENTS] busy (%ums left)\r\n", (unsigned)g_nutr_ms_left);
 8001e36:	4b0a      	ldr	r3, [pc, #40]	@ (8001e60 <NutrientsPump2Sec+0x38>)
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	4809      	ldr	r0, [pc, #36]	@ (8001e64 <NutrientsPump2Sec+0x3c>)
 8001e40:	f006 fd40 	bl	80088c4 <iprintf>
        return;
 8001e44:	e00a      	b.n	8001e5c <NutrientsPump2Sec+0x34>
    }

    MX_GPIO_NUTRIENTS_ON(NUTRIENTS_Pin);
 8001e46:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001e4a:	f7ff fbd3 	bl	80015f4 <MX_GPIO_NUTRIENTS_ON>
    g_nutr_ms_left = 2000;    // 2초
 8001e4e:	4b04      	ldr	r3, [pc, #16]	@ (8001e60 <NutrientsPump2Sec+0x38>)
 8001e50:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001e54:	801a      	strh	r2, [r3, #0]
    printf("[NUTRIENTS] ON\r\n");
 8001e56:	4804      	ldr	r0, [pc, #16]	@ (8001e68 <NutrientsPump2Sec+0x40>)
 8001e58:	f006 fd9c 	bl	8008994 <puts>
}
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	2000053e 	.word	0x2000053e
 8001e64:	0800b8d0 	.word	0x0800b8d0
 8001e68:	0800b8f0 	.word	0x0800b8f0

08001e6c <AutomaticAction>:

/* =======================================1분마다 자동 임계 값과 현재 값을 비교하는 함수============================================= */
void AutomaticAction(void)
{
 8001e6c:	b5b0      	push	{r4, r5, r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af02      	add	r7, sp, #8
	/*------------------------------------실내 공기----------------------------------------*/
	DHT22_TypeDef d = DHT22_ReadData();
 8001e72:	463b      	mov	r3, r7
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fa11 	bl	800129c <DHT22_ReadData>
	if(d.temperature > airTemp) // 실내 온도
 8001e7a:	ed97 7a03 	vldr	s14, [r7, #12]
 8001e7e:	4b41      	ldr	r3, [pc, #260]	@ (8001f84 <AutomaticAction+0x118>)
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8c:	dd18      	ble.n	8001ec0 <AutomaticAction+0x54>
	{
	  // AC 켬
	  MX_GPIO_AC_ON(AC_Pin);
 8001e8e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001e92:	f7ff fb67 	bl	8001564 <MX_GPIO_AC_ON>
	  printf("[AC] ON (임계 값: %.1f, 현재 값: %.1f)\r\n", airTemp, d.temperature);
 8001e96:	4b3b      	ldr	r3, [pc, #236]	@ (8001f84 <AutomaticAction+0x118>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7fe fb6c 	bl	8000578 <__aeabi_f2d>
 8001ea0:	4604      	mov	r4, r0
 8001ea2:	460d      	mov	r5, r1
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7fe fb66 	bl	8000578 <__aeabi_f2d>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	e9cd 2300 	strd	r2, r3, [sp]
 8001eb4:	4622      	mov	r2, r4
 8001eb6:	462b      	mov	r3, r5
 8001eb8:	4833      	ldr	r0, [pc, #204]	@ (8001f88 <AutomaticAction+0x11c>)
 8001eba:	f006 fd03 	bl	80088c4 <iprintf>
 8001ebe:	e017      	b.n	8001ef0 <AutomaticAction+0x84>
	}
	else
	{
	  // AC 끔
	  MX_GPIO_AC_OFF(AC_Pin);
 8001ec0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001ec4:	f7ff fb60 	bl	8001588 <MX_GPIO_AC_OFF>
	  printf("[AC] OFF (임계 값: %.1f, 현재 값: %.1f)\r\n", airTemp, d.temperature);
 8001ec8:	4b2e      	ldr	r3, [pc, #184]	@ (8001f84 <AutomaticAction+0x118>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7fe fb53 	bl	8000578 <__aeabi_f2d>
 8001ed2:	4604      	mov	r4, r0
 8001ed4:	460d      	mov	r5, r1
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fb4d 	bl	8000578 <__aeabi_f2d>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	e9cd 2300 	strd	r2, r3, [sp]
 8001ee6:	4622      	mov	r2, r4
 8001ee8:	462b      	mov	r3, r5
 8001eea:	4828      	ldr	r0, [pc, #160]	@ (8001f8c <AutomaticAction+0x120>)
 8001eec:	f006 fcea 	bl	80088c4 <iprintf>
	}

	if(d.humidity < airHumi) // 실내 습도
 8001ef0:	4b27      	ldr	r3, [pc, #156]	@ (8001f90 <AutomaticAction+0x124>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
	else
	{
	  // 가습기 끔
	}

	if(ADC1xConvertValue[1] > airQuality) // 실내 공기질
 8001ef4:	4b27      	ldr	r3, [pc, #156]	@ (8001f94 <AutomaticAction+0x128>)
 8001ef6:	885b      	ldrh	r3, [r3, #2]
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	4b26      	ldr	r3, [pc, #152]	@ (8001f98 <AutomaticAction+0x12c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	dd0d      	ble.n	8001f20 <AutomaticAction+0xb4>
	{
	  // 환기 켬
	  MX_GPIO_FAN_ON(FAN_Pin);
 8001f04:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001f08:	f7ff fb08 	bl	800151c <MX_GPIO_FAN_ON>
	  printf("[FAN] ON (임계 값: %d, 현재 값: %d)\r\n", airQuality, ADC1xConvertValue[1]);
 8001f0c:	4b22      	ldr	r3, [pc, #136]	@ (8001f98 <AutomaticAction+0x12c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a20      	ldr	r2, [pc, #128]	@ (8001f94 <AutomaticAction+0x128>)
 8001f12:	8852      	ldrh	r2, [r2, #2]
 8001f14:	b292      	uxth	r2, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	4820      	ldr	r0, [pc, #128]	@ (8001f9c <AutomaticAction+0x130>)
 8001f1a:	f006 fcd3 	bl	80088c4 <iprintf>
 8001f1e:	e00c      	b.n	8001f3a <AutomaticAction+0xce>
	}
	else
	{
	  // 환기 끔
	  MX_GPIO_FAN_OFF(FAN_Pin);
 8001f20:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8001f24:	f7ff fb0c 	bl	8001540 <MX_GPIO_FAN_OFF>
	  printf("[FAN] OFF (임계 값: %d, 현재 값: %d)\r\n", airQuality, ADC1xConvertValue[1]);
 8001f28:	4b1b      	ldr	r3, [pc, #108]	@ (8001f98 <AutomaticAction+0x12c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a19      	ldr	r2, [pc, #100]	@ (8001f94 <AutomaticAction+0x128>)
 8001f2e:	8852      	ldrh	r2, [r2, #2]
 8001f30:	b292      	uxth	r2, r2
 8001f32:	4619      	mov	r1, r3
 8001f34:	481a      	ldr	r0, [pc, #104]	@ (8001fa0 <AutomaticAction+0x134>)
 8001f36:	f006 fcc5 	bl	80088c4 <iprintf>
	}

	/*------------------------------------토양----------------------------------------*/
	if(humi < landHumi) // 토양 습도
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa4 <AutomaticAction+0x138>)
 8001f3c:	ed93 7a00 	vldr	s14, [r3]
 8001f40:	4b19      	ldr	r3, [pc, #100]	@ (8001fa8 <AutomaticAction+0x13c>)
 8001f42:	edd3 7a00 	vldr	s15, [r3]
 8001f46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f4e:	d501      	bpl.n	8001f54 <AutomaticAction+0xe8>
	{
		// 물 주기(5초)
		WaterPump5Sec();
 8001f50:	f7ff ff48 	bl	8001de4 <WaterPump5Sec>
	}

	if(ph > landPH || ec < landEC) // 토양 PH & EC
 8001f54:	4b15      	ldr	r3, [pc, #84]	@ (8001fac <AutomaticAction+0x140>)
 8001f56:	ed93 7a00 	vldr	s14, [r3]
 8001f5a:	4b15      	ldr	r3, [pc, #84]	@ (8001fb0 <AutomaticAction+0x144>)
 8001f5c:	edd3 7a00 	vldr	s15, [r3]
 8001f60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f68:	dc05      	bgt.n	8001f76 <AutomaticAction+0x10a>
 8001f6a:	4b12      	ldr	r3, [pc, #72]	@ (8001fb4 <AutomaticAction+0x148>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	4b12      	ldr	r3, [pc, #72]	@ (8001fb8 <AutomaticAction+0x14c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	da01      	bge.n	8001f7a <AutomaticAction+0x10e>
	{
		// 영양제 주기(2초)
		NutrientsPump2Sec();
 8001f76:	f7ff ff57 	bl	8001e28 <NutrientsPump2Sec>
	}
}
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bdb0      	pop	{r4, r5, r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000010 	.word	0x20000010
 8001f88:	0800b900 	.word	0x0800b900
 8001f8c:	0800b930 	.word	0x0800b930
 8001f90:	20000014 	.word	0x20000014
 8001f94:	20000534 	.word	0x20000534
 8001f98:	20000008 	.word	0x20000008
 8001f9c:	0800b960 	.word	0x0800b960
 8001fa0:	0800b98c 	.word	0x0800b98c
 8001fa4:	20000414 	.word	0x20000414
 8001fa8:	20000018 	.word	0x20000018
 8001fac:	20000418 	.word	0x20000418
 8001fb0:	2000001c 	.word	0x2000001c
 8001fb4:	2000041c 	.word	0x2000041c
 8001fb8:	2000000c 	.word	0x2000000c

08001fbc <DB_UART6>:

/* =======================================5분마다 현재 환경 값을 DB에 저장하기 위해 UART6로 보내는 함수============================================= */
void DB_UART6(void)
{
 8001fbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001fc0:	b09b      	sub	sp, #108	@ 0x6c
 8001fc2:	af08      	add	r7, sp, #32
    uint8_t sendBuf[CMD_SIZE] = {0};     // <-- char -> uint8_t
 8001fc4:	f107 0310 	add.w	r3, r7, #16
 8001fc8:	2232      	movs	r2, #50	@ 0x32
 8001fca:	2100      	movs	r1, #0
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f006 fe19 	bl	8008c04 <memset>

    DHT22_TypeDef d = DHT22_ReadData();
 8001fd2:	463b      	mov	r3, r7
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f7ff f961 	bl	800129c <DHT22_ReadData>
    int n = snprintf((char*)sendBuf, sizeof(sendBuf),
                     "AIR@%.1f@%.1f@%d@%d\n",
                     d.temperature, d.humidity, ADC1xConvertValue[0], ADC1xConvertValue[1]);
 8001fda:	68fb      	ldr	r3, [r7, #12]
    int n = snprintf((char*)sendBuf, sizeof(sendBuf),
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7fe facb 	bl	8000578 <__aeabi_f2d>
 8001fe2:	4604      	mov	r4, r0
 8001fe4:	460d      	mov	r5, r1
                     d.temperature, d.humidity, ADC1xConvertValue[0], ADC1xConvertValue[1]);
 8001fe6:	68bb      	ldr	r3, [r7, #8]
    int n = snprintf((char*)sendBuf, sizeof(sendBuf),
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7fe fac5 	bl	8000578 <__aeabi_f2d>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
                     d.temperature, d.humidity, ADC1xConvertValue[0], ADC1xConvertValue[1]);
 8001ff2:	4931      	ldr	r1, [pc, #196]	@ (80020b8 <DB_UART6+0xfc>)
 8001ff4:	8809      	ldrh	r1, [r1, #0]
 8001ff6:	b289      	uxth	r1, r1
    int n = snprintf((char*)sendBuf, sizeof(sendBuf),
 8001ff8:	460e      	mov	r6, r1
                     d.temperature, d.humidity, ADC1xConvertValue[0], ADC1xConvertValue[1]);
 8001ffa:	492f      	ldr	r1, [pc, #188]	@ (80020b8 <DB_UART6+0xfc>)
 8001ffc:	8849      	ldrh	r1, [r1, #2]
 8001ffe:	b289      	uxth	r1, r1
    int n = snprintf((char*)sendBuf, sizeof(sendBuf),
 8002000:	f107 0010 	add.w	r0, r7, #16
 8002004:	9105      	str	r1, [sp, #20]
 8002006:	9604      	str	r6, [sp, #16]
 8002008:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800200c:	e9cd 4500 	strd	r4, r5, [sp]
 8002010:	4a2a      	ldr	r2, [pc, #168]	@ (80020bc <DB_UART6+0x100>)
 8002012:	2132      	movs	r1, #50	@ 0x32
 8002014:	f006 fcc6 	bl	80089a4 <sniprintf>
 8002018:	6478      	str	r0, [r7, #68]	@ 0x44
    if (n > 0) {
 800201a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800201c:	2b00      	cmp	r3, #0
 800201e:	dd0e      	ble.n	800203e <DB_UART6+0x82>
    	HAL_UART_Transmit(&huart6, sendBuf, (uint16_t)n, HAL_MAX_DELAY);
 8002020:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002022:	b29a      	uxth	r2, r3
 8002024:	f107 0110 	add.w	r1, r7, #16
 8002028:	f04f 33ff 	mov.w	r3, #4294967295
 800202c:	4824      	ldr	r0, [pc, #144]	@ (80020c0 <DB_UART6+0x104>)
 800202e:	f003 fd7d 	bl	8005b2c <HAL_UART_Transmit>
    	printf("%s\r\n", sendBuf);
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	4619      	mov	r1, r3
 8002038:	4822      	ldr	r0, [pc, #136]	@ (80020c4 <DB_UART6+0x108>)
 800203a:	f006 fc43 	bl	80088c4 <iprintf>
    }

    n = snprintf((char*)sendBuf, sizeof(sendBuf),
 800203e:	4b22      	ldr	r3, [pc, #136]	@ (80020c8 <DB_UART6+0x10c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe fa98 	bl	8000578 <__aeabi_f2d>
 8002048:	4604      	mov	r4, r0
 800204a:	460d      	mov	r5, r1
 800204c:	4b1f      	ldr	r3, [pc, #124]	@ (80020cc <DB_UART6+0x110>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4618      	mov	r0, r3
 8002052:	f7fe fa91 	bl	8000578 <__aeabi_f2d>
 8002056:	4680      	mov	r8, r0
 8002058:	4689      	mov	r9, r1
 800205a:	4b1d      	ldr	r3, [pc, #116]	@ (80020d0 <DB_UART6+0x114>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe fa8a 	bl	8000578 <__aeabi_f2d>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	491a      	ldr	r1, [pc, #104]	@ (80020d4 <DB_UART6+0x118>)
 800206a:	6809      	ldr	r1, [r1, #0]
 800206c:	f107 0010 	add.w	r0, r7, #16
 8002070:	9106      	str	r1, [sp, #24]
 8002072:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002076:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800207a:	e9cd 4500 	strd	r4, r5, [sp]
 800207e:	4a16      	ldr	r2, [pc, #88]	@ (80020d8 <DB_UART6+0x11c>)
 8002080:	2132      	movs	r1, #50	@ 0x32
 8002082:	f006 fc8f 	bl	80089a4 <sniprintf>
 8002086:	6478      	str	r0, [r7, #68]	@ 0x44
                 "LAND@%.1f@%.1f@%.1f@%d\n",
                 temp, humi, ph, ec);
    if (n > 0) {
 8002088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800208a:	2b00      	cmp	r3, #0
 800208c:	dd0e      	ble.n	80020ac <DB_UART6+0xf0>
    	HAL_UART_Transmit(&huart6, sendBuf, (uint16_t)n, HAL_MAX_DELAY);
 800208e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002090:	b29a      	uxth	r2, r3
 8002092:	f107 0110 	add.w	r1, r7, #16
 8002096:	f04f 33ff 	mov.w	r3, #4294967295
 800209a:	4809      	ldr	r0, [pc, #36]	@ (80020c0 <DB_UART6+0x104>)
 800209c:	f003 fd46 	bl	8005b2c <HAL_UART_Transmit>
    	printf("%s\r\n", sendBuf);
 80020a0:	f107 0310 	add.w	r3, r7, #16
 80020a4:	4619      	mov	r1, r3
 80020a6:	4807      	ldr	r0, [pc, #28]	@ (80020c4 <DB_UART6+0x108>)
 80020a8:	f006 fc0c 	bl	80088c4 <iprintf>
    }
}
 80020ac:	bf00      	nop
 80020ae:	374c      	adds	r7, #76	@ 0x4c
 80020b0:	46bd      	mov	sp, r7
 80020b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80020b6:	bf00      	nop
 80020b8:	20000534 	.word	0x20000534
 80020bc:	0800b9bc 	.word	0x0800b9bc
 80020c0:	200003c8 	.word	0x200003c8
 80020c4:	0800b74c 	.word	0x0800b74c
 80020c8:	20000410 	.word	0x20000410
 80020cc:	20000414 	.word	0x20000414
 80020d0:	20000418 	.word	0x20000418
 80020d4:	2000041c 	.word	0x2000041c
 80020d8:	0800b9d4 	.word	0x0800b9d4

080020dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020e0:	f000 ff04 	bl	8002eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020e4:	f000 f87c 	bl	80021e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020e8:	f000 fb22 	bl	8002730 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80020ec:	f000 facc 	bl	8002688 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80020f0:	f000 faa0 	bl	8002634 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80020f4:	f000 faf2 	bl	80026dc <MX_USART6_UART_Init>
  MX_TIM3_Init();
 80020f8:	f000 fa4e 	bl	8002598 <MX_TIM3_Init>
  MX_ADC1_Init();
 80020fc:	f000 f8da 	bl	80022b4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8002100:	f000 f9d6 	bl	80024b0 <MX_TIM2_Init>
  MX_TIM1_Init();
 8002104:	f000 f936 	bl	8002374 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n[BOOT] Soil Sensor , temp & humi (USART1=Sensor, USART6=DHT, USART2=Debug)\r\n");
 8002108:	482c      	ldr	r0, [pc, #176]	@ (80021bc <main+0xe0>)
 800210a:	f006 fc43 	bl	8008994 <puts>

  UART6_RxStart_IT();
 800210e:	f7ff f9bd 	bl	800148c <UART6_RxStart_IT>
  DHT22_Init();
 8002112:	f7ff f965 	bl	80013e0 <DHT22_Init>

  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8002116:	482a      	ldr	r0, [pc, #168]	@ (80021c0 <main+0xe4>)
 8002118:	f002 fc50 	bl	80049bc <HAL_TIM_Base_Start_IT>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <main+0x4a>
  {
	  Error_Handler();
 8002122:	f000 fba7 	bl	8002874 <Error_Handler>
  }

  if(HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 8002126:	4827      	ldr	r0, [pc, #156]	@ (80021c4 <main+0xe8>)
 8002128:	f002 fc48 	bl	80049bc <HAL_TIM_Base_Start_IT>
 800212c:	4603      	mov	r3, r0
 800212e:	2b00      	cmp	r3, #0
 8002130:	d001      	beq.n	8002136 <main+0x5a>
  {
	  Error_Handler();
 8002132:	f000 fb9f 	bl	8002874 <Error_Handler>
  }

  if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4) != HAL_OK)
 8002136:	210c      	movs	r1, #12
 8002138:	4823      	ldr	r0, [pc, #140]	@ (80021c8 <main+0xec>)
 800213a:	f002 fd53 	bl	8004be4 <HAL_TIM_PWM_Start>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <main+0x6c>
  {
	  Error_Handler();
 8002144:	f000 fb96 	bl	8002874 <Error_Handler>
  }

  if (HAL_ADC_Start_IT(&hadc1) != HAL_OK)
 8002148:	4820      	ldr	r0, [pc, #128]	@ (80021cc <main+0xf0>)
 800214a:	f000 ffa9 	bl	80030a0 <HAL_ADC_Start_IT>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <main+0x7c>
  {
	  Error_Handler();
 8002154:	f000 fb8e 	bl	8002874 <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // 라즈베리파이에서 받은 명령어 처리 함수
	  UART6_HandleLine();
 8002158:	f7ff fbce 	bl	80018f8 <UART6_HandleLine>

	  // 실내 온습도값 읽고 출력(5초에 한번 씩)
	  DHT22_ReadPeriodic();
 800215c:	f7ff f958 	bl	8001410 <DHT22_ReadPeriodic>

	  // 조도, 가스값 읽어옴
	  ADC_HandleLine();
 8002160:	f7ff fe22 	bl	8001da8 <ADC_HandleLine>

	  //1초에 한번
	  if(tim3Flag1Sec)
 8002164:	4b1a      	ldr	r3, [pc, #104]	@ (80021d0 <main+0xf4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d00f      	beq.n	800218c <main+0xb0>
	  {
		  tim3Flag1Sec = 0; // 1초 플래그 초기화
 800216c:	4b18      	ldr	r3, [pc, #96]	@ (80021d0 <main+0xf4>)
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]

		  if(!(tim3Sec%10)) //10초에 한 번
 8002172:	4b18      	ldr	r3, [pc, #96]	@ (80021d4 <main+0xf8>)
 8002174:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002178:	f04f 020a 	mov.w	r2, #10
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	f7fe fd9a 	bl	8000cb8 <__aeabi_uldivmod>
 8002184:	4313      	orrs	r3, r2
 8002186:	d101      	bne.n	800218c <main+0xb0>
		  {
			  // (토양)온도, 습도, EC, PH값 읽고 출력
			  ReadTempHumECPH();
 8002188:	f7ff fa58 	bl	800163c <ReadTempHumECPH>
		  }
	  }

	  if(tim3Flag1Min)
 800218c:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <main+0xfc>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d0e1      	beq.n	8002158 <main+0x7c>
	  {
		  tim3Flag1Min = 0; // 1분 플래그 초기화
 8002194:	4b10      	ldr	r3, [pc, #64]	@ (80021d8 <main+0xfc>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]

		  // 자동 임계 값과 현재 값을 비교
		  AutomaticAction();
 800219a:	f7ff fe67 	bl	8001e6c <AutomaticAction>

		  if (!(tim3Min % 5)) // 5분에 한 번
 800219e:	4b0f      	ldr	r3, [pc, #60]	@ (80021dc <main+0x100>)
 80021a0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a4:	f04f 0205 	mov.w	r2, #5
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	f7fe fd84 	bl	8000cb8 <__aeabi_uldivmod>
 80021b0:	4313      	orrs	r3, r2
 80021b2:	d1d1      	bne.n	8002158 <main+0x7c>
		  {
			  DB_UART6(); // DB에 생장 환경 데이터 전송
 80021b4:	f7ff ff02 	bl	8001fbc <DB_UART6>
	  UART6_HandleLine();
 80021b8:	e7ce      	b.n	8002158 <main+0x7c>
 80021ba:	bf00      	nop
 80021bc:	0800b9ec 	.word	0x0800b9ec
 80021c0:	200002f0 	.word	0x200002f0
 80021c4:	200002a8 	.word	0x200002a8
 80021c8:	20000260 	.word	0x20000260
 80021cc:	20000218 	.word	0x20000218
 80021d0:	20000000 	.word	0x20000000
 80021d4:	20000420 	.word	0x20000420
 80021d8:	20000004 	.word	0x20000004
 80021dc:	20000428 	.word	0x20000428

080021e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b094      	sub	sp, #80	@ 0x50
 80021e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021e6:	f107 0320 	add.w	r3, r7, #32
 80021ea:	2230      	movs	r2, #48	@ 0x30
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f006 fd08 	bl	8008c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021f4:	f107 030c 	add.w	r3, r7, #12
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002204:	2300      	movs	r3, #0
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	4b28      	ldr	r3, [pc, #160]	@ (80022ac <SystemClock_Config+0xcc>)
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	4a27      	ldr	r2, [pc, #156]	@ (80022ac <SystemClock_Config+0xcc>)
 800220e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002212:	6413      	str	r3, [r2, #64]	@ 0x40
 8002214:	4b25      	ldr	r3, [pc, #148]	@ (80022ac <SystemClock_Config+0xcc>)
 8002216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002218:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800221c:	60bb      	str	r3, [r7, #8]
 800221e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002220:	2300      	movs	r3, #0
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	4b22      	ldr	r3, [pc, #136]	@ (80022b0 <SystemClock_Config+0xd0>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a21      	ldr	r2, [pc, #132]	@ (80022b0 <SystemClock_Config+0xd0>)
 800222a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800222e:	6013      	str	r3, [r2, #0]
 8002230:	4b1f      	ldr	r3, [pc, #124]	@ (80022b0 <SystemClock_Config+0xd0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800223c:	2302      	movs	r3, #2
 800223e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002240:	2301      	movs	r3, #1
 8002242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002244:	2310      	movs	r3, #16
 8002246:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002248:	2302      	movs	r3, #2
 800224a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800224c:	2300      	movs	r3, #0
 800224e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002250:	2310      	movs	r3, #16
 8002252:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002254:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002258:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800225a:	2304      	movs	r3, #4
 800225c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800225e:	2304      	movs	r3, #4
 8002260:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002262:	f107 0320 	add.w	r3, r7, #32
 8002266:	4618      	mov	r0, r3
 8002268:	f001 fec0 	bl	8003fec <HAL_RCC_OscConfig>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002272:	f000 faff 	bl	8002874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002276:	230f      	movs	r3, #15
 8002278:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800227a:	2302      	movs	r3, #2
 800227c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002282:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002286:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800228c:	f107 030c 	add.w	r3, r7, #12
 8002290:	2102      	movs	r1, #2
 8002292:	4618      	mov	r0, r3
 8002294:	f002 f922 	bl	80044dc <HAL_RCC_ClockConfig>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d001      	beq.n	80022a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800229e:	f000 fae9 	bl	8002874 <Error_Handler>
  }
}
 80022a2:	bf00      	nop
 80022a4:	3750      	adds	r7, #80	@ 0x50
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40023800 	.word	0x40023800
 80022b0:	40007000 	.word	0x40007000

080022b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b084      	sub	sp, #16
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022ba:	463b      	mov	r3, r7
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80022c6:	4b29      	ldr	r3, [pc, #164]	@ (800236c <MX_ADC1_Init+0xb8>)
 80022c8:	4a29      	ldr	r2, [pc, #164]	@ (8002370 <MX_ADC1_Init+0xbc>)
 80022ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80022cc:	4b27      	ldr	r3, [pc, #156]	@ (800236c <MX_ADC1_Init+0xb8>)
 80022ce:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80022d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022d4:	4b25      	ldr	r3, [pc, #148]	@ (800236c <MX_ADC1_Init+0xb8>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80022da:	4b24      	ldr	r3, [pc, #144]	@ (800236c <MX_ADC1_Init+0xb8>)
 80022dc:	2201      	movs	r2, #1
 80022de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80022e0:	4b22      	ldr	r3, [pc, #136]	@ (800236c <MX_ADC1_Init+0xb8>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80022e6:	4b21      	ldr	r3, [pc, #132]	@ (800236c <MX_ADC1_Init+0xb8>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80022ee:	4b1f      	ldr	r3, [pc, #124]	@ (800236c <MX_ADC1_Init+0xb8>)
 80022f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80022f6:	4b1d      	ldr	r3, [pc, #116]	@ (800236c <MX_ADC1_Init+0xb8>)
 80022f8:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80022fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022fe:	4b1b      	ldr	r3, [pc, #108]	@ (800236c <MX_ADC1_Init+0xb8>)
 8002300:	2200      	movs	r2, #0
 8002302:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8002304:	4b19      	ldr	r3, [pc, #100]	@ (800236c <MX_ADC1_Init+0xb8>)
 8002306:	2202      	movs	r2, #2
 8002308:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800230a:	4b18      	ldr	r3, [pc, #96]	@ (800236c <MX_ADC1_Init+0xb8>)
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002312:	4b16      	ldr	r3, [pc, #88]	@ (800236c <MX_ADC1_Init+0xb8>)
 8002314:	2201      	movs	r2, #1
 8002316:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002318:	4814      	ldr	r0, [pc, #80]	@ (800236c <MX_ADC1_Init+0xb8>)
 800231a:	f000 fe7d 	bl	8003018 <HAL_ADC_Init>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8002324:	f000 faa6 	bl	8002874 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002328:	2300      	movs	r3, #0
 800232a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800232c:	2301      	movs	r3, #1
 800232e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8002330:	2303      	movs	r3, #3
 8002332:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002334:	463b      	mov	r3, r7
 8002336:	4619      	mov	r1, r3
 8002338:	480c      	ldr	r0, [pc, #48]	@ (800236c <MX_ADC1_Init+0xb8>)
 800233a:	f001 f8a1 	bl	8003480 <HAL_ADC_ConfigChannel>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8002344:	f000 fa96 	bl	8002874 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002348:	2301      	movs	r3, #1
 800234a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800234c:	2302      	movs	r3, #2
 800234e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002350:	463b      	mov	r3, r7
 8002352:	4619      	mov	r1, r3
 8002354:	4805      	ldr	r0, [pc, #20]	@ (800236c <MX_ADC1_Init+0xb8>)
 8002356:	f001 f893 	bl	8003480 <HAL_ADC_ConfigChannel>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8002360:	f000 fa88 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002364:	bf00      	nop
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000218 	.word	0x20000218
 8002370:	40012000 	.word	0x40012000

08002374 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b096      	sub	sp, #88	@ 0x58
 8002378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800237a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002388:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]
 8002390:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
 800239a:	605a      	str	r2, [r3, #4]
 800239c:	609a      	str	r2, [r3, #8]
 800239e:	60da      	str	r2, [r3, #12]
 80023a0:	611a      	str	r2, [r3, #16]
 80023a2:	615a      	str	r2, [r3, #20]
 80023a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023a6:	1d3b      	adds	r3, r7, #4
 80023a8:	2220      	movs	r2, #32
 80023aa:	2100      	movs	r1, #0
 80023ac:	4618      	mov	r0, r3
 80023ae:	f006 fc29 	bl	8008c04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023b2:	4b3d      	ldr	r3, [pc, #244]	@ (80024a8 <MX_TIM1_Init+0x134>)
 80023b4:	4a3d      	ldr	r2, [pc, #244]	@ (80024ac <MX_TIM1_Init+0x138>)
 80023b6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80023b8:	4b3b      	ldr	r3, [pc, #236]	@ (80024a8 <MX_TIM1_Init+0x134>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023be:	4b3a      	ldr	r3, [pc, #232]	@ (80024a8 <MX_TIM1_Init+0x134>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80023c4:	4b38      	ldr	r3, [pc, #224]	@ (80024a8 <MX_TIM1_Init+0x134>)
 80023c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80023ca:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023cc:	4b36      	ldr	r3, [pc, #216]	@ (80024a8 <MX_TIM1_Init+0x134>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023d2:	4b35      	ldr	r3, [pc, #212]	@ (80024a8 <MX_TIM1_Init+0x134>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023d8:	4b33      	ldr	r3, [pc, #204]	@ (80024a8 <MX_TIM1_Init+0x134>)
 80023da:	2280      	movs	r2, #128	@ 0x80
 80023dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80023de:	4832      	ldr	r0, [pc, #200]	@ (80024a8 <MX_TIM1_Init+0x134>)
 80023e0:	f002 fa9c 	bl	800491c <HAL_TIM_Base_Init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80023ea:	f000 fa43 	bl	8002874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80023f2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80023f4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80023f8:	4619      	mov	r1, r3
 80023fa:	482b      	ldr	r0, [pc, #172]	@ (80024a8 <MX_TIM1_Init+0x134>)
 80023fc:	f002 feb0 	bl	8005160 <HAL_TIM_ConfigClockSource>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8002406:	f000 fa35 	bl	8002874 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800240a:	4827      	ldr	r0, [pc, #156]	@ (80024a8 <MX_TIM1_Init+0x134>)
 800240c:	f002 fb91 	bl	8004b32 <HAL_TIM_PWM_Init>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8002416:	f000 fa2d 	bl	8002874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800241a:	2300      	movs	r3, #0
 800241c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800241e:	2300      	movs	r3, #0
 8002420:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002422:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002426:	4619      	mov	r1, r3
 8002428:	481f      	ldr	r0, [pc, #124]	@ (80024a8 <MX_TIM1_Init+0x134>)
 800242a:	f003 fa5b 	bl	80058e4 <HAL_TIMEx_MasterConfigSynchronization>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8002434:	f000 fa1e 	bl	8002874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002438:	2360      	movs	r3, #96	@ 0x60
 800243a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800243c:	2300      	movs	r3, #0
 800243e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002440:	2300      	movs	r3, #0
 8002442:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002444:	2300      	movs	r3, #0
 8002446:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002448:	2300      	movs	r3, #0
 800244a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800244c:	2300      	movs	r3, #0
 800244e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002450:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002454:	220c      	movs	r2, #12
 8002456:	4619      	mov	r1, r3
 8002458:	4813      	ldr	r0, [pc, #76]	@ (80024a8 <MX_TIM1_Init+0x134>)
 800245a:	f002 fdbf 	bl	8004fdc <HAL_TIM_PWM_ConfigChannel>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8002464:	f000 fa06 	bl	8002874 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002468:	2300      	movs	r3, #0
 800246a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800246c:	2300      	movs	r3, #0
 800246e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800247c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002480:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002482:	2300      	movs	r3, #0
 8002484:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002486:	1d3b      	adds	r3, r7, #4
 8002488:	4619      	mov	r1, r3
 800248a:	4807      	ldr	r0, [pc, #28]	@ (80024a8 <MX_TIM1_Init+0x134>)
 800248c:	f003 fa98 	bl	80059c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d001      	beq.n	800249a <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 8002496:	f000 f9ed 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800249a:	4803      	ldr	r0, [pc, #12]	@ (80024a8 <MX_TIM1_Init+0x134>)
 800249c:	f000 fab6 	bl	8002a0c <HAL_TIM_MspPostInit>

}
 80024a0:	bf00      	nop
 80024a2:	3758      	adds	r7, #88	@ 0x58
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000260 	.word	0x20000260
 80024ac:	40010000 	.word	0x40010000

080024b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08e      	sub	sp, #56	@ 0x38
 80024b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024c4:	f107 0320 	add.w	r3, r7, #32
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
 80024dc:	615a      	str	r2, [r3, #20]
 80024de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80024e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002590 <MX_TIM2_Init+0xe0>)
 80024e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80024e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80024e8:	4b29      	ldr	r3, [pc, #164]	@ (8002590 <MX_TIM2_Init+0xe0>)
 80024ea:	2253      	movs	r2, #83	@ 0x53
 80024ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ee:	4b28      	ldr	r3, [pc, #160]	@ (8002590 <MX_TIM2_Init+0xe0>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000-1;
 80024f4:	4b26      	ldr	r3, [pc, #152]	@ (8002590 <MX_TIM2_Init+0xe0>)
 80024f6:	4a27      	ldr	r2, [pc, #156]	@ (8002594 <MX_TIM2_Init+0xe4>)
 80024f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024fa:	4b25      	ldr	r3, [pc, #148]	@ (8002590 <MX_TIM2_Init+0xe0>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002500:	4b23      	ldr	r3, [pc, #140]	@ (8002590 <MX_TIM2_Init+0xe0>)
 8002502:	2200      	movs	r2, #0
 8002504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002506:	4822      	ldr	r0, [pc, #136]	@ (8002590 <MX_TIM2_Init+0xe0>)
 8002508:	f002 fa08 	bl	800491c <HAL_TIM_Base_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8002512:	f000 f9af 	bl	8002874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002516:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800251a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800251c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002520:	4619      	mov	r1, r3
 8002522:	481b      	ldr	r0, [pc, #108]	@ (8002590 <MX_TIM2_Init+0xe0>)
 8002524:	f002 fe1c 	bl	8005160 <HAL_TIM_ConfigClockSource>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800252e:	f000 f9a1 	bl	8002874 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8002532:	4817      	ldr	r0, [pc, #92]	@ (8002590 <MX_TIM2_Init+0xe0>)
 8002534:	f002 faa4 	bl	8004a80 <HAL_TIM_OC_Init>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800253e:	f000 f999 	bl	8002874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002542:	2320      	movs	r3, #32
 8002544:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800254a:	f107 0320 	add.w	r3, r7, #32
 800254e:	4619      	mov	r1, r3
 8002550:	480f      	ldr	r0, [pc, #60]	@ (8002590 <MX_TIM2_Init+0xe0>)
 8002552:	f003 f9c7 	bl	80058e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d001      	beq.n	8002560 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800255c:	f000 f98a 	bl	8002874 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002560:	2300      	movs	r3, #0
 8002562:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800256c:	2300      	movs	r3, #0
 800256e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002570:	1d3b      	adds	r3, r7, #4
 8002572:	2204      	movs	r2, #4
 8002574:	4619      	mov	r1, r3
 8002576:	4806      	ldr	r0, [pc, #24]	@ (8002590 <MX_TIM2_Init+0xe0>)
 8002578:	f002 fcd4 	bl	8004f24 <HAL_TIM_OC_ConfigChannel>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8002582:	f000 f977 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002586:	bf00      	nop
 8002588:	3738      	adds	r7, #56	@ 0x38
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	200002a8 	.word	0x200002a8
 8002594:	000f423f 	.word	0x000f423f

08002598 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800259e:	f107 0308 	add.w	r3, r7, #8
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]
 80025a6:	605a      	str	r2, [r3, #4]
 80025a8:	609a      	str	r2, [r3, #8]
 80025aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025ac:	463b      	mov	r3, r7
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80025b4:	4b1d      	ldr	r3, [pc, #116]	@ (800262c <MX_TIM3_Init+0x94>)
 80025b6:	4a1e      	ldr	r2, [pc, #120]	@ (8002630 <MX_TIM3_Init+0x98>)
 80025b8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80025ba:	4b1c      	ldr	r3, [pc, #112]	@ (800262c <MX_TIM3_Init+0x94>)
 80025bc:	2253      	movs	r2, #83	@ 0x53
 80025be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025c0:	4b1a      	ldr	r3, [pc, #104]	@ (800262c <MX_TIM3_Init+0x94>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 80025c6:	4b19      	ldr	r3, [pc, #100]	@ (800262c <MX_TIM3_Init+0x94>)
 80025c8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80025cc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025ce:	4b17      	ldr	r3, [pc, #92]	@ (800262c <MX_TIM3_Init+0x94>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025d4:	4b15      	ldr	r3, [pc, #84]	@ (800262c <MX_TIM3_Init+0x94>)
 80025d6:	2280      	movs	r2, #128	@ 0x80
 80025d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80025da:	4814      	ldr	r0, [pc, #80]	@ (800262c <MX_TIM3_Init+0x94>)
 80025dc:	f002 f99e 	bl	800491c <HAL_TIM_Base_Init>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80025e6:	f000 f945 	bl	8002874 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80025ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80025f0:	f107 0308 	add.w	r3, r7, #8
 80025f4:	4619      	mov	r1, r3
 80025f6:	480d      	ldr	r0, [pc, #52]	@ (800262c <MX_TIM3_Init+0x94>)
 80025f8:	f002 fdb2 	bl	8005160 <HAL_TIM_ConfigClockSource>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002602:	f000 f937 	bl	8002874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002606:	2300      	movs	r3, #0
 8002608:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800260e:	463b      	mov	r3, r7
 8002610:	4619      	mov	r1, r3
 8002612:	4806      	ldr	r0, [pc, #24]	@ (800262c <MX_TIM3_Init+0x94>)
 8002614:	f003 f966 	bl	80058e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800261e:	f000 f929 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002622:	bf00      	nop
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	200002f0 	.word	0x200002f0
 8002630:	40000400 	.word	0x40000400

08002634 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002638:	4b11      	ldr	r3, [pc, #68]	@ (8002680 <MX_USART1_UART_Init+0x4c>)
 800263a:	4a12      	ldr	r2, [pc, #72]	@ (8002684 <MX_USART1_UART_Init+0x50>)
 800263c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800263e:	4b10      	ldr	r3, [pc, #64]	@ (8002680 <MX_USART1_UART_Init+0x4c>)
 8002640:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002644:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002646:	4b0e      	ldr	r3, [pc, #56]	@ (8002680 <MX_USART1_UART_Init+0x4c>)
 8002648:	2200      	movs	r2, #0
 800264a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800264c:	4b0c      	ldr	r3, [pc, #48]	@ (8002680 <MX_USART1_UART_Init+0x4c>)
 800264e:	2200      	movs	r2, #0
 8002650:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002652:	4b0b      	ldr	r3, [pc, #44]	@ (8002680 <MX_USART1_UART_Init+0x4c>)
 8002654:	2200      	movs	r2, #0
 8002656:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002658:	4b09      	ldr	r3, [pc, #36]	@ (8002680 <MX_USART1_UART_Init+0x4c>)
 800265a:	220c      	movs	r2, #12
 800265c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800265e:	4b08      	ldr	r3, [pc, #32]	@ (8002680 <MX_USART1_UART_Init+0x4c>)
 8002660:	2200      	movs	r2, #0
 8002662:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002664:	4b06      	ldr	r3, [pc, #24]	@ (8002680 <MX_USART1_UART_Init+0x4c>)
 8002666:	2200      	movs	r2, #0
 8002668:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800266a:	4805      	ldr	r0, [pc, #20]	@ (8002680 <MX_USART1_UART_Init+0x4c>)
 800266c:	f003 fa0e 	bl	8005a8c <HAL_UART_Init>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002676:	f000 f8fd 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	20000338 	.word	0x20000338
 8002684:	40011000 	.word	0x40011000

08002688 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800268c:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <MX_USART2_UART_Init+0x4c>)
 800268e:	4a12      	ldr	r2, [pc, #72]	@ (80026d8 <MX_USART2_UART_Init+0x50>)
 8002690:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002692:	4b10      	ldr	r3, [pc, #64]	@ (80026d4 <MX_USART2_UART_Init+0x4c>)
 8002694:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002698:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800269a:	4b0e      	ldr	r3, [pc, #56]	@ (80026d4 <MX_USART2_UART_Init+0x4c>)
 800269c:	2200      	movs	r2, #0
 800269e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026a0:	4b0c      	ldr	r3, [pc, #48]	@ (80026d4 <MX_USART2_UART_Init+0x4c>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026a6:	4b0b      	ldr	r3, [pc, #44]	@ (80026d4 <MX_USART2_UART_Init+0x4c>)
 80026a8:	2200      	movs	r2, #0
 80026aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026ac:	4b09      	ldr	r3, [pc, #36]	@ (80026d4 <MX_USART2_UART_Init+0x4c>)
 80026ae:	220c      	movs	r2, #12
 80026b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026b2:	4b08      	ldr	r3, [pc, #32]	@ (80026d4 <MX_USART2_UART_Init+0x4c>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b8:	4b06      	ldr	r3, [pc, #24]	@ (80026d4 <MX_USART2_UART_Init+0x4c>)
 80026ba:	2200      	movs	r2, #0
 80026bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026be:	4805      	ldr	r0, [pc, #20]	@ (80026d4 <MX_USART2_UART_Init+0x4c>)
 80026c0:	f003 f9e4 	bl	8005a8c <HAL_UART_Init>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80026ca:	f000 f8d3 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026ce:	bf00      	nop
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	20000380 	.word	0x20000380
 80026d8:	40004400 	.word	0x40004400

080026dc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80026e0:	4b11      	ldr	r3, [pc, #68]	@ (8002728 <MX_USART6_UART_Init+0x4c>)
 80026e2:	4a12      	ldr	r2, [pc, #72]	@ (800272c <MX_USART6_UART_Init+0x50>)
 80026e4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80026e6:	4b10      	ldr	r3, [pc, #64]	@ (8002728 <MX_USART6_UART_Init+0x4c>)
 80026e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80026ec:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80026ee:	4b0e      	ldr	r3, [pc, #56]	@ (8002728 <MX_USART6_UART_Init+0x4c>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80026f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002728 <MX_USART6_UART_Init+0x4c>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80026fa:	4b0b      	ldr	r3, [pc, #44]	@ (8002728 <MX_USART6_UART_Init+0x4c>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002700:	4b09      	ldr	r3, [pc, #36]	@ (8002728 <MX_USART6_UART_Init+0x4c>)
 8002702:	220c      	movs	r2, #12
 8002704:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002706:	4b08      	ldr	r3, [pc, #32]	@ (8002728 <MX_USART6_UART_Init+0x4c>)
 8002708:	2200      	movs	r2, #0
 800270a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800270c:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <MX_USART6_UART_Init+0x4c>)
 800270e:	2200      	movs	r2, #0
 8002710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002712:	4805      	ldr	r0, [pc, #20]	@ (8002728 <MX_USART6_UART_Init+0x4c>)
 8002714:	f003 f9ba 	bl	8005a8c <HAL_UART_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800271e:	f000 f8a9 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002722:	bf00      	nop
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	200003c8 	.word	0x200003c8
 800272c:	40011400 	.word	0x40011400

08002730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b08a      	sub	sp, #40	@ 0x28
 8002734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002736:	f107 0314 	add.w	r3, r7, #20
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
 800273e:	605a      	str	r2, [r3, #4]
 8002740:	609a      	str	r2, [r3, #8]
 8002742:	60da      	str	r2, [r3, #12]
 8002744:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
 800274a:	4b46      	ldr	r3, [pc, #280]	@ (8002864 <MX_GPIO_Init+0x134>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	4a45      	ldr	r2, [pc, #276]	@ (8002864 <MX_GPIO_Init+0x134>)
 8002750:	f043 0304 	orr.w	r3, r3, #4
 8002754:	6313      	str	r3, [r2, #48]	@ 0x30
 8002756:	4b43      	ldr	r3, [pc, #268]	@ (8002864 <MX_GPIO_Init+0x134>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	613b      	str	r3, [r7, #16]
 8002760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002762:	2300      	movs	r3, #0
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	4b3f      	ldr	r3, [pc, #252]	@ (8002864 <MX_GPIO_Init+0x134>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800276a:	4a3e      	ldr	r2, [pc, #248]	@ (8002864 <MX_GPIO_Init+0x134>)
 800276c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002770:	6313      	str	r3, [r2, #48]	@ 0x30
 8002772:	4b3c      	ldr	r3, [pc, #240]	@ (8002864 <MX_GPIO_Init+0x134>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800277e:	2300      	movs	r3, #0
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	4b38      	ldr	r3, [pc, #224]	@ (8002864 <MX_GPIO_Init+0x134>)
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	4a37      	ldr	r2, [pc, #220]	@ (8002864 <MX_GPIO_Init+0x134>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	6313      	str	r3, [r2, #48]	@ 0x30
 800278e:	4b35      	ldr	r3, [pc, #212]	@ (8002864 <MX_GPIO_Init+0x134>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	60bb      	str	r3, [r7, #8]
 8002798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800279a:	2300      	movs	r3, #0
 800279c:	607b      	str	r3, [r7, #4]
 800279e:	4b31      	ldr	r3, [pc, #196]	@ (8002864 <MX_GPIO_Init+0x134>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	4a30      	ldr	r2, [pc, #192]	@ (8002864 <MX_GPIO_Init+0x134>)
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80027aa:	4b2e      	ldr	r3, [pc, #184]	@ (8002864 <MX_GPIO_Init+0x134>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	607b      	str	r3, [r7, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80027b6:	2200      	movs	r2, #0
 80027b8:	2120      	movs	r1, #32
 80027ba:	482b      	ldr	r0, [pc, #172]	@ (8002868 <MX_GPIO_Init+0x138>)
 80027bc:	f001 fbd8 	bl	8003f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NUTRIENTS_Pin|WATER_Pin|AC_Pin|FAN_Pin, GPIO_PIN_RESET);
 80027c0:	2200      	movs	r2, #0
 80027c2:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80027c6:	4829      	ldr	r0, [pc, #164]	@ (800286c <MX_GPIO_Init+0x13c>)
 80027c8:	f001 fbd2 	bl	8003f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, GPIO_PIN_RESET);
 80027cc:	2200      	movs	r2, #0
 80027ce:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80027d2:	4827      	ldr	r0, [pc, #156]	@ (8002870 <MX_GPIO_Init+0x140>)
 80027d4:	f001 fbcc 	bl	8003f70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80027d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027de:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80027e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027e8:	f107 0314 	add.w	r3, r7, #20
 80027ec:	4619      	mov	r1, r3
 80027ee:	4820      	ldr	r0, [pc, #128]	@ (8002870 <MX_GPIO_Init+0x140>)
 80027f0:	f001 fa22 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80027f4:	2320      	movs	r3, #32
 80027f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027f8:	2301      	movs	r3, #1
 80027fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002800:	2300      	movs	r3, #0
 8002802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002804:	f107 0314 	add.w	r3, r7, #20
 8002808:	4619      	mov	r1, r3
 800280a:	4817      	ldr	r0, [pc, #92]	@ (8002868 <MX_GPIO_Init+0x138>)
 800280c:	f001 fa14 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pins : NUTRIENTS_Pin WATER_Pin AC_Pin FAN_Pin */
  GPIO_InitStruct.Pin = NUTRIENTS_Pin|WATER_Pin|AC_Pin|FAN_Pin;
 8002810:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002816:	2301      	movs	r3, #1
 8002818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281a:	2300      	movs	r3, #0
 800281c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800281e:	2300      	movs	r3, #0
 8002820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002822:	f107 0314 	add.w	r3, r7, #20
 8002826:	4619      	mov	r1, r3
 8002828:	4810      	ldr	r0, [pc, #64]	@ (800286c <MX_GPIO_Init+0x13c>)
 800282a:	f001 fa05 	bl	8003c38 <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT_Pin */
  GPIO_InitStruct.Pin = DHT_Pin;
 800282e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002834:	2301      	movs	r3, #1
 8002836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	4619      	mov	r1, r3
 8002846:	480a      	ldr	r0, [pc, #40]	@ (8002870 <MX_GPIO_Init+0x140>)
 8002848:	f001 f9f6 	bl	8003c38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800284c:	2200      	movs	r2, #0
 800284e:	2100      	movs	r1, #0
 8002850:	2028      	movs	r0, #40	@ 0x28
 8002852:	f001 f928 	bl	8003aa6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002856:	2028      	movs	r0, #40	@ 0x28
 8002858:	f001 f941 	bl	8003ade <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800285c:	bf00      	nop
 800285e:	3728      	adds	r7, #40	@ 0x28
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800
 8002868:	40020000 	.word	0x40020000
 800286c:	40020400 	.word	0x40020400
 8002870:	40020800 	.word	0x40020800

08002874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002878:	b672      	cpsid	i
}
 800287a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800287c:	bf00      	nop
 800287e:	e7fd      	b.n	800287c <Error_Handler+0x8>

08002880 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	4b10      	ldr	r3, [pc, #64]	@ (80028cc <HAL_MspInit+0x4c>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288e:	4a0f      	ldr	r2, [pc, #60]	@ (80028cc <HAL_MspInit+0x4c>)
 8002890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002894:	6453      	str	r3, [r2, #68]	@ 0x44
 8002896:	4b0d      	ldr	r3, [pc, #52]	@ (80028cc <HAL_MspInit+0x4c>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800289e:	607b      	str	r3, [r7, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	603b      	str	r3, [r7, #0]
 80028a6:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <HAL_MspInit+0x4c>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	4a08      	ldr	r2, [pc, #32]	@ (80028cc <HAL_MspInit+0x4c>)
 80028ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80028b2:	4b06      	ldr	r3, [pc, #24]	@ (80028cc <HAL_MspInit+0x4c>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ba:	603b      	str	r3, [r7, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80028be:	2007      	movs	r0, #7
 80028c0:	f001 f8e6 	bl	8003a90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	40023800 	.word	0x40023800

080028d0 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08a      	sub	sp, #40	@ 0x28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d8:	f107 0314 	add.w	r3, r7, #20
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a1b      	ldr	r2, [pc, #108]	@ (800295c <HAL_ADC_MspInit+0x8c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d12f      	bne.n	8002952 <HAL_ADC_MspInit+0x82>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002960 <HAL_ADC_MspInit+0x90>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fa:	4a19      	ldr	r2, [pc, #100]	@ (8002960 <HAL_ADC_MspInit+0x90>)
 80028fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002900:	6453      	str	r3, [r2, #68]	@ 0x44
 8002902:	4b17      	ldr	r3, [pc, #92]	@ (8002960 <HAL_ADC_MspInit+0x90>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	4b13      	ldr	r3, [pc, #76]	@ (8002960 <HAL_ADC_MspInit+0x90>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	4a12      	ldr	r2, [pc, #72]	@ (8002960 <HAL_ADC_MspInit+0x90>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6313      	str	r3, [r2, #48]	@ 0x30
 800291e:	4b10      	ldr	r3, [pc, #64]	@ (8002960 <HAL_ADC_MspInit+0x90>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = CdS_Pin|GAS_Pin;
 800292a:	2303      	movs	r3, #3
 800292c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800292e:	2303      	movs	r3, #3
 8002930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002936:	f107 0314 	add.w	r3, r7, #20
 800293a:	4619      	mov	r1, r3
 800293c:	4809      	ldr	r0, [pc, #36]	@ (8002964 <HAL_ADC_MspInit+0x94>)
 800293e:	f001 f97b 	bl	8003c38 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002942:	2200      	movs	r2, #0
 8002944:	2100      	movs	r1, #0
 8002946:	2012      	movs	r0, #18
 8002948:	f001 f8ad 	bl	8003aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800294c:	2012      	movs	r0, #18
 800294e:	f001 f8c6 	bl	8003ade <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002952:	bf00      	nop
 8002954:	3728      	adds	r7, #40	@ 0x28
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40012000 	.word	0x40012000
 8002960:	40023800 	.word	0x40023800
 8002964:	40020000 	.word	0x40020000

08002968 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a22      	ldr	r2, [pc, #136]	@ (8002a00 <HAL_TIM_Base_MspInit+0x98>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d10e      	bne.n	8002998 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	617b      	str	r3, [r7, #20]
 800297e:	4b21      	ldr	r3, [pc, #132]	@ (8002a04 <HAL_TIM_Base_MspInit+0x9c>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002982:	4a20      	ldr	r2, [pc, #128]	@ (8002a04 <HAL_TIM_Base_MspInit+0x9c>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6453      	str	r3, [r2, #68]	@ 0x44
 800298a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a04 <HAL_TIM_Base_MspInit+0x9c>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	617b      	str	r3, [r7, #20]
 8002994:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002996:	e02e      	b.n	80029f6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM2)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029a0:	d10e      	bne.n	80029c0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	4b17      	ldr	r3, [pc, #92]	@ (8002a04 <HAL_TIM_Base_MspInit+0x9c>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	4a16      	ldr	r2, [pc, #88]	@ (8002a04 <HAL_TIM_Base_MspInit+0x9c>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80029b2:	4b14      	ldr	r3, [pc, #80]	@ (8002a04 <HAL_TIM_Base_MspInit+0x9c>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	693b      	ldr	r3, [r7, #16]
}
 80029be:	e01a      	b.n	80029f6 <HAL_TIM_Base_MspInit+0x8e>
  else if(htim_base->Instance==TIM3)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a10      	ldr	r2, [pc, #64]	@ (8002a08 <HAL_TIM_Base_MspInit+0xa0>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d115      	bne.n	80029f6 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	60fb      	str	r3, [r7, #12]
 80029ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002a04 <HAL_TIM_Base_MspInit+0x9c>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029d2:	4a0c      	ldr	r2, [pc, #48]	@ (8002a04 <HAL_TIM_Base_MspInit+0x9c>)
 80029d4:	f043 0302 	orr.w	r3, r3, #2
 80029d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80029da:	4b0a      	ldr	r3, [pc, #40]	@ (8002a04 <HAL_TIM_Base_MspInit+0x9c>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80029e6:	2200      	movs	r2, #0
 80029e8:	2100      	movs	r1, #0
 80029ea:	201d      	movs	r0, #29
 80029ec:	f001 f85b 	bl	8003aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80029f0:	201d      	movs	r0, #29
 80029f2:	f001 f874 	bl	8003ade <HAL_NVIC_EnableIRQ>
}
 80029f6:	bf00      	nop
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	40010000 	.word	0x40010000
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40000400 	.word	0x40000400

08002a0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 030c 	add.w	r3, r7, #12
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a12      	ldr	r2, [pc, #72]	@ (8002a74 <HAL_TIM_MspPostInit+0x68>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d11e      	bne.n	8002a6c <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	4b11      	ldr	r3, [pc, #68]	@ (8002a78 <HAL_TIM_MspPostInit+0x6c>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a36:	4a10      	ldr	r2, [pc, #64]	@ (8002a78 <HAL_TIM_MspPostInit+0x6c>)
 8002a38:	f043 0301 	orr.w	r3, r3, #1
 8002a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a78 <HAL_TIM_MspPostInit+0x6c>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PLANT_LED_Pin;
 8002a4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002a4e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a50:	2302      	movs	r3, #2
 8002a52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PLANT_LED_GPIO_Port, &GPIO_InitStruct);
 8002a60:	f107 030c 	add.w	r3, r7, #12
 8002a64:	4619      	mov	r1, r3
 8002a66:	4805      	ldr	r0, [pc, #20]	@ (8002a7c <HAL_TIM_MspPostInit+0x70>)
 8002a68:	f001 f8e6 	bl	8003c38 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002a6c:	bf00      	nop
 8002a6e:	3720      	adds	r7, #32
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40010000 	.word	0x40010000
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	40020000 	.word	0x40020000

08002a80 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08e      	sub	sp, #56	@ 0x38
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	605a      	str	r2, [r3, #4]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	60da      	str	r2, [r3, #12]
 8002a96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a57      	ldr	r2, [pc, #348]	@ (8002bfc <HAL_UART_MspInit+0x17c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d135      	bne.n	8002b0e <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	623b      	str	r3, [r7, #32]
 8002aa6:	4b56      	ldr	r3, [pc, #344]	@ (8002c00 <HAL_UART_MspInit+0x180>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aaa:	4a55      	ldr	r2, [pc, #340]	@ (8002c00 <HAL_UART_MspInit+0x180>)
 8002aac:	f043 0310 	orr.w	r3, r3, #16
 8002ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ab2:	4b53      	ldr	r3, [pc, #332]	@ (8002c00 <HAL_UART_MspInit+0x180>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	623b      	str	r3, [r7, #32]
 8002abc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
 8002ac2:	4b4f      	ldr	r3, [pc, #316]	@ (8002c00 <HAL_UART_MspInit+0x180>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	4a4e      	ldr	r2, [pc, #312]	@ (8002c00 <HAL_UART_MspInit+0x180>)
 8002ac8:	f043 0301 	orr.w	r3, r3, #1
 8002acc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ace:	4b4c      	ldr	r3, [pc, #304]	@ (8002c00 <HAL_UART_MspInit+0x180>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	61fb      	str	r3, [r7, #28]
 8002ad8:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ada:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002ade:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae8:	2303      	movs	r3, #3
 8002aea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002aec:	2307      	movs	r3, #7
 8002aee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002af4:	4619      	mov	r1, r3
 8002af6:	4843      	ldr	r0, [pc, #268]	@ (8002c04 <HAL_UART_MspInit+0x184>)
 8002af8:	f001 f89e 	bl	8003c38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002afc:	2200      	movs	r2, #0
 8002afe:	2100      	movs	r1, #0
 8002b00:	2025      	movs	r0, #37	@ 0x25
 8002b02:	f000 ffd0 	bl	8003aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b06:	2025      	movs	r0, #37	@ 0x25
 8002b08:	f000 ffe9 	bl	8003ade <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8002b0c:	e072      	b.n	8002bf4 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a3d      	ldr	r2, [pc, #244]	@ (8002c08 <HAL_UART_MspInit+0x188>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d134      	bne.n	8002b82 <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b18:	2300      	movs	r3, #0
 8002b1a:	61bb      	str	r3, [r7, #24]
 8002b1c:	4b38      	ldr	r3, [pc, #224]	@ (8002c00 <HAL_UART_MspInit+0x180>)
 8002b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b20:	4a37      	ldr	r2, [pc, #220]	@ (8002c00 <HAL_UART_MspInit+0x180>)
 8002b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b26:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b28:	4b35      	ldr	r3, [pc, #212]	@ (8002c00 <HAL_UART_MspInit+0x180>)
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b30:	61bb      	str	r3, [r7, #24]
 8002b32:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	4b31      	ldr	r3, [pc, #196]	@ (8002c00 <HAL_UART_MspInit+0x180>)
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3c:	4a30      	ldr	r2, [pc, #192]	@ (8002c00 <HAL_UART_MspInit+0x180>)
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b44:	4b2e      	ldr	r3, [pc, #184]	@ (8002c00 <HAL_UART_MspInit+0x180>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b50:	230c      	movs	r3, #12
 8002b52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b54:	2302      	movs	r3, #2
 8002b56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b60:	2307      	movs	r3, #7
 8002b62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b68:	4619      	mov	r1, r3
 8002b6a:	4826      	ldr	r0, [pc, #152]	@ (8002c04 <HAL_UART_MspInit+0x184>)
 8002b6c:	f001 f864 	bl	8003c38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b70:	2200      	movs	r2, #0
 8002b72:	2100      	movs	r1, #0
 8002b74:	2026      	movs	r0, #38	@ 0x26
 8002b76:	f000 ff96 	bl	8003aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b7a:	2026      	movs	r0, #38	@ 0x26
 8002b7c:	f000 ffaf 	bl	8003ade <HAL_NVIC_EnableIRQ>
}
 8002b80:	e038      	b.n	8002bf4 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a21      	ldr	r2, [pc, #132]	@ (8002c0c <HAL_UART_MspInit+0x18c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d133      	bne.n	8002bf4 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	613b      	str	r3, [r7, #16]
 8002b90:	4b1b      	ldr	r3, [pc, #108]	@ (8002c00 <HAL_UART_MspInit+0x180>)
 8002b92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b94:	4a1a      	ldr	r2, [pc, #104]	@ (8002c00 <HAL_UART_MspInit+0x180>)
 8002b96:	f043 0320 	orr.w	r3, r3, #32
 8002b9a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b9c:	4b18      	ldr	r3, [pc, #96]	@ (8002c00 <HAL_UART_MspInit+0x180>)
 8002b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	613b      	str	r3, [r7, #16]
 8002ba6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
 8002bac:	4b14      	ldr	r3, [pc, #80]	@ (8002c00 <HAL_UART_MspInit+0x180>)
 8002bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb0:	4a13      	ldr	r2, [pc, #76]	@ (8002c00 <HAL_UART_MspInit+0x180>)
 8002bb2:	f043 0304 	orr.w	r3, r3, #4
 8002bb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb8:	4b11      	ldr	r3, [pc, #68]	@ (8002c00 <HAL_UART_MspInit+0x180>)
 8002bba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	60fb      	str	r3, [r7, #12]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bc4:	23c0      	movs	r3, #192	@ 0xc0
 8002bc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc8:	2302      	movs	r3, #2
 8002bca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002bd4:	2308      	movs	r3, #8
 8002bd6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bdc:	4619      	mov	r1, r3
 8002bde:	480c      	ldr	r0, [pc, #48]	@ (8002c10 <HAL_UART_MspInit+0x190>)
 8002be0:	f001 f82a 	bl	8003c38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002be4:	2200      	movs	r2, #0
 8002be6:	2100      	movs	r1, #0
 8002be8:	2047      	movs	r0, #71	@ 0x47
 8002bea:	f000 ff5c 	bl	8003aa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002bee:	2047      	movs	r0, #71	@ 0x47
 8002bf0:	f000 ff75 	bl	8003ade <HAL_NVIC_EnableIRQ>
}
 8002bf4:	bf00      	nop
 8002bf6:	3738      	adds	r7, #56	@ 0x38
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40011000 	.word	0x40011000
 8002c00:	40023800 	.word	0x40023800
 8002c04:	40020000 	.word	0x40020000
 8002c08:	40004400 	.word	0x40004400
 8002c0c:	40011400 	.word	0x40011400
 8002c10:	40020800 	.word	0x40020800

08002c14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <NMI_Handler+0x4>

08002c1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c20:	bf00      	nop
 8002c22:	e7fd      	b.n	8002c20 <HardFault_Handler+0x4>

08002c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <MemManage_Handler+0x4>

08002c2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <BusFault_Handler+0x4>

08002c34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c38:	bf00      	nop
 8002c3a:	e7fd      	b.n	8002c38 <UsageFault_Handler+0x4>

08002c3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c6a:	f000 f991 	bl	8002f90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
	...

08002c74 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002c78:	4802      	ldr	r0, [pc, #8]	@ (8002c84 <ADC_IRQHandler+0x10>)
 8002c7a:	f000 facf 	bl	800321c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002c7e:	bf00      	nop
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000218 	.word	0x20000218

08002c88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c8c:	4802      	ldr	r0, [pc, #8]	@ (8002c98 <TIM3_IRQHandler+0x10>)
 8002c8e:	f002 f859 	bl	8004d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c92:	bf00      	nop
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	200002f0 	.word	0x200002f0

08002c9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ca0:	4802      	ldr	r0, [pc, #8]	@ (8002cac <USART1_IRQHandler+0x10>)
 8002ca2:	f003 f88b 	bl	8005dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000338 	.word	0x20000338

08002cb0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002cb4:	4802      	ldr	r0, [pc, #8]	@ (8002cc0 <USART2_IRQHandler+0x10>)
 8002cb6:	f003 f881 	bl	8005dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000380 	.word	0x20000380

08002cc4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002cc8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002ccc:	f001 f96a 	bl	8003fa4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002cd0:	bf00      	nop
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002cd8:	4802      	ldr	r0, [pc, #8]	@ (8002ce4 <USART6_IRQHandler+0x10>)
 8002cda:	f003 f86f 	bl	8005dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	200003c8 	.word	0x200003c8

08002ce8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
  return 1;
 8002cec:	2301      	movs	r3, #1
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <_kill>:

int _kill(int pid, int sig)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d02:	f006 f853 	bl	8008dac <__errno>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2216      	movs	r2, #22
 8002d0a:	601a      	str	r2, [r3, #0]
  return -1;
 8002d0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3708      	adds	r7, #8
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <_exit>:

void _exit (int status)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d20:	f04f 31ff 	mov.w	r1, #4294967295
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff ffe7 	bl	8002cf8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d2a:	bf00      	nop
 8002d2c:	e7fd      	b.n	8002d2a <_exit+0x12>

08002d2e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b086      	sub	sp, #24
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	60f8      	str	r0, [r7, #12]
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	e00a      	b.n	8002d56 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d40:	f3af 8000 	nop.w
 8002d44:	4601      	mov	r1, r0
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	60ba      	str	r2, [r7, #8]
 8002d4c:	b2ca      	uxtb	r2, r1
 8002d4e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	3301      	adds	r3, #1
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	dbf0      	blt.n	8002d40 <_read+0x12>
  }

  return len;
 8002d5e:	687b      	ldr	r3, [r7, #4]
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3718      	adds	r7, #24
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d74:	2300      	movs	r3, #0
 8002d76:	617b      	str	r3, [r7, #20]
 8002d78:	e009      	b.n	8002d8e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	60ba      	str	r2, [r7, #8]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7fe fb90 	bl	80014a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	dbf1      	blt.n	8002d7a <_write+0x12>
  }
  return len;
 8002d96:	687b      	ldr	r3, [r7, #4]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <_close>:

int _close(int file)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002da8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002dc8:	605a      	str	r2, [r3, #4]
  return 0;
 8002dca:	2300      	movs	r3, #0
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <_isatty>:

int _isatty(int file)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002de0:	2301      	movs	r3, #1
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b085      	sub	sp, #20
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e10:	4a14      	ldr	r2, [pc, #80]	@ (8002e64 <_sbrk+0x5c>)
 8002e12:	4b15      	ldr	r3, [pc, #84]	@ (8002e68 <_sbrk+0x60>)
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e1c:	4b13      	ldr	r3, [pc, #76]	@ (8002e6c <_sbrk+0x64>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d102      	bne.n	8002e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e24:	4b11      	ldr	r3, [pc, #68]	@ (8002e6c <_sbrk+0x64>)
 8002e26:	4a12      	ldr	r2, [pc, #72]	@ (8002e70 <_sbrk+0x68>)
 8002e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e2a:	4b10      	ldr	r3, [pc, #64]	@ (8002e6c <_sbrk+0x64>)
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4413      	add	r3, r2
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d207      	bcs.n	8002e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e38:	f005 ffb8 	bl	8008dac <__errno>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	220c      	movs	r2, #12
 8002e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e42:	f04f 33ff 	mov.w	r3, #4294967295
 8002e46:	e009      	b.n	8002e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e48:	4b08      	ldr	r3, [pc, #32]	@ (8002e6c <_sbrk+0x64>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e4e:	4b07      	ldr	r3, [pc, #28]	@ (8002e6c <_sbrk+0x64>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	4a05      	ldr	r2, [pc, #20]	@ (8002e6c <_sbrk+0x64>)
 8002e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20020000 	.word	0x20020000
 8002e68:	00000400 	.word	0x00000400
 8002e6c:	20000648 	.word	0x20000648
 8002e70:	200007a0 	.word	0x200007a0

08002e74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e74:	b480      	push	{r7}
 8002e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e78:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <SystemInit+0x20>)
 8002e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7e:	4a05      	ldr	r2, [pc, #20]	@ (8002e94 <SystemInit+0x20>)
 8002e80:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e84:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e88:	bf00      	nop
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e98:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002ed0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e9c:	f7ff ffea 	bl	8002e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ea0:	480c      	ldr	r0, [pc, #48]	@ (8002ed4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002ea2:	490d      	ldr	r1, [pc, #52]	@ (8002ed8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ea4:	4a0d      	ldr	r2, [pc, #52]	@ (8002edc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ea8:	e002      	b.n	8002eb0 <LoopCopyDataInit>

08002eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eae:	3304      	adds	r3, #4

08002eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eb4:	d3f9      	bcc.n	8002eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002eb8:	4c0a      	ldr	r4, [pc, #40]	@ (8002ee4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ebc:	e001      	b.n	8002ec2 <LoopFillZerobss>

08002ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ec0:	3204      	adds	r2, #4

08002ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ec4:	d3fb      	bcc.n	8002ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ec6:	f005 ff77 	bl	8008db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eca:	f7ff f907 	bl	80020dc <main>
  bx  lr    
 8002ece:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002ed0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ed8:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8002edc:	0800bee8 	.word	0x0800bee8
  ldr r2, =_sbss
 8002ee0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002ee4:	2000079c 	.word	0x2000079c

08002ee8 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ee8:	e7fe      	b.n	8002ee8 <DMA1_Stream0_IRQHandler>
	...

08002eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8002f2c <HAL_Init+0x40>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8002f2c <HAL_Init+0x40>)
 8002ef6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002efa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002efc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f2c <HAL_Init+0x40>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a0a      	ldr	r2, [pc, #40]	@ (8002f2c <HAL_Init+0x40>)
 8002f02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f08:	4b08      	ldr	r3, [pc, #32]	@ (8002f2c <HAL_Init+0x40>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a07      	ldr	r2, [pc, #28]	@ (8002f2c <HAL_Init+0x40>)
 8002f0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f14:	2003      	movs	r0, #3
 8002f16:	f000 fdbb 	bl	8003a90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	f000 f808 	bl	8002f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f20:	f7ff fcae 	bl	8002880 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40023c00 	.word	0x40023c00

08002f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f38:	4b12      	ldr	r3, [pc, #72]	@ (8002f84 <HAL_InitTick+0x54>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4b12      	ldr	r3, [pc, #72]	@ (8002f88 <HAL_InitTick+0x58>)
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	4619      	mov	r1, r3
 8002f42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 fdd3 	bl	8003afa <HAL_SYSTICK_Config>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e00e      	b.n	8002f7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b0f      	cmp	r3, #15
 8002f62:	d80a      	bhi.n	8002f7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f64:	2200      	movs	r2, #0
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	f04f 30ff 	mov.w	r0, #4294967295
 8002f6c:	f000 fd9b 	bl	8003aa6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f70:	4a06      	ldr	r2, [pc, #24]	@ (8002f8c <HAL_InitTick+0x5c>)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
 8002f78:	e000      	b.n	8002f7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000020 	.word	0x20000020
 8002f88:	20000028 	.word	0x20000028
 8002f8c:	20000024 	.word	0x20000024

08002f90 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f94:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <HAL_IncTick+0x20>)
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	4b06      	ldr	r3, [pc, #24]	@ (8002fb4 <HAL_IncTick+0x24>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	4a04      	ldr	r2, [pc, #16]	@ (8002fb4 <HAL_IncTick+0x24>)
 8002fa2:	6013      	str	r3, [r2, #0]
}
 8002fa4:	bf00      	nop
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fac:	4770      	bx	lr
 8002fae:	bf00      	nop
 8002fb0:	20000028 	.word	0x20000028
 8002fb4:	2000064c 	.word	0x2000064c

08002fb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	af00      	add	r7, sp, #0
  return uwTick;
 8002fbc:	4b03      	ldr	r3, [pc, #12]	@ (8002fcc <HAL_GetTick+0x14>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	2000064c 	.word	0x2000064c

08002fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fd8:	f7ff ffee 	bl	8002fb8 <HAL_GetTick>
 8002fdc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe8:	d005      	beq.n	8002ff6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fea:	4b0a      	ldr	r3, [pc, #40]	@ (8003014 <HAL_Delay+0x44>)
 8002fec:	781b      	ldrb	r3, [r3, #0]
 8002fee:	461a      	mov	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ff6:	bf00      	nop
 8002ff8:	f7ff ffde 	bl	8002fb8 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	68fa      	ldr	r2, [r7, #12]
 8003004:	429a      	cmp	r2, r3
 8003006:	d8f7      	bhi.n	8002ff8 <HAL_Delay+0x28>
  {
  }
}
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000028 	.word	0x20000028

08003018 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003020:	2300      	movs	r3, #0
 8003022:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d101      	bne.n	800302e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e033      	b.n	8003096 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003032:	2b00      	cmp	r3, #0
 8003034:	d109      	bne.n	800304a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff fc4a 	bl	80028d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b00      	cmp	r3, #0
 8003054:	d118      	bne.n	8003088 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800305e:	f023 0302 	bic.w	r3, r3, #2
 8003062:	f043 0202 	orr.w	r2, r3, #2
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 fb3a 	bl	80036e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307a:	f023 0303 	bic.w	r3, r3, #3
 800307e:	f043 0201 	orr.w	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	641a      	str	r2, [r3, #64]	@ 0x40
 8003086:	e001      	b.n	800308c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003094:	7bfb      	ldrb	r3, [r7, #15]
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80030a8:	2300      	movs	r3, #0
 80030aa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_ADC_Start_IT+0x1a>
 80030b6:	2302      	movs	r3, #2
 80030b8:	e0a1      	b.n	80031fe <HAL_ADC_Start_IT+0x15e>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d018      	beq.n	8003102 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f042 0201 	orr.w	r2, r2, #1
 80030de:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030e0:	4b4a      	ldr	r3, [pc, #296]	@ (800320c <HAL_ADC_Start_IT+0x16c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003210 <HAL_ADC_Start_IT+0x170>)
 80030e6:	fba2 2303 	umull	r2, r3, r2, r3
 80030ea:	0c9a      	lsrs	r2, r3, #18
 80030ec:	4613      	mov	r3, r2
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4413      	add	r3, r2
 80030f2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80030f4:	e002      	b.n	80030fc <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f9      	bne.n	80030f6 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b01      	cmp	r3, #1
 800310e:	d169      	bne.n	80031e4 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003114:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003118:	f023 0301 	bic.w	r3, r3, #1
 800311c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800312e:	2b00      	cmp	r3, #0
 8003130:	d007      	beq.n	8003142 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800313a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800314a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800314e:	d106      	bne.n	800315e <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003154:	f023 0206 	bic.w	r2, r3, #6
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	645a      	str	r2, [r3, #68]	@ 0x44
 800315c:	e002      	b.n	8003164 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800316c:	4b29      	ldr	r3, [pc, #164]	@ (8003214 <HAL_ADC_Start_IT+0x174>)
 800316e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003178:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	6812      	ldr	r2, [r2, #0]
 8003184:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003188:	f043 0320 	orr.w	r3, r3, #32
 800318c:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 031f 	and.w	r3, r3, #31
 8003196:	2b00      	cmp	r3, #0
 8003198:	d10f      	bne.n	80031ba <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d129      	bne.n	80031fc <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	e020      	b.n	80031fc <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a16      	ldr	r2, [pc, #88]	@ (8003218 <HAL_ADC_Start_IT+0x178>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d11b      	bne.n	80031fc <HAL_ADC_Start_IT+0x15c>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d114      	bne.n	80031fc <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80031e0:	609a      	str	r2, [r3, #8]
 80031e2:	e00b      	b.n	80031fc <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	f043 0210 	orr.w	r2, r3, #16
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f4:	f043 0201 	orr.w	r2, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20000020 	.word	0x20000020
 8003210:	431bde83 	.word	0x431bde83
 8003214:	40012300 	.word	0x40012300
 8003218:	40012000 	.word	0x40012000

0800321c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	2300      	movs	r3, #0
 800322a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d049      	beq.n	80032e6 <HAL_ADC_IRQHandler+0xca>
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d046      	beq.n	80032e6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	d105      	bne.n	8003270 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003268:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d12b      	bne.n	80032d6 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003282:	2b00      	cmp	r3, #0
 8003284:	d127      	bne.n	80032d6 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003290:	2b00      	cmp	r3, #0
 8003292:	d006      	beq.n	80032a2 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d119      	bne.n	80032d6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f022 0220 	bic.w	r2, r2, #32
 80032b0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d105      	bne.n	80032d6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ce:	f043 0201 	orr.w	r2, r3, #1
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fe fd0e 	bl	8001cf8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f06f 0212 	mvn.w	r2, #18
 80032e4:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 0304 	and.w	r3, r3, #4
 80032ec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d057      	beq.n	80033ac <HAL_ADC_IRQHandler+0x190>
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d054      	beq.n	80033ac <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	f003 0310 	and.w	r3, r3, #16
 800330a:	2b00      	cmp	r3, #0
 800330c:	d105      	bne.n	800331a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d139      	bne.n	800339c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800332e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003332:	2b00      	cmp	r3, #0
 8003334:	d006      	beq.n	8003344 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003340:	2b00      	cmp	r3, #0
 8003342:	d12b      	bne.n	800339c <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800334e:	2b00      	cmp	r3, #0
 8003350:	d124      	bne.n	800339c <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800335c:	2b00      	cmp	r3, #0
 800335e:	d11d      	bne.n	800339c <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003364:	2b00      	cmp	r3, #0
 8003366:	d119      	bne.n	800339c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003376:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003388:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800338c:	2b00      	cmp	r3, #0
 800338e:	d105      	bne.n	800339c <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003394:	f043 0201 	orr.w	r2, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 fa9d 	bl	80038dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f06f 020c 	mvn.w	r2, #12
 80033aa:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ba:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d017      	beq.n	80033f2 <HAL_ADC_IRQHandler+0x1d6>
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d014      	beq.n	80033f2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d10d      	bne.n	80033f2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 f837 	bl	8003456 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f06f 0201 	mvn.w	r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f003 0320 	and.w	r3, r3, #32
 80033f8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003400:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d015      	beq.n	8003434 <HAL_ADC_IRQHandler+0x218>
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d012      	beq.n	8003434 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003412:	f043 0202 	orr.w	r2, r3, #2
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f06f 0220 	mvn.w	r2, #32
 8003422:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f000 f820 	bl	800346a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f06f 0220 	mvn.w	r2, #32
 8003432:	601a      	str	r2, [r3, #0]
  }
}
 8003434:	bf00      	nop
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003456:	b480      	push	{r7}
 8003458:	b083      	sub	sp, #12
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003472:	bf00      	nop
 8003474:	370c      	adds	r7, #12
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
	...

08003480 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003480:	b480      	push	{r7}
 8003482:	b085      	sub	sp, #20
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
 8003488:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800348a:	2300      	movs	r3, #0
 800348c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_ADC_ConfigChannel+0x1c>
 8003498:	2302      	movs	r3, #2
 800349a:	e113      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x244>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2b09      	cmp	r3, #9
 80034aa:	d925      	bls.n	80034f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68d9      	ldr	r1, [r3, #12]
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	461a      	mov	r2, r3
 80034ba:	4613      	mov	r3, r2
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	4413      	add	r3, r2
 80034c0:	3b1e      	subs	r3, #30
 80034c2:	2207      	movs	r2, #7
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43da      	mvns	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	400a      	ands	r2, r1
 80034d0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68d9      	ldr	r1, [r3, #12]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	4618      	mov	r0, r3
 80034e4:	4603      	mov	r3, r0
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	4403      	add	r3, r0
 80034ea:	3b1e      	subs	r3, #30
 80034ec:	409a      	lsls	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	430a      	orrs	r2, r1
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	e022      	b.n	800353e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6919      	ldr	r1, [r3, #16]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	b29b      	uxth	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	4613      	mov	r3, r2
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	4413      	add	r3, r2
 800350c:	2207      	movs	r2, #7
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43da      	mvns	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	400a      	ands	r2, r1
 800351a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6919      	ldr	r1, [r3, #16]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	b29b      	uxth	r3, r3
 800352c:	4618      	mov	r0, r3
 800352e:	4603      	mov	r3, r0
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	4403      	add	r3, r0
 8003534:	409a      	lsls	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b06      	cmp	r3, #6
 8003544:	d824      	bhi.n	8003590 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	3b05      	subs	r3, #5
 8003558:	221f      	movs	r2, #31
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43da      	mvns	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	400a      	ands	r2, r1
 8003566:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	b29b      	uxth	r3, r3
 8003574:	4618      	mov	r0, r3
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	3b05      	subs	r3, #5
 8003582:	fa00 f203 	lsl.w	r2, r0, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	635a      	str	r2, [r3, #52]	@ 0x34
 800358e:	e04c      	b.n	800362a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	2b0c      	cmp	r3, #12
 8003596:	d824      	bhi.n	80035e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	3b23      	subs	r3, #35	@ 0x23
 80035aa:	221f      	movs	r2, #31
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	43da      	mvns	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	400a      	ands	r2, r1
 80035b8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	4618      	mov	r0, r3
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685a      	ldr	r2, [r3, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	3b23      	subs	r3, #35	@ 0x23
 80035d4:	fa00 f203 	lsl.w	r2, r0, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	430a      	orrs	r2, r1
 80035de:	631a      	str	r2, [r3, #48]	@ 0x30
 80035e0:	e023      	b.n	800362a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	3b41      	subs	r3, #65	@ 0x41
 80035f4:	221f      	movs	r2, #31
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	43da      	mvns	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	400a      	ands	r2, r1
 8003602:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	b29b      	uxth	r3, r3
 8003610:	4618      	mov	r0, r3
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	4613      	mov	r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	4413      	add	r3, r2
 800361c:	3b41      	subs	r3, #65	@ 0x41
 800361e:	fa00 f203 	lsl.w	r2, r0, r3
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800362a:	4b29      	ldr	r3, [pc, #164]	@ (80036d0 <HAL_ADC_ConfigChannel+0x250>)
 800362c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a28      	ldr	r2, [pc, #160]	@ (80036d4 <HAL_ADC_ConfigChannel+0x254>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d10f      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x1d8>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b12      	cmp	r3, #18
 800363e:	d10b      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a1d      	ldr	r2, [pc, #116]	@ (80036d4 <HAL_ADC_ConfigChannel+0x254>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d12b      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x23a>
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a1c      	ldr	r2, [pc, #112]	@ (80036d8 <HAL_ADC_ConfigChannel+0x258>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d003      	beq.n	8003674 <HAL_ADC_ConfigChannel+0x1f4>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2b11      	cmp	r3, #17
 8003672:	d122      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a11      	ldr	r2, [pc, #68]	@ (80036d8 <HAL_ADC_ConfigChannel+0x258>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d111      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003696:	4b11      	ldr	r3, [pc, #68]	@ (80036dc <HAL_ADC_ConfigChannel+0x25c>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a11      	ldr	r2, [pc, #68]	@ (80036e0 <HAL_ADC_ConfigChannel+0x260>)
 800369c:	fba2 2303 	umull	r2, r3, r2, r3
 80036a0:	0c9a      	lsrs	r2, r3, #18
 80036a2:	4613      	mov	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	4413      	add	r3, r2
 80036a8:	005b      	lsls	r3, r3, #1
 80036aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80036ac:	e002      	b.n	80036b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f9      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr
 80036d0:	40012300 	.word	0x40012300
 80036d4:	40012000 	.word	0x40012000
 80036d8:	10000012 	.word	0x10000012
 80036dc:	20000020 	.word	0x20000020
 80036e0:	431bde83 	.word	0x431bde83

080036e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036ec:	4b79      	ldr	r3, [pc, #484]	@ (80038d4 <ADC_Init+0x1f0>)
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	431a      	orrs	r2, r3
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003718:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6859      	ldr	r1, [r3, #4]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	021a      	lsls	r2, r3, #8
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800373c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6859      	ldr	r1, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689a      	ldr	r2, [r3, #8]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800375e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6899      	ldr	r1, [r3, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003776:	4a58      	ldr	r2, [pc, #352]	@ (80038d8 <ADC_Init+0x1f4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d022      	beq.n	80037c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800378a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6899      	ldr	r1, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80037ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6899      	ldr	r1, [r3, #8]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	609a      	str	r2, [r3, #8]
 80037c0:	e00f      	b.n	80037e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689a      	ldr	r2, [r3, #8]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80037d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80037e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0202 	bic.w	r2, r2, #2
 80037f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6899      	ldr	r1, [r3, #8]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	7e1b      	ldrb	r3, [r3, #24]
 80037fc:	005a      	lsls	r2, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3020 	ldrb.w	r3, [r3, #32]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01b      	beq.n	8003848 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800381e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800382e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	6859      	ldr	r1, [r3, #4]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383a:	3b01      	subs	r3, #1
 800383c:	035a      	lsls	r2, r3, #13
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	e007      	b.n	8003858 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003856:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003866:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	3b01      	subs	r3, #1
 8003874:	051a      	lsls	r2, r3, #20
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800388c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6899      	ldr	r1, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800389a:	025a      	lsls	r2, r3, #9
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6899      	ldr	r1, [r3, #8]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	695b      	ldr	r3, [r3, #20]
 80038be:	029a      	lsls	r2, r3, #10
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	430a      	orrs	r2, r1
 80038c6:	609a      	str	r2, [r3, #8]
}
 80038c8:	bf00      	nop
 80038ca:	3714      	adds	r7, #20
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	40012300 	.word	0x40012300
 80038d8:	0f000001 	.word	0x0f000001

080038dc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003900:	4b0c      	ldr	r3, [pc, #48]	@ (8003934 <__NVIC_SetPriorityGrouping+0x44>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800390c:	4013      	ands	r3, r2
 800390e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003918:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800391c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003920:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003922:	4a04      	ldr	r2, [pc, #16]	@ (8003934 <__NVIC_SetPriorityGrouping+0x44>)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	60d3      	str	r3, [r2, #12]
}
 8003928:	bf00      	nop
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	e000ed00 	.word	0xe000ed00

08003938 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800393c:	4b04      	ldr	r3, [pc, #16]	@ (8003950 <__NVIC_GetPriorityGrouping+0x18>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	0a1b      	lsrs	r3, r3, #8
 8003942:	f003 0307 	and.w	r3, r3, #7
}
 8003946:	4618      	mov	r0, r3
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	e000ed00 	.word	0xe000ed00

08003954 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800395e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003962:	2b00      	cmp	r3, #0
 8003964:	db0b      	blt.n	800397e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	f003 021f 	and.w	r2, r3, #31
 800396c:	4907      	ldr	r1, [pc, #28]	@ (800398c <__NVIC_EnableIRQ+0x38>)
 800396e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	2001      	movs	r0, #1
 8003976:	fa00 f202 	lsl.w	r2, r0, r2
 800397a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	e000e100 	.word	0xe000e100

08003990 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	4603      	mov	r3, r0
 8003998:	6039      	str	r1, [r7, #0]
 800399a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800399c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	db0a      	blt.n	80039ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	490c      	ldr	r1, [pc, #48]	@ (80039dc <__NVIC_SetPriority+0x4c>)
 80039aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ae:	0112      	lsls	r2, r2, #4
 80039b0:	b2d2      	uxtb	r2, r2
 80039b2:	440b      	add	r3, r1
 80039b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039b8:	e00a      	b.n	80039d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	4908      	ldr	r1, [pc, #32]	@ (80039e0 <__NVIC_SetPriority+0x50>)
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	f003 030f 	and.w	r3, r3, #15
 80039c6:	3b04      	subs	r3, #4
 80039c8:	0112      	lsls	r2, r2, #4
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	440b      	add	r3, r1
 80039ce:	761a      	strb	r2, [r3, #24]
}
 80039d0:	bf00      	nop
 80039d2:	370c      	adds	r7, #12
 80039d4:	46bd      	mov	sp, r7
 80039d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039da:	4770      	bx	lr
 80039dc:	e000e100 	.word	0xe000e100
 80039e0:	e000ed00 	.word	0xe000ed00

080039e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b089      	sub	sp, #36	@ 0x24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 0307 	and.w	r3, r3, #7
 80039f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f1c3 0307 	rsb	r3, r3, #7
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	bf28      	it	cs
 8003a02:	2304      	movcs	r3, #4
 8003a04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	3304      	adds	r3, #4
 8003a0a:	2b06      	cmp	r3, #6
 8003a0c:	d902      	bls.n	8003a14 <NVIC_EncodePriority+0x30>
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	3b03      	subs	r3, #3
 8003a12:	e000      	b.n	8003a16 <NVIC_EncodePriority+0x32>
 8003a14:	2300      	movs	r3, #0
 8003a16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a18:	f04f 32ff 	mov.w	r2, #4294967295
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a22:	43da      	mvns	r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	401a      	ands	r2, r3
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a2c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	fa01 f303 	lsl.w	r3, r1, r3
 8003a36:	43d9      	mvns	r1, r3
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a3c:	4313      	orrs	r3, r2
         );
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3724      	adds	r7, #36	@ 0x24
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
	...

08003a4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003a5c:	d301      	bcc.n	8003a62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e00f      	b.n	8003a82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a62:	4a0a      	ldr	r2, [pc, #40]	@ (8003a8c <SysTick_Config+0x40>)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	3b01      	subs	r3, #1
 8003a68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a6a:	210f      	movs	r1, #15
 8003a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a70:	f7ff ff8e 	bl	8003990 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a74:	4b05      	ldr	r3, [pc, #20]	@ (8003a8c <SysTick_Config+0x40>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a7a:	4b04      	ldr	r3, [pc, #16]	@ (8003a8c <SysTick_Config+0x40>)
 8003a7c:	2207      	movs	r2, #7
 8003a7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	e000e010 	.word	0xe000e010

08003a90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff ff29 	bl	80038f0 <__NVIC_SetPriorityGrouping>
}
 8003a9e:	bf00      	nop
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b086      	sub	sp, #24
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	4603      	mov	r3, r0
 8003aae:	60b9      	str	r1, [r7, #8]
 8003ab0:	607a      	str	r2, [r7, #4]
 8003ab2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ab8:	f7ff ff3e 	bl	8003938 <__NVIC_GetPriorityGrouping>
 8003abc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	6978      	ldr	r0, [r7, #20]
 8003ac4:	f7ff ff8e 	bl	80039e4 <NVIC_EncodePriority>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ace:	4611      	mov	r1, r2
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff ff5d 	bl	8003990 <__NVIC_SetPriority>
}
 8003ad6:	bf00      	nop
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ade:	b580      	push	{r7, lr}
 8003ae0:	b082      	sub	sp, #8
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff ff31 	bl	8003954 <__NVIC_EnableIRQ>
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003afa:	b580      	push	{r7, lr}
 8003afc:	b082      	sub	sp, #8
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f7ff ffa2 	bl	8003a4c <SysTick_Config>
 8003b08:	4603      	mov	r3, r0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003b20:	f7ff fa4a 	bl	8002fb8 <HAL_GetTick>
 8003b24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d008      	beq.n	8003b44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2280      	movs	r2, #128	@ 0x80
 8003b36:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e052      	b.n	8003bea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f022 0216 	bic.w	r2, r2, #22
 8003b52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d103      	bne.n	8003b74 <HAL_DMA_Abort+0x62>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d007      	beq.n	8003b84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0208 	bic.w	r2, r2, #8
 8003b82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0201 	bic.w	r2, r2, #1
 8003b92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b94:	e013      	b.n	8003bbe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b96:	f7ff fa0f 	bl	8002fb8 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b05      	cmp	r3, #5
 8003ba2:	d90c      	bls.n	8003bbe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2203      	movs	r2, #3
 8003bae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e015      	b.n	8003bea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0301 	and.w	r3, r3, #1
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d1e4      	bne.n	8003b96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd0:	223f      	movs	r2, #63	@ 0x3f
 8003bd2:	409a      	lsls	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003be8:	2300      	movs	r3, #0
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3710      	adds	r7, #16
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b083      	sub	sp, #12
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	2b02      	cmp	r3, #2
 8003c04:	d004      	beq.n	8003c10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2280      	movs	r2, #128	@ 0x80
 8003c0a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e00c      	b.n	8003c2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2205      	movs	r2, #5
 8003c14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0201 	bic.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
	...

08003c38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b089      	sub	sp, #36	@ 0x24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61fb      	str	r3, [r7, #28]
 8003c52:	e159      	b.n	8003f08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c54:	2201      	movs	r2, #1
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	4013      	ands	r3, r2
 8003c66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c68:	693a      	ldr	r2, [r7, #16]
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	f040 8148 	bne.w	8003f02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d005      	beq.n	8003c8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d130      	bne.n	8003cec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	2203      	movs	r2, #3
 8003c96:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	68da      	ldr	r2, [r3, #12]
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	43db      	mvns	r3, r3
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4013      	ands	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	f003 0201 	and.w	r2, r3, #1
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 0303 	and.w	r3, r3, #3
 8003cf4:	2b03      	cmp	r3, #3
 8003cf6:	d017      	beq.n	8003d28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	2203      	movs	r2, #3
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	689a      	ldr	r2, [r3, #8]
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 0303 	and.w	r3, r3, #3
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d123      	bne.n	8003d7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	08da      	lsrs	r2, r3, #3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	3208      	adds	r2, #8
 8003d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	f003 0307 	and.w	r3, r3, #7
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	220f      	movs	r2, #15
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	43db      	mvns	r3, r3
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4013      	ands	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	691a      	ldr	r2, [r3, #16]
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	f003 0307 	and.w	r3, r3, #7
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	fa02 f303 	lsl.w	r3, r2, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	08da      	lsrs	r2, r3, #3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3208      	adds	r2, #8
 8003d76:	69b9      	ldr	r1, [r7, #24]
 8003d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	2203      	movs	r2, #3
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	43db      	mvns	r3, r3
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	4013      	ands	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 0203 	and.w	r2, r3, #3
 8003d9c:	69fb      	ldr	r3, [r7, #28]
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4313      	orrs	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	f000 80a2 	beq.w	8003f02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
 8003dc2:	4b57      	ldr	r3, [pc, #348]	@ (8003f20 <HAL_GPIO_Init+0x2e8>)
 8003dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc6:	4a56      	ldr	r2, [pc, #344]	@ (8003f20 <HAL_GPIO_Init+0x2e8>)
 8003dc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003dcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dce:	4b54      	ldr	r3, [pc, #336]	@ (8003f20 <HAL_GPIO_Init+0x2e8>)
 8003dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dda:	4a52      	ldr	r2, [pc, #328]	@ (8003f24 <HAL_GPIO_Init+0x2ec>)
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	089b      	lsrs	r3, r3, #2
 8003de0:	3302      	adds	r3, #2
 8003de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	220f      	movs	r2, #15
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	43db      	mvns	r3, r3
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a49      	ldr	r2, [pc, #292]	@ (8003f28 <HAL_GPIO_Init+0x2f0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d019      	beq.n	8003e3a <HAL_GPIO_Init+0x202>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a48      	ldr	r2, [pc, #288]	@ (8003f2c <HAL_GPIO_Init+0x2f4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d013      	beq.n	8003e36 <HAL_GPIO_Init+0x1fe>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a47      	ldr	r2, [pc, #284]	@ (8003f30 <HAL_GPIO_Init+0x2f8>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d00d      	beq.n	8003e32 <HAL_GPIO_Init+0x1fa>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a46      	ldr	r2, [pc, #280]	@ (8003f34 <HAL_GPIO_Init+0x2fc>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d007      	beq.n	8003e2e <HAL_GPIO_Init+0x1f6>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a45      	ldr	r2, [pc, #276]	@ (8003f38 <HAL_GPIO_Init+0x300>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d101      	bne.n	8003e2a <HAL_GPIO_Init+0x1f2>
 8003e26:	2304      	movs	r3, #4
 8003e28:	e008      	b.n	8003e3c <HAL_GPIO_Init+0x204>
 8003e2a:	2307      	movs	r3, #7
 8003e2c:	e006      	b.n	8003e3c <HAL_GPIO_Init+0x204>
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e004      	b.n	8003e3c <HAL_GPIO_Init+0x204>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e002      	b.n	8003e3c <HAL_GPIO_Init+0x204>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <HAL_GPIO_Init+0x204>
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	69fa      	ldr	r2, [r7, #28]
 8003e3e:	f002 0203 	and.w	r2, r2, #3
 8003e42:	0092      	lsls	r2, r2, #2
 8003e44:	4093      	lsls	r3, r2
 8003e46:	69ba      	ldr	r2, [r7, #24]
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e4c:	4935      	ldr	r1, [pc, #212]	@ (8003f24 <HAL_GPIO_Init+0x2ec>)
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	089b      	lsrs	r3, r3, #2
 8003e52:	3302      	adds	r3, #2
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e5a:	4b38      	ldr	r3, [pc, #224]	@ (8003f3c <HAL_GPIO_Init+0x304>)
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	43db      	mvns	r3, r3
 8003e64:	69ba      	ldr	r2, [r7, #24]
 8003e66:	4013      	ands	r3, r2
 8003e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8003f3c <HAL_GPIO_Init+0x304>)
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e84:	4b2d      	ldr	r3, [pc, #180]	@ (8003f3c <HAL_GPIO_Init+0x304>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	43db      	mvns	r3, r3
 8003e8e:	69ba      	ldr	r2, [r7, #24]
 8003e90:	4013      	ands	r3, r2
 8003e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d003      	beq.n	8003ea8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ea8:	4a24      	ldr	r2, [pc, #144]	@ (8003f3c <HAL_GPIO_Init+0x304>)
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003eae:	4b23      	ldr	r3, [pc, #140]	@ (8003f3c <HAL_GPIO_Init+0x304>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	43db      	mvns	r3, r3
 8003eb8:	69ba      	ldr	r2, [r7, #24]
 8003eba:	4013      	ands	r3, r2
 8003ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8003f3c <HAL_GPIO_Init+0x304>)
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ed8:	4b18      	ldr	r3, [pc, #96]	@ (8003f3c <HAL_GPIO_Init+0x304>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	43db      	mvns	r3, r3
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d003      	beq.n	8003efc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003efc:	4a0f      	ldr	r2, [pc, #60]	@ (8003f3c <HAL_GPIO_Init+0x304>)
 8003efe:	69bb      	ldr	r3, [r7, #24]
 8003f00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	3301      	adds	r3, #1
 8003f06:	61fb      	str	r3, [r7, #28]
 8003f08:	69fb      	ldr	r3, [r7, #28]
 8003f0a:	2b0f      	cmp	r3, #15
 8003f0c:	f67f aea2 	bls.w	8003c54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f10:	bf00      	nop
 8003f12:	bf00      	nop
 8003f14:	3724      	adds	r7, #36	@ 0x24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40023800 	.word	0x40023800
 8003f24:	40013800 	.word	0x40013800
 8003f28:	40020000 	.word	0x40020000
 8003f2c:	40020400 	.word	0x40020400
 8003f30:	40020800 	.word	0x40020800
 8003f34:	40020c00 	.word	0x40020c00
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	40013c00 	.word	0x40013c00

08003f40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	887b      	ldrh	r3, [r7, #2]
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d002      	beq.n	8003f5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	73fb      	strb	r3, [r7, #15]
 8003f5c:	e001      	b.n	8003f62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	807b      	strh	r3, [r7, #2]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f80:	787b      	ldrb	r3, [r7, #1]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f86:	887a      	ldrh	r2, [r7, #2]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f8c:	e003      	b.n	8003f96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f8e:	887b      	ldrh	r3, [r7, #2]
 8003f90:	041a      	lsls	r2, r3, #16
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	619a      	str	r2, [r3, #24]
}
 8003f96:	bf00      	nop
 8003f98:	370c      	adds	r7, #12
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
	...

08003fa4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003fae:	4b08      	ldr	r3, [pc, #32]	@ (8003fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fb0:	695a      	ldr	r2, [r3, #20]
 8003fb2:	88fb      	ldrh	r3, [r7, #6]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d006      	beq.n	8003fc8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fba:	4a05      	ldr	r2, [pc, #20]	@ (8003fd0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fbc:	88fb      	ldrh	r3, [r7, #6]
 8003fbe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 f806 	bl	8003fd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fc8:	bf00      	nop
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40013c00 	.word	0x40013c00

08003fd4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
	...

08003fec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e267      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d075      	beq.n	80040f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800400a:	4b88      	ldr	r3, [pc, #544]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	2b04      	cmp	r3, #4
 8004014:	d00c      	beq.n	8004030 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004016:	4b85      	ldr	r3, [pc, #532]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800401e:	2b08      	cmp	r3, #8
 8004020:	d112      	bne.n	8004048 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004022:	4b82      	ldr	r3, [pc, #520]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800402a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800402e:	d10b      	bne.n	8004048 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004030:	4b7e      	ldr	r3, [pc, #504]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d05b      	beq.n	80040f4 <HAL_RCC_OscConfig+0x108>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d157      	bne.n	80040f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e242      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004050:	d106      	bne.n	8004060 <HAL_RCC_OscConfig+0x74>
 8004052:	4b76      	ldr	r3, [pc, #472]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a75      	ldr	r2, [pc, #468]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	e01d      	b.n	800409c <HAL_RCC_OscConfig+0xb0>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004068:	d10c      	bne.n	8004084 <HAL_RCC_OscConfig+0x98>
 800406a:	4b70      	ldr	r3, [pc, #448]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a6f      	ldr	r2, [pc, #444]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004070:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004074:	6013      	str	r3, [r2, #0]
 8004076:	4b6d      	ldr	r3, [pc, #436]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a6c      	ldr	r2, [pc, #432]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 800407c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	e00b      	b.n	800409c <HAL_RCC_OscConfig+0xb0>
 8004084:	4b69      	ldr	r3, [pc, #420]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a68      	ldr	r2, [pc, #416]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 800408a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800408e:	6013      	str	r3, [r2, #0]
 8004090:	4b66      	ldr	r3, [pc, #408]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a65      	ldr	r2, [pc, #404]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004096:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800409a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d013      	beq.n	80040cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a4:	f7fe ff88 	bl	8002fb8 <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040ac:	f7fe ff84 	bl	8002fb8 <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b64      	cmp	r3, #100	@ 0x64
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e207      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040be:	4b5b      	ldr	r3, [pc, #364]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0f0      	beq.n	80040ac <HAL_RCC_OscConfig+0xc0>
 80040ca:	e014      	b.n	80040f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040cc:	f7fe ff74 	bl	8002fb8 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d4:	f7fe ff70 	bl	8002fb8 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b64      	cmp	r3, #100	@ 0x64
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e1f3      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040e6:	4b51      	ldr	r3, [pc, #324]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d1f0      	bne.n	80040d4 <HAL_RCC_OscConfig+0xe8>
 80040f2:	e000      	b.n	80040f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d063      	beq.n	80041ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004102:	4b4a      	ldr	r3, [pc, #296]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	f003 030c 	and.w	r3, r3, #12
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00b      	beq.n	8004126 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800410e:	4b47      	ldr	r3, [pc, #284]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004116:	2b08      	cmp	r3, #8
 8004118:	d11c      	bne.n	8004154 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800411a:	4b44      	ldr	r3, [pc, #272]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d116      	bne.n	8004154 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004126:	4b41      	ldr	r3, [pc, #260]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d005      	beq.n	800413e <HAL_RCC_OscConfig+0x152>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d001      	beq.n	800413e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e1c7      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800413e:	4b3b      	ldr	r3, [pc, #236]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	4937      	ldr	r1, [pc, #220]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 800414e:	4313      	orrs	r3, r2
 8004150:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004152:	e03a      	b.n	80041ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d020      	beq.n	800419e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800415c:	4b34      	ldr	r3, [pc, #208]	@ (8004230 <HAL_RCC_OscConfig+0x244>)
 800415e:	2201      	movs	r2, #1
 8004160:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004162:	f7fe ff29 	bl	8002fb8 <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004168:	e008      	b.n	800417c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800416a:	f7fe ff25 	bl	8002fb8 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d901      	bls.n	800417c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e1a8      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417c:	4b2b      	ldr	r3, [pc, #172]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d0f0      	beq.n	800416a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004188:	4b28      	ldr	r3, [pc, #160]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4925      	ldr	r1, [pc, #148]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004198:	4313      	orrs	r3, r2
 800419a:	600b      	str	r3, [r1, #0]
 800419c:	e015      	b.n	80041ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800419e:	4b24      	ldr	r3, [pc, #144]	@ (8004230 <HAL_RCC_OscConfig+0x244>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a4:	f7fe ff08 	bl	8002fb8 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ac:	f7fe ff04 	bl	8002fb8 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e187      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041be:	4b1b      	ldr	r3, [pc, #108]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f003 0302 	and.w	r3, r3, #2
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1f0      	bne.n	80041ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0308 	and.w	r3, r3, #8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d036      	beq.n	8004244 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d016      	beq.n	800420c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041de:	4b15      	ldr	r3, [pc, #84]	@ (8004234 <HAL_RCC_OscConfig+0x248>)
 80041e0:	2201      	movs	r2, #1
 80041e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e4:	f7fe fee8 	bl	8002fb8 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ec:	f7fe fee4 	bl	8002fb8 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e167      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041fe:	4b0b      	ldr	r3, [pc, #44]	@ (800422c <HAL_RCC_OscConfig+0x240>)
 8004200:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0f0      	beq.n	80041ec <HAL_RCC_OscConfig+0x200>
 800420a:	e01b      	b.n	8004244 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800420c:	4b09      	ldr	r3, [pc, #36]	@ (8004234 <HAL_RCC_OscConfig+0x248>)
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004212:	f7fe fed1 	bl	8002fb8 <HAL_GetTick>
 8004216:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004218:	e00e      	b.n	8004238 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800421a:	f7fe fecd 	bl	8002fb8 <HAL_GetTick>
 800421e:	4602      	mov	r2, r0
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	1ad3      	subs	r3, r2, r3
 8004224:	2b02      	cmp	r3, #2
 8004226:	d907      	bls.n	8004238 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004228:	2303      	movs	r3, #3
 800422a:	e150      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
 800422c:	40023800 	.word	0x40023800
 8004230:	42470000 	.word	0x42470000
 8004234:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004238:	4b88      	ldr	r3, [pc, #544]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 800423a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1ea      	bne.n	800421a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 0304 	and.w	r3, r3, #4
 800424c:	2b00      	cmp	r3, #0
 800424e:	f000 8097 	beq.w	8004380 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004252:	2300      	movs	r3, #0
 8004254:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004256:	4b81      	ldr	r3, [pc, #516]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10f      	bne.n	8004282 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	4b7d      	ldr	r3, [pc, #500]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 8004268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426a:	4a7c      	ldr	r2, [pc, #496]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 800426c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004270:	6413      	str	r3, [r2, #64]	@ 0x40
 8004272:	4b7a      	ldr	r3, [pc, #488]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800427a:	60bb      	str	r3, [r7, #8]
 800427c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800427e:	2301      	movs	r3, #1
 8004280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004282:	4b77      	ldr	r3, [pc, #476]	@ (8004460 <HAL_RCC_OscConfig+0x474>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800428a:	2b00      	cmp	r3, #0
 800428c:	d118      	bne.n	80042c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800428e:	4b74      	ldr	r3, [pc, #464]	@ (8004460 <HAL_RCC_OscConfig+0x474>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a73      	ldr	r2, [pc, #460]	@ (8004460 <HAL_RCC_OscConfig+0x474>)
 8004294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800429a:	f7fe fe8d 	bl	8002fb8 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a2:	f7fe fe89 	bl	8002fb8 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e10c      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b4:	4b6a      	ldr	r3, [pc, #424]	@ (8004460 <HAL_RCC_OscConfig+0x474>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d0f0      	beq.n	80042a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d106      	bne.n	80042d6 <HAL_RCC_OscConfig+0x2ea>
 80042c8:	4b64      	ldr	r3, [pc, #400]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 80042ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042cc:	4a63      	ldr	r2, [pc, #396]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80042d4:	e01c      	b.n	8004310 <HAL_RCC_OscConfig+0x324>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	2b05      	cmp	r3, #5
 80042dc:	d10c      	bne.n	80042f8 <HAL_RCC_OscConfig+0x30c>
 80042de:	4b5f      	ldr	r3, [pc, #380]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 80042e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e2:	4a5e      	ldr	r2, [pc, #376]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 80042e4:	f043 0304 	orr.w	r3, r3, #4
 80042e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ea:	4b5c      	ldr	r3, [pc, #368]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ee:	4a5b      	ldr	r2, [pc, #364]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 80042f0:	f043 0301 	orr.w	r3, r3, #1
 80042f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80042f6:	e00b      	b.n	8004310 <HAL_RCC_OscConfig+0x324>
 80042f8:	4b58      	ldr	r3, [pc, #352]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042fc:	4a57      	ldr	r2, [pc, #348]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 80042fe:	f023 0301 	bic.w	r3, r3, #1
 8004302:	6713      	str	r3, [r2, #112]	@ 0x70
 8004304:	4b55      	ldr	r3, [pc, #340]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 8004306:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004308:	4a54      	ldr	r2, [pc, #336]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 800430a:	f023 0304 	bic.w	r3, r3, #4
 800430e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d015      	beq.n	8004344 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004318:	f7fe fe4e 	bl	8002fb8 <HAL_GetTick>
 800431c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431e:	e00a      	b.n	8004336 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004320:	f7fe fe4a 	bl	8002fb8 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800432e:	4293      	cmp	r3, r2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e0cb      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004336:	4b49      	ldr	r3, [pc, #292]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 8004338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d0ee      	beq.n	8004320 <HAL_RCC_OscConfig+0x334>
 8004342:	e014      	b.n	800436e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004344:	f7fe fe38 	bl	8002fb8 <HAL_GetTick>
 8004348:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800434a:	e00a      	b.n	8004362 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800434c:	f7fe fe34 	bl	8002fb8 <HAL_GetTick>
 8004350:	4602      	mov	r2, r0
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	f241 3288 	movw	r2, #5000	@ 0x1388
 800435a:	4293      	cmp	r3, r2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e0b5      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004362:	4b3e      	ldr	r3, [pc, #248]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 8004364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1ee      	bne.n	800434c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800436e:	7dfb      	ldrb	r3, [r7, #23]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d105      	bne.n	8004380 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004374:	4b39      	ldr	r3, [pc, #228]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 8004376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004378:	4a38      	ldr	r2, [pc, #224]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 800437a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800437e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80a1 	beq.w	80044cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800438a:	4b34      	ldr	r3, [pc, #208]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	2b08      	cmp	r3, #8
 8004394:	d05c      	beq.n	8004450 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2b02      	cmp	r3, #2
 800439c:	d141      	bne.n	8004422 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800439e:	4b31      	ldr	r3, [pc, #196]	@ (8004464 <HAL_RCC_OscConfig+0x478>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043a4:	f7fe fe08 	bl	8002fb8 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043ac:	f7fe fe04 	bl	8002fb8 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e087      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043be:	4b27      	ldr	r3, [pc, #156]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69da      	ldr	r2, [r3, #28]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d8:	019b      	lsls	r3, r3, #6
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e0:	085b      	lsrs	r3, r3, #1
 80043e2:	3b01      	subs	r3, #1
 80043e4:	041b      	lsls	r3, r3, #16
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ec:	061b      	lsls	r3, r3, #24
 80043ee:	491b      	ldr	r1, [pc, #108]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004464 <HAL_RCC_OscConfig+0x478>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043fa:	f7fe fddd 	bl	8002fb8 <HAL_GetTick>
 80043fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004402:	f7fe fdd9 	bl	8002fb8 <HAL_GetTick>
 8004406:	4602      	mov	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e05c      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004414:	4b11      	ldr	r3, [pc, #68]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d0f0      	beq.n	8004402 <HAL_RCC_OscConfig+0x416>
 8004420:	e054      	b.n	80044cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004422:	4b10      	ldr	r3, [pc, #64]	@ (8004464 <HAL_RCC_OscConfig+0x478>)
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fe fdc6 	bl	8002fb8 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004430:	f7fe fdc2 	bl	8002fb8 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e045      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004442:	4b06      	ldr	r3, [pc, #24]	@ (800445c <HAL_RCC_OscConfig+0x470>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0x444>
 800444e:	e03d      	b.n	80044cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d107      	bne.n	8004468 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e038      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
 800445c:	40023800 	.word	0x40023800
 8004460:	40007000 	.word	0x40007000
 8004464:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004468:	4b1b      	ldr	r3, [pc, #108]	@ (80044d8 <HAL_RCC_OscConfig+0x4ec>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d028      	beq.n	80044c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004480:	429a      	cmp	r2, r3
 8004482:	d121      	bne.n	80044c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800448e:	429a      	cmp	r2, r3
 8004490:	d11a      	bne.n	80044c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004498:	4013      	ands	r3, r2
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800449e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d111      	bne.n	80044c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ae:	085b      	lsrs	r3, r3, #1
 80044b0:	3b01      	subs	r3, #1
 80044b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d107      	bne.n	80044c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d001      	beq.n	80044cc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3718      	adds	r7, #24
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	40023800 	.word	0x40023800

080044dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e0cc      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044f0:	4b68      	ldr	r3, [pc, #416]	@ (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d90c      	bls.n	8004518 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044fe:	4b65      	ldr	r3, [pc, #404]	@ (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004506:	4b63      	ldr	r3, [pc, #396]	@ (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0307 	and.w	r3, r3, #7
 800450e:	683a      	ldr	r2, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d001      	beq.n	8004518 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0b8      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0302 	and.w	r3, r3, #2
 8004520:	2b00      	cmp	r3, #0
 8004522:	d020      	beq.n	8004566 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0304 	and.w	r3, r3, #4
 800452c:	2b00      	cmp	r3, #0
 800452e:	d005      	beq.n	800453c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004530:	4b59      	ldr	r3, [pc, #356]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	4a58      	ldr	r2, [pc, #352]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004536:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800453a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d005      	beq.n	8004554 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004548:	4b53      	ldr	r3, [pc, #332]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	4a52      	ldr	r2, [pc, #328]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004552:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004554:	4b50      	ldr	r3, [pc, #320]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	494d      	ldr	r1, [pc, #308]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	4313      	orrs	r3, r2
 8004564:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d044      	beq.n	80045fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d107      	bne.n	800458a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800457a:	4b47      	ldr	r3, [pc, #284]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d119      	bne.n	80045ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e07f      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b02      	cmp	r3, #2
 8004590:	d003      	beq.n	800459a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004596:	2b03      	cmp	r3, #3
 8004598:	d107      	bne.n	80045aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800459a:	4b3f      	ldr	r3, [pc, #252]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d109      	bne.n	80045ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e06f      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e067      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ba:	4b37      	ldr	r3, [pc, #220]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f023 0203 	bic.w	r2, r3, #3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	4934      	ldr	r1, [pc, #208]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045cc:	f7fe fcf4 	bl	8002fb8 <HAL_GetTick>
 80045d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045d2:	e00a      	b.n	80045ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045d4:	f7fe fcf0 	bl	8002fb8 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e04f      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ea:	4b2b      	ldr	r3, [pc, #172]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f003 020c 	and.w	r2, r3, #12
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d1eb      	bne.n	80045d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045fc:	4b25      	ldr	r3, [pc, #148]	@ (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d20c      	bcs.n	8004624 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460a:	4b22      	ldr	r3, [pc, #136]	@ (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004612:	4b20      	ldr	r3, [pc, #128]	@ (8004694 <HAL_RCC_ClockConfig+0x1b8>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	429a      	cmp	r2, r3
 800461e:	d001      	beq.n	8004624 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e032      	b.n	800468a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0304 	and.w	r3, r3, #4
 800462c:	2b00      	cmp	r3, #0
 800462e:	d008      	beq.n	8004642 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004630:	4b19      	ldr	r3, [pc, #100]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68db      	ldr	r3, [r3, #12]
 800463c:	4916      	ldr	r1, [pc, #88]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	4313      	orrs	r3, r2
 8004640:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800464e:	4b12      	ldr	r3, [pc, #72]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	490e      	ldr	r1, [pc, #56]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	4313      	orrs	r3, r2
 8004660:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004662:	f000 f821 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 8004666:	4602      	mov	r2, r0
 8004668:	4b0b      	ldr	r3, [pc, #44]	@ (8004698 <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	091b      	lsrs	r3, r3, #4
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	490a      	ldr	r1, [pc, #40]	@ (800469c <HAL_RCC_ClockConfig+0x1c0>)
 8004674:	5ccb      	ldrb	r3, [r1, r3]
 8004676:	fa22 f303 	lsr.w	r3, r2, r3
 800467a:	4a09      	ldr	r2, [pc, #36]	@ (80046a0 <HAL_RCC_ClockConfig+0x1c4>)
 800467c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800467e:	4b09      	ldr	r3, [pc, #36]	@ (80046a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4618      	mov	r0, r3
 8004684:	f7fe fc54 	bl	8002f30 <HAL_InitTick>

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3710      	adds	r7, #16
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40023c00 	.word	0x40023c00
 8004698:	40023800 	.word	0x40023800
 800469c:	0800ba3c 	.word	0x0800ba3c
 80046a0:	20000020 	.word	0x20000020
 80046a4:	20000024 	.word	0x20000024

080046a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046ac:	b094      	sub	sp, #80	@ 0x50
 80046ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046c0:	4b79      	ldr	r3, [pc, #484]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f003 030c 	and.w	r3, r3, #12
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d00d      	beq.n	80046e8 <HAL_RCC_GetSysClockFreq+0x40>
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	f200 80e1 	bhi.w	8004894 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d002      	beq.n	80046dc <HAL_RCC_GetSysClockFreq+0x34>
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d003      	beq.n	80046e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80046da:	e0db      	b.n	8004894 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046dc:	4b73      	ldr	r3, [pc, #460]	@ (80048ac <HAL_RCC_GetSysClockFreq+0x204>)
 80046de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046e0:	e0db      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046e2:	4b73      	ldr	r3, [pc, #460]	@ (80048b0 <HAL_RCC_GetSysClockFreq+0x208>)
 80046e4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046e6:	e0d8      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046e8:	4b6f      	ldr	r3, [pc, #444]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046f0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046f2:	4b6d      	ldr	r3, [pc, #436]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d063      	beq.n	80047c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046fe:	4b6a      	ldr	r3, [pc, #424]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	099b      	lsrs	r3, r3, #6
 8004704:	2200      	movs	r2, #0
 8004706:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004708:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800470a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800470c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004710:	633b      	str	r3, [r7, #48]	@ 0x30
 8004712:	2300      	movs	r3, #0
 8004714:	637b      	str	r3, [r7, #52]	@ 0x34
 8004716:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800471a:	4622      	mov	r2, r4
 800471c:	462b      	mov	r3, r5
 800471e:	f04f 0000 	mov.w	r0, #0
 8004722:	f04f 0100 	mov.w	r1, #0
 8004726:	0159      	lsls	r1, r3, #5
 8004728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800472c:	0150      	lsls	r0, r2, #5
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4621      	mov	r1, r4
 8004734:	1a51      	subs	r1, r2, r1
 8004736:	6139      	str	r1, [r7, #16]
 8004738:	4629      	mov	r1, r5
 800473a:	eb63 0301 	sbc.w	r3, r3, r1
 800473e:	617b      	str	r3, [r7, #20]
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800474c:	4659      	mov	r1, fp
 800474e:	018b      	lsls	r3, r1, #6
 8004750:	4651      	mov	r1, sl
 8004752:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004756:	4651      	mov	r1, sl
 8004758:	018a      	lsls	r2, r1, #6
 800475a:	4651      	mov	r1, sl
 800475c:	ebb2 0801 	subs.w	r8, r2, r1
 8004760:	4659      	mov	r1, fp
 8004762:	eb63 0901 	sbc.w	r9, r3, r1
 8004766:	f04f 0200 	mov.w	r2, #0
 800476a:	f04f 0300 	mov.w	r3, #0
 800476e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004772:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004776:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800477a:	4690      	mov	r8, r2
 800477c:	4699      	mov	r9, r3
 800477e:	4623      	mov	r3, r4
 8004780:	eb18 0303 	adds.w	r3, r8, r3
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	462b      	mov	r3, r5
 8004788:	eb49 0303 	adc.w	r3, r9, r3
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800479a:	4629      	mov	r1, r5
 800479c:	024b      	lsls	r3, r1, #9
 800479e:	4621      	mov	r1, r4
 80047a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047a4:	4621      	mov	r1, r4
 80047a6:	024a      	lsls	r2, r1, #9
 80047a8:	4610      	mov	r0, r2
 80047aa:	4619      	mov	r1, r3
 80047ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047ae:	2200      	movs	r2, #0
 80047b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80047b8:	f7fc fa7e 	bl	8000cb8 <__aeabi_uldivmod>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4613      	mov	r3, r2
 80047c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047c4:	e058      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047c6:	4b38      	ldr	r3, [pc, #224]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x200>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	099b      	lsrs	r3, r3, #6
 80047cc:	2200      	movs	r2, #0
 80047ce:	4618      	mov	r0, r3
 80047d0:	4611      	mov	r1, r2
 80047d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047d6:	623b      	str	r3, [r7, #32]
 80047d8:	2300      	movs	r3, #0
 80047da:	627b      	str	r3, [r7, #36]	@ 0x24
 80047dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047e0:	4642      	mov	r2, r8
 80047e2:	464b      	mov	r3, r9
 80047e4:	f04f 0000 	mov.w	r0, #0
 80047e8:	f04f 0100 	mov.w	r1, #0
 80047ec:	0159      	lsls	r1, r3, #5
 80047ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047f2:	0150      	lsls	r0, r2, #5
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	4641      	mov	r1, r8
 80047fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80047fe:	4649      	mov	r1, r9
 8004800:	eb63 0b01 	sbc.w	fp, r3, r1
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004810:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004814:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004818:	ebb2 040a 	subs.w	r4, r2, sl
 800481c:	eb63 050b 	sbc.w	r5, r3, fp
 8004820:	f04f 0200 	mov.w	r2, #0
 8004824:	f04f 0300 	mov.w	r3, #0
 8004828:	00eb      	lsls	r3, r5, #3
 800482a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800482e:	00e2      	lsls	r2, r4, #3
 8004830:	4614      	mov	r4, r2
 8004832:	461d      	mov	r5, r3
 8004834:	4643      	mov	r3, r8
 8004836:	18e3      	adds	r3, r4, r3
 8004838:	603b      	str	r3, [r7, #0]
 800483a:	464b      	mov	r3, r9
 800483c:	eb45 0303 	adc.w	r3, r5, r3
 8004840:	607b      	str	r3, [r7, #4]
 8004842:	f04f 0200 	mov.w	r2, #0
 8004846:	f04f 0300 	mov.w	r3, #0
 800484a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800484e:	4629      	mov	r1, r5
 8004850:	028b      	lsls	r3, r1, #10
 8004852:	4621      	mov	r1, r4
 8004854:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004858:	4621      	mov	r1, r4
 800485a:	028a      	lsls	r2, r1, #10
 800485c:	4610      	mov	r0, r2
 800485e:	4619      	mov	r1, r3
 8004860:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004862:	2200      	movs	r2, #0
 8004864:	61bb      	str	r3, [r7, #24]
 8004866:	61fa      	str	r2, [r7, #28]
 8004868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800486c:	f7fc fa24 	bl	8000cb8 <__aeabi_uldivmod>
 8004870:	4602      	mov	r2, r0
 8004872:	460b      	mov	r3, r1
 8004874:	4613      	mov	r3, r2
 8004876:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004878:	4b0b      	ldr	r3, [pc, #44]	@ (80048a8 <HAL_RCC_GetSysClockFreq+0x200>)
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	0c1b      	lsrs	r3, r3, #16
 800487e:	f003 0303 	and.w	r3, r3, #3
 8004882:	3301      	adds	r3, #1
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004888:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800488a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800488c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004890:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004892:	e002      	b.n	800489a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004894:	4b05      	ldr	r3, [pc, #20]	@ (80048ac <HAL_RCC_GetSysClockFreq+0x204>)
 8004896:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800489a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800489c:	4618      	mov	r0, r3
 800489e:	3750      	adds	r7, #80	@ 0x50
 80048a0:	46bd      	mov	sp, r7
 80048a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048a6:	bf00      	nop
 80048a8:	40023800 	.word	0x40023800
 80048ac:	00f42400 	.word	0x00f42400
 80048b0:	007a1200 	.word	0x007a1200

080048b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048b4:	b480      	push	{r7}
 80048b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048b8:	4b03      	ldr	r3, [pc, #12]	@ (80048c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80048ba:	681b      	ldr	r3, [r3, #0]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	20000020 	.word	0x20000020

080048cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048d0:	f7ff fff0 	bl	80048b4 <HAL_RCC_GetHCLKFreq>
 80048d4:	4602      	mov	r2, r0
 80048d6:	4b05      	ldr	r3, [pc, #20]	@ (80048ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	0a9b      	lsrs	r3, r3, #10
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	4903      	ldr	r1, [pc, #12]	@ (80048f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048e2:	5ccb      	ldrb	r3, [r1, r3]
 80048e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40023800 	.word	0x40023800
 80048f0:	0800ba4c 	.word	0x0800ba4c

080048f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048f8:	f7ff ffdc 	bl	80048b4 <HAL_RCC_GetHCLKFreq>
 80048fc:	4602      	mov	r2, r0
 80048fe:	4b05      	ldr	r3, [pc, #20]	@ (8004914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	0b5b      	lsrs	r3, r3, #13
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	4903      	ldr	r1, [pc, #12]	@ (8004918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800490a:	5ccb      	ldrb	r3, [r1, r3]
 800490c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004910:	4618      	mov	r0, r3
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40023800 	.word	0x40023800
 8004918:	0800ba4c 	.word	0x0800ba4c

0800491c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b082      	sub	sp, #8
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d101      	bne.n	800492e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e041      	b.n	80049b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d106      	bne.n	8004948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f7fe f810 	bl	8002968 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	3304      	adds	r3, #4
 8004958:	4619      	mov	r1, r3
 800495a:	4610      	mov	r0, r2
 800495c:	f000 fcf0 	bl	8005340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3708      	adds	r7, #8
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
	...

080049bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d001      	beq.n	80049d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e044      	b.n	8004a5e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68da      	ldr	r2, [r3, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f042 0201 	orr.w	r2, r2, #1
 80049ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a1e      	ldr	r2, [pc, #120]	@ (8004a6c <HAL_TIM_Base_Start_IT+0xb0>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d018      	beq.n	8004a28 <HAL_TIM_Base_Start_IT+0x6c>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049fe:	d013      	beq.n	8004a28 <HAL_TIM_Base_Start_IT+0x6c>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a1a      	ldr	r2, [pc, #104]	@ (8004a70 <HAL_TIM_Base_Start_IT+0xb4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00e      	beq.n	8004a28 <HAL_TIM_Base_Start_IT+0x6c>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a19      	ldr	r2, [pc, #100]	@ (8004a74 <HAL_TIM_Base_Start_IT+0xb8>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d009      	beq.n	8004a28 <HAL_TIM_Base_Start_IT+0x6c>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a17      	ldr	r2, [pc, #92]	@ (8004a78 <HAL_TIM_Base_Start_IT+0xbc>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d004      	beq.n	8004a28 <HAL_TIM_Base_Start_IT+0x6c>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a16      	ldr	r2, [pc, #88]	@ (8004a7c <HAL_TIM_Base_Start_IT+0xc0>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d111      	bne.n	8004a4c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 0307 	and.w	r3, r3, #7
 8004a32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2b06      	cmp	r3, #6
 8004a38:	d010      	beq.n	8004a5c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0201 	orr.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a4a:	e007      	b.n	8004a5c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f042 0201 	orr.w	r2, r2, #1
 8004a5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40010000 	.word	0x40010000
 8004a70:	40000400 	.word	0x40000400
 8004a74:	40000800 	.word	0x40000800
 8004a78:	40000c00 	.word	0x40000c00
 8004a7c:	40014000 	.word	0x40014000

08004a80 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b082      	sub	sp, #8
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d101      	bne.n	8004a92 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e041      	b.n	8004b16 <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d106      	bne.n	8004aac <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f839 	bl	8004b1e <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2202      	movs	r2, #2
 8004ab0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3304      	adds	r3, #4
 8004abc:	4619      	mov	r1, r3
 8004abe:	4610      	mov	r0, r2
 8004ac0:	f000 fc3e 	bl	8005340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	b083      	sub	sp, #12
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8004b26:	bf00      	nop
 8004b28:	370c      	adds	r7, #12
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e041      	b.n	8004bc8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d106      	bne.n	8004b5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f839 	bl	8004bd0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2202      	movs	r2, #2
 8004b62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f000 fbe5 	bl	8005340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2201      	movs	r2, #1
 8004b7a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2201      	movs	r2, #1
 8004b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3708      	adds	r7, #8
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d109      	bne.n	8004c08 <HAL_TIM_PWM_Start+0x24>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	bf14      	ite	ne
 8004c00:	2301      	movne	r3, #1
 8004c02:	2300      	moveq	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	e022      	b.n	8004c4e <HAL_TIM_PWM_Start+0x6a>
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d109      	bne.n	8004c22 <HAL_TIM_PWM_Start+0x3e>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	bf14      	ite	ne
 8004c1a:	2301      	movne	r3, #1
 8004c1c:	2300      	moveq	r3, #0
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	e015      	b.n	8004c4e <HAL_TIM_PWM_Start+0x6a>
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d109      	bne.n	8004c3c <HAL_TIM_PWM_Start+0x58>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	bf14      	ite	ne
 8004c34:	2301      	movne	r3, #1
 8004c36:	2300      	moveq	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	e008      	b.n	8004c4e <HAL_TIM_PWM_Start+0x6a>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	bf14      	ite	ne
 8004c48:	2301      	movne	r3, #1
 8004c4a:	2300      	moveq	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e068      	b.n	8004d28 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d104      	bne.n	8004c66 <HAL_TIM_PWM_Start+0x82>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2202      	movs	r2, #2
 8004c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c64:	e013      	b.n	8004c8e <HAL_TIM_PWM_Start+0xaa>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d104      	bne.n	8004c76 <HAL_TIM_PWM_Start+0x92>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c74:	e00b      	b.n	8004c8e <HAL_TIM_PWM_Start+0xaa>
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b08      	cmp	r3, #8
 8004c7a:	d104      	bne.n	8004c86 <HAL_TIM_PWM_Start+0xa2>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c84:	e003      	b.n	8004c8e <HAL_TIM_PWM_Start+0xaa>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2202      	movs	r2, #2
 8004c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2201      	movs	r2, #1
 8004c94:	6839      	ldr	r1, [r7, #0]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fdfe 	bl	8005898 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a23      	ldr	r2, [pc, #140]	@ (8004d30 <HAL_TIM_PWM_Start+0x14c>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d107      	bne.n	8004cb6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004cb4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1d      	ldr	r2, [pc, #116]	@ (8004d30 <HAL_TIM_PWM_Start+0x14c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d018      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x10e>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cc8:	d013      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x10e>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a19      	ldr	r2, [pc, #100]	@ (8004d34 <HAL_TIM_PWM_Start+0x150>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d00e      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x10e>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a17      	ldr	r2, [pc, #92]	@ (8004d38 <HAL_TIM_PWM_Start+0x154>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d009      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x10e>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a16      	ldr	r2, [pc, #88]	@ (8004d3c <HAL_TIM_PWM_Start+0x158>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d004      	beq.n	8004cf2 <HAL_TIM_PWM_Start+0x10e>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a14      	ldr	r2, [pc, #80]	@ (8004d40 <HAL_TIM_PWM_Start+0x15c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d111      	bne.n	8004d16 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b06      	cmp	r3, #6
 8004d02:	d010      	beq.n	8004d26 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d14:	e007      	b.n	8004d26 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f042 0201 	orr.w	r2, r2, #1
 8004d24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40010000 	.word	0x40010000
 8004d34:	40000400 	.word	0x40000400
 8004d38:	40000800 	.word	0x40000800
 8004d3c:	40000c00 	.word	0x40000c00
 8004d40:	40014000 	.word	0x40014000

08004d44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d020      	beq.n	8004da8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d01b      	beq.n	8004da8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f06f 0202 	mvn.w	r2, #2
 8004d78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699b      	ldr	r3, [r3, #24]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fab7 	bl	8005302 <HAL_TIM_IC_CaptureCallback>
 8004d94:	e005      	b.n	8004da2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 faa9 	bl	80052ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 faba 	bl	8005316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	f003 0304 	and.w	r3, r3, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d020      	beq.n	8004df4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01b      	beq.n	8004df4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0204 	mvn.w	r2, #4
 8004dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2202      	movs	r2, #2
 8004dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fa91 	bl	8005302 <HAL_TIM_IC_CaptureCallback>
 8004de0:	e005      	b.n	8004dee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fa83 	bl	80052ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fa94 	bl	8005316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d020      	beq.n	8004e40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01b      	beq.n	8004e40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f06f 0208 	mvn.w	r2, #8
 8004e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2204      	movs	r2, #4
 8004e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	69db      	ldr	r3, [r3, #28]
 8004e1e:	f003 0303 	and.w	r3, r3, #3
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d003      	beq.n	8004e2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fa6b 	bl	8005302 <HAL_TIM_IC_CaptureCallback>
 8004e2c:	e005      	b.n	8004e3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fa5d 	bl	80052ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 fa6e 	bl	8005316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	f003 0310 	and.w	r3, r3, #16
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d020      	beq.n	8004e8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	f003 0310 	and.w	r3, r3, #16
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d01b      	beq.n	8004e8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f06f 0210 	mvn.w	r2, #16
 8004e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2208      	movs	r2, #8
 8004e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	69db      	ldr	r3, [r3, #28]
 8004e6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d003      	beq.n	8004e7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fa45 	bl	8005302 <HAL_TIM_IC_CaptureCallback>
 8004e78:	e005      	b.n	8004e86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f000 fa37 	bl	80052ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 fa48 	bl	8005316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00c      	beq.n	8004eb0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d007      	beq.n	8004eb0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0201 	mvn.w	r2, #1
 8004ea8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f7fc fc54 	bl	8001758 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00c      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d007      	beq.n	8004ed4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fdd2 	bl	8005a78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d00c      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d007      	beq.n	8004ef8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 fa19 	bl	800532a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	f003 0320 	and.w	r3, r3, #32
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00c      	beq.n	8004f1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f003 0320 	and.w	r3, r3, #32
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d007      	beq.n	8004f1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f06f 0220 	mvn.w	r2, #32
 8004f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 fda4 	bl	8005a64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f1c:	bf00      	nop
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	60f8      	str	r0, [r7, #12]
 8004f2c:	60b9      	str	r1, [r7, #8]
 8004f2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f30:	2300      	movs	r3, #0
 8004f32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d101      	bne.n	8004f42 <HAL_TIM_OC_ConfigChannel+0x1e>
 8004f3e:	2302      	movs	r3, #2
 8004f40:	e048      	b.n	8004fd4 <HAL_TIM_OC_ConfigChannel+0xb0>
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2b0c      	cmp	r3, #12
 8004f4e:	d839      	bhi.n	8004fc4 <HAL_TIM_OC_ConfigChannel+0xa0>
 8004f50:	a201      	add	r2, pc, #4	@ (adr r2, 8004f58 <HAL_TIM_OC_ConfigChannel+0x34>)
 8004f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f56:	bf00      	nop
 8004f58:	08004f8d 	.word	0x08004f8d
 8004f5c:	08004fc5 	.word	0x08004fc5
 8004f60:	08004fc5 	.word	0x08004fc5
 8004f64:	08004fc5 	.word	0x08004fc5
 8004f68:	08004f9b 	.word	0x08004f9b
 8004f6c:	08004fc5 	.word	0x08004fc5
 8004f70:	08004fc5 	.word	0x08004fc5
 8004f74:	08004fc5 	.word	0x08004fc5
 8004f78:	08004fa9 	.word	0x08004fa9
 8004f7c:	08004fc5 	.word	0x08004fc5
 8004f80:	08004fc5 	.word	0x08004fc5
 8004f84:	08004fc5 	.word	0x08004fc5
 8004f88:	08004fb7 	.word	0x08004fb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68b9      	ldr	r1, [r7, #8]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 fa5a 	bl	800544c <TIM_OC1_SetConfig>
      break;
 8004f98:	e017      	b.n	8004fca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fab9 	bl	8005518 <TIM_OC2_SetConfig>
      break;
 8004fa6:	e010      	b.n	8004fca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68b9      	ldr	r1, [r7, #8]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fb1e 	bl	80055f0 <TIM_OC3_SetConfig>
      break;
 8004fb4:	e009      	b.n	8004fca <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 fb81 	bl	80056c4 <TIM_OC4_SetConfig>
      break;
 8004fc2:	e002      	b.n	8004fca <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	75fb      	strb	r3, [r7, #23]
      break;
 8004fc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3718      	adds	r7, #24
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e0ae      	b.n	8005158 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2b0c      	cmp	r3, #12
 8005006:	f200 809f 	bhi.w	8005148 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800500a:	a201      	add	r2, pc, #4	@ (adr r2, 8005010 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800500c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005010:	08005045 	.word	0x08005045
 8005014:	08005149 	.word	0x08005149
 8005018:	08005149 	.word	0x08005149
 800501c:	08005149 	.word	0x08005149
 8005020:	08005085 	.word	0x08005085
 8005024:	08005149 	.word	0x08005149
 8005028:	08005149 	.word	0x08005149
 800502c:	08005149 	.word	0x08005149
 8005030:	080050c7 	.word	0x080050c7
 8005034:	08005149 	.word	0x08005149
 8005038:	08005149 	.word	0x08005149
 800503c:	08005149 	.word	0x08005149
 8005040:	08005107 	.word	0x08005107
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68b9      	ldr	r1, [r7, #8]
 800504a:	4618      	mov	r0, r3
 800504c:	f000 f9fe 	bl	800544c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699a      	ldr	r2, [r3, #24]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0208 	orr.w	r2, r2, #8
 800505e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	699a      	ldr	r2, [r3, #24]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f022 0204 	bic.w	r2, r2, #4
 800506e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	6999      	ldr	r1, [r3, #24]
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	691a      	ldr	r2, [r3, #16]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	619a      	str	r2, [r3, #24]
      break;
 8005082:	e064      	b.n	800514e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	4618      	mov	r0, r3
 800508c:	f000 fa44 	bl	8005518 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	699a      	ldr	r2, [r3, #24]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800509e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	699a      	ldr	r2, [r3, #24]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	6999      	ldr	r1, [r3, #24]
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	021a      	lsls	r2, r3, #8
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	430a      	orrs	r2, r1
 80050c2:	619a      	str	r2, [r3, #24]
      break;
 80050c4:	e043      	b.n	800514e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68b9      	ldr	r1, [r7, #8]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fa8f 	bl	80055f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69da      	ldr	r2, [r3, #28]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f042 0208 	orr.w	r2, r2, #8
 80050e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	69da      	ldr	r2, [r3, #28]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0204 	bic.w	r2, r2, #4
 80050f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69d9      	ldr	r1, [r3, #28]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	430a      	orrs	r2, r1
 8005102:	61da      	str	r2, [r3, #28]
      break;
 8005104:	e023      	b.n	800514e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68b9      	ldr	r1, [r7, #8]
 800510c:	4618      	mov	r0, r3
 800510e:	f000 fad9 	bl	80056c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	69da      	ldr	r2, [r3, #28]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69d9      	ldr	r1, [r3, #28]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	691b      	ldr	r3, [r3, #16]
 800513c:	021a      	lsls	r2, r3, #8
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	430a      	orrs	r2, r1
 8005144:	61da      	str	r2, [r3, #28]
      break;
 8005146:	e002      	b.n	800514e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	75fb      	strb	r3, [r7, #23]
      break;
 800514c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005156:	7dfb      	ldrb	r3, [r7, #23]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3718      	adds	r7, #24
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}

08005160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_TIM_ConfigClockSource+0x1c>
 8005178:	2302      	movs	r3, #2
 800517a:	e0b4      	b.n	80052e6 <HAL_TIM_ConfigClockSource+0x186>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800519a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80051a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051b4:	d03e      	beq.n	8005234 <HAL_TIM_ConfigClockSource+0xd4>
 80051b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051ba:	f200 8087 	bhi.w	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051c2:	f000 8086 	beq.w	80052d2 <HAL_TIM_ConfigClockSource+0x172>
 80051c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051ca:	d87f      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051cc:	2b70      	cmp	r3, #112	@ 0x70
 80051ce:	d01a      	beq.n	8005206 <HAL_TIM_ConfigClockSource+0xa6>
 80051d0:	2b70      	cmp	r3, #112	@ 0x70
 80051d2:	d87b      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051d4:	2b60      	cmp	r3, #96	@ 0x60
 80051d6:	d050      	beq.n	800527a <HAL_TIM_ConfigClockSource+0x11a>
 80051d8:	2b60      	cmp	r3, #96	@ 0x60
 80051da:	d877      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051dc:	2b50      	cmp	r3, #80	@ 0x50
 80051de:	d03c      	beq.n	800525a <HAL_TIM_ConfigClockSource+0xfa>
 80051e0:	2b50      	cmp	r3, #80	@ 0x50
 80051e2:	d873      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051e4:	2b40      	cmp	r3, #64	@ 0x40
 80051e6:	d058      	beq.n	800529a <HAL_TIM_ConfigClockSource+0x13a>
 80051e8:	2b40      	cmp	r3, #64	@ 0x40
 80051ea:	d86f      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051ec:	2b30      	cmp	r3, #48	@ 0x30
 80051ee:	d064      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x15a>
 80051f0:	2b30      	cmp	r3, #48	@ 0x30
 80051f2:	d86b      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051f4:	2b20      	cmp	r3, #32
 80051f6:	d060      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x15a>
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	d867      	bhi.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d05c      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x15a>
 8005200:	2b10      	cmp	r3, #16
 8005202:	d05a      	beq.n	80052ba <HAL_TIM_ConfigClockSource+0x15a>
 8005204:	e062      	b.n	80052cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005216:	f000 fb1f 	bl	8005858 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005228:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	609a      	str	r2, [r3, #8]
      break;
 8005232:	e04f      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005244:	f000 fb08 	bl	8005858 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689a      	ldr	r2, [r3, #8]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005256:	609a      	str	r2, [r3, #8]
      break;
 8005258:	e03c      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005266:	461a      	mov	r2, r3
 8005268:	f000 fa7c 	bl	8005764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2150      	movs	r1, #80	@ 0x50
 8005272:	4618      	mov	r0, r3
 8005274:	f000 fad5 	bl	8005822 <TIM_ITRx_SetConfig>
      break;
 8005278:	e02c      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005286:	461a      	mov	r2, r3
 8005288:	f000 fa9b 	bl	80057c2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	2160      	movs	r1, #96	@ 0x60
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fac5 	bl	8005822 <TIM_ITRx_SetConfig>
      break;
 8005298:	e01c      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052a6:	461a      	mov	r2, r3
 80052a8:	f000 fa5c 	bl	8005764 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2140      	movs	r1, #64	@ 0x40
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fab5 	bl	8005822 <TIM_ITRx_SetConfig>
      break;
 80052b8:	e00c      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4619      	mov	r1, r3
 80052c4:	4610      	mov	r0, r2
 80052c6:	f000 faac 	bl	8005822 <TIM_ITRx_SetConfig>
      break;
 80052ca:	e003      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	73fb      	strb	r3, [r7, #15]
      break;
 80052d0:	e000      	b.n	80052d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80052d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052f6:	bf00      	nop
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr

08005302 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800530a:	bf00      	nop
 800530c:	370c      	adds	r7, #12
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr

08005316 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005316:	b480      	push	{r7}
 8005318:	b083      	sub	sp, #12
 800531a:	af00      	add	r7, sp, #0
 800531c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800531e:	bf00      	nop
 8005320:	370c      	adds	r7, #12
 8005322:	46bd      	mov	sp, r7
 8005324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005328:	4770      	bx	lr

0800532a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
	...

08005340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a37      	ldr	r2, [pc, #220]	@ (8005430 <TIM_Base_SetConfig+0xf0>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d00f      	beq.n	8005378 <TIM_Base_SetConfig+0x38>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800535e:	d00b      	beq.n	8005378 <TIM_Base_SetConfig+0x38>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	4a34      	ldr	r2, [pc, #208]	@ (8005434 <TIM_Base_SetConfig+0xf4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d007      	beq.n	8005378 <TIM_Base_SetConfig+0x38>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a33      	ldr	r2, [pc, #204]	@ (8005438 <TIM_Base_SetConfig+0xf8>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d003      	beq.n	8005378 <TIM_Base_SetConfig+0x38>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a32      	ldr	r2, [pc, #200]	@ (800543c <TIM_Base_SetConfig+0xfc>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d108      	bne.n	800538a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800537e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4313      	orrs	r3, r2
 8005388:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a28      	ldr	r2, [pc, #160]	@ (8005430 <TIM_Base_SetConfig+0xf0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d01b      	beq.n	80053ca <TIM_Base_SetConfig+0x8a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005398:	d017      	beq.n	80053ca <TIM_Base_SetConfig+0x8a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a25      	ldr	r2, [pc, #148]	@ (8005434 <TIM_Base_SetConfig+0xf4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d013      	beq.n	80053ca <TIM_Base_SetConfig+0x8a>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	4a24      	ldr	r2, [pc, #144]	@ (8005438 <TIM_Base_SetConfig+0xf8>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d00f      	beq.n	80053ca <TIM_Base_SetConfig+0x8a>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a23      	ldr	r2, [pc, #140]	@ (800543c <TIM_Base_SetConfig+0xfc>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d00b      	beq.n	80053ca <TIM_Base_SetConfig+0x8a>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a22      	ldr	r2, [pc, #136]	@ (8005440 <TIM_Base_SetConfig+0x100>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d007      	beq.n	80053ca <TIM_Base_SetConfig+0x8a>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a21      	ldr	r2, [pc, #132]	@ (8005444 <TIM_Base_SetConfig+0x104>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d003      	beq.n	80053ca <TIM_Base_SetConfig+0x8a>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a20      	ldr	r2, [pc, #128]	@ (8005448 <TIM_Base_SetConfig+0x108>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d108      	bne.n	80053dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	689a      	ldr	r2, [r3, #8]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a0c      	ldr	r2, [pc, #48]	@ (8005430 <TIM_Base_SetConfig+0xf0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d103      	bne.n	800540a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	691a      	ldr	r2, [r3, #16]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f043 0204 	orr.w	r2, r3, #4
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2201      	movs	r2, #1
 800541a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	601a      	str	r2, [r3, #0]
}
 8005422:	bf00      	nop
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40010000 	.word	0x40010000
 8005434:	40000400 	.word	0x40000400
 8005438:	40000800 	.word	0x40000800
 800543c:	40000c00 	.word	0x40000c00
 8005440:	40014000 	.word	0x40014000
 8005444:	40014400 	.word	0x40014400
 8005448:	40014800 	.word	0x40014800

0800544c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	f023 0201 	bic.w	r2, r3, #1
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800547a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f023 0303 	bic.w	r3, r3, #3
 8005482:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f023 0302 	bic.w	r3, r3, #2
 8005494:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	4313      	orrs	r3, r2
 800549e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005514 <TIM_OC1_SetConfig+0xc8>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d10c      	bne.n	80054c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f023 0308 	bic.w	r3, r3, #8
 80054ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	f023 0304 	bic.w	r3, r3, #4
 80054c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a13      	ldr	r2, [pc, #76]	@ (8005514 <TIM_OC1_SetConfig+0xc8>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d111      	bne.n	80054ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	693a      	ldr	r2, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	699b      	ldr	r3, [r3, #24]
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	621a      	str	r2, [r3, #32]
}
 8005508:	bf00      	nop
 800550a:	371c      	adds	r7, #28
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr
 8005514:	40010000 	.word	0x40010000

08005518 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	f023 0210 	bic.w	r2, r3, #16
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800554e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	021b      	lsls	r3, r3, #8
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	4313      	orrs	r3, r2
 800555a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f023 0320 	bic.w	r3, r3, #32
 8005562:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	4313      	orrs	r3, r2
 800556e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a1e      	ldr	r2, [pc, #120]	@ (80055ec <TIM_OC2_SetConfig+0xd4>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d10d      	bne.n	8005594 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800557e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	4313      	orrs	r3, r2
 800558a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005592:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a15      	ldr	r2, [pc, #84]	@ (80055ec <TIM_OC2_SetConfig+0xd4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d113      	bne.n	80055c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80055a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80055aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	695b      	ldr	r3, [r3, #20]
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	693a      	ldr	r2, [r7, #16]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	621a      	str	r2, [r3, #32]
}
 80055de:	bf00      	nop
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40010000 	.word	0x40010000

080055f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800561e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0303 	bic.w	r3, r3, #3
 8005626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	689b      	ldr	r3, [r3, #8]
 800563e:	021b      	lsls	r3, r3, #8
 8005640:	697a      	ldr	r2, [r7, #20]
 8005642:	4313      	orrs	r3, r2
 8005644:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a1d      	ldr	r2, [pc, #116]	@ (80056c0 <TIM_OC3_SetConfig+0xd0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d10d      	bne.n	800566a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005654:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	021b      	lsls	r3, r3, #8
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	4313      	orrs	r3, r2
 8005660:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005668:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a14      	ldr	r2, [pc, #80]	@ (80056c0 <TIM_OC3_SetConfig+0xd0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d113      	bne.n	800569a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005678:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005680:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	011b      	lsls	r3, r3, #4
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	4313      	orrs	r3, r2
 800568c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	699b      	ldr	r3, [r3, #24]
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4313      	orrs	r3, r2
 8005698:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	693a      	ldr	r2, [r7, #16]
 800569e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	685a      	ldr	r2, [r3, #4]
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	697a      	ldr	r2, [r7, #20]
 80056b2:	621a      	str	r2, [r3, #32]
}
 80056b4:	bf00      	nop
 80056b6:	371c      	adds	r7, #28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	40010000 	.word	0x40010000

080056c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	021b      	lsls	r3, r3, #8
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800570e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	031b      	lsls	r3, r3, #12
 8005716:	693a      	ldr	r2, [r7, #16]
 8005718:	4313      	orrs	r3, r2
 800571a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a10      	ldr	r2, [pc, #64]	@ (8005760 <TIM_OC4_SetConfig+0x9c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d109      	bne.n	8005738 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800572a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	019b      	lsls	r3, r3, #6
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	40010000 	.word	0x40010000

08005764 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005764:	b480      	push	{r7}
 8005766:	b087      	sub	sp, #28
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a1b      	ldr	r3, [r3, #32]
 8005774:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	f023 0201 	bic.w	r2, r3, #1
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800578e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	4313      	orrs	r3, r2
 8005798:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f023 030a 	bic.w	r3, r3, #10
 80057a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	621a      	str	r2, [r3, #32]
}
 80057b6:	bf00      	nop
 80057b8:	371c      	adds	r7, #28
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr

080057c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b087      	sub	sp, #28
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	60f8      	str	r0, [r7, #12]
 80057ca:	60b9      	str	r1, [r7, #8]
 80057cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6a1b      	ldr	r3, [r3, #32]
 80057d8:	f023 0210 	bic.w	r2, r3, #16
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	031b      	lsls	r3, r3, #12
 80057f2:	693a      	ldr	r2, [r7, #16]
 80057f4:	4313      	orrs	r3, r2
 80057f6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057fe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	011b      	lsls	r3, r3, #4
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	4313      	orrs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	621a      	str	r2, [r3, #32]
}
 8005816:	bf00      	nop
 8005818:	371c      	adds	r7, #28
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr

08005822 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005822:	b480      	push	{r7}
 8005824:	b085      	sub	sp, #20
 8005826:	af00      	add	r7, sp, #0
 8005828:	6078      	str	r0, [r7, #4]
 800582a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005838:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	f043 0307 	orr.w	r3, r3, #7
 8005844:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68fa      	ldr	r2, [r7, #12]
 800584a:	609a      	str	r2, [r3, #8]
}
 800584c:	bf00      	nop
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005858:	b480      	push	{r7}
 800585a:	b087      	sub	sp, #28
 800585c:	af00      	add	r7, sp, #0
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
 8005864:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800586c:	697b      	ldr	r3, [r7, #20]
 800586e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005872:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	021a      	lsls	r2, r3, #8
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	431a      	orrs	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4313      	orrs	r3, r2
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	4313      	orrs	r3, r2
 8005884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	609a      	str	r2, [r3, #8]
}
 800588c:	bf00      	nop
 800588e:	371c      	adds	r7, #28
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	f003 031f 	and.w	r3, r3, #31
 80058aa:	2201      	movs	r2, #1
 80058ac:	fa02 f303 	lsl.w	r3, r2, r3
 80058b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a1a      	ldr	r2, [r3, #32]
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	43db      	mvns	r3, r3
 80058ba:	401a      	ands	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6a1a      	ldr	r2, [r3, #32]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	f003 031f 	and.w	r3, r3, #31
 80058ca:	6879      	ldr	r1, [r7, #4]
 80058cc:	fa01 f303 	lsl.w	r3, r1, r3
 80058d0:	431a      	orrs	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	621a      	str	r2, [r3, #32]
}
 80058d6:	bf00      	nop
 80058d8:	371c      	adds	r7, #28
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
	...

080058e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d101      	bne.n	80058fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058f8:	2302      	movs	r3, #2
 80058fa:	e050      	b.n	800599e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2202      	movs	r2, #2
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	689b      	ldr	r3, [r3, #8]
 800591a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005922:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	4313      	orrs	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a1c      	ldr	r2, [pc, #112]	@ (80059ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d018      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005948:	d013      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a18      	ldr	r2, [pc, #96]	@ (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00e      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a16      	ldr	r2, [pc, #88]	@ (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d009      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a15      	ldr	r2, [pc, #84]	@ (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d004      	beq.n	8005972 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a13      	ldr	r2, [pc, #76]	@ (80059bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d10c      	bne.n	800598c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005978:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	4313      	orrs	r3, r2
 8005982:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68ba      	ldr	r2, [r7, #8]
 800598a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800599c:	2300      	movs	r3, #0
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3714      	adds	r7, #20
 80059a2:	46bd      	mov	sp, r7
 80059a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a8:	4770      	bx	lr
 80059aa:	bf00      	nop
 80059ac:	40010000 	.word	0x40010000
 80059b0:	40000400 	.word	0x40000400
 80059b4:	40000800 	.word	0x40000800
 80059b8:	40000c00 	.word	0x40000c00
 80059bc:	40014000 	.word	0x40014000

080059c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059d8:	2302      	movs	r3, #2
 80059da:	e03d      	b.n	8005a58 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	695b      	ldr	r3, [r3, #20]
 8005a34:	4313      	orrs	r3, r2
 8005a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d101      	bne.n	8005a9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	e042      	b.n	8005b24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d106      	bne.n	8005ab8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7fc ffe4 	bl	8002a80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2224      	movs	r2, #36	@ 0x24
 8005abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68da      	ldr	r2, [r3, #12]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005ace:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fe61 	bl	8006798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	691a      	ldr	r2, [r3, #16]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ae4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695a      	ldr	r2, [r3, #20]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005af4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	68da      	ldr	r2, [r3, #12]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005b04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3708      	adds	r7, #8
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08a      	sub	sp, #40	@ 0x28
 8005b30:	af02      	add	r7, sp, #8
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	603b      	str	r3, [r7, #0]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	d175      	bne.n	8005c38 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <HAL_UART_Transmit+0x2c>
 8005b52:	88fb      	ldrh	r3, [r7, #6]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e06e      	b.n	8005c3a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2221      	movs	r2, #33	@ 0x21
 8005b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005b6a:	f7fd fa25 	bl	8002fb8 <HAL_GetTick>
 8005b6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	88fa      	ldrh	r2, [r7, #6]
 8005b74:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	88fa      	ldrh	r2, [r7, #6]
 8005b7a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b84:	d108      	bne.n	8005b98 <HAL_UART_Transmit+0x6c>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	691b      	ldr	r3, [r3, #16]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d104      	bne.n	8005b98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	61bb      	str	r3, [r7, #24]
 8005b96:	e003      	b.n	8005ba0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005ba0:	e02e      	b.n	8005c00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	2180      	movs	r1, #128	@ 0x80
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 fbc5 	bl	800633c <UART_WaitOnFlagUntilTimeout>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d005      	beq.n	8005bc4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2220      	movs	r2, #32
 8005bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e03a      	b.n	8005c3a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10b      	bne.n	8005be2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	881b      	ldrh	r3, [r3, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bd8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005bda:	69bb      	ldr	r3, [r7, #24]
 8005bdc:	3302      	adds	r3, #2
 8005bde:	61bb      	str	r3, [r7, #24]
 8005be0:	e007      	b.n	8005bf2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005be2:	69fb      	ldr	r3, [r7, #28]
 8005be4:	781a      	ldrb	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005c04:	b29b      	uxth	r3, r3
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1cb      	bne.n	8005ba2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	9300      	str	r3, [sp, #0]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2200      	movs	r2, #0
 8005c12:	2140      	movs	r1, #64	@ 0x40
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 fb91 	bl	800633c <UART_WaitOnFlagUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d005      	beq.n	8005c2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2220      	movs	r2, #32
 8005c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	e006      	b.n	8005c3a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	e000      	b.n	8005c3a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005c38:	2302      	movs	r3, #2
  }
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3720      	adds	r7, #32
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}

08005c42 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c42:	b580      	push	{r7, lr}
 8005c44:	b08a      	sub	sp, #40	@ 0x28
 8005c46:	af02      	add	r7, sp, #8
 8005c48:	60f8      	str	r0, [r7, #12]
 8005c4a:	60b9      	str	r1, [r7, #8]
 8005c4c:	603b      	str	r3, [r7, #0]
 8005c4e:	4613      	mov	r3, r2
 8005c50:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c52:	2300      	movs	r3, #0
 8005c54:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	2b20      	cmp	r3, #32
 8005c60:	f040 8081 	bne.w	8005d66 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <HAL_UART_Receive+0x2e>
 8005c6a:	88fb      	ldrh	r3, [r7, #6]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d101      	bne.n	8005c74 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	e079      	b.n	8005d68 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2222      	movs	r2, #34	@ 0x22
 8005c7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c88:	f7fd f996 	bl	8002fb8 <HAL_GetTick>
 8005c8c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	88fa      	ldrh	r2, [r7, #6]
 8005c92:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	88fa      	ldrh	r2, [r7, #6]
 8005c98:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ca2:	d108      	bne.n	8005cb6 <HAL_UART_Receive+0x74>
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d104      	bne.n	8005cb6 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005cac:	2300      	movs	r3, #0
 8005cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	61bb      	str	r3, [r7, #24]
 8005cb4:	e003      	b.n	8005cbe <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005cbe:	e047      	b.n	8005d50 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2120      	movs	r1, #32
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f000 fb36 	bl	800633c <UART_WaitOnFlagUntilTimeout>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d005      	beq.n	8005ce2 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2220      	movs	r2, #32
 8005cda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e042      	b.n	8005d68 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10c      	bne.n	8005d02 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	3302      	adds	r3, #2
 8005cfe:	61bb      	str	r3, [r7, #24]
 8005d00:	e01f      	b.n	8005d42 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d0a:	d007      	beq.n	8005d1c <HAL_UART_Receive+0xda>
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d10a      	bne.n	8005d2a <HAL_UART_Receive+0xe8>
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d106      	bne.n	8005d2a <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685b      	ldr	r3, [r3, #4]
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	701a      	strb	r2, [r3, #0]
 8005d28:	e008      	b.n	8005d3c <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	3b01      	subs	r3, #1
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d1b2      	bne.n	8005cc0 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	e000      	b.n	8005d68 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005d66:	2302      	movs	r3, #2
  }
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3720      	adds	r7, #32
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b20      	cmp	r3, #32
 8005d88:	d112      	bne.n	8005db0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <HAL_UART_Receive_IT+0x26>
 8005d90:	88fb      	ldrh	r3, [r7, #6]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e00b      	b.n	8005db2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005da0:	88fb      	ldrh	r3, [r7, #6]
 8005da2:	461a      	mov	r2, r3
 8005da4:	68b9      	ldr	r1, [r7, #8]
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 fb21 	bl	80063ee <UART_Start_Receive_IT>
 8005dac:	4603      	mov	r3, r0
 8005dae:	e000      	b.n	8005db2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005db0:	2302      	movs	r3, #2
  }
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b0ba      	sub	sp, #232	@ 0xe8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005de2:	2300      	movs	r3, #0
 8005de4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005de8:	2300      	movs	r3, #0
 8005dea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005df2:	f003 030f 	and.w	r3, r3, #15
 8005df6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005dfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10f      	bne.n	8005e22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e06:	f003 0320 	and.w	r3, r3, #32
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d009      	beq.n	8005e22 <HAL_UART_IRQHandler+0x66>
 8005e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e12:	f003 0320 	and.w	r3, r3, #32
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fbfd 	bl	800661a <UART_Receive_IT>
      return;
 8005e20:	e273      	b.n	800630a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005e22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f000 80de 	beq.w	8005fe8 <HAL_UART_IRQHandler+0x22c>
 8005e2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d106      	bne.n	8005e46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e3c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 80d1 	beq.w	8005fe8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00b      	beq.n	8005e6a <HAL_UART_IRQHandler+0xae>
 8005e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d005      	beq.n	8005e6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e62:	f043 0201 	orr.w	r2, r3, #1
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e6e:	f003 0304 	and.w	r3, r3, #4
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00b      	beq.n	8005e8e <HAL_UART_IRQHandler+0xd2>
 8005e76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d005      	beq.n	8005e8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e86:	f043 0202 	orr.w	r2, r3, #2
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00b      	beq.n	8005eb2 <HAL_UART_IRQHandler+0xf6>
 8005e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d005      	beq.n	8005eb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eaa:	f043 0204 	orr.w	r2, r3, #4
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d011      	beq.n	8005ee2 <HAL_UART_IRQHandler+0x126>
 8005ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ec2:	f003 0320 	and.w	r3, r3, #32
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d105      	bne.n	8005ed6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005eca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ece:	f003 0301 	and.w	r3, r3, #1
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d005      	beq.n	8005ee2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eda:	f043 0208 	orr.w	r2, r3, #8
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 820a 	beq.w	8006300 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef0:	f003 0320 	and.w	r3, r3, #32
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d008      	beq.n	8005f0a <HAL_UART_IRQHandler+0x14e>
 8005ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005efc:	f003 0320 	and.w	r3, r3, #32
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fb88 	bl	800661a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f14:	2b40      	cmp	r3, #64	@ 0x40
 8005f16:	bf0c      	ite	eq
 8005f18:	2301      	moveq	r3, #1
 8005f1a:	2300      	movne	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f26:	f003 0308 	and.w	r3, r3, #8
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d103      	bne.n	8005f36 <HAL_UART_IRQHandler+0x17a>
 8005f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d04f      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fa93 	bl	8006462 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f46:	2b40      	cmp	r3, #64	@ 0x40
 8005f48:	d141      	bne.n	8005fce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	3314      	adds	r3, #20
 8005f50:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f54:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f58:	e853 3f00 	ldrex	r3, [r3]
 8005f5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f68:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3314      	adds	r3, #20
 8005f72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005f76:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005f82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005f86:	e841 2300 	strex	r3, r2, [r1]
 8005f8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1d9      	bne.n	8005f4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d013      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fa2:	4a8a      	ldr	r2, [pc, #552]	@ (80061cc <HAL_UART_IRQHandler+0x410>)
 8005fa4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fd fe21 	bl	8003bf2 <HAL_DMA_Abort_IT>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d016      	beq.n	8005fe4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fbc:	687a      	ldr	r2, [r7, #4]
 8005fbe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc4:	e00e      	b.n	8005fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7fb fc84 	bl	80018d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fcc:	e00a      	b.n	8005fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fb fc80 	bl	80018d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd4:	e006      	b.n	8005fe4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7fb fc7c 	bl	80018d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005fe2:	e18d      	b.n	8006300 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe4:	bf00      	nop
    return;
 8005fe6:	e18b      	b.n	8006300 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	f040 8167 	bne.w	80062c0 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ff6:	f003 0310 	and.w	r3, r3, #16
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f000 8160 	beq.w	80062c0 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006004:	f003 0310 	and.w	r3, r3, #16
 8006008:	2b00      	cmp	r3, #0
 800600a:	f000 8159 	beq.w	80062c0 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800600e:	2300      	movs	r3, #0
 8006010:	60bb      	str	r3, [r7, #8]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	60bb      	str	r3, [r7, #8]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	60bb      	str	r3, [r7, #8]
 8006022:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800602e:	2b40      	cmp	r3, #64	@ 0x40
 8006030:	f040 80ce 	bne.w	80061d0 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006040:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 80a9 	beq.w	800619c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800604e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006052:	429a      	cmp	r2, r3
 8006054:	f080 80a2 	bcs.w	800619c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800605e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800606a:	f000 8088 	beq.w	800617e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	330c      	adds	r3, #12
 8006074:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800607c:	e853 3f00 	ldrex	r3, [r3]
 8006080:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006084:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006088:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800608c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	330c      	adds	r3, #12
 8006096:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800609a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800609e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80060a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060aa:	e841 2300 	strex	r3, r2, [r1]
 80060ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80060b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1d9      	bne.n	800606e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	3314      	adds	r3, #20
 80060c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060c4:	e853 3f00 	ldrex	r3, [r3]
 80060c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80060ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060cc:	f023 0301 	bic.w	r3, r3, #1
 80060d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3314      	adds	r3, #20
 80060da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80060de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80060e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80060e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80060f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e1      	bne.n	80060ba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3314      	adds	r3, #20
 80060fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006100:	e853 3f00 	ldrex	r3, [r3]
 8006104:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006106:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006108:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800610c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3314      	adds	r3, #20
 8006116:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800611a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800611c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006120:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006122:	e841 2300 	strex	r3, r2, [r1]
 8006126:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006128:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1e3      	bne.n	80060f6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2220      	movs	r2, #32
 8006132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	330c      	adds	r3, #12
 8006142:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006146:	e853 3f00 	ldrex	r3, [r3]
 800614a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800614c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800614e:	f023 0310 	bic.w	r3, r3, #16
 8006152:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	330c      	adds	r3, #12
 800615c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006160:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006162:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006166:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006168:	e841 2300 	strex	r3, r2, [r1]
 800616c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800616e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e3      	bne.n	800613c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006178:	4618      	mov	r0, r3
 800617a:	f7fd fcca 	bl	8003b12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2202      	movs	r2, #2
 8006182:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800618c:	b29b      	uxth	r3, r3
 800618e:	1ad3      	subs	r3, r2, r3
 8006190:	b29b      	uxth	r3, r3
 8006192:	4619      	mov	r1, r3
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 f8c5 	bl	8006324 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800619a:	e0b3      	b.n	8006304 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80061a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80061a4:	429a      	cmp	r2, r3
 80061a6:	f040 80ad 	bne.w	8006304 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061b4:	f040 80a6 	bne.w	8006304 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80061c2:	4619      	mov	r1, r3
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f8ad 	bl	8006324 <HAL_UARTEx_RxEventCallback>
      return;
 80061ca:	e09b      	b.n	8006304 <HAL_UART_IRQHandler+0x548>
 80061cc:	08006529 	.word	0x08006529
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061d8:	b29b      	uxth	r3, r3
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061e4:	b29b      	uxth	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 808e 	beq.w	8006308 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80061ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	f000 8089 	beq.w	8006308 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	330c      	adds	r3, #12
 80061fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006208:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800620c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	330c      	adds	r3, #12
 8006216:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800621a:	647a      	str	r2, [r7, #68]	@ 0x44
 800621c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006220:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006222:	e841 2300 	strex	r3, r2, [r1]
 8006226:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800622a:	2b00      	cmp	r3, #0
 800622c:	d1e3      	bne.n	80061f6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	3314      	adds	r3, #20
 8006234:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006238:	e853 3f00 	ldrex	r3, [r3]
 800623c:	623b      	str	r3, [r7, #32]
   return(result);
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	f023 0301 	bic.w	r3, r3, #1
 8006244:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	3314      	adds	r3, #20
 800624e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006252:	633a      	str	r2, [r7, #48]	@ 0x30
 8006254:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006256:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006258:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800625a:	e841 2300 	strex	r3, r2, [r1]
 800625e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1e3      	bne.n	800622e <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2220      	movs	r2, #32
 800626a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	330c      	adds	r3, #12
 800627a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	e853 3f00 	ldrex	r3, [r3]
 8006282:	60fb      	str	r3, [r7, #12]
   return(result);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f023 0310 	bic.w	r3, r3, #16
 800628a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	330c      	adds	r3, #12
 8006294:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006298:	61fa      	str	r2, [r7, #28]
 800629a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629c:	69b9      	ldr	r1, [r7, #24]
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	e841 2300 	strex	r3, r2, [r1]
 80062a4:	617b      	str	r3, [r7, #20]
   return(result);
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d1e3      	bne.n	8006274 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2202      	movs	r2, #2
 80062b0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80062b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062b6:	4619      	mov	r1, r3
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f833 	bl	8006324 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062be:	e023      	b.n	8006308 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80062c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d009      	beq.n	80062e0 <HAL_UART_IRQHandler+0x524>
 80062cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f936 	bl	800654a <UART_Transmit_IT>
    return;
 80062de:	e014      	b.n	800630a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80062e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00e      	beq.n	800630a <HAL_UART_IRQHandler+0x54e>
 80062ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d008      	beq.n	800630a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f976 	bl	80065ea <UART_EndTransmit_IT>
    return;
 80062fe:	e004      	b.n	800630a <HAL_UART_IRQHandler+0x54e>
    return;
 8006300:	bf00      	nop
 8006302:	e002      	b.n	800630a <HAL_UART_IRQHandler+0x54e>
      return;
 8006304:	bf00      	nop
 8006306:	e000      	b.n	800630a <HAL_UART_IRQHandler+0x54e>
      return;
 8006308:	bf00      	nop
  }
}
 800630a:	37e8      	adds	r7, #232	@ 0xe8
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	460b      	mov	r3, r1
 800632e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b086      	sub	sp, #24
 8006340:	af00      	add	r7, sp, #0
 8006342:	60f8      	str	r0, [r7, #12]
 8006344:	60b9      	str	r1, [r7, #8]
 8006346:	603b      	str	r3, [r7, #0]
 8006348:	4613      	mov	r3, r2
 800634a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800634c:	e03b      	b.n	80063c6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006354:	d037      	beq.n	80063c6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006356:	f7fc fe2f 	bl	8002fb8 <HAL_GetTick>
 800635a:	4602      	mov	r2, r0
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	1ad3      	subs	r3, r2, r3
 8006360:	6a3a      	ldr	r2, [r7, #32]
 8006362:	429a      	cmp	r2, r3
 8006364:	d302      	bcc.n	800636c <UART_WaitOnFlagUntilTimeout+0x30>
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e03a      	b.n	80063e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	f003 0304 	and.w	r3, r3, #4
 800637a:	2b00      	cmp	r3, #0
 800637c:	d023      	beq.n	80063c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2b80      	cmp	r3, #128	@ 0x80
 8006382:	d020      	beq.n	80063c6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	2b40      	cmp	r3, #64	@ 0x40
 8006388:	d01d      	beq.n	80063c6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0308 	and.w	r3, r3, #8
 8006394:	2b08      	cmp	r3, #8
 8006396:	d116      	bne.n	80063c6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006398:	2300      	movs	r3, #0
 800639a:	617b      	str	r3, [r7, #20]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	617b      	str	r3, [r7, #20]
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	617b      	str	r3, [r7, #20]
 80063ac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f000 f857 	bl	8006462 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	2208      	movs	r2, #8
 80063b8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	e00f      	b.n	80063e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	4013      	ands	r3, r2
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	bf0c      	ite	eq
 80063d6:	2301      	moveq	r3, #1
 80063d8:	2300      	movne	r3, #0
 80063da:	b2db      	uxtb	r3, r3
 80063dc:	461a      	mov	r2, r3
 80063de:	79fb      	ldrb	r3, [r7, #7]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d0b4      	beq.n	800634e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80063ee:	b480      	push	{r7}
 80063f0:	b085      	sub	sp, #20
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	60f8      	str	r0, [r7, #12]
 80063f6:	60b9      	str	r1, [r7, #8]
 80063f8:	4613      	mov	r3, r2
 80063fa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	88fa      	ldrh	r2, [r7, #6]
 8006406:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	88fa      	ldrh	r2, [r7, #6]
 800640c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2222      	movs	r2, #34	@ 0x22
 8006418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d007      	beq.n	8006434 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	68da      	ldr	r2, [r3, #12]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006432:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	695a      	ldr	r2, [r3, #20]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f042 0201 	orr.w	r2, r2, #1
 8006442:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68da      	ldr	r2, [r3, #12]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f042 0220 	orr.w	r2, r2, #32
 8006452:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006462:	b480      	push	{r7}
 8006464:	b095      	sub	sp, #84	@ 0x54
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	330c      	adds	r3, #12
 8006470:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006474:	e853 3f00 	ldrex	r3, [r3]
 8006478:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800647a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006480:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	330c      	adds	r3, #12
 8006488:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800648a:	643a      	str	r2, [r7, #64]	@ 0x40
 800648c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006490:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1e5      	bne.n	800646a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	3314      	adds	r3, #20
 80064a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a6:	6a3b      	ldr	r3, [r7, #32]
 80064a8:	e853 3f00 	ldrex	r3, [r3]
 80064ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	f023 0301 	bic.w	r3, r3, #1
 80064b4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3314      	adds	r3, #20
 80064bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80064be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064c2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80064c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064c6:	e841 2300 	strex	r3, r2, [r1]
 80064ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80064cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d1e5      	bne.n	800649e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d6:	2b01      	cmp	r3, #1
 80064d8:	d119      	bne.n	800650e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	330c      	adds	r3, #12
 80064e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	e853 3f00 	ldrex	r3, [r3]
 80064e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	f023 0310 	bic.w	r3, r3, #16
 80064f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	330c      	adds	r3, #12
 80064f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064fa:	61ba      	str	r2, [r7, #24]
 80064fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064fe:	6979      	ldr	r1, [r7, #20]
 8006500:	69ba      	ldr	r2, [r7, #24]
 8006502:	e841 2300 	strex	r3, r2, [r1]
 8006506:	613b      	str	r3, [r7, #16]
   return(result);
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d1e5      	bne.n	80064da <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800651c:	bf00      	nop
 800651e:	3754      	adds	r7, #84	@ 0x54
 8006520:	46bd      	mov	sp, r7
 8006522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006526:	4770      	bx	lr

08006528 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006534:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f7fb f9c9 	bl	80018d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006542:	bf00      	nop
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800654a:	b480      	push	{r7}
 800654c:	b085      	sub	sp, #20
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b21      	cmp	r3, #33	@ 0x21
 800655c:	d13e      	bne.n	80065dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006566:	d114      	bne.n	8006592 <UART_Transmit_IT+0x48>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d110      	bne.n	8006592 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6a1b      	ldr	r3, [r3, #32]
 8006574:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	881b      	ldrh	r3, [r3, #0]
 800657a:	461a      	mov	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006584:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	1c9a      	adds	r2, r3, #2
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	621a      	str	r2, [r3, #32]
 8006590:	e008      	b.n	80065a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	1c59      	adds	r1, r3, #1
 8006598:	687a      	ldr	r2, [r7, #4]
 800659a:	6211      	str	r1, [r2, #32]
 800659c:	781a      	ldrb	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	3b01      	subs	r3, #1
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	4619      	mov	r1, r3
 80065b2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10f      	bne.n	80065d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80065d8:	2300      	movs	r3, #0
 80065da:	e000      	b.n	80065de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80065dc:	2302      	movs	r3, #2
  }
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3714      	adds	r7, #20
 80065e2:	46bd      	mov	sp, r7
 80065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e8:	4770      	bx	lr

080065ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b082      	sub	sp, #8
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68da      	ldr	r2, [r3, #12]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006600:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2220      	movs	r2, #32
 8006606:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7ff fe80 	bl	8006310 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006610:	2300      	movs	r3, #0
}
 8006612:	4618      	mov	r0, r3
 8006614:	3708      	adds	r7, #8
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}

0800661a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800661a:	b580      	push	{r7, lr}
 800661c:	b08c      	sub	sp, #48	@ 0x30
 800661e:	af00      	add	r7, sp, #0
 8006620:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8006622:	2300      	movs	r3, #0
 8006624:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006626:	2300      	movs	r3, #0
 8006628:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006630:	b2db      	uxtb	r3, r3
 8006632:	2b22      	cmp	r3, #34	@ 0x22
 8006634:	f040 80aa 	bne.w	800678c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006640:	d115      	bne.n	800666e <UART_Receive_IT+0x54>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d111      	bne.n	800666e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	b29b      	uxth	r3, r3
 8006658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800665c:	b29a      	uxth	r2, r3
 800665e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006660:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006666:	1c9a      	adds	r2, r3, #2
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	629a      	str	r2, [r3, #40]	@ 0x28
 800666c:	e024      	b.n	80066b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006672:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800667c:	d007      	beq.n	800668e <UART_Receive_IT+0x74>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	689b      	ldr	r3, [r3, #8]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d10a      	bne.n	800669c <UART_Receive_IT+0x82>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d106      	bne.n	800669c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	b2da      	uxtb	r2, r3
 8006696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	e008      	b.n	80066ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80066a8:	b2da      	uxtb	r2, r3
 80066aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b2:	1c5a      	adds	r2, r3, #1
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80066bc:	b29b      	uxth	r3, r3
 80066be:	3b01      	subs	r3, #1
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	4619      	mov	r1, r3
 80066c6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d15d      	bne.n	8006788 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68da      	ldr	r2, [r3, #12]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f022 0220 	bic.w	r2, r2, #32
 80066da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80066ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	695a      	ldr	r2, [r3, #20]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f022 0201 	bic.w	r2, r2, #1
 80066fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2220      	movs	r2, #32
 8006700:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800670e:	2b01      	cmp	r3, #1
 8006710:	d135      	bne.n	800677e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	330c      	adds	r3, #12
 800671e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	613b      	str	r3, [r7, #16]
   return(result);
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f023 0310 	bic.w	r3, r3, #16
 800672e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	330c      	adds	r3, #12
 8006736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006738:	623a      	str	r2, [r7, #32]
 800673a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	69f9      	ldr	r1, [r7, #28]
 800673e:	6a3a      	ldr	r2, [r7, #32]
 8006740:	e841 2300 	strex	r3, r2, [r1]
 8006744:	61bb      	str	r3, [r7, #24]
   return(result);
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1e5      	bne.n	8006718 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f003 0310 	and.w	r3, r3, #16
 8006756:	2b10      	cmp	r3, #16
 8006758:	d10a      	bne.n	8006770 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	60fb      	str	r3, [r7, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006774:	4619      	mov	r1, r3
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7ff fdd4 	bl	8006324 <HAL_UARTEx_RxEventCallback>
 800677c:	e002      	b.n	8006784 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7fb f86e 	bl	8001860 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006784:	2300      	movs	r3, #0
 8006786:	e002      	b.n	800678e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	e000      	b.n	800678e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800678c:	2302      	movs	r3, #2
  }
}
 800678e:	4618      	mov	r0, r3
 8006790:	3730      	adds	r7, #48	@ 0x30
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
	...

08006798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800679c:	b0c0      	sub	sp, #256	@ 0x100
 800679e:	af00      	add	r7, sp, #0
 80067a0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80067b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067b4:	68d9      	ldr	r1, [r3, #12]
 80067b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	ea40 0301 	orr.w	r3, r0, r1
 80067c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067c6:	689a      	ldr	r2, [r3, #8]
 80067c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	431a      	orrs	r2, r3
 80067d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d4:	695b      	ldr	r3, [r3, #20]
 80067d6:	431a      	orrs	r2, r3
 80067d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	4313      	orrs	r3, r2
 80067e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80067e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68db      	ldr	r3, [r3, #12]
 80067ec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80067f0:	f021 010c 	bic.w	r1, r1, #12
 80067f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80067fe:	430b      	orrs	r3, r1
 8006800:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	695b      	ldr	r3, [r3, #20]
 800680a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800680e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006812:	6999      	ldr	r1, [r3, #24]
 8006814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	ea40 0301 	orr.w	r3, r0, r1
 800681e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	4b8f      	ldr	r3, [pc, #572]	@ (8006a64 <UART_SetConfig+0x2cc>)
 8006828:	429a      	cmp	r2, r3
 800682a:	d005      	beq.n	8006838 <UART_SetConfig+0xa0>
 800682c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	4b8d      	ldr	r3, [pc, #564]	@ (8006a68 <UART_SetConfig+0x2d0>)
 8006834:	429a      	cmp	r2, r3
 8006836:	d104      	bne.n	8006842 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006838:	f7fe f85c 	bl	80048f4 <HAL_RCC_GetPCLK2Freq>
 800683c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006840:	e003      	b.n	800684a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006842:	f7fe f843 	bl	80048cc <HAL_RCC_GetPCLK1Freq>
 8006846:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800684a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006854:	f040 810c 	bne.w	8006a70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800685c:	2200      	movs	r2, #0
 800685e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006862:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006866:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800686a:	4622      	mov	r2, r4
 800686c:	462b      	mov	r3, r5
 800686e:	1891      	adds	r1, r2, r2
 8006870:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006872:	415b      	adcs	r3, r3
 8006874:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006876:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800687a:	4621      	mov	r1, r4
 800687c:	eb12 0801 	adds.w	r8, r2, r1
 8006880:	4629      	mov	r1, r5
 8006882:	eb43 0901 	adc.w	r9, r3, r1
 8006886:	f04f 0200 	mov.w	r2, #0
 800688a:	f04f 0300 	mov.w	r3, #0
 800688e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800689a:	4690      	mov	r8, r2
 800689c:	4699      	mov	r9, r3
 800689e:	4623      	mov	r3, r4
 80068a0:	eb18 0303 	adds.w	r3, r8, r3
 80068a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80068a8:	462b      	mov	r3, r5
 80068aa:	eb49 0303 	adc.w	r3, r9, r3
 80068ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80068b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80068be:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80068c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80068c6:	460b      	mov	r3, r1
 80068c8:	18db      	adds	r3, r3, r3
 80068ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80068cc:	4613      	mov	r3, r2
 80068ce:	eb42 0303 	adc.w	r3, r2, r3
 80068d2:	657b      	str	r3, [r7, #84]	@ 0x54
 80068d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80068d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80068dc:	f7fa f9ec 	bl	8000cb8 <__aeabi_uldivmod>
 80068e0:	4602      	mov	r2, r0
 80068e2:	460b      	mov	r3, r1
 80068e4:	4b61      	ldr	r3, [pc, #388]	@ (8006a6c <UART_SetConfig+0x2d4>)
 80068e6:	fba3 2302 	umull	r2, r3, r3, r2
 80068ea:	095b      	lsrs	r3, r3, #5
 80068ec:	011c      	lsls	r4, r3, #4
 80068ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068f2:	2200      	movs	r2, #0
 80068f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068f8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80068fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006900:	4642      	mov	r2, r8
 8006902:	464b      	mov	r3, r9
 8006904:	1891      	adds	r1, r2, r2
 8006906:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006908:	415b      	adcs	r3, r3
 800690a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800690c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006910:	4641      	mov	r1, r8
 8006912:	eb12 0a01 	adds.w	sl, r2, r1
 8006916:	4649      	mov	r1, r9
 8006918:	eb43 0b01 	adc.w	fp, r3, r1
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	f04f 0300 	mov.w	r3, #0
 8006924:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006928:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800692c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006930:	4692      	mov	sl, r2
 8006932:	469b      	mov	fp, r3
 8006934:	4643      	mov	r3, r8
 8006936:	eb1a 0303 	adds.w	r3, sl, r3
 800693a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800693e:	464b      	mov	r3, r9
 8006940:	eb4b 0303 	adc.w	r3, fp, r3
 8006944:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006954:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006958:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800695c:	460b      	mov	r3, r1
 800695e:	18db      	adds	r3, r3, r3
 8006960:	643b      	str	r3, [r7, #64]	@ 0x40
 8006962:	4613      	mov	r3, r2
 8006964:	eb42 0303 	adc.w	r3, r2, r3
 8006968:	647b      	str	r3, [r7, #68]	@ 0x44
 800696a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800696e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006972:	f7fa f9a1 	bl	8000cb8 <__aeabi_uldivmod>
 8006976:	4602      	mov	r2, r0
 8006978:	460b      	mov	r3, r1
 800697a:	4611      	mov	r1, r2
 800697c:	4b3b      	ldr	r3, [pc, #236]	@ (8006a6c <UART_SetConfig+0x2d4>)
 800697e:	fba3 2301 	umull	r2, r3, r3, r1
 8006982:	095b      	lsrs	r3, r3, #5
 8006984:	2264      	movs	r2, #100	@ 0x64
 8006986:	fb02 f303 	mul.w	r3, r2, r3
 800698a:	1acb      	subs	r3, r1, r3
 800698c:	00db      	lsls	r3, r3, #3
 800698e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006992:	4b36      	ldr	r3, [pc, #216]	@ (8006a6c <UART_SetConfig+0x2d4>)
 8006994:	fba3 2302 	umull	r2, r3, r3, r2
 8006998:	095b      	lsrs	r3, r3, #5
 800699a:	005b      	lsls	r3, r3, #1
 800699c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80069a0:	441c      	add	r4, r3
 80069a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069a6:	2200      	movs	r2, #0
 80069a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069ac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80069b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80069b4:	4642      	mov	r2, r8
 80069b6:	464b      	mov	r3, r9
 80069b8:	1891      	adds	r1, r2, r2
 80069ba:	63b9      	str	r1, [r7, #56]	@ 0x38
 80069bc:	415b      	adcs	r3, r3
 80069be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80069c4:	4641      	mov	r1, r8
 80069c6:	1851      	adds	r1, r2, r1
 80069c8:	6339      	str	r1, [r7, #48]	@ 0x30
 80069ca:	4649      	mov	r1, r9
 80069cc:	414b      	adcs	r3, r1
 80069ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80069d0:	f04f 0200 	mov.w	r2, #0
 80069d4:	f04f 0300 	mov.w	r3, #0
 80069d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80069dc:	4659      	mov	r1, fp
 80069de:	00cb      	lsls	r3, r1, #3
 80069e0:	4651      	mov	r1, sl
 80069e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069e6:	4651      	mov	r1, sl
 80069e8:	00ca      	lsls	r2, r1, #3
 80069ea:	4610      	mov	r0, r2
 80069ec:	4619      	mov	r1, r3
 80069ee:	4603      	mov	r3, r0
 80069f0:	4642      	mov	r2, r8
 80069f2:	189b      	adds	r3, r3, r2
 80069f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069f8:	464b      	mov	r3, r9
 80069fa:	460a      	mov	r2, r1
 80069fc:	eb42 0303 	adc.w	r3, r2, r3
 8006a00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006a10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006a14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006a18:	460b      	mov	r3, r1
 8006a1a:	18db      	adds	r3, r3, r3
 8006a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a1e:	4613      	mov	r3, r2
 8006a20:	eb42 0303 	adc.w	r3, r2, r3
 8006a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006a2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006a2e:	f7fa f943 	bl	8000cb8 <__aeabi_uldivmod>
 8006a32:	4602      	mov	r2, r0
 8006a34:	460b      	mov	r3, r1
 8006a36:	4b0d      	ldr	r3, [pc, #52]	@ (8006a6c <UART_SetConfig+0x2d4>)
 8006a38:	fba3 1302 	umull	r1, r3, r3, r2
 8006a3c:	095b      	lsrs	r3, r3, #5
 8006a3e:	2164      	movs	r1, #100	@ 0x64
 8006a40:	fb01 f303 	mul.w	r3, r1, r3
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	3332      	adds	r3, #50	@ 0x32
 8006a4a:	4a08      	ldr	r2, [pc, #32]	@ (8006a6c <UART_SetConfig+0x2d4>)
 8006a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a50:	095b      	lsrs	r3, r3, #5
 8006a52:	f003 0207 	and.w	r2, r3, #7
 8006a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4422      	add	r2, r4
 8006a5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a60:	e106      	b.n	8006c70 <UART_SetConfig+0x4d8>
 8006a62:	bf00      	nop
 8006a64:	40011000 	.word	0x40011000
 8006a68:	40011400 	.word	0x40011400
 8006a6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a74:	2200      	movs	r2, #0
 8006a76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006a7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006a7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006a82:	4642      	mov	r2, r8
 8006a84:	464b      	mov	r3, r9
 8006a86:	1891      	adds	r1, r2, r2
 8006a88:	6239      	str	r1, [r7, #32]
 8006a8a:	415b      	adcs	r3, r3
 8006a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006a92:	4641      	mov	r1, r8
 8006a94:	1854      	adds	r4, r2, r1
 8006a96:	4649      	mov	r1, r9
 8006a98:	eb43 0501 	adc.w	r5, r3, r1
 8006a9c:	f04f 0200 	mov.w	r2, #0
 8006aa0:	f04f 0300 	mov.w	r3, #0
 8006aa4:	00eb      	lsls	r3, r5, #3
 8006aa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006aaa:	00e2      	lsls	r2, r4, #3
 8006aac:	4614      	mov	r4, r2
 8006aae:	461d      	mov	r5, r3
 8006ab0:	4643      	mov	r3, r8
 8006ab2:	18e3      	adds	r3, r4, r3
 8006ab4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ab8:	464b      	mov	r3, r9
 8006aba:	eb45 0303 	adc.w	r3, r5, r3
 8006abe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ace:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ad2:	f04f 0200 	mov.w	r2, #0
 8006ad6:	f04f 0300 	mov.w	r3, #0
 8006ada:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006ade:	4629      	mov	r1, r5
 8006ae0:	008b      	lsls	r3, r1, #2
 8006ae2:	4621      	mov	r1, r4
 8006ae4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ae8:	4621      	mov	r1, r4
 8006aea:	008a      	lsls	r2, r1, #2
 8006aec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006af0:	f7fa f8e2 	bl	8000cb8 <__aeabi_uldivmod>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	4b60      	ldr	r3, [pc, #384]	@ (8006c7c <UART_SetConfig+0x4e4>)
 8006afa:	fba3 2302 	umull	r2, r3, r3, r2
 8006afe:	095b      	lsrs	r3, r3, #5
 8006b00:	011c      	lsls	r4, r3, #4
 8006b02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b06:	2200      	movs	r2, #0
 8006b08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006b0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006b10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006b14:	4642      	mov	r2, r8
 8006b16:	464b      	mov	r3, r9
 8006b18:	1891      	adds	r1, r2, r2
 8006b1a:	61b9      	str	r1, [r7, #24]
 8006b1c:	415b      	adcs	r3, r3
 8006b1e:	61fb      	str	r3, [r7, #28]
 8006b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b24:	4641      	mov	r1, r8
 8006b26:	1851      	adds	r1, r2, r1
 8006b28:	6139      	str	r1, [r7, #16]
 8006b2a:	4649      	mov	r1, r9
 8006b2c:	414b      	adcs	r3, r1
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	f04f 0200 	mov.w	r2, #0
 8006b34:	f04f 0300 	mov.w	r3, #0
 8006b38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b3c:	4659      	mov	r1, fp
 8006b3e:	00cb      	lsls	r3, r1, #3
 8006b40:	4651      	mov	r1, sl
 8006b42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b46:	4651      	mov	r1, sl
 8006b48:	00ca      	lsls	r2, r1, #3
 8006b4a:	4610      	mov	r0, r2
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4603      	mov	r3, r0
 8006b50:	4642      	mov	r2, r8
 8006b52:	189b      	adds	r3, r3, r2
 8006b54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b58:	464b      	mov	r3, r9
 8006b5a:	460a      	mov	r2, r1
 8006b5c:	eb42 0303 	adc.w	r3, r2, r3
 8006b60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006b70:	f04f 0200 	mov.w	r2, #0
 8006b74:	f04f 0300 	mov.w	r3, #0
 8006b78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006b7c:	4649      	mov	r1, r9
 8006b7e:	008b      	lsls	r3, r1, #2
 8006b80:	4641      	mov	r1, r8
 8006b82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b86:	4641      	mov	r1, r8
 8006b88:	008a      	lsls	r2, r1, #2
 8006b8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006b8e:	f7fa f893 	bl	8000cb8 <__aeabi_uldivmod>
 8006b92:	4602      	mov	r2, r0
 8006b94:	460b      	mov	r3, r1
 8006b96:	4611      	mov	r1, r2
 8006b98:	4b38      	ldr	r3, [pc, #224]	@ (8006c7c <UART_SetConfig+0x4e4>)
 8006b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8006b9e:	095b      	lsrs	r3, r3, #5
 8006ba0:	2264      	movs	r2, #100	@ 0x64
 8006ba2:	fb02 f303 	mul.w	r3, r2, r3
 8006ba6:	1acb      	subs	r3, r1, r3
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	3332      	adds	r3, #50	@ 0x32
 8006bac:	4a33      	ldr	r2, [pc, #204]	@ (8006c7c <UART_SetConfig+0x4e4>)
 8006bae:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb2:	095b      	lsrs	r3, r3, #5
 8006bb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006bb8:	441c      	add	r4, r3
 8006bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8006bc2:	677a      	str	r2, [r7, #116]	@ 0x74
 8006bc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006bc8:	4642      	mov	r2, r8
 8006bca:	464b      	mov	r3, r9
 8006bcc:	1891      	adds	r1, r2, r2
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	415b      	adcs	r3, r3
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006bd8:	4641      	mov	r1, r8
 8006bda:	1851      	adds	r1, r2, r1
 8006bdc:	6039      	str	r1, [r7, #0]
 8006bde:	4649      	mov	r1, r9
 8006be0:	414b      	adcs	r3, r1
 8006be2:	607b      	str	r3, [r7, #4]
 8006be4:	f04f 0200 	mov.w	r2, #0
 8006be8:	f04f 0300 	mov.w	r3, #0
 8006bec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006bf0:	4659      	mov	r1, fp
 8006bf2:	00cb      	lsls	r3, r1, #3
 8006bf4:	4651      	mov	r1, sl
 8006bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bfa:	4651      	mov	r1, sl
 8006bfc:	00ca      	lsls	r2, r1, #3
 8006bfe:	4610      	mov	r0, r2
 8006c00:	4619      	mov	r1, r3
 8006c02:	4603      	mov	r3, r0
 8006c04:	4642      	mov	r2, r8
 8006c06:	189b      	adds	r3, r3, r2
 8006c08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c0a:	464b      	mov	r3, r9
 8006c0c:	460a      	mov	r2, r1
 8006c0e:	eb42 0303 	adc.w	r3, r2, r3
 8006c12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006c1e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006c20:	f04f 0200 	mov.w	r2, #0
 8006c24:	f04f 0300 	mov.w	r3, #0
 8006c28:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006c2c:	4649      	mov	r1, r9
 8006c2e:	008b      	lsls	r3, r1, #2
 8006c30:	4641      	mov	r1, r8
 8006c32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c36:	4641      	mov	r1, r8
 8006c38:	008a      	lsls	r2, r1, #2
 8006c3a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006c3e:	f7fa f83b 	bl	8000cb8 <__aeabi_uldivmod>
 8006c42:	4602      	mov	r2, r0
 8006c44:	460b      	mov	r3, r1
 8006c46:	4b0d      	ldr	r3, [pc, #52]	@ (8006c7c <UART_SetConfig+0x4e4>)
 8006c48:	fba3 1302 	umull	r1, r3, r3, r2
 8006c4c:	095b      	lsrs	r3, r3, #5
 8006c4e:	2164      	movs	r1, #100	@ 0x64
 8006c50:	fb01 f303 	mul.w	r3, r1, r3
 8006c54:	1ad3      	subs	r3, r2, r3
 8006c56:	011b      	lsls	r3, r3, #4
 8006c58:	3332      	adds	r3, #50	@ 0x32
 8006c5a:	4a08      	ldr	r2, [pc, #32]	@ (8006c7c <UART_SetConfig+0x4e4>)
 8006c5c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c60:	095b      	lsrs	r3, r3, #5
 8006c62:	f003 020f 	and.w	r2, r3, #15
 8006c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4422      	add	r2, r4
 8006c6e:	609a      	str	r2, [r3, #8]
}
 8006c70:	bf00      	nop
 8006c72:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006c76:	46bd      	mov	sp, r7
 8006c78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006c7c:	51eb851f 	.word	0x51eb851f

08006c80 <atoff>:
 8006c80:	2100      	movs	r1, #0
 8006c82:	f000 be0f 	b.w	80078a4 <strtof>

08006c86 <atoi>:
 8006c86:	220a      	movs	r2, #10
 8006c88:	2100      	movs	r1, #0
 8006c8a:	f000 beeb 	b.w	8007a64 <strtol>

08006c8e <sulp>:
 8006c8e:	b570      	push	{r4, r5, r6, lr}
 8006c90:	4604      	mov	r4, r0
 8006c92:	460d      	mov	r5, r1
 8006c94:	ec45 4b10 	vmov	d0, r4, r5
 8006c98:	4616      	mov	r6, r2
 8006c9a:	f003 ff01 	bl	800aaa0 <__ulp>
 8006c9e:	ec51 0b10 	vmov	r0, r1, d0
 8006ca2:	b17e      	cbz	r6, 8006cc4 <sulp+0x36>
 8006ca4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006ca8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	dd09      	ble.n	8006cc4 <sulp+0x36>
 8006cb0:	051b      	lsls	r3, r3, #20
 8006cb2:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006cb6:	2400      	movs	r4, #0
 8006cb8:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006cbc:	4622      	mov	r2, r4
 8006cbe:	462b      	mov	r3, r5
 8006cc0:	f7f9 fcb2 	bl	8000628 <__aeabi_dmul>
 8006cc4:	ec41 0b10 	vmov	d0, r0, r1
 8006cc8:	bd70      	pop	{r4, r5, r6, pc}
 8006cca:	0000      	movs	r0, r0
 8006ccc:	0000      	movs	r0, r0
	...

08006cd0 <_strtod_l>:
 8006cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd4:	b09f      	sub	sp, #124	@ 0x7c
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006cda:	2200      	movs	r2, #0
 8006cdc:	921a      	str	r2, [sp, #104]	@ 0x68
 8006cde:	9005      	str	r0, [sp, #20]
 8006ce0:	f04f 0a00 	mov.w	sl, #0
 8006ce4:	f04f 0b00 	mov.w	fp, #0
 8006ce8:	460a      	mov	r2, r1
 8006cea:	9219      	str	r2, [sp, #100]	@ 0x64
 8006cec:	7811      	ldrb	r1, [r2, #0]
 8006cee:	292b      	cmp	r1, #43	@ 0x2b
 8006cf0:	d04a      	beq.n	8006d88 <_strtod_l+0xb8>
 8006cf2:	d838      	bhi.n	8006d66 <_strtod_l+0x96>
 8006cf4:	290d      	cmp	r1, #13
 8006cf6:	d832      	bhi.n	8006d5e <_strtod_l+0x8e>
 8006cf8:	2908      	cmp	r1, #8
 8006cfa:	d832      	bhi.n	8006d62 <_strtod_l+0x92>
 8006cfc:	2900      	cmp	r1, #0
 8006cfe:	d03b      	beq.n	8006d78 <_strtod_l+0xa8>
 8006d00:	2200      	movs	r2, #0
 8006d02:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d04:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006d06:	782a      	ldrb	r2, [r5, #0]
 8006d08:	2a30      	cmp	r2, #48	@ 0x30
 8006d0a:	f040 80b2 	bne.w	8006e72 <_strtod_l+0x1a2>
 8006d0e:	786a      	ldrb	r2, [r5, #1]
 8006d10:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006d14:	2a58      	cmp	r2, #88	@ 0x58
 8006d16:	d16e      	bne.n	8006df6 <_strtod_l+0x126>
 8006d18:	9302      	str	r3, [sp, #8]
 8006d1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d1c:	9301      	str	r3, [sp, #4]
 8006d1e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006d20:	9300      	str	r3, [sp, #0]
 8006d22:	4a8f      	ldr	r2, [pc, #572]	@ (8006f60 <_strtod_l+0x290>)
 8006d24:	9805      	ldr	r0, [sp, #20]
 8006d26:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d28:	a919      	add	r1, sp, #100	@ 0x64
 8006d2a:	f002 ffb3 	bl	8009c94 <__gethex>
 8006d2e:	f010 060f 	ands.w	r6, r0, #15
 8006d32:	4604      	mov	r4, r0
 8006d34:	d005      	beq.n	8006d42 <_strtod_l+0x72>
 8006d36:	2e06      	cmp	r6, #6
 8006d38:	d128      	bne.n	8006d8c <_strtod_l+0xbc>
 8006d3a:	3501      	adds	r5, #1
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006d40:	930e      	str	r3, [sp, #56]	@ 0x38
 8006d42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	f040 858e 	bne.w	8007866 <_strtod_l+0xb96>
 8006d4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006d4c:	b1cb      	cbz	r3, 8006d82 <_strtod_l+0xb2>
 8006d4e:	4652      	mov	r2, sl
 8006d50:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006d54:	ec43 2b10 	vmov	d0, r2, r3
 8006d58:	b01f      	add	sp, #124	@ 0x7c
 8006d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d5e:	2920      	cmp	r1, #32
 8006d60:	d1ce      	bne.n	8006d00 <_strtod_l+0x30>
 8006d62:	3201      	adds	r2, #1
 8006d64:	e7c1      	b.n	8006cea <_strtod_l+0x1a>
 8006d66:	292d      	cmp	r1, #45	@ 0x2d
 8006d68:	d1ca      	bne.n	8006d00 <_strtod_l+0x30>
 8006d6a:	2101      	movs	r1, #1
 8006d6c:	910e      	str	r1, [sp, #56]	@ 0x38
 8006d6e:	1c51      	adds	r1, r2, #1
 8006d70:	9119      	str	r1, [sp, #100]	@ 0x64
 8006d72:	7852      	ldrb	r2, [r2, #1]
 8006d74:	2a00      	cmp	r2, #0
 8006d76:	d1c5      	bne.n	8006d04 <_strtod_l+0x34>
 8006d78:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006d7a:	9419      	str	r4, [sp, #100]	@ 0x64
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f040 8570 	bne.w	8007862 <_strtod_l+0xb92>
 8006d82:	4652      	mov	r2, sl
 8006d84:	465b      	mov	r3, fp
 8006d86:	e7e5      	b.n	8006d54 <_strtod_l+0x84>
 8006d88:	2100      	movs	r1, #0
 8006d8a:	e7ef      	b.n	8006d6c <_strtod_l+0x9c>
 8006d8c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006d8e:	b13a      	cbz	r2, 8006da0 <_strtod_l+0xd0>
 8006d90:	2135      	movs	r1, #53	@ 0x35
 8006d92:	a81c      	add	r0, sp, #112	@ 0x70
 8006d94:	f003 ff7e 	bl	800ac94 <__copybits>
 8006d98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006d9a:	9805      	ldr	r0, [sp, #20]
 8006d9c:	f003 fb54 	bl	800a448 <_Bfree>
 8006da0:	3e01      	subs	r6, #1
 8006da2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006da4:	2e04      	cmp	r6, #4
 8006da6:	d806      	bhi.n	8006db6 <_strtod_l+0xe6>
 8006da8:	e8df f006 	tbb	[pc, r6]
 8006dac:	201d0314 	.word	0x201d0314
 8006db0:	14          	.byte	0x14
 8006db1:	00          	.byte	0x00
 8006db2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006db6:	05e1      	lsls	r1, r4, #23
 8006db8:	bf48      	it	mi
 8006dba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006dbe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006dc2:	0d1b      	lsrs	r3, r3, #20
 8006dc4:	051b      	lsls	r3, r3, #20
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d1bb      	bne.n	8006d42 <_strtod_l+0x72>
 8006dca:	f001 ffef 	bl	8008dac <__errno>
 8006dce:	2322      	movs	r3, #34	@ 0x22
 8006dd0:	6003      	str	r3, [r0, #0]
 8006dd2:	e7b6      	b.n	8006d42 <_strtod_l+0x72>
 8006dd4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006dd8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006ddc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006de0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006de4:	e7e7      	b.n	8006db6 <_strtod_l+0xe6>
 8006de6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8006f68 <_strtod_l+0x298>
 8006dea:	e7e4      	b.n	8006db6 <_strtod_l+0xe6>
 8006dec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006df0:	f04f 3aff 	mov.w	sl, #4294967295
 8006df4:	e7df      	b.n	8006db6 <_strtod_l+0xe6>
 8006df6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006df8:	1c5a      	adds	r2, r3, #1
 8006dfa:	9219      	str	r2, [sp, #100]	@ 0x64
 8006dfc:	785b      	ldrb	r3, [r3, #1]
 8006dfe:	2b30      	cmp	r3, #48	@ 0x30
 8006e00:	d0f9      	beq.n	8006df6 <_strtod_l+0x126>
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d09d      	beq.n	8006d42 <_strtod_l+0x72>
 8006e06:	2301      	movs	r3, #1
 8006e08:	2700      	movs	r7, #0
 8006e0a:	9308      	str	r3, [sp, #32]
 8006e0c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e0e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e10:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006e12:	46b9      	mov	r9, r7
 8006e14:	220a      	movs	r2, #10
 8006e16:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006e18:	7805      	ldrb	r5, [r0, #0]
 8006e1a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006e1e:	b2d9      	uxtb	r1, r3
 8006e20:	2909      	cmp	r1, #9
 8006e22:	d928      	bls.n	8006e76 <_strtod_l+0x1a6>
 8006e24:	494f      	ldr	r1, [pc, #316]	@ (8006f64 <_strtod_l+0x294>)
 8006e26:	2201      	movs	r2, #1
 8006e28:	f001 fef4 	bl	8008c14 <strncmp>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	d032      	beq.n	8006e96 <_strtod_l+0x1c6>
 8006e30:	2000      	movs	r0, #0
 8006e32:	462a      	mov	r2, r5
 8006e34:	900a      	str	r0, [sp, #40]	@ 0x28
 8006e36:	464d      	mov	r5, r9
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2a65      	cmp	r2, #101	@ 0x65
 8006e3c:	d001      	beq.n	8006e42 <_strtod_l+0x172>
 8006e3e:	2a45      	cmp	r2, #69	@ 0x45
 8006e40:	d114      	bne.n	8006e6c <_strtod_l+0x19c>
 8006e42:	b91d      	cbnz	r5, 8006e4c <_strtod_l+0x17c>
 8006e44:	9a08      	ldr	r2, [sp, #32]
 8006e46:	4302      	orrs	r2, r0
 8006e48:	d096      	beq.n	8006d78 <_strtod_l+0xa8>
 8006e4a:	2500      	movs	r5, #0
 8006e4c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006e4e:	1c62      	adds	r2, r4, #1
 8006e50:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e52:	7862      	ldrb	r2, [r4, #1]
 8006e54:	2a2b      	cmp	r2, #43	@ 0x2b
 8006e56:	d07a      	beq.n	8006f4e <_strtod_l+0x27e>
 8006e58:	2a2d      	cmp	r2, #45	@ 0x2d
 8006e5a:	d07e      	beq.n	8006f5a <_strtod_l+0x28a>
 8006e5c:	f04f 0c00 	mov.w	ip, #0
 8006e60:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006e64:	2909      	cmp	r1, #9
 8006e66:	f240 8085 	bls.w	8006f74 <_strtod_l+0x2a4>
 8006e6a:	9419      	str	r4, [sp, #100]	@ 0x64
 8006e6c:	f04f 0800 	mov.w	r8, #0
 8006e70:	e0a5      	b.n	8006fbe <_strtod_l+0x2ee>
 8006e72:	2300      	movs	r3, #0
 8006e74:	e7c8      	b.n	8006e08 <_strtod_l+0x138>
 8006e76:	f1b9 0f08 	cmp.w	r9, #8
 8006e7a:	bfd8      	it	le
 8006e7c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006e7e:	f100 0001 	add.w	r0, r0, #1
 8006e82:	bfda      	itte	le
 8006e84:	fb02 3301 	mlale	r3, r2, r1, r3
 8006e88:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006e8a:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006e8e:	f109 0901 	add.w	r9, r9, #1
 8006e92:	9019      	str	r0, [sp, #100]	@ 0x64
 8006e94:	e7bf      	b.n	8006e16 <_strtod_l+0x146>
 8006e96:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e98:	1c5a      	adds	r2, r3, #1
 8006e9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006e9c:	785a      	ldrb	r2, [r3, #1]
 8006e9e:	f1b9 0f00 	cmp.w	r9, #0
 8006ea2:	d03b      	beq.n	8006f1c <_strtod_l+0x24c>
 8006ea4:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ea6:	464d      	mov	r5, r9
 8006ea8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006eac:	2b09      	cmp	r3, #9
 8006eae:	d912      	bls.n	8006ed6 <_strtod_l+0x206>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	e7c2      	b.n	8006e3a <_strtod_l+0x16a>
 8006eb4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006eb6:	1c5a      	adds	r2, r3, #1
 8006eb8:	9219      	str	r2, [sp, #100]	@ 0x64
 8006eba:	785a      	ldrb	r2, [r3, #1]
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	2a30      	cmp	r2, #48	@ 0x30
 8006ec0:	d0f8      	beq.n	8006eb4 <_strtod_l+0x1e4>
 8006ec2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006ec6:	2b08      	cmp	r3, #8
 8006ec8:	f200 84d2 	bhi.w	8007870 <_strtod_l+0xba0>
 8006ecc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ece:	900a      	str	r0, [sp, #40]	@ 0x28
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ed4:	4605      	mov	r5, r0
 8006ed6:	3a30      	subs	r2, #48	@ 0x30
 8006ed8:	f100 0301 	add.w	r3, r0, #1
 8006edc:	d018      	beq.n	8006f10 <_strtod_l+0x240>
 8006ede:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ee0:	4419      	add	r1, r3
 8006ee2:	910a      	str	r1, [sp, #40]	@ 0x28
 8006ee4:	462e      	mov	r6, r5
 8006ee6:	f04f 0e0a 	mov.w	lr, #10
 8006eea:	1c71      	adds	r1, r6, #1
 8006eec:	eba1 0c05 	sub.w	ip, r1, r5
 8006ef0:	4563      	cmp	r3, ip
 8006ef2:	dc15      	bgt.n	8006f20 <_strtod_l+0x250>
 8006ef4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006ef8:	182b      	adds	r3, r5, r0
 8006efa:	2b08      	cmp	r3, #8
 8006efc:	f105 0501 	add.w	r5, r5, #1
 8006f00:	4405      	add	r5, r0
 8006f02:	dc1a      	bgt.n	8006f3a <_strtod_l+0x26a>
 8006f04:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006f06:	230a      	movs	r3, #10
 8006f08:	fb03 2301 	mla	r3, r3, r1, r2
 8006f0c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006f0e:	2300      	movs	r3, #0
 8006f10:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f12:	1c51      	adds	r1, r2, #1
 8006f14:	9119      	str	r1, [sp, #100]	@ 0x64
 8006f16:	7852      	ldrb	r2, [r2, #1]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	e7c5      	b.n	8006ea8 <_strtod_l+0x1d8>
 8006f1c:	4648      	mov	r0, r9
 8006f1e:	e7ce      	b.n	8006ebe <_strtod_l+0x1ee>
 8006f20:	2e08      	cmp	r6, #8
 8006f22:	dc05      	bgt.n	8006f30 <_strtod_l+0x260>
 8006f24:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006f26:	fb0e f606 	mul.w	r6, lr, r6
 8006f2a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8006f2c:	460e      	mov	r6, r1
 8006f2e:	e7dc      	b.n	8006eea <_strtod_l+0x21a>
 8006f30:	2910      	cmp	r1, #16
 8006f32:	bfd8      	it	le
 8006f34:	fb0e f707 	mulle.w	r7, lr, r7
 8006f38:	e7f8      	b.n	8006f2c <_strtod_l+0x25c>
 8006f3a:	2b0f      	cmp	r3, #15
 8006f3c:	bfdc      	itt	le
 8006f3e:	230a      	movle	r3, #10
 8006f40:	fb03 2707 	mlale	r7, r3, r7, r2
 8006f44:	e7e3      	b.n	8006f0e <_strtod_l+0x23e>
 8006f46:	2300      	movs	r3, #0
 8006f48:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e77a      	b.n	8006e44 <_strtod_l+0x174>
 8006f4e:	f04f 0c00 	mov.w	ip, #0
 8006f52:	1ca2      	adds	r2, r4, #2
 8006f54:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f56:	78a2      	ldrb	r2, [r4, #2]
 8006f58:	e782      	b.n	8006e60 <_strtod_l+0x190>
 8006f5a:	f04f 0c01 	mov.w	ip, #1
 8006f5e:	e7f8      	b.n	8006f52 <_strtod_l+0x282>
 8006f60:	0800bc98 	.word	0x0800bc98
 8006f64:	0800ba54 	.word	0x0800ba54
 8006f68:	7ff00000 	.word	0x7ff00000
 8006f6c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f6e:	1c51      	adds	r1, r2, #1
 8006f70:	9119      	str	r1, [sp, #100]	@ 0x64
 8006f72:	7852      	ldrb	r2, [r2, #1]
 8006f74:	2a30      	cmp	r2, #48	@ 0x30
 8006f76:	d0f9      	beq.n	8006f6c <_strtod_l+0x29c>
 8006f78:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006f7c:	2908      	cmp	r1, #8
 8006f7e:	f63f af75 	bhi.w	8006e6c <_strtod_l+0x19c>
 8006f82:	3a30      	subs	r2, #48	@ 0x30
 8006f84:	9209      	str	r2, [sp, #36]	@ 0x24
 8006f86:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f88:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006f8a:	f04f 080a 	mov.w	r8, #10
 8006f8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006f90:	1c56      	adds	r6, r2, #1
 8006f92:	9619      	str	r6, [sp, #100]	@ 0x64
 8006f94:	7852      	ldrb	r2, [r2, #1]
 8006f96:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006f9a:	f1be 0f09 	cmp.w	lr, #9
 8006f9e:	d939      	bls.n	8007014 <_strtod_l+0x344>
 8006fa0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006fa2:	1a76      	subs	r6, r6, r1
 8006fa4:	2e08      	cmp	r6, #8
 8006fa6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006faa:	dc03      	bgt.n	8006fb4 <_strtod_l+0x2e4>
 8006fac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006fae:	4588      	cmp	r8, r1
 8006fb0:	bfa8      	it	ge
 8006fb2:	4688      	movge	r8, r1
 8006fb4:	f1bc 0f00 	cmp.w	ip, #0
 8006fb8:	d001      	beq.n	8006fbe <_strtod_l+0x2ee>
 8006fba:	f1c8 0800 	rsb	r8, r8, #0
 8006fbe:	2d00      	cmp	r5, #0
 8006fc0:	d14e      	bne.n	8007060 <_strtod_l+0x390>
 8006fc2:	9908      	ldr	r1, [sp, #32]
 8006fc4:	4308      	orrs	r0, r1
 8006fc6:	f47f aebc 	bne.w	8006d42 <_strtod_l+0x72>
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	f47f aed4 	bne.w	8006d78 <_strtod_l+0xa8>
 8006fd0:	2a69      	cmp	r2, #105	@ 0x69
 8006fd2:	d028      	beq.n	8007026 <_strtod_l+0x356>
 8006fd4:	dc25      	bgt.n	8007022 <_strtod_l+0x352>
 8006fd6:	2a49      	cmp	r2, #73	@ 0x49
 8006fd8:	d025      	beq.n	8007026 <_strtod_l+0x356>
 8006fda:	2a4e      	cmp	r2, #78	@ 0x4e
 8006fdc:	f47f aecc 	bne.w	8006d78 <_strtod_l+0xa8>
 8006fe0:	499a      	ldr	r1, [pc, #616]	@ (800724c <_strtod_l+0x57c>)
 8006fe2:	a819      	add	r0, sp, #100	@ 0x64
 8006fe4:	f003 f878 	bl	800a0d8 <__match>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	f43f aec5 	beq.w	8006d78 <_strtod_l+0xa8>
 8006fee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	2b28      	cmp	r3, #40	@ 0x28
 8006ff4:	d12e      	bne.n	8007054 <_strtod_l+0x384>
 8006ff6:	4996      	ldr	r1, [pc, #600]	@ (8007250 <_strtod_l+0x580>)
 8006ff8:	aa1c      	add	r2, sp, #112	@ 0x70
 8006ffa:	a819      	add	r0, sp, #100	@ 0x64
 8006ffc:	f003 f880 	bl	800a100 <__hexnan>
 8007000:	2805      	cmp	r0, #5
 8007002:	d127      	bne.n	8007054 <_strtod_l+0x384>
 8007004:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007006:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800700a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800700e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007012:	e696      	b.n	8006d42 <_strtod_l+0x72>
 8007014:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007016:	fb08 2101 	mla	r1, r8, r1, r2
 800701a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800701e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007020:	e7b5      	b.n	8006f8e <_strtod_l+0x2be>
 8007022:	2a6e      	cmp	r2, #110	@ 0x6e
 8007024:	e7da      	b.n	8006fdc <_strtod_l+0x30c>
 8007026:	498b      	ldr	r1, [pc, #556]	@ (8007254 <_strtod_l+0x584>)
 8007028:	a819      	add	r0, sp, #100	@ 0x64
 800702a:	f003 f855 	bl	800a0d8 <__match>
 800702e:	2800      	cmp	r0, #0
 8007030:	f43f aea2 	beq.w	8006d78 <_strtod_l+0xa8>
 8007034:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007036:	4988      	ldr	r1, [pc, #544]	@ (8007258 <_strtod_l+0x588>)
 8007038:	3b01      	subs	r3, #1
 800703a:	a819      	add	r0, sp, #100	@ 0x64
 800703c:	9319      	str	r3, [sp, #100]	@ 0x64
 800703e:	f003 f84b 	bl	800a0d8 <__match>
 8007042:	b910      	cbnz	r0, 800704a <_strtod_l+0x37a>
 8007044:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007046:	3301      	adds	r3, #1
 8007048:	9319      	str	r3, [sp, #100]	@ 0x64
 800704a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8007268 <_strtod_l+0x598>
 800704e:	f04f 0a00 	mov.w	sl, #0
 8007052:	e676      	b.n	8006d42 <_strtod_l+0x72>
 8007054:	4881      	ldr	r0, [pc, #516]	@ (800725c <_strtod_l+0x58c>)
 8007056:	f001 fee7 	bl	8008e28 <nan>
 800705a:	ec5b ab10 	vmov	sl, fp, d0
 800705e:	e670      	b.n	8006d42 <_strtod_l+0x72>
 8007060:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007062:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007064:	eba8 0303 	sub.w	r3, r8, r3
 8007068:	f1b9 0f00 	cmp.w	r9, #0
 800706c:	bf08      	it	eq
 800706e:	46a9      	moveq	r9, r5
 8007070:	2d10      	cmp	r5, #16
 8007072:	9309      	str	r3, [sp, #36]	@ 0x24
 8007074:	462c      	mov	r4, r5
 8007076:	bfa8      	it	ge
 8007078:	2410      	movge	r4, #16
 800707a:	f7f9 fa5b 	bl	8000534 <__aeabi_ui2d>
 800707e:	2d09      	cmp	r5, #9
 8007080:	4682      	mov	sl, r0
 8007082:	468b      	mov	fp, r1
 8007084:	dc13      	bgt.n	80070ae <_strtod_l+0x3de>
 8007086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007088:	2b00      	cmp	r3, #0
 800708a:	f43f ae5a 	beq.w	8006d42 <_strtod_l+0x72>
 800708e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007090:	dd78      	ble.n	8007184 <_strtod_l+0x4b4>
 8007092:	2b16      	cmp	r3, #22
 8007094:	dc5f      	bgt.n	8007156 <_strtod_l+0x486>
 8007096:	4972      	ldr	r1, [pc, #456]	@ (8007260 <_strtod_l+0x590>)
 8007098:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800709c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070a0:	4652      	mov	r2, sl
 80070a2:	465b      	mov	r3, fp
 80070a4:	f7f9 fac0 	bl	8000628 <__aeabi_dmul>
 80070a8:	4682      	mov	sl, r0
 80070aa:	468b      	mov	fp, r1
 80070ac:	e649      	b.n	8006d42 <_strtod_l+0x72>
 80070ae:	4b6c      	ldr	r3, [pc, #432]	@ (8007260 <_strtod_l+0x590>)
 80070b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80070b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80070b8:	f7f9 fab6 	bl	8000628 <__aeabi_dmul>
 80070bc:	4682      	mov	sl, r0
 80070be:	4638      	mov	r0, r7
 80070c0:	468b      	mov	fp, r1
 80070c2:	f7f9 fa37 	bl	8000534 <__aeabi_ui2d>
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	4650      	mov	r0, sl
 80070cc:	4659      	mov	r1, fp
 80070ce:	f7f9 f8f5 	bl	80002bc <__adddf3>
 80070d2:	2d0f      	cmp	r5, #15
 80070d4:	4682      	mov	sl, r0
 80070d6:	468b      	mov	fp, r1
 80070d8:	ddd5      	ble.n	8007086 <_strtod_l+0x3b6>
 80070da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070dc:	1b2c      	subs	r4, r5, r4
 80070de:	441c      	add	r4, r3
 80070e0:	2c00      	cmp	r4, #0
 80070e2:	f340 8093 	ble.w	800720c <_strtod_l+0x53c>
 80070e6:	f014 030f 	ands.w	r3, r4, #15
 80070ea:	d00a      	beq.n	8007102 <_strtod_l+0x432>
 80070ec:	495c      	ldr	r1, [pc, #368]	@ (8007260 <_strtod_l+0x590>)
 80070ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80070f2:	4652      	mov	r2, sl
 80070f4:	465b      	mov	r3, fp
 80070f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070fa:	f7f9 fa95 	bl	8000628 <__aeabi_dmul>
 80070fe:	4682      	mov	sl, r0
 8007100:	468b      	mov	fp, r1
 8007102:	f034 040f 	bics.w	r4, r4, #15
 8007106:	d073      	beq.n	80071f0 <_strtod_l+0x520>
 8007108:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800710c:	dd49      	ble.n	80071a2 <_strtod_l+0x4d2>
 800710e:	2400      	movs	r4, #0
 8007110:	46a0      	mov	r8, r4
 8007112:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007114:	46a1      	mov	r9, r4
 8007116:	9a05      	ldr	r2, [sp, #20]
 8007118:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8007268 <_strtod_l+0x598>
 800711c:	2322      	movs	r3, #34	@ 0x22
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	f04f 0a00 	mov.w	sl, #0
 8007124:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007126:	2b00      	cmp	r3, #0
 8007128:	f43f ae0b 	beq.w	8006d42 <_strtod_l+0x72>
 800712c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800712e:	9805      	ldr	r0, [sp, #20]
 8007130:	f003 f98a 	bl	800a448 <_Bfree>
 8007134:	9805      	ldr	r0, [sp, #20]
 8007136:	4649      	mov	r1, r9
 8007138:	f003 f986 	bl	800a448 <_Bfree>
 800713c:	9805      	ldr	r0, [sp, #20]
 800713e:	4641      	mov	r1, r8
 8007140:	f003 f982 	bl	800a448 <_Bfree>
 8007144:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007146:	9805      	ldr	r0, [sp, #20]
 8007148:	f003 f97e 	bl	800a448 <_Bfree>
 800714c:	9805      	ldr	r0, [sp, #20]
 800714e:	4621      	mov	r1, r4
 8007150:	f003 f97a 	bl	800a448 <_Bfree>
 8007154:	e5f5      	b.n	8006d42 <_strtod_l+0x72>
 8007156:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007158:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800715c:	4293      	cmp	r3, r2
 800715e:	dbbc      	blt.n	80070da <_strtod_l+0x40a>
 8007160:	4c3f      	ldr	r4, [pc, #252]	@ (8007260 <_strtod_l+0x590>)
 8007162:	f1c5 050f 	rsb	r5, r5, #15
 8007166:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800716a:	4652      	mov	r2, sl
 800716c:	465b      	mov	r3, fp
 800716e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007172:	f7f9 fa59 	bl	8000628 <__aeabi_dmul>
 8007176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007178:	1b5d      	subs	r5, r3, r5
 800717a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800717e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007182:	e78f      	b.n	80070a4 <_strtod_l+0x3d4>
 8007184:	3316      	adds	r3, #22
 8007186:	dba8      	blt.n	80070da <_strtod_l+0x40a>
 8007188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800718a:	eba3 0808 	sub.w	r8, r3, r8
 800718e:	4b34      	ldr	r3, [pc, #208]	@ (8007260 <_strtod_l+0x590>)
 8007190:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007194:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007198:	4650      	mov	r0, sl
 800719a:	4659      	mov	r1, fp
 800719c:	f7f9 fb6e 	bl	800087c <__aeabi_ddiv>
 80071a0:	e782      	b.n	80070a8 <_strtod_l+0x3d8>
 80071a2:	2300      	movs	r3, #0
 80071a4:	4f2f      	ldr	r7, [pc, #188]	@ (8007264 <_strtod_l+0x594>)
 80071a6:	1124      	asrs	r4, r4, #4
 80071a8:	4650      	mov	r0, sl
 80071aa:	4659      	mov	r1, fp
 80071ac:	461e      	mov	r6, r3
 80071ae:	2c01      	cmp	r4, #1
 80071b0:	dc21      	bgt.n	80071f6 <_strtod_l+0x526>
 80071b2:	b10b      	cbz	r3, 80071b8 <_strtod_l+0x4e8>
 80071b4:	4682      	mov	sl, r0
 80071b6:	468b      	mov	fp, r1
 80071b8:	492a      	ldr	r1, [pc, #168]	@ (8007264 <_strtod_l+0x594>)
 80071ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80071be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80071c2:	4652      	mov	r2, sl
 80071c4:	465b      	mov	r3, fp
 80071c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80071ca:	f7f9 fa2d 	bl	8000628 <__aeabi_dmul>
 80071ce:	4b26      	ldr	r3, [pc, #152]	@ (8007268 <_strtod_l+0x598>)
 80071d0:	460a      	mov	r2, r1
 80071d2:	400b      	ands	r3, r1
 80071d4:	4925      	ldr	r1, [pc, #148]	@ (800726c <_strtod_l+0x59c>)
 80071d6:	428b      	cmp	r3, r1
 80071d8:	4682      	mov	sl, r0
 80071da:	d898      	bhi.n	800710e <_strtod_l+0x43e>
 80071dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80071e0:	428b      	cmp	r3, r1
 80071e2:	bf86      	itte	hi
 80071e4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8007270 <_strtod_l+0x5a0>
 80071e8:	f04f 3aff 	movhi.w	sl, #4294967295
 80071ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80071f0:	2300      	movs	r3, #0
 80071f2:	9308      	str	r3, [sp, #32]
 80071f4:	e076      	b.n	80072e4 <_strtod_l+0x614>
 80071f6:	07e2      	lsls	r2, r4, #31
 80071f8:	d504      	bpl.n	8007204 <_strtod_l+0x534>
 80071fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071fe:	f7f9 fa13 	bl	8000628 <__aeabi_dmul>
 8007202:	2301      	movs	r3, #1
 8007204:	3601      	adds	r6, #1
 8007206:	1064      	asrs	r4, r4, #1
 8007208:	3708      	adds	r7, #8
 800720a:	e7d0      	b.n	80071ae <_strtod_l+0x4de>
 800720c:	d0f0      	beq.n	80071f0 <_strtod_l+0x520>
 800720e:	4264      	negs	r4, r4
 8007210:	f014 020f 	ands.w	r2, r4, #15
 8007214:	d00a      	beq.n	800722c <_strtod_l+0x55c>
 8007216:	4b12      	ldr	r3, [pc, #72]	@ (8007260 <_strtod_l+0x590>)
 8007218:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800721c:	4650      	mov	r0, sl
 800721e:	4659      	mov	r1, fp
 8007220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007224:	f7f9 fb2a 	bl	800087c <__aeabi_ddiv>
 8007228:	4682      	mov	sl, r0
 800722a:	468b      	mov	fp, r1
 800722c:	1124      	asrs	r4, r4, #4
 800722e:	d0df      	beq.n	80071f0 <_strtod_l+0x520>
 8007230:	2c1f      	cmp	r4, #31
 8007232:	dd1f      	ble.n	8007274 <_strtod_l+0x5a4>
 8007234:	2400      	movs	r4, #0
 8007236:	46a0      	mov	r8, r4
 8007238:	940b      	str	r4, [sp, #44]	@ 0x2c
 800723a:	46a1      	mov	r9, r4
 800723c:	9a05      	ldr	r2, [sp, #20]
 800723e:	2322      	movs	r3, #34	@ 0x22
 8007240:	f04f 0a00 	mov.w	sl, #0
 8007244:	f04f 0b00 	mov.w	fp, #0
 8007248:	6013      	str	r3, [r2, #0]
 800724a:	e76b      	b.n	8007124 <_strtod_l+0x454>
 800724c:	0800ba63 	.word	0x0800ba63
 8007250:	0800bc84 	.word	0x0800bc84
 8007254:	0800ba5b 	.word	0x0800ba5b
 8007258:	0800bb47 	.word	0x0800bb47
 800725c:	0800bb43 	.word	0x0800bb43
 8007260:	0800be10 	.word	0x0800be10
 8007264:	0800bde8 	.word	0x0800bde8
 8007268:	7ff00000 	.word	0x7ff00000
 800726c:	7ca00000 	.word	0x7ca00000
 8007270:	7fefffff 	.word	0x7fefffff
 8007274:	f014 0310 	ands.w	r3, r4, #16
 8007278:	bf18      	it	ne
 800727a:	236a      	movne	r3, #106	@ 0x6a
 800727c:	4ea9      	ldr	r6, [pc, #676]	@ (8007524 <_strtod_l+0x854>)
 800727e:	9308      	str	r3, [sp, #32]
 8007280:	4650      	mov	r0, sl
 8007282:	4659      	mov	r1, fp
 8007284:	2300      	movs	r3, #0
 8007286:	07e7      	lsls	r7, r4, #31
 8007288:	d504      	bpl.n	8007294 <_strtod_l+0x5c4>
 800728a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800728e:	f7f9 f9cb 	bl	8000628 <__aeabi_dmul>
 8007292:	2301      	movs	r3, #1
 8007294:	1064      	asrs	r4, r4, #1
 8007296:	f106 0608 	add.w	r6, r6, #8
 800729a:	d1f4      	bne.n	8007286 <_strtod_l+0x5b6>
 800729c:	b10b      	cbz	r3, 80072a2 <_strtod_l+0x5d2>
 800729e:	4682      	mov	sl, r0
 80072a0:	468b      	mov	fp, r1
 80072a2:	9b08      	ldr	r3, [sp, #32]
 80072a4:	b1b3      	cbz	r3, 80072d4 <_strtod_l+0x604>
 80072a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80072aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	4659      	mov	r1, fp
 80072b2:	dd0f      	ble.n	80072d4 <_strtod_l+0x604>
 80072b4:	2b1f      	cmp	r3, #31
 80072b6:	dd56      	ble.n	8007366 <_strtod_l+0x696>
 80072b8:	2b34      	cmp	r3, #52	@ 0x34
 80072ba:	bfde      	ittt	le
 80072bc:	f04f 33ff 	movle.w	r3, #4294967295
 80072c0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80072c4:	4093      	lslle	r3, r2
 80072c6:	f04f 0a00 	mov.w	sl, #0
 80072ca:	bfcc      	ite	gt
 80072cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80072d0:	ea03 0b01 	andle.w	fp, r3, r1
 80072d4:	2200      	movs	r2, #0
 80072d6:	2300      	movs	r3, #0
 80072d8:	4650      	mov	r0, sl
 80072da:	4659      	mov	r1, fp
 80072dc:	f7f9 fc0c 	bl	8000af8 <__aeabi_dcmpeq>
 80072e0:	2800      	cmp	r0, #0
 80072e2:	d1a7      	bne.n	8007234 <_strtod_l+0x564>
 80072e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072e6:	9300      	str	r3, [sp, #0]
 80072e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80072ea:	9805      	ldr	r0, [sp, #20]
 80072ec:	462b      	mov	r3, r5
 80072ee:	464a      	mov	r2, r9
 80072f0:	f003 f912 	bl	800a518 <__s2b>
 80072f4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80072f6:	2800      	cmp	r0, #0
 80072f8:	f43f af09 	beq.w	800710e <_strtod_l+0x43e>
 80072fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80072fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007300:	2a00      	cmp	r2, #0
 8007302:	eba3 0308 	sub.w	r3, r3, r8
 8007306:	bfa8      	it	ge
 8007308:	2300      	movge	r3, #0
 800730a:	9312      	str	r3, [sp, #72]	@ 0x48
 800730c:	2400      	movs	r4, #0
 800730e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007312:	9316      	str	r3, [sp, #88]	@ 0x58
 8007314:	46a0      	mov	r8, r4
 8007316:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007318:	9805      	ldr	r0, [sp, #20]
 800731a:	6859      	ldr	r1, [r3, #4]
 800731c:	f003 f854 	bl	800a3c8 <_Balloc>
 8007320:	4681      	mov	r9, r0
 8007322:	2800      	cmp	r0, #0
 8007324:	f43f aef7 	beq.w	8007116 <_strtod_l+0x446>
 8007328:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800732a:	691a      	ldr	r2, [r3, #16]
 800732c:	3202      	adds	r2, #2
 800732e:	f103 010c 	add.w	r1, r3, #12
 8007332:	0092      	lsls	r2, r2, #2
 8007334:	300c      	adds	r0, #12
 8007336:	f001 fd66 	bl	8008e06 <memcpy>
 800733a:	ec4b ab10 	vmov	d0, sl, fp
 800733e:	9805      	ldr	r0, [sp, #20]
 8007340:	aa1c      	add	r2, sp, #112	@ 0x70
 8007342:	a91b      	add	r1, sp, #108	@ 0x6c
 8007344:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007348:	f003 fc1a 	bl	800ab80 <__d2b>
 800734c:	901a      	str	r0, [sp, #104]	@ 0x68
 800734e:	2800      	cmp	r0, #0
 8007350:	f43f aee1 	beq.w	8007116 <_strtod_l+0x446>
 8007354:	9805      	ldr	r0, [sp, #20]
 8007356:	2101      	movs	r1, #1
 8007358:	f003 f974 	bl	800a644 <__i2b>
 800735c:	4680      	mov	r8, r0
 800735e:	b948      	cbnz	r0, 8007374 <_strtod_l+0x6a4>
 8007360:	f04f 0800 	mov.w	r8, #0
 8007364:	e6d7      	b.n	8007116 <_strtod_l+0x446>
 8007366:	f04f 32ff 	mov.w	r2, #4294967295
 800736a:	fa02 f303 	lsl.w	r3, r2, r3
 800736e:	ea03 0a0a 	and.w	sl, r3, sl
 8007372:	e7af      	b.n	80072d4 <_strtod_l+0x604>
 8007374:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007376:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007378:	2d00      	cmp	r5, #0
 800737a:	bfab      	itete	ge
 800737c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800737e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007380:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007382:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007384:	bfac      	ite	ge
 8007386:	18ef      	addge	r7, r5, r3
 8007388:	1b5e      	sublt	r6, r3, r5
 800738a:	9b08      	ldr	r3, [sp, #32]
 800738c:	1aed      	subs	r5, r5, r3
 800738e:	4415      	add	r5, r2
 8007390:	4b65      	ldr	r3, [pc, #404]	@ (8007528 <_strtod_l+0x858>)
 8007392:	3d01      	subs	r5, #1
 8007394:	429d      	cmp	r5, r3
 8007396:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800739a:	da50      	bge.n	800743e <_strtod_l+0x76e>
 800739c:	1b5b      	subs	r3, r3, r5
 800739e:	2b1f      	cmp	r3, #31
 80073a0:	eba2 0203 	sub.w	r2, r2, r3
 80073a4:	f04f 0101 	mov.w	r1, #1
 80073a8:	dc3d      	bgt.n	8007426 <_strtod_l+0x756>
 80073aa:	fa01 f303 	lsl.w	r3, r1, r3
 80073ae:	9313      	str	r3, [sp, #76]	@ 0x4c
 80073b0:	2300      	movs	r3, #0
 80073b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80073b4:	18bd      	adds	r5, r7, r2
 80073b6:	9b08      	ldr	r3, [sp, #32]
 80073b8:	42af      	cmp	r7, r5
 80073ba:	4416      	add	r6, r2
 80073bc:	441e      	add	r6, r3
 80073be:	463b      	mov	r3, r7
 80073c0:	bfa8      	it	ge
 80073c2:	462b      	movge	r3, r5
 80073c4:	42b3      	cmp	r3, r6
 80073c6:	bfa8      	it	ge
 80073c8:	4633      	movge	r3, r6
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	bfc2      	ittt	gt
 80073ce:	1aed      	subgt	r5, r5, r3
 80073d0:	1af6      	subgt	r6, r6, r3
 80073d2:	1aff      	subgt	r7, r7, r3
 80073d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	dd16      	ble.n	8007408 <_strtod_l+0x738>
 80073da:	4641      	mov	r1, r8
 80073dc:	9805      	ldr	r0, [sp, #20]
 80073de:	461a      	mov	r2, r3
 80073e0:	f003 f9e8 	bl	800a7b4 <__pow5mult>
 80073e4:	4680      	mov	r8, r0
 80073e6:	2800      	cmp	r0, #0
 80073e8:	d0ba      	beq.n	8007360 <_strtod_l+0x690>
 80073ea:	4601      	mov	r1, r0
 80073ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80073ee:	9805      	ldr	r0, [sp, #20]
 80073f0:	f003 f93e 	bl	800a670 <__multiply>
 80073f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80073f6:	2800      	cmp	r0, #0
 80073f8:	f43f ae8d 	beq.w	8007116 <_strtod_l+0x446>
 80073fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80073fe:	9805      	ldr	r0, [sp, #20]
 8007400:	f003 f822 	bl	800a448 <_Bfree>
 8007404:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007406:	931a      	str	r3, [sp, #104]	@ 0x68
 8007408:	2d00      	cmp	r5, #0
 800740a:	dc1d      	bgt.n	8007448 <_strtod_l+0x778>
 800740c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800740e:	2b00      	cmp	r3, #0
 8007410:	dd23      	ble.n	800745a <_strtod_l+0x78a>
 8007412:	4649      	mov	r1, r9
 8007414:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007416:	9805      	ldr	r0, [sp, #20]
 8007418:	f003 f9cc 	bl	800a7b4 <__pow5mult>
 800741c:	4681      	mov	r9, r0
 800741e:	b9e0      	cbnz	r0, 800745a <_strtod_l+0x78a>
 8007420:	f04f 0900 	mov.w	r9, #0
 8007424:	e677      	b.n	8007116 <_strtod_l+0x446>
 8007426:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800742a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800742e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007432:	35e2      	adds	r5, #226	@ 0xe2
 8007434:	fa01 f305 	lsl.w	r3, r1, r5
 8007438:	9310      	str	r3, [sp, #64]	@ 0x40
 800743a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800743c:	e7ba      	b.n	80073b4 <_strtod_l+0x6e4>
 800743e:	2300      	movs	r3, #0
 8007440:	9310      	str	r3, [sp, #64]	@ 0x40
 8007442:	2301      	movs	r3, #1
 8007444:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007446:	e7b5      	b.n	80073b4 <_strtod_l+0x6e4>
 8007448:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800744a:	9805      	ldr	r0, [sp, #20]
 800744c:	462a      	mov	r2, r5
 800744e:	f003 fa0b 	bl	800a868 <__lshift>
 8007452:	901a      	str	r0, [sp, #104]	@ 0x68
 8007454:	2800      	cmp	r0, #0
 8007456:	d1d9      	bne.n	800740c <_strtod_l+0x73c>
 8007458:	e65d      	b.n	8007116 <_strtod_l+0x446>
 800745a:	2e00      	cmp	r6, #0
 800745c:	dd07      	ble.n	800746e <_strtod_l+0x79e>
 800745e:	4649      	mov	r1, r9
 8007460:	9805      	ldr	r0, [sp, #20]
 8007462:	4632      	mov	r2, r6
 8007464:	f003 fa00 	bl	800a868 <__lshift>
 8007468:	4681      	mov	r9, r0
 800746a:	2800      	cmp	r0, #0
 800746c:	d0d8      	beq.n	8007420 <_strtod_l+0x750>
 800746e:	2f00      	cmp	r7, #0
 8007470:	dd08      	ble.n	8007484 <_strtod_l+0x7b4>
 8007472:	4641      	mov	r1, r8
 8007474:	9805      	ldr	r0, [sp, #20]
 8007476:	463a      	mov	r2, r7
 8007478:	f003 f9f6 	bl	800a868 <__lshift>
 800747c:	4680      	mov	r8, r0
 800747e:	2800      	cmp	r0, #0
 8007480:	f43f ae49 	beq.w	8007116 <_strtod_l+0x446>
 8007484:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007486:	9805      	ldr	r0, [sp, #20]
 8007488:	464a      	mov	r2, r9
 800748a:	f003 fa75 	bl	800a978 <__mdiff>
 800748e:	4604      	mov	r4, r0
 8007490:	2800      	cmp	r0, #0
 8007492:	f43f ae40 	beq.w	8007116 <_strtod_l+0x446>
 8007496:	68c3      	ldr	r3, [r0, #12]
 8007498:	930f      	str	r3, [sp, #60]	@ 0x3c
 800749a:	2300      	movs	r3, #0
 800749c:	60c3      	str	r3, [r0, #12]
 800749e:	4641      	mov	r1, r8
 80074a0:	f003 fa4e 	bl	800a940 <__mcmp>
 80074a4:	2800      	cmp	r0, #0
 80074a6:	da45      	bge.n	8007534 <_strtod_l+0x864>
 80074a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074aa:	ea53 030a 	orrs.w	r3, r3, sl
 80074ae:	d16b      	bne.n	8007588 <_strtod_l+0x8b8>
 80074b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d167      	bne.n	8007588 <_strtod_l+0x8b8>
 80074b8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80074bc:	0d1b      	lsrs	r3, r3, #20
 80074be:	051b      	lsls	r3, r3, #20
 80074c0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80074c4:	d960      	bls.n	8007588 <_strtod_l+0x8b8>
 80074c6:	6963      	ldr	r3, [r4, #20]
 80074c8:	b913      	cbnz	r3, 80074d0 <_strtod_l+0x800>
 80074ca:	6923      	ldr	r3, [r4, #16]
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	dd5b      	ble.n	8007588 <_strtod_l+0x8b8>
 80074d0:	4621      	mov	r1, r4
 80074d2:	2201      	movs	r2, #1
 80074d4:	9805      	ldr	r0, [sp, #20]
 80074d6:	f003 f9c7 	bl	800a868 <__lshift>
 80074da:	4641      	mov	r1, r8
 80074dc:	4604      	mov	r4, r0
 80074de:	f003 fa2f 	bl	800a940 <__mcmp>
 80074e2:	2800      	cmp	r0, #0
 80074e4:	dd50      	ble.n	8007588 <_strtod_l+0x8b8>
 80074e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80074ea:	9a08      	ldr	r2, [sp, #32]
 80074ec:	0d1b      	lsrs	r3, r3, #20
 80074ee:	051b      	lsls	r3, r3, #20
 80074f0:	2a00      	cmp	r2, #0
 80074f2:	d06a      	beq.n	80075ca <_strtod_l+0x8fa>
 80074f4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80074f8:	d867      	bhi.n	80075ca <_strtod_l+0x8fa>
 80074fa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80074fe:	f67f ae9d 	bls.w	800723c <_strtod_l+0x56c>
 8007502:	4b0a      	ldr	r3, [pc, #40]	@ (800752c <_strtod_l+0x85c>)
 8007504:	4650      	mov	r0, sl
 8007506:	4659      	mov	r1, fp
 8007508:	2200      	movs	r2, #0
 800750a:	f7f9 f88d 	bl	8000628 <__aeabi_dmul>
 800750e:	4b08      	ldr	r3, [pc, #32]	@ (8007530 <_strtod_l+0x860>)
 8007510:	400b      	ands	r3, r1
 8007512:	4682      	mov	sl, r0
 8007514:	468b      	mov	fp, r1
 8007516:	2b00      	cmp	r3, #0
 8007518:	f47f ae08 	bne.w	800712c <_strtod_l+0x45c>
 800751c:	9a05      	ldr	r2, [sp, #20]
 800751e:	2322      	movs	r3, #34	@ 0x22
 8007520:	6013      	str	r3, [r2, #0]
 8007522:	e603      	b.n	800712c <_strtod_l+0x45c>
 8007524:	0800bcb0 	.word	0x0800bcb0
 8007528:	fffffc02 	.word	0xfffffc02
 800752c:	39500000 	.word	0x39500000
 8007530:	7ff00000 	.word	0x7ff00000
 8007534:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007538:	d165      	bne.n	8007606 <_strtod_l+0x936>
 800753a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800753c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007540:	b35a      	cbz	r2, 800759a <_strtod_l+0x8ca>
 8007542:	4a9f      	ldr	r2, [pc, #636]	@ (80077c0 <_strtod_l+0xaf0>)
 8007544:	4293      	cmp	r3, r2
 8007546:	d12b      	bne.n	80075a0 <_strtod_l+0x8d0>
 8007548:	9b08      	ldr	r3, [sp, #32]
 800754a:	4651      	mov	r1, sl
 800754c:	b303      	cbz	r3, 8007590 <_strtod_l+0x8c0>
 800754e:	4b9d      	ldr	r3, [pc, #628]	@ (80077c4 <_strtod_l+0xaf4>)
 8007550:	465a      	mov	r2, fp
 8007552:	4013      	ands	r3, r2
 8007554:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007558:	f04f 32ff 	mov.w	r2, #4294967295
 800755c:	d81b      	bhi.n	8007596 <_strtod_l+0x8c6>
 800755e:	0d1b      	lsrs	r3, r3, #20
 8007560:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007564:	fa02 f303 	lsl.w	r3, r2, r3
 8007568:	4299      	cmp	r1, r3
 800756a:	d119      	bne.n	80075a0 <_strtod_l+0x8d0>
 800756c:	4b96      	ldr	r3, [pc, #600]	@ (80077c8 <_strtod_l+0xaf8>)
 800756e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007570:	429a      	cmp	r2, r3
 8007572:	d102      	bne.n	800757a <_strtod_l+0x8aa>
 8007574:	3101      	adds	r1, #1
 8007576:	f43f adce 	beq.w	8007116 <_strtod_l+0x446>
 800757a:	4b92      	ldr	r3, [pc, #584]	@ (80077c4 <_strtod_l+0xaf4>)
 800757c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800757e:	401a      	ands	r2, r3
 8007580:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007584:	f04f 0a00 	mov.w	sl, #0
 8007588:	9b08      	ldr	r3, [sp, #32]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1b9      	bne.n	8007502 <_strtod_l+0x832>
 800758e:	e5cd      	b.n	800712c <_strtod_l+0x45c>
 8007590:	f04f 33ff 	mov.w	r3, #4294967295
 8007594:	e7e8      	b.n	8007568 <_strtod_l+0x898>
 8007596:	4613      	mov	r3, r2
 8007598:	e7e6      	b.n	8007568 <_strtod_l+0x898>
 800759a:	ea53 030a 	orrs.w	r3, r3, sl
 800759e:	d0a2      	beq.n	80074e6 <_strtod_l+0x816>
 80075a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80075a2:	b1db      	cbz	r3, 80075dc <_strtod_l+0x90c>
 80075a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80075a6:	4213      	tst	r3, r2
 80075a8:	d0ee      	beq.n	8007588 <_strtod_l+0x8b8>
 80075aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075ac:	9a08      	ldr	r2, [sp, #32]
 80075ae:	4650      	mov	r0, sl
 80075b0:	4659      	mov	r1, fp
 80075b2:	b1bb      	cbz	r3, 80075e4 <_strtod_l+0x914>
 80075b4:	f7ff fb6b 	bl	8006c8e <sulp>
 80075b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075bc:	ec53 2b10 	vmov	r2, r3, d0
 80075c0:	f7f8 fe7c 	bl	80002bc <__adddf3>
 80075c4:	4682      	mov	sl, r0
 80075c6:	468b      	mov	fp, r1
 80075c8:	e7de      	b.n	8007588 <_strtod_l+0x8b8>
 80075ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80075ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80075d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80075d6:	f04f 3aff 	mov.w	sl, #4294967295
 80075da:	e7d5      	b.n	8007588 <_strtod_l+0x8b8>
 80075dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80075de:	ea13 0f0a 	tst.w	r3, sl
 80075e2:	e7e1      	b.n	80075a8 <_strtod_l+0x8d8>
 80075e4:	f7ff fb53 	bl	8006c8e <sulp>
 80075e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80075ec:	ec53 2b10 	vmov	r2, r3, d0
 80075f0:	f7f8 fe62 	bl	80002b8 <__aeabi_dsub>
 80075f4:	2200      	movs	r2, #0
 80075f6:	2300      	movs	r3, #0
 80075f8:	4682      	mov	sl, r0
 80075fa:	468b      	mov	fp, r1
 80075fc:	f7f9 fa7c 	bl	8000af8 <__aeabi_dcmpeq>
 8007600:	2800      	cmp	r0, #0
 8007602:	d0c1      	beq.n	8007588 <_strtod_l+0x8b8>
 8007604:	e61a      	b.n	800723c <_strtod_l+0x56c>
 8007606:	4641      	mov	r1, r8
 8007608:	4620      	mov	r0, r4
 800760a:	f003 fb11 	bl	800ac30 <__ratio>
 800760e:	ec57 6b10 	vmov	r6, r7, d0
 8007612:	2200      	movs	r2, #0
 8007614:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007618:	4630      	mov	r0, r6
 800761a:	4639      	mov	r1, r7
 800761c:	f7f9 fa80 	bl	8000b20 <__aeabi_dcmple>
 8007620:	2800      	cmp	r0, #0
 8007622:	d06f      	beq.n	8007704 <_strtod_l+0xa34>
 8007624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007626:	2b00      	cmp	r3, #0
 8007628:	d17a      	bne.n	8007720 <_strtod_l+0xa50>
 800762a:	f1ba 0f00 	cmp.w	sl, #0
 800762e:	d158      	bne.n	80076e2 <_strtod_l+0xa12>
 8007630:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007632:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007636:	2b00      	cmp	r3, #0
 8007638:	d15a      	bne.n	80076f0 <_strtod_l+0xa20>
 800763a:	4b64      	ldr	r3, [pc, #400]	@ (80077cc <_strtod_l+0xafc>)
 800763c:	2200      	movs	r2, #0
 800763e:	4630      	mov	r0, r6
 8007640:	4639      	mov	r1, r7
 8007642:	f7f9 fa63 	bl	8000b0c <__aeabi_dcmplt>
 8007646:	2800      	cmp	r0, #0
 8007648:	d159      	bne.n	80076fe <_strtod_l+0xa2e>
 800764a:	4630      	mov	r0, r6
 800764c:	4639      	mov	r1, r7
 800764e:	4b60      	ldr	r3, [pc, #384]	@ (80077d0 <_strtod_l+0xb00>)
 8007650:	2200      	movs	r2, #0
 8007652:	f7f8 ffe9 	bl	8000628 <__aeabi_dmul>
 8007656:	4606      	mov	r6, r0
 8007658:	460f      	mov	r7, r1
 800765a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800765e:	9606      	str	r6, [sp, #24]
 8007660:	9307      	str	r3, [sp, #28]
 8007662:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007666:	4d57      	ldr	r5, [pc, #348]	@ (80077c4 <_strtod_l+0xaf4>)
 8007668:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800766c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800766e:	401d      	ands	r5, r3
 8007670:	4b58      	ldr	r3, [pc, #352]	@ (80077d4 <_strtod_l+0xb04>)
 8007672:	429d      	cmp	r5, r3
 8007674:	f040 80b2 	bne.w	80077dc <_strtod_l+0xb0c>
 8007678:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800767a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800767e:	ec4b ab10 	vmov	d0, sl, fp
 8007682:	f003 fa0d 	bl	800aaa0 <__ulp>
 8007686:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800768a:	ec51 0b10 	vmov	r0, r1, d0
 800768e:	f7f8 ffcb 	bl	8000628 <__aeabi_dmul>
 8007692:	4652      	mov	r2, sl
 8007694:	465b      	mov	r3, fp
 8007696:	f7f8 fe11 	bl	80002bc <__adddf3>
 800769a:	460b      	mov	r3, r1
 800769c:	4949      	ldr	r1, [pc, #292]	@ (80077c4 <_strtod_l+0xaf4>)
 800769e:	4a4e      	ldr	r2, [pc, #312]	@ (80077d8 <_strtod_l+0xb08>)
 80076a0:	4019      	ands	r1, r3
 80076a2:	4291      	cmp	r1, r2
 80076a4:	4682      	mov	sl, r0
 80076a6:	d942      	bls.n	800772e <_strtod_l+0xa5e>
 80076a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80076aa:	4b47      	ldr	r3, [pc, #284]	@ (80077c8 <_strtod_l+0xaf8>)
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d103      	bne.n	80076b8 <_strtod_l+0x9e8>
 80076b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80076b2:	3301      	adds	r3, #1
 80076b4:	f43f ad2f 	beq.w	8007116 <_strtod_l+0x446>
 80076b8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80077c8 <_strtod_l+0xaf8>
 80076bc:	f04f 3aff 	mov.w	sl, #4294967295
 80076c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80076c2:	9805      	ldr	r0, [sp, #20]
 80076c4:	f002 fec0 	bl	800a448 <_Bfree>
 80076c8:	9805      	ldr	r0, [sp, #20]
 80076ca:	4649      	mov	r1, r9
 80076cc:	f002 febc 	bl	800a448 <_Bfree>
 80076d0:	9805      	ldr	r0, [sp, #20]
 80076d2:	4641      	mov	r1, r8
 80076d4:	f002 feb8 	bl	800a448 <_Bfree>
 80076d8:	9805      	ldr	r0, [sp, #20]
 80076da:	4621      	mov	r1, r4
 80076dc:	f002 feb4 	bl	800a448 <_Bfree>
 80076e0:	e619      	b.n	8007316 <_strtod_l+0x646>
 80076e2:	f1ba 0f01 	cmp.w	sl, #1
 80076e6:	d103      	bne.n	80076f0 <_strtod_l+0xa20>
 80076e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	f43f ada6 	beq.w	800723c <_strtod_l+0x56c>
 80076f0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80077a0 <_strtod_l+0xad0>
 80076f4:	4f35      	ldr	r7, [pc, #212]	@ (80077cc <_strtod_l+0xafc>)
 80076f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80076fa:	2600      	movs	r6, #0
 80076fc:	e7b1      	b.n	8007662 <_strtod_l+0x992>
 80076fe:	4f34      	ldr	r7, [pc, #208]	@ (80077d0 <_strtod_l+0xb00>)
 8007700:	2600      	movs	r6, #0
 8007702:	e7aa      	b.n	800765a <_strtod_l+0x98a>
 8007704:	4b32      	ldr	r3, [pc, #200]	@ (80077d0 <_strtod_l+0xb00>)
 8007706:	4630      	mov	r0, r6
 8007708:	4639      	mov	r1, r7
 800770a:	2200      	movs	r2, #0
 800770c:	f7f8 ff8c 	bl	8000628 <__aeabi_dmul>
 8007710:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007712:	4606      	mov	r6, r0
 8007714:	460f      	mov	r7, r1
 8007716:	2b00      	cmp	r3, #0
 8007718:	d09f      	beq.n	800765a <_strtod_l+0x98a>
 800771a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800771e:	e7a0      	b.n	8007662 <_strtod_l+0x992>
 8007720:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80077a8 <_strtod_l+0xad8>
 8007724:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007728:	ec57 6b17 	vmov	r6, r7, d7
 800772c:	e799      	b.n	8007662 <_strtod_l+0x992>
 800772e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007732:	9b08      	ldr	r3, [sp, #32]
 8007734:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1c1      	bne.n	80076c0 <_strtod_l+0x9f0>
 800773c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007740:	0d1b      	lsrs	r3, r3, #20
 8007742:	051b      	lsls	r3, r3, #20
 8007744:	429d      	cmp	r5, r3
 8007746:	d1bb      	bne.n	80076c0 <_strtod_l+0x9f0>
 8007748:	4630      	mov	r0, r6
 800774a:	4639      	mov	r1, r7
 800774c:	f7f9 facc 	bl	8000ce8 <__aeabi_d2lz>
 8007750:	f7f8 ff3c 	bl	80005cc <__aeabi_l2d>
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	4630      	mov	r0, r6
 800775a:	4639      	mov	r1, r7
 800775c:	f7f8 fdac 	bl	80002b8 <__aeabi_dsub>
 8007760:	460b      	mov	r3, r1
 8007762:	4602      	mov	r2, r0
 8007764:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007768:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800776c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800776e:	ea46 060a 	orr.w	r6, r6, sl
 8007772:	431e      	orrs	r6, r3
 8007774:	d06f      	beq.n	8007856 <_strtod_l+0xb86>
 8007776:	a30e      	add	r3, pc, #56	@ (adr r3, 80077b0 <_strtod_l+0xae0>)
 8007778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777c:	f7f9 f9c6 	bl	8000b0c <__aeabi_dcmplt>
 8007780:	2800      	cmp	r0, #0
 8007782:	f47f acd3 	bne.w	800712c <_strtod_l+0x45c>
 8007786:	a30c      	add	r3, pc, #48	@ (adr r3, 80077b8 <_strtod_l+0xae8>)
 8007788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800778c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007790:	f7f9 f9da 	bl	8000b48 <__aeabi_dcmpgt>
 8007794:	2800      	cmp	r0, #0
 8007796:	d093      	beq.n	80076c0 <_strtod_l+0x9f0>
 8007798:	e4c8      	b.n	800712c <_strtod_l+0x45c>
 800779a:	bf00      	nop
 800779c:	f3af 8000 	nop.w
 80077a0:	00000000 	.word	0x00000000
 80077a4:	bff00000 	.word	0xbff00000
 80077a8:	00000000 	.word	0x00000000
 80077ac:	3ff00000 	.word	0x3ff00000
 80077b0:	94a03595 	.word	0x94a03595
 80077b4:	3fdfffff 	.word	0x3fdfffff
 80077b8:	35afe535 	.word	0x35afe535
 80077bc:	3fe00000 	.word	0x3fe00000
 80077c0:	000fffff 	.word	0x000fffff
 80077c4:	7ff00000 	.word	0x7ff00000
 80077c8:	7fefffff 	.word	0x7fefffff
 80077cc:	3ff00000 	.word	0x3ff00000
 80077d0:	3fe00000 	.word	0x3fe00000
 80077d4:	7fe00000 	.word	0x7fe00000
 80077d8:	7c9fffff 	.word	0x7c9fffff
 80077dc:	9b08      	ldr	r3, [sp, #32]
 80077de:	b323      	cbz	r3, 800782a <_strtod_l+0xb5a>
 80077e0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80077e4:	d821      	bhi.n	800782a <_strtod_l+0xb5a>
 80077e6:	a328      	add	r3, pc, #160	@ (adr r3, 8007888 <_strtod_l+0xbb8>)
 80077e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ec:	4630      	mov	r0, r6
 80077ee:	4639      	mov	r1, r7
 80077f0:	f7f9 f996 	bl	8000b20 <__aeabi_dcmple>
 80077f4:	b1a0      	cbz	r0, 8007820 <_strtod_l+0xb50>
 80077f6:	4639      	mov	r1, r7
 80077f8:	4630      	mov	r0, r6
 80077fa:	f7f9 f9ed 	bl	8000bd8 <__aeabi_d2uiz>
 80077fe:	2801      	cmp	r0, #1
 8007800:	bf38      	it	cc
 8007802:	2001      	movcc	r0, #1
 8007804:	f7f8 fe96 	bl	8000534 <__aeabi_ui2d>
 8007808:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800780a:	4606      	mov	r6, r0
 800780c:	460f      	mov	r7, r1
 800780e:	b9fb      	cbnz	r3, 8007850 <_strtod_l+0xb80>
 8007810:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007814:	9014      	str	r0, [sp, #80]	@ 0x50
 8007816:	9315      	str	r3, [sp, #84]	@ 0x54
 8007818:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800781c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007820:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007822:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007826:	1b5b      	subs	r3, r3, r5
 8007828:	9311      	str	r3, [sp, #68]	@ 0x44
 800782a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800782e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007832:	f003 f935 	bl	800aaa0 <__ulp>
 8007836:	4650      	mov	r0, sl
 8007838:	ec53 2b10 	vmov	r2, r3, d0
 800783c:	4659      	mov	r1, fp
 800783e:	f7f8 fef3 	bl	8000628 <__aeabi_dmul>
 8007842:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007846:	f7f8 fd39 	bl	80002bc <__adddf3>
 800784a:	4682      	mov	sl, r0
 800784c:	468b      	mov	fp, r1
 800784e:	e770      	b.n	8007732 <_strtod_l+0xa62>
 8007850:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007854:	e7e0      	b.n	8007818 <_strtod_l+0xb48>
 8007856:	a30e      	add	r3, pc, #56	@ (adr r3, 8007890 <_strtod_l+0xbc0>)
 8007858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785c:	f7f9 f956 	bl	8000b0c <__aeabi_dcmplt>
 8007860:	e798      	b.n	8007794 <_strtod_l+0xac4>
 8007862:	2300      	movs	r3, #0
 8007864:	930e      	str	r3, [sp, #56]	@ 0x38
 8007866:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007868:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800786a:	6013      	str	r3, [r2, #0]
 800786c:	f7ff ba6d 	b.w	8006d4a <_strtod_l+0x7a>
 8007870:	2a65      	cmp	r2, #101	@ 0x65
 8007872:	f43f ab68 	beq.w	8006f46 <_strtod_l+0x276>
 8007876:	2a45      	cmp	r2, #69	@ 0x45
 8007878:	f43f ab65 	beq.w	8006f46 <_strtod_l+0x276>
 800787c:	2301      	movs	r3, #1
 800787e:	f7ff bba0 	b.w	8006fc2 <_strtod_l+0x2f2>
 8007882:	bf00      	nop
 8007884:	f3af 8000 	nop.w
 8007888:	ffc00000 	.word	0xffc00000
 800788c:	41dfffff 	.word	0x41dfffff
 8007890:	94a03595 	.word	0x94a03595
 8007894:	3fcfffff 	.word	0x3fcfffff

08007898 <_strtod_r>:
 8007898:	4b01      	ldr	r3, [pc, #4]	@ (80078a0 <_strtod_r+0x8>)
 800789a:	f7ff ba19 	b.w	8006cd0 <_strtod_l>
 800789e:	bf00      	nop
 80078a0:	20000038 	.word	0x20000038

080078a4 <strtof>:
 80078a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078a8:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8007968 <strtof+0xc4>
 80078ac:	4b29      	ldr	r3, [pc, #164]	@ (8007954 <strtof+0xb0>)
 80078ae:	460a      	mov	r2, r1
 80078b0:	ed2d 8b02 	vpush	{d8}
 80078b4:	4601      	mov	r1, r0
 80078b6:	f8d8 0000 	ldr.w	r0, [r8]
 80078ba:	f7ff fa09 	bl	8006cd0 <_strtod_l>
 80078be:	ec55 4b10 	vmov	r4, r5, d0
 80078c2:	4622      	mov	r2, r4
 80078c4:	462b      	mov	r3, r5
 80078c6:	4620      	mov	r0, r4
 80078c8:	4629      	mov	r1, r5
 80078ca:	f7f9 f947 	bl	8000b5c <__aeabi_dcmpun>
 80078ce:	b190      	cbz	r0, 80078f6 <strtof+0x52>
 80078d0:	2d00      	cmp	r5, #0
 80078d2:	4821      	ldr	r0, [pc, #132]	@ (8007958 <strtof+0xb4>)
 80078d4:	da09      	bge.n	80078ea <strtof+0x46>
 80078d6:	f001 faaf 	bl	8008e38 <nanf>
 80078da:	eeb1 8a40 	vneg.f32	s16, s0
 80078de:	eeb0 0a48 	vmov.f32	s0, s16
 80078e2:	ecbd 8b02 	vpop	{d8}
 80078e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078ea:	ecbd 8b02 	vpop	{d8}
 80078ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078f2:	f001 baa1 	b.w	8008e38 <nanf>
 80078f6:	4620      	mov	r0, r4
 80078f8:	4629      	mov	r1, r5
 80078fa:	f7f9 f98d 	bl	8000c18 <__aeabi_d2f>
 80078fe:	ee08 0a10 	vmov	s16, r0
 8007902:	eddf 7a16 	vldr	s15, [pc, #88]	@ 800795c <strtof+0xb8>
 8007906:	eeb0 7ac8 	vabs.f32	s14, s16
 800790a:	eeb4 7a67 	vcmp.f32	s14, s15
 800790e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007912:	dd11      	ble.n	8007938 <strtof+0x94>
 8007914:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 8007918:	4b11      	ldr	r3, [pc, #68]	@ (8007960 <strtof+0xbc>)
 800791a:	f04f 32ff 	mov.w	r2, #4294967295
 800791e:	4620      	mov	r0, r4
 8007920:	4639      	mov	r1, r7
 8007922:	f7f9 f91b 	bl	8000b5c <__aeabi_dcmpun>
 8007926:	b980      	cbnz	r0, 800794a <strtof+0xa6>
 8007928:	4b0d      	ldr	r3, [pc, #52]	@ (8007960 <strtof+0xbc>)
 800792a:	f04f 32ff 	mov.w	r2, #4294967295
 800792e:	4620      	mov	r0, r4
 8007930:	4639      	mov	r1, r7
 8007932:	f7f9 f8f5 	bl	8000b20 <__aeabi_dcmple>
 8007936:	b940      	cbnz	r0, 800794a <strtof+0xa6>
 8007938:	ee18 3a10 	vmov	r3, s16
 800793c:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8007940:	d1cd      	bne.n	80078de <strtof+0x3a>
 8007942:	4b08      	ldr	r3, [pc, #32]	@ (8007964 <strtof+0xc0>)
 8007944:	402b      	ands	r3, r5
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0c9      	beq.n	80078de <strtof+0x3a>
 800794a:	f8d8 3000 	ldr.w	r3, [r8]
 800794e:	2222      	movs	r2, #34	@ 0x22
 8007950:	601a      	str	r2, [r3, #0]
 8007952:	e7c4      	b.n	80078de <strtof+0x3a>
 8007954:	20000038 	.word	0x20000038
 8007958:	0800bb43 	.word	0x0800bb43
 800795c:	7f7fffff 	.word	0x7f7fffff
 8007960:	7fefffff 	.word	0x7fefffff
 8007964:	7ff00000 	.word	0x7ff00000
 8007968:	200001a4 	.word	0x200001a4

0800796c <_strtol_l.isra.0>:
 800796c:	2b24      	cmp	r3, #36	@ 0x24
 800796e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007972:	4686      	mov	lr, r0
 8007974:	4690      	mov	r8, r2
 8007976:	d801      	bhi.n	800797c <_strtol_l.isra.0+0x10>
 8007978:	2b01      	cmp	r3, #1
 800797a:	d106      	bne.n	800798a <_strtol_l.isra.0+0x1e>
 800797c:	f001 fa16 	bl	8008dac <__errno>
 8007980:	2316      	movs	r3, #22
 8007982:	6003      	str	r3, [r0, #0]
 8007984:	2000      	movs	r0, #0
 8007986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800798a:	4834      	ldr	r0, [pc, #208]	@ (8007a5c <_strtol_l.isra.0+0xf0>)
 800798c:	460d      	mov	r5, r1
 800798e:	462a      	mov	r2, r5
 8007990:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007994:	5d06      	ldrb	r6, [r0, r4]
 8007996:	f016 0608 	ands.w	r6, r6, #8
 800799a:	d1f8      	bne.n	800798e <_strtol_l.isra.0+0x22>
 800799c:	2c2d      	cmp	r4, #45	@ 0x2d
 800799e:	d110      	bne.n	80079c2 <_strtol_l.isra.0+0x56>
 80079a0:	782c      	ldrb	r4, [r5, #0]
 80079a2:	2601      	movs	r6, #1
 80079a4:	1c95      	adds	r5, r2, #2
 80079a6:	f033 0210 	bics.w	r2, r3, #16
 80079aa:	d115      	bne.n	80079d8 <_strtol_l.isra.0+0x6c>
 80079ac:	2c30      	cmp	r4, #48	@ 0x30
 80079ae:	d10d      	bne.n	80079cc <_strtol_l.isra.0+0x60>
 80079b0:	782a      	ldrb	r2, [r5, #0]
 80079b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80079b6:	2a58      	cmp	r2, #88	@ 0x58
 80079b8:	d108      	bne.n	80079cc <_strtol_l.isra.0+0x60>
 80079ba:	786c      	ldrb	r4, [r5, #1]
 80079bc:	3502      	adds	r5, #2
 80079be:	2310      	movs	r3, #16
 80079c0:	e00a      	b.n	80079d8 <_strtol_l.isra.0+0x6c>
 80079c2:	2c2b      	cmp	r4, #43	@ 0x2b
 80079c4:	bf04      	itt	eq
 80079c6:	782c      	ldrbeq	r4, [r5, #0]
 80079c8:	1c95      	addeq	r5, r2, #2
 80079ca:	e7ec      	b.n	80079a6 <_strtol_l.isra.0+0x3a>
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1f6      	bne.n	80079be <_strtol_l.isra.0+0x52>
 80079d0:	2c30      	cmp	r4, #48	@ 0x30
 80079d2:	bf14      	ite	ne
 80079d4:	230a      	movne	r3, #10
 80079d6:	2308      	moveq	r3, #8
 80079d8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80079dc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80079e0:	2200      	movs	r2, #0
 80079e2:	fbbc f9f3 	udiv	r9, ip, r3
 80079e6:	4610      	mov	r0, r2
 80079e8:	fb03 ca19 	mls	sl, r3, r9, ip
 80079ec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80079f0:	2f09      	cmp	r7, #9
 80079f2:	d80f      	bhi.n	8007a14 <_strtol_l.isra.0+0xa8>
 80079f4:	463c      	mov	r4, r7
 80079f6:	42a3      	cmp	r3, r4
 80079f8:	dd1b      	ble.n	8007a32 <_strtol_l.isra.0+0xc6>
 80079fa:	1c57      	adds	r7, r2, #1
 80079fc:	d007      	beq.n	8007a0e <_strtol_l.isra.0+0xa2>
 80079fe:	4581      	cmp	r9, r0
 8007a00:	d314      	bcc.n	8007a2c <_strtol_l.isra.0+0xc0>
 8007a02:	d101      	bne.n	8007a08 <_strtol_l.isra.0+0x9c>
 8007a04:	45a2      	cmp	sl, r4
 8007a06:	db11      	blt.n	8007a2c <_strtol_l.isra.0+0xc0>
 8007a08:	fb00 4003 	mla	r0, r0, r3, r4
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a12:	e7eb      	b.n	80079ec <_strtol_l.isra.0+0x80>
 8007a14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007a18:	2f19      	cmp	r7, #25
 8007a1a:	d801      	bhi.n	8007a20 <_strtol_l.isra.0+0xb4>
 8007a1c:	3c37      	subs	r4, #55	@ 0x37
 8007a1e:	e7ea      	b.n	80079f6 <_strtol_l.isra.0+0x8a>
 8007a20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007a24:	2f19      	cmp	r7, #25
 8007a26:	d804      	bhi.n	8007a32 <_strtol_l.isra.0+0xc6>
 8007a28:	3c57      	subs	r4, #87	@ 0x57
 8007a2a:	e7e4      	b.n	80079f6 <_strtol_l.isra.0+0x8a>
 8007a2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007a30:	e7ed      	b.n	8007a0e <_strtol_l.isra.0+0xa2>
 8007a32:	1c53      	adds	r3, r2, #1
 8007a34:	d108      	bne.n	8007a48 <_strtol_l.isra.0+0xdc>
 8007a36:	2322      	movs	r3, #34	@ 0x22
 8007a38:	f8ce 3000 	str.w	r3, [lr]
 8007a3c:	4660      	mov	r0, ip
 8007a3e:	f1b8 0f00 	cmp.w	r8, #0
 8007a42:	d0a0      	beq.n	8007986 <_strtol_l.isra.0+0x1a>
 8007a44:	1e69      	subs	r1, r5, #1
 8007a46:	e006      	b.n	8007a56 <_strtol_l.isra.0+0xea>
 8007a48:	b106      	cbz	r6, 8007a4c <_strtol_l.isra.0+0xe0>
 8007a4a:	4240      	negs	r0, r0
 8007a4c:	f1b8 0f00 	cmp.w	r8, #0
 8007a50:	d099      	beq.n	8007986 <_strtol_l.isra.0+0x1a>
 8007a52:	2a00      	cmp	r2, #0
 8007a54:	d1f6      	bne.n	8007a44 <_strtol_l.isra.0+0xd8>
 8007a56:	f8c8 1000 	str.w	r1, [r8]
 8007a5a:	e794      	b.n	8007986 <_strtol_l.isra.0+0x1a>
 8007a5c:	0800bcd9 	.word	0x0800bcd9

08007a60 <_strtol_r>:
 8007a60:	f7ff bf84 	b.w	800796c <_strtol_l.isra.0>

08007a64 <strtol>:
 8007a64:	4613      	mov	r3, r2
 8007a66:	460a      	mov	r2, r1
 8007a68:	4601      	mov	r1, r0
 8007a6a:	4802      	ldr	r0, [pc, #8]	@ (8007a74 <strtol+0x10>)
 8007a6c:	6800      	ldr	r0, [r0, #0]
 8007a6e:	f7ff bf7d 	b.w	800796c <_strtol_l.isra.0>
 8007a72:	bf00      	nop
 8007a74:	200001a4 	.word	0x200001a4

08007a78 <__cvt>:
 8007a78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a7c:	ec57 6b10 	vmov	r6, r7, d0
 8007a80:	2f00      	cmp	r7, #0
 8007a82:	460c      	mov	r4, r1
 8007a84:	4619      	mov	r1, r3
 8007a86:	463b      	mov	r3, r7
 8007a88:	bfbb      	ittet	lt
 8007a8a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8007a8e:	461f      	movlt	r7, r3
 8007a90:	2300      	movge	r3, #0
 8007a92:	232d      	movlt	r3, #45	@ 0x2d
 8007a94:	700b      	strb	r3, [r1, #0]
 8007a96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a98:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007a9c:	4691      	mov	r9, r2
 8007a9e:	f023 0820 	bic.w	r8, r3, #32
 8007aa2:	bfbc      	itt	lt
 8007aa4:	4632      	movlt	r2, r6
 8007aa6:	4616      	movlt	r6, r2
 8007aa8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007aac:	d005      	beq.n	8007aba <__cvt+0x42>
 8007aae:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007ab2:	d100      	bne.n	8007ab6 <__cvt+0x3e>
 8007ab4:	3401      	adds	r4, #1
 8007ab6:	2102      	movs	r1, #2
 8007ab8:	e000      	b.n	8007abc <__cvt+0x44>
 8007aba:	2103      	movs	r1, #3
 8007abc:	ab03      	add	r3, sp, #12
 8007abe:	9301      	str	r3, [sp, #4]
 8007ac0:	ab02      	add	r3, sp, #8
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	ec47 6b10 	vmov	d0, r6, r7
 8007ac8:	4653      	mov	r3, sl
 8007aca:	4622      	mov	r2, r4
 8007acc:	f001 fa60 	bl	8008f90 <_dtoa_r>
 8007ad0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007ad4:	4605      	mov	r5, r0
 8007ad6:	d119      	bne.n	8007b0c <__cvt+0x94>
 8007ad8:	f019 0f01 	tst.w	r9, #1
 8007adc:	d00e      	beq.n	8007afc <__cvt+0x84>
 8007ade:	eb00 0904 	add.w	r9, r0, r4
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	4639      	mov	r1, r7
 8007aea:	f7f9 f805 	bl	8000af8 <__aeabi_dcmpeq>
 8007aee:	b108      	cbz	r0, 8007af4 <__cvt+0x7c>
 8007af0:	f8cd 900c 	str.w	r9, [sp, #12]
 8007af4:	2230      	movs	r2, #48	@ 0x30
 8007af6:	9b03      	ldr	r3, [sp, #12]
 8007af8:	454b      	cmp	r3, r9
 8007afa:	d31e      	bcc.n	8007b3a <__cvt+0xc2>
 8007afc:	9b03      	ldr	r3, [sp, #12]
 8007afe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007b00:	1b5b      	subs	r3, r3, r5
 8007b02:	4628      	mov	r0, r5
 8007b04:	6013      	str	r3, [r2, #0]
 8007b06:	b004      	add	sp, #16
 8007b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b0c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007b10:	eb00 0904 	add.w	r9, r0, r4
 8007b14:	d1e5      	bne.n	8007ae2 <__cvt+0x6a>
 8007b16:	7803      	ldrb	r3, [r0, #0]
 8007b18:	2b30      	cmp	r3, #48	@ 0x30
 8007b1a:	d10a      	bne.n	8007b32 <__cvt+0xba>
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	2300      	movs	r3, #0
 8007b20:	4630      	mov	r0, r6
 8007b22:	4639      	mov	r1, r7
 8007b24:	f7f8 ffe8 	bl	8000af8 <__aeabi_dcmpeq>
 8007b28:	b918      	cbnz	r0, 8007b32 <__cvt+0xba>
 8007b2a:	f1c4 0401 	rsb	r4, r4, #1
 8007b2e:	f8ca 4000 	str.w	r4, [sl]
 8007b32:	f8da 3000 	ldr.w	r3, [sl]
 8007b36:	4499      	add	r9, r3
 8007b38:	e7d3      	b.n	8007ae2 <__cvt+0x6a>
 8007b3a:	1c59      	adds	r1, r3, #1
 8007b3c:	9103      	str	r1, [sp, #12]
 8007b3e:	701a      	strb	r2, [r3, #0]
 8007b40:	e7d9      	b.n	8007af6 <__cvt+0x7e>

08007b42 <__exponent>:
 8007b42:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b44:	2900      	cmp	r1, #0
 8007b46:	bfba      	itte	lt
 8007b48:	4249      	neglt	r1, r1
 8007b4a:	232d      	movlt	r3, #45	@ 0x2d
 8007b4c:	232b      	movge	r3, #43	@ 0x2b
 8007b4e:	2909      	cmp	r1, #9
 8007b50:	7002      	strb	r2, [r0, #0]
 8007b52:	7043      	strb	r3, [r0, #1]
 8007b54:	dd29      	ble.n	8007baa <__exponent+0x68>
 8007b56:	f10d 0307 	add.w	r3, sp, #7
 8007b5a:	461d      	mov	r5, r3
 8007b5c:	270a      	movs	r7, #10
 8007b5e:	461a      	mov	r2, r3
 8007b60:	fbb1 f6f7 	udiv	r6, r1, r7
 8007b64:	fb07 1416 	mls	r4, r7, r6, r1
 8007b68:	3430      	adds	r4, #48	@ 0x30
 8007b6a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007b6e:	460c      	mov	r4, r1
 8007b70:	2c63      	cmp	r4, #99	@ 0x63
 8007b72:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b76:	4631      	mov	r1, r6
 8007b78:	dcf1      	bgt.n	8007b5e <__exponent+0x1c>
 8007b7a:	3130      	adds	r1, #48	@ 0x30
 8007b7c:	1e94      	subs	r4, r2, #2
 8007b7e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007b82:	1c41      	adds	r1, r0, #1
 8007b84:	4623      	mov	r3, r4
 8007b86:	42ab      	cmp	r3, r5
 8007b88:	d30a      	bcc.n	8007ba0 <__exponent+0x5e>
 8007b8a:	f10d 0309 	add.w	r3, sp, #9
 8007b8e:	1a9b      	subs	r3, r3, r2
 8007b90:	42ac      	cmp	r4, r5
 8007b92:	bf88      	it	hi
 8007b94:	2300      	movhi	r3, #0
 8007b96:	3302      	adds	r3, #2
 8007b98:	4403      	add	r3, r0
 8007b9a:	1a18      	subs	r0, r3, r0
 8007b9c:	b003      	add	sp, #12
 8007b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ba0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007ba4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007ba8:	e7ed      	b.n	8007b86 <__exponent+0x44>
 8007baa:	2330      	movs	r3, #48	@ 0x30
 8007bac:	3130      	adds	r1, #48	@ 0x30
 8007bae:	7083      	strb	r3, [r0, #2]
 8007bb0:	70c1      	strb	r1, [r0, #3]
 8007bb2:	1d03      	adds	r3, r0, #4
 8007bb4:	e7f1      	b.n	8007b9a <__exponent+0x58>
	...

08007bb8 <_printf_float>:
 8007bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bbc:	b08d      	sub	sp, #52	@ 0x34
 8007bbe:	460c      	mov	r4, r1
 8007bc0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007bc4:	4616      	mov	r6, r2
 8007bc6:	461f      	mov	r7, r3
 8007bc8:	4605      	mov	r5, r0
 8007bca:	f001 f8a5 	bl	8008d18 <_localeconv_r>
 8007bce:	6803      	ldr	r3, [r0, #0]
 8007bd0:	9304      	str	r3, [sp, #16]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	f7f8 fb64 	bl	80002a0 <strlen>
 8007bd8:	2300      	movs	r3, #0
 8007bda:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8007be0:	9005      	str	r0, [sp, #20]
 8007be2:	3307      	adds	r3, #7
 8007be4:	f023 0307 	bic.w	r3, r3, #7
 8007be8:	f103 0208 	add.w	r2, r3, #8
 8007bec:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007bf0:	f8d4 b000 	ldr.w	fp, [r4]
 8007bf4:	f8c8 2000 	str.w	r2, [r8]
 8007bf8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007bfc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007c00:	9307      	str	r3, [sp, #28]
 8007c02:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c06:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007c0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c0e:	4b9c      	ldr	r3, [pc, #624]	@ (8007e80 <_printf_float+0x2c8>)
 8007c10:	f04f 32ff 	mov.w	r2, #4294967295
 8007c14:	f7f8 ffa2 	bl	8000b5c <__aeabi_dcmpun>
 8007c18:	bb70      	cbnz	r0, 8007c78 <_printf_float+0xc0>
 8007c1a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c1e:	4b98      	ldr	r3, [pc, #608]	@ (8007e80 <_printf_float+0x2c8>)
 8007c20:	f04f 32ff 	mov.w	r2, #4294967295
 8007c24:	f7f8 ff7c 	bl	8000b20 <__aeabi_dcmple>
 8007c28:	bb30      	cbnz	r0, 8007c78 <_printf_float+0xc0>
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	4640      	mov	r0, r8
 8007c30:	4649      	mov	r1, r9
 8007c32:	f7f8 ff6b 	bl	8000b0c <__aeabi_dcmplt>
 8007c36:	b110      	cbz	r0, 8007c3e <_printf_float+0x86>
 8007c38:	232d      	movs	r3, #45	@ 0x2d
 8007c3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c3e:	4a91      	ldr	r2, [pc, #580]	@ (8007e84 <_printf_float+0x2cc>)
 8007c40:	4b91      	ldr	r3, [pc, #580]	@ (8007e88 <_printf_float+0x2d0>)
 8007c42:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007c46:	bf8c      	ite	hi
 8007c48:	4690      	movhi	r8, r2
 8007c4a:	4698      	movls	r8, r3
 8007c4c:	2303      	movs	r3, #3
 8007c4e:	6123      	str	r3, [r4, #16]
 8007c50:	f02b 0304 	bic.w	r3, fp, #4
 8007c54:	6023      	str	r3, [r4, #0]
 8007c56:	f04f 0900 	mov.w	r9, #0
 8007c5a:	9700      	str	r7, [sp, #0]
 8007c5c:	4633      	mov	r3, r6
 8007c5e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007c60:	4621      	mov	r1, r4
 8007c62:	4628      	mov	r0, r5
 8007c64:	f000 f9d2 	bl	800800c <_printf_common>
 8007c68:	3001      	adds	r0, #1
 8007c6a:	f040 808d 	bne.w	8007d88 <_printf_float+0x1d0>
 8007c6e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c72:	b00d      	add	sp, #52	@ 0x34
 8007c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c78:	4642      	mov	r2, r8
 8007c7a:	464b      	mov	r3, r9
 8007c7c:	4640      	mov	r0, r8
 8007c7e:	4649      	mov	r1, r9
 8007c80:	f7f8 ff6c 	bl	8000b5c <__aeabi_dcmpun>
 8007c84:	b140      	cbz	r0, 8007c98 <_printf_float+0xe0>
 8007c86:	464b      	mov	r3, r9
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	bfbc      	itt	lt
 8007c8c:	232d      	movlt	r3, #45	@ 0x2d
 8007c8e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007c92:	4a7e      	ldr	r2, [pc, #504]	@ (8007e8c <_printf_float+0x2d4>)
 8007c94:	4b7e      	ldr	r3, [pc, #504]	@ (8007e90 <_printf_float+0x2d8>)
 8007c96:	e7d4      	b.n	8007c42 <_printf_float+0x8a>
 8007c98:	6863      	ldr	r3, [r4, #4]
 8007c9a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007c9e:	9206      	str	r2, [sp, #24]
 8007ca0:	1c5a      	adds	r2, r3, #1
 8007ca2:	d13b      	bne.n	8007d1c <_printf_float+0x164>
 8007ca4:	2306      	movs	r3, #6
 8007ca6:	6063      	str	r3, [r4, #4]
 8007ca8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007cac:	2300      	movs	r3, #0
 8007cae:	6022      	str	r2, [r4, #0]
 8007cb0:	9303      	str	r3, [sp, #12]
 8007cb2:	ab0a      	add	r3, sp, #40	@ 0x28
 8007cb4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007cb8:	ab09      	add	r3, sp, #36	@ 0x24
 8007cba:	9300      	str	r3, [sp, #0]
 8007cbc:	6861      	ldr	r1, [r4, #4]
 8007cbe:	ec49 8b10 	vmov	d0, r8, r9
 8007cc2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007cc6:	4628      	mov	r0, r5
 8007cc8:	f7ff fed6 	bl	8007a78 <__cvt>
 8007ccc:	9b06      	ldr	r3, [sp, #24]
 8007cce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007cd0:	2b47      	cmp	r3, #71	@ 0x47
 8007cd2:	4680      	mov	r8, r0
 8007cd4:	d129      	bne.n	8007d2a <_printf_float+0x172>
 8007cd6:	1cc8      	adds	r0, r1, #3
 8007cd8:	db02      	blt.n	8007ce0 <_printf_float+0x128>
 8007cda:	6863      	ldr	r3, [r4, #4]
 8007cdc:	4299      	cmp	r1, r3
 8007cde:	dd41      	ble.n	8007d64 <_printf_float+0x1ac>
 8007ce0:	f1aa 0a02 	sub.w	sl, sl, #2
 8007ce4:	fa5f fa8a 	uxtb.w	sl, sl
 8007ce8:	3901      	subs	r1, #1
 8007cea:	4652      	mov	r2, sl
 8007cec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007cf0:	9109      	str	r1, [sp, #36]	@ 0x24
 8007cf2:	f7ff ff26 	bl	8007b42 <__exponent>
 8007cf6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007cf8:	1813      	adds	r3, r2, r0
 8007cfa:	2a01      	cmp	r2, #1
 8007cfc:	4681      	mov	r9, r0
 8007cfe:	6123      	str	r3, [r4, #16]
 8007d00:	dc02      	bgt.n	8007d08 <_printf_float+0x150>
 8007d02:	6822      	ldr	r2, [r4, #0]
 8007d04:	07d2      	lsls	r2, r2, #31
 8007d06:	d501      	bpl.n	8007d0c <_printf_float+0x154>
 8007d08:	3301      	adds	r3, #1
 8007d0a:	6123      	str	r3, [r4, #16]
 8007d0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d0a2      	beq.n	8007c5a <_printf_float+0xa2>
 8007d14:	232d      	movs	r3, #45	@ 0x2d
 8007d16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d1a:	e79e      	b.n	8007c5a <_printf_float+0xa2>
 8007d1c:	9a06      	ldr	r2, [sp, #24]
 8007d1e:	2a47      	cmp	r2, #71	@ 0x47
 8007d20:	d1c2      	bne.n	8007ca8 <_printf_float+0xf0>
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1c0      	bne.n	8007ca8 <_printf_float+0xf0>
 8007d26:	2301      	movs	r3, #1
 8007d28:	e7bd      	b.n	8007ca6 <_printf_float+0xee>
 8007d2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007d2e:	d9db      	bls.n	8007ce8 <_printf_float+0x130>
 8007d30:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007d34:	d118      	bne.n	8007d68 <_printf_float+0x1b0>
 8007d36:	2900      	cmp	r1, #0
 8007d38:	6863      	ldr	r3, [r4, #4]
 8007d3a:	dd0b      	ble.n	8007d54 <_printf_float+0x19c>
 8007d3c:	6121      	str	r1, [r4, #16]
 8007d3e:	b913      	cbnz	r3, 8007d46 <_printf_float+0x18e>
 8007d40:	6822      	ldr	r2, [r4, #0]
 8007d42:	07d0      	lsls	r0, r2, #31
 8007d44:	d502      	bpl.n	8007d4c <_printf_float+0x194>
 8007d46:	3301      	adds	r3, #1
 8007d48:	440b      	add	r3, r1
 8007d4a:	6123      	str	r3, [r4, #16]
 8007d4c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007d4e:	f04f 0900 	mov.w	r9, #0
 8007d52:	e7db      	b.n	8007d0c <_printf_float+0x154>
 8007d54:	b913      	cbnz	r3, 8007d5c <_printf_float+0x1a4>
 8007d56:	6822      	ldr	r2, [r4, #0]
 8007d58:	07d2      	lsls	r2, r2, #31
 8007d5a:	d501      	bpl.n	8007d60 <_printf_float+0x1a8>
 8007d5c:	3302      	adds	r3, #2
 8007d5e:	e7f4      	b.n	8007d4a <_printf_float+0x192>
 8007d60:	2301      	movs	r3, #1
 8007d62:	e7f2      	b.n	8007d4a <_printf_float+0x192>
 8007d64:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007d68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d6a:	4299      	cmp	r1, r3
 8007d6c:	db05      	blt.n	8007d7a <_printf_float+0x1c2>
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	6121      	str	r1, [r4, #16]
 8007d72:	07d8      	lsls	r0, r3, #31
 8007d74:	d5ea      	bpl.n	8007d4c <_printf_float+0x194>
 8007d76:	1c4b      	adds	r3, r1, #1
 8007d78:	e7e7      	b.n	8007d4a <_printf_float+0x192>
 8007d7a:	2900      	cmp	r1, #0
 8007d7c:	bfd4      	ite	le
 8007d7e:	f1c1 0202 	rsble	r2, r1, #2
 8007d82:	2201      	movgt	r2, #1
 8007d84:	4413      	add	r3, r2
 8007d86:	e7e0      	b.n	8007d4a <_printf_float+0x192>
 8007d88:	6823      	ldr	r3, [r4, #0]
 8007d8a:	055a      	lsls	r2, r3, #21
 8007d8c:	d407      	bmi.n	8007d9e <_printf_float+0x1e6>
 8007d8e:	6923      	ldr	r3, [r4, #16]
 8007d90:	4642      	mov	r2, r8
 8007d92:	4631      	mov	r1, r6
 8007d94:	4628      	mov	r0, r5
 8007d96:	47b8      	blx	r7
 8007d98:	3001      	adds	r0, #1
 8007d9a:	d12b      	bne.n	8007df4 <_printf_float+0x23c>
 8007d9c:	e767      	b.n	8007c6e <_printf_float+0xb6>
 8007d9e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007da2:	f240 80dd 	bls.w	8007f60 <_printf_float+0x3a8>
 8007da6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007daa:	2200      	movs	r2, #0
 8007dac:	2300      	movs	r3, #0
 8007dae:	f7f8 fea3 	bl	8000af8 <__aeabi_dcmpeq>
 8007db2:	2800      	cmp	r0, #0
 8007db4:	d033      	beq.n	8007e1e <_printf_float+0x266>
 8007db6:	4a37      	ldr	r2, [pc, #220]	@ (8007e94 <_printf_float+0x2dc>)
 8007db8:	2301      	movs	r3, #1
 8007dba:	4631      	mov	r1, r6
 8007dbc:	4628      	mov	r0, r5
 8007dbe:	47b8      	blx	r7
 8007dc0:	3001      	adds	r0, #1
 8007dc2:	f43f af54 	beq.w	8007c6e <_printf_float+0xb6>
 8007dc6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007dca:	4543      	cmp	r3, r8
 8007dcc:	db02      	blt.n	8007dd4 <_printf_float+0x21c>
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	07d8      	lsls	r0, r3, #31
 8007dd2:	d50f      	bpl.n	8007df4 <_printf_float+0x23c>
 8007dd4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dd8:	4631      	mov	r1, r6
 8007dda:	4628      	mov	r0, r5
 8007ddc:	47b8      	blx	r7
 8007dde:	3001      	adds	r0, #1
 8007de0:	f43f af45 	beq.w	8007c6e <_printf_float+0xb6>
 8007de4:	f04f 0900 	mov.w	r9, #0
 8007de8:	f108 38ff 	add.w	r8, r8, #4294967295
 8007dec:	f104 0a1a 	add.w	sl, r4, #26
 8007df0:	45c8      	cmp	r8, r9
 8007df2:	dc09      	bgt.n	8007e08 <_printf_float+0x250>
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	079b      	lsls	r3, r3, #30
 8007df8:	f100 8103 	bmi.w	8008002 <_printf_float+0x44a>
 8007dfc:	68e0      	ldr	r0, [r4, #12]
 8007dfe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e00:	4298      	cmp	r0, r3
 8007e02:	bfb8      	it	lt
 8007e04:	4618      	movlt	r0, r3
 8007e06:	e734      	b.n	8007c72 <_printf_float+0xba>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	4652      	mov	r2, sl
 8007e0c:	4631      	mov	r1, r6
 8007e0e:	4628      	mov	r0, r5
 8007e10:	47b8      	blx	r7
 8007e12:	3001      	adds	r0, #1
 8007e14:	f43f af2b 	beq.w	8007c6e <_printf_float+0xb6>
 8007e18:	f109 0901 	add.w	r9, r9, #1
 8007e1c:	e7e8      	b.n	8007df0 <_printf_float+0x238>
 8007e1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	dc39      	bgt.n	8007e98 <_printf_float+0x2e0>
 8007e24:	4a1b      	ldr	r2, [pc, #108]	@ (8007e94 <_printf_float+0x2dc>)
 8007e26:	2301      	movs	r3, #1
 8007e28:	4631      	mov	r1, r6
 8007e2a:	4628      	mov	r0, r5
 8007e2c:	47b8      	blx	r7
 8007e2e:	3001      	adds	r0, #1
 8007e30:	f43f af1d 	beq.w	8007c6e <_printf_float+0xb6>
 8007e34:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007e38:	ea59 0303 	orrs.w	r3, r9, r3
 8007e3c:	d102      	bne.n	8007e44 <_printf_float+0x28c>
 8007e3e:	6823      	ldr	r3, [r4, #0]
 8007e40:	07d9      	lsls	r1, r3, #31
 8007e42:	d5d7      	bpl.n	8007df4 <_printf_float+0x23c>
 8007e44:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e48:	4631      	mov	r1, r6
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	47b8      	blx	r7
 8007e4e:	3001      	adds	r0, #1
 8007e50:	f43f af0d 	beq.w	8007c6e <_printf_float+0xb6>
 8007e54:	f04f 0a00 	mov.w	sl, #0
 8007e58:	f104 0b1a 	add.w	fp, r4, #26
 8007e5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e5e:	425b      	negs	r3, r3
 8007e60:	4553      	cmp	r3, sl
 8007e62:	dc01      	bgt.n	8007e68 <_printf_float+0x2b0>
 8007e64:	464b      	mov	r3, r9
 8007e66:	e793      	b.n	8007d90 <_printf_float+0x1d8>
 8007e68:	2301      	movs	r3, #1
 8007e6a:	465a      	mov	r2, fp
 8007e6c:	4631      	mov	r1, r6
 8007e6e:	4628      	mov	r0, r5
 8007e70:	47b8      	blx	r7
 8007e72:	3001      	adds	r0, #1
 8007e74:	f43f aefb 	beq.w	8007c6e <_printf_float+0xb6>
 8007e78:	f10a 0a01 	add.w	sl, sl, #1
 8007e7c:	e7ee      	b.n	8007e5c <_printf_float+0x2a4>
 8007e7e:	bf00      	nop
 8007e80:	7fefffff 	.word	0x7fefffff
 8007e84:	0800ba5a 	.word	0x0800ba5a
 8007e88:	0800ba56 	.word	0x0800ba56
 8007e8c:	0800ba62 	.word	0x0800ba62
 8007e90:	0800ba5e 	.word	0x0800ba5e
 8007e94:	0800ba66 	.word	0x0800ba66
 8007e98:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e9a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007e9e:	4553      	cmp	r3, sl
 8007ea0:	bfa8      	it	ge
 8007ea2:	4653      	movge	r3, sl
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	4699      	mov	r9, r3
 8007ea8:	dc36      	bgt.n	8007f18 <_printf_float+0x360>
 8007eaa:	f04f 0b00 	mov.w	fp, #0
 8007eae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007eb2:	f104 021a 	add.w	r2, r4, #26
 8007eb6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007eb8:	9306      	str	r3, [sp, #24]
 8007eba:	eba3 0309 	sub.w	r3, r3, r9
 8007ebe:	455b      	cmp	r3, fp
 8007ec0:	dc31      	bgt.n	8007f26 <_printf_float+0x36e>
 8007ec2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ec4:	459a      	cmp	sl, r3
 8007ec6:	dc3a      	bgt.n	8007f3e <_printf_float+0x386>
 8007ec8:	6823      	ldr	r3, [r4, #0]
 8007eca:	07da      	lsls	r2, r3, #31
 8007ecc:	d437      	bmi.n	8007f3e <_printf_float+0x386>
 8007ece:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ed0:	ebaa 0903 	sub.w	r9, sl, r3
 8007ed4:	9b06      	ldr	r3, [sp, #24]
 8007ed6:	ebaa 0303 	sub.w	r3, sl, r3
 8007eda:	4599      	cmp	r9, r3
 8007edc:	bfa8      	it	ge
 8007ede:	4699      	movge	r9, r3
 8007ee0:	f1b9 0f00 	cmp.w	r9, #0
 8007ee4:	dc33      	bgt.n	8007f4e <_printf_float+0x396>
 8007ee6:	f04f 0800 	mov.w	r8, #0
 8007eea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007eee:	f104 0b1a 	add.w	fp, r4, #26
 8007ef2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ef4:	ebaa 0303 	sub.w	r3, sl, r3
 8007ef8:	eba3 0309 	sub.w	r3, r3, r9
 8007efc:	4543      	cmp	r3, r8
 8007efe:	f77f af79 	ble.w	8007df4 <_printf_float+0x23c>
 8007f02:	2301      	movs	r3, #1
 8007f04:	465a      	mov	r2, fp
 8007f06:	4631      	mov	r1, r6
 8007f08:	4628      	mov	r0, r5
 8007f0a:	47b8      	blx	r7
 8007f0c:	3001      	adds	r0, #1
 8007f0e:	f43f aeae 	beq.w	8007c6e <_printf_float+0xb6>
 8007f12:	f108 0801 	add.w	r8, r8, #1
 8007f16:	e7ec      	b.n	8007ef2 <_printf_float+0x33a>
 8007f18:	4642      	mov	r2, r8
 8007f1a:	4631      	mov	r1, r6
 8007f1c:	4628      	mov	r0, r5
 8007f1e:	47b8      	blx	r7
 8007f20:	3001      	adds	r0, #1
 8007f22:	d1c2      	bne.n	8007eaa <_printf_float+0x2f2>
 8007f24:	e6a3      	b.n	8007c6e <_printf_float+0xb6>
 8007f26:	2301      	movs	r3, #1
 8007f28:	4631      	mov	r1, r6
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	9206      	str	r2, [sp, #24]
 8007f2e:	47b8      	blx	r7
 8007f30:	3001      	adds	r0, #1
 8007f32:	f43f ae9c 	beq.w	8007c6e <_printf_float+0xb6>
 8007f36:	9a06      	ldr	r2, [sp, #24]
 8007f38:	f10b 0b01 	add.w	fp, fp, #1
 8007f3c:	e7bb      	b.n	8007eb6 <_printf_float+0x2fe>
 8007f3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f42:	4631      	mov	r1, r6
 8007f44:	4628      	mov	r0, r5
 8007f46:	47b8      	blx	r7
 8007f48:	3001      	adds	r0, #1
 8007f4a:	d1c0      	bne.n	8007ece <_printf_float+0x316>
 8007f4c:	e68f      	b.n	8007c6e <_printf_float+0xb6>
 8007f4e:	9a06      	ldr	r2, [sp, #24]
 8007f50:	464b      	mov	r3, r9
 8007f52:	4442      	add	r2, r8
 8007f54:	4631      	mov	r1, r6
 8007f56:	4628      	mov	r0, r5
 8007f58:	47b8      	blx	r7
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	d1c3      	bne.n	8007ee6 <_printf_float+0x32e>
 8007f5e:	e686      	b.n	8007c6e <_printf_float+0xb6>
 8007f60:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007f64:	f1ba 0f01 	cmp.w	sl, #1
 8007f68:	dc01      	bgt.n	8007f6e <_printf_float+0x3b6>
 8007f6a:	07db      	lsls	r3, r3, #31
 8007f6c:	d536      	bpl.n	8007fdc <_printf_float+0x424>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	4642      	mov	r2, r8
 8007f72:	4631      	mov	r1, r6
 8007f74:	4628      	mov	r0, r5
 8007f76:	47b8      	blx	r7
 8007f78:	3001      	adds	r0, #1
 8007f7a:	f43f ae78 	beq.w	8007c6e <_printf_float+0xb6>
 8007f7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f82:	4631      	mov	r1, r6
 8007f84:	4628      	mov	r0, r5
 8007f86:	47b8      	blx	r7
 8007f88:	3001      	adds	r0, #1
 8007f8a:	f43f ae70 	beq.w	8007c6e <_printf_float+0xb6>
 8007f8e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f92:	2200      	movs	r2, #0
 8007f94:	2300      	movs	r3, #0
 8007f96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f9a:	f7f8 fdad 	bl	8000af8 <__aeabi_dcmpeq>
 8007f9e:	b9c0      	cbnz	r0, 8007fd2 <_printf_float+0x41a>
 8007fa0:	4653      	mov	r3, sl
 8007fa2:	f108 0201 	add.w	r2, r8, #1
 8007fa6:	4631      	mov	r1, r6
 8007fa8:	4628      	mov	r0, r5
 8007faa:	47b8      	blx	r7
 8007fac:	3001      	adds	r0, #1
 8007fae:	d10c      	bne.n	8007fca <_printf_float+0x412>
 8007fb0:	e65d      	b.n	8007c6e <_printf_float+0xb6>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	465a      	mov	r2, fp
 8007fb6:	4631      	mov	r1, r6
 8007fb8:	4628      	mov	r0, r5
 8007fba:	47b8      	blx	r7
 8007fbc:	3001      	adds	r0, #1
 8007fbe:	f43f ae56 	beq.w	8007c6e <_printf_float+0xb6>
 8007fc2:	f108 0801 	add.w	r8, r8, #1
 8007fc6:	45d0      	cmp	r8, sl
 8007fc8:	dbf3      	blt.n	8007fb2 <_printf_float+0x3fa>
 8007fca:	464b      	mov	r3, r9
 8007fcc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007fd0:	e6df      	b.n	8007d92 <_printf_float+0x1da>
 8007fd2:	f04f 0800 	mov.w	r8, #0
 8007fd6:	f104 0b1a 	add.w	fp, r4, #26
 8007fda:	e7f4      	b.n	8007fc6 <_printf_float+0x40e>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	4642      	mov	r2, r8
 8007fe0:	e7e1      	b.n	8007fa6 <_printf_float+0x3ee>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	464a      	mov	r2, r9
 8007fe6:	4631      	mov	r1, r6
 8007fe8:	4628      	mov	r0, r5
 8007fea:	47b8      	blx	r7
 8007fec:	3001      	adds	r0, #1
 8007fee:	f43f ae3e 	beq.w	8007c6e <_printf_float+0xb6>
 8007ff2:	f108 0801 	add.w	r8, r8, #1
 8007ff6:	68e3      	ldr	r3, [r4, #12]
 8007ff8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007ffa:	1a5b      	subs	r3, r3, r1
 8007ffc:	4543      	cmp	r3, r8
 8007ffe:	dcf0      	bgt.n	8007fe2 <_printf_float+0x42a>
 8008000:	e6fc      	b.n	8007dfc <_printf_float+0x244>
 8008002:	f04f 0800 	mov.w	r8, #0
 8008006:	f104 0919 	add.w	r9, r4, #25
 800800a:	e7f4      	b.n	8007ff6 <_printf_float+0x43e>

0800800c <_printf_common>:
 800800c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008010:	4616      	mov	r6, r2
 8008012:	4698      	mov	r8, r3
 8008014:	688a      	ldr	r2, [r1, #8]
 8008016:	690b      	ldr	r3, [r1, #16]
 8008018:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800801c:	4293      	cmp	r3, r2
 800801e:	bfb8      	it	lt
 8008020:	4613      	movlt	r3, r2
 8008022:	6033      	str	r3, [r6, #0]
 8008024:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008028:	4607      	mov	r7, r0
 800802a:	460c      	mov	r4, r1
 800802c:	b10a      	cbz	r2, 8008032 <_printf_common+0x26>
 800802e:	3301      	adds	r3, #1
 8008030:	6033      	str	r3, [r6, #0]
 8008032:	6823      	ldr	r3, [r4, #0]
 8008034:	0699      	lsls	r1, r3, #26
 8008036:	bf42      	ittt	mi
 8008038:	6833      	ldrmi	r3, [r6, #0]
 800803a:	3302      	addmi	r3, #2
 800803c:	6033      	strmi	r3, [r6, #0]
 800803e:	6825      	ldr	r5, [r4, #0]
 8008040:	f015 0506 	ands.w	r5, r5, #6
 8008044:	d106      	bne.n	8008054 <_printf_common+0x48>
 8008046:	f104 0a19 	add.w	sl, r4, #25
 800804a:	68e3      	ldr	r3, [r4, #12]
 800804c:	6832      	ldr	r2, [r6, #0]
 800804e:	1a9b      	subs	r3, r3, r2
 8008050:	42ab      	cmp	r3, r5
 8008052:	dc26      	bgt.n	80080a2 <_printf_common+0x96>
 8008054:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008058:	6822      	ldr	r2, [r4, #0]
 800805a:	3b00      	subs	r3, #0
 800805c:	bf18      	it	ne
 800805e:	2301      	movne	r3, #1
 8008060:	0692      	lsls	r2, r2, #26
 8008062:	d42b      	bmi.n	80080bc <_printf_common+0xb0>
 8008064:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008068:	4641      	mov	r1, r8
 800806a:	4638      	mov	r0, r7
 800806c:	47c8      	blx	r9
 800806e:	3001      	adds	r0, #1
 8008070:	d01e      	beq.n	80080b0 <_printf_common+0xa4>
 8008072:	6823      	ldr	r3, [r4, #0]
 8008074:	6922      	ldr	r2, [r4, #16]
 8008076:	f003 0306 	and.w	r3, r3, #6
 800807a:	2b04      	cmp	r3, #4
 800807c:	bf02      	ittt	eq
 800807e:	68e5      	ldreq	r5, [r4, #12]
 8008080:	6833      	ldreq	r3, [r6, #0]
 8008082:	1aed      	subeq	r5, r5, r3
 8008084:	68a3      	ldr	r3, [r4, #8]
 8008086:	bf0c      	ite	eq
 8008088:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800808c:	2500      	movne	r5, #0
 800808e:	4293      	cmp	r3, r2
 8008090:	bfc4      	itt	gt
 8008092:	1a9b      	subgt	r3, r3, r2
 8008094:	18ed      	addgt	r5, r5, r3
 8008096:	2600      	movs	r6, #0
 8008098:	341a      	adds	r4, #26
 800809a:	42b5      	cmp	r5, r6
 800809c:	d11a      	bne.n	80080d4 <_printf_common+0xc8>
 800809e:	2000      	movs	r0, #0
 80080a0:	e008      	b.n	80080b4 <_printf_common+0xa8>
 80080a2:	2301      	movs	r3, #1
 80080a4:	4652      	mov	r2, sl
 80080a6:	4641      	mov	r1, r8
 80080a8:	4638      	mov	r0, r7
 80080aa:	47c8      	blx	r9
 80080ac:	3001      	adds	r0, #1
 80080ae:	d103      	bne.n	80080b8 <_printf_common+0xac>
 80080b0:	f04f 30ff 	mov.w	r0, #4294967295
 80080b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080b8:	3501      	adds	r5, #1
 80080ba:	e7c6      	b.n	800804a <_printf_common+0x3e>
 80080bc:	18e1      	adds	r1, r4, r3
 80080be:	1c5a      	adds	r2, r3, #1
 80080c0:	2030      	movs	r0, #48	@ 0x30
 80080c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80080c6:	4422      	add	r2, r4
 80080c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80080cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80080d0:	3302      	adds	r3, #2
 80080d2:	e7c7      	b.n	8008064 <_printf_common+0x58>
 80080d4:	2301      	movs	r3, #1
 80080d6:	4622      	mov	r2, r4
 80080d8:	4641      	mov	r1, r8
 80080da:	4638      	mov	r0, r7
 80080dc:	47c8      	blx	r9
 80080de:	3001      	adds	r0, #1
 80080e0:	d0e6      	beq.n	80080b0 <_printf_common+0xa4>
 80080e2:	3601      	adds	r6, #1
 80080e4:	e7d9      	b.n	800809a <_printf_common+0x8e>
	...

080080e8 <_printf_i>:
 80080e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080ec:	7e0f      	ldrb	r7, [r1, #24]
 80080ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80080f0:	2f78      	cmp	r7, #120	@ 0x78
 80080f2:	4691      	mov	r9, r2
 80080f4:	4680      	mov	r8, r0
 80080f6:	460c      	mov	r4, r1
 80080f8:	469a      	mov	sl, r3
 80080fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80080fe:	d807      	bhi.n	8008110 <_printf_i+0x28>
 8008100:	2f62      	cmp	r7, #98	@ 0x62
 8008102:	d80a      	bhi.n	800811a <_printf_i+0x32>
 8008104:	2f00      	cmp	r7, #0
 8008106:	f000 80d1 	beq.w	80082ac <_printf_i+0x1c4>
 800810a:	2f58      	cmp	r7, #88	@ 0x58
 800810c:	f000 80b8 	beq.w	8008280 <_printf_i+0x198>
 8008110:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008114:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008118:	e03a      	b.n	8008190 <_printf_i+0xa8>
 800811a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800811e:	2b15      	cmp	r3, #21
 8008120:	d8f6      	bhi.n	8008110 <_printf_i+0x28>
 8008122:	a101      	add	r1, pc, #4	@ (adr r1, 8008128 <_printf_i+0x40>)
 8008124:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008128:	08008181 	.word	0x08008181
 800812c:	08008195 	.word	0x08008195
 8008130:	08008111 	.word	0x08008111
 8008134:	08008111 	.word	0x08008111
 8008138:	08008111 	.word	0x08008111
 800813c:	08008111 	.word	0x08008111
 8008140:	08008195 	.word	0x08008195
 8008144:	08008111 	.word	0x08008111
 8008148:	08008111 	.word	0x08008111
 800814c:	08008111 	.word	0x08008111
 8008150:	08008111 	.word	0x08008111
 8008154:	08008293 	.word	0x08008293
 8008158:	080081bf 	.word	0x080081bf
 800815c:	0800824d 	.word	0x0800824d
 8008160:	08008111 	.word	0x08008111
 8008164:	08008111 	.word	0x08008111
 8008168:	080082b5 	.word	0x080082b5
 800816c:	08008111 	.word	0x08008111
 8008170:	080081bf 	.word	0x080081bf
 8008174:	08008111 	.word	0x08008111
 8008178:	08008111 	.word	0x08008111
 800817c:	08008255 	.word	0x08008255
 8008180:	6833      	ldr	r3, [r6, #0]
 8008182:	1d1a      	adds	r2, r3, #4
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	6032      	str	r2, [r6, #0]
 8008188:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800818c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008190:	2301      	movs	r3, #1
 8008192:	e09c      	b.n	80082ce <_printf_i+0x1e6>
 8008194:	6833      	ldr	r3, [r6, #0]
 8008196:	6820      	ldr	r0, [r4, #0]
 8008198:	1d19      	adds	r1, r3, #4
 800819a:	6031      	str	r1, [r6, #0]
 800819c:	0606      	lsls	r6, r0, #24
 800819e:	d501      	bpl.n	80081a4 <_printf_i+0xbc>
 80081a0:	681d      	ldr	r5, [r3, #0]
 80081a2:	e003      	b.n	80081ac <_printf_i+0xc4>
 80081a4:	0645      	lsls	r5, r0, #25
 80081a6:	d5fb      	bpl.n	80081a0 <_printf_i+0xb8>
 80081a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80081ac:	2d00      	cmp	r5, #0
 80081ae:	da03      	bge.n	80081b8 <_printf_i+0xd0>
 80081b0:	232d      	movs	r3, #45	@ 0x2d
 80081b2:	426d      	negs	r5, r5
 80081b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80081b8:	4858      	ldr	r0, [pc, #352]	@ (800831c <_printf_i+0x234>)
 80081ba:	230a      	movs	r3, #10
 80081bc:	e011      	b.n	80081e2 <_printf_i+0xfa>
 80081be:	6821      	ldr	r1, [r4, #0]
 80081c0:	6833      	ldr	r3, [r6, #0]
 80081c2:	0608      	lsls	r0, r1, #24
 80081c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80081c8:	d402      	bmi.n	80081d0 <_printf_i+0xe8>
 80081ca:	0649      	lsls	r1, r1, #25
 80081cc:	bf48      	it	mi
 80081ce:	b2ad      	uxthmi	r5, r5
 80081d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80081d2:	4852      	ldr	r0, [pc, #328]	@ (800831c <_printf_i+0x234>)
 80081d4:	6033      	str	r3, [r6, #0]
 80081d6:	bf14      	ite	ne
 80081d8:	230a      	movne	r3, #10
 80081da:	2308      	moveq	r3, #8
 80081dc:	2100      	movs	r1, #0
 80081de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80081e2:	6866      	ldr	r6, [r4, #4]
 80081e4:	60a6      	str	r6, [r4, #8]
 80081e6:	2e00      	cmp	r6, #0
 80081e8:	db05      	blt.n	80081f6 <_printf_i+0x10e>
 80081ea:	6821      	ldr	r1, [r4, #0]
 80081ec:	432e      	orrs	r6, r5
 80081ee:	f021 0104 	bic.w	r1, r1, #4
 80081f2:	6021      	str	r1, [r4, #0]
 80081f4:	d04b      	beq.n	800828e <_printf_i+0x1a6>
 80081f6:	4616      	mov	r6, r2
 80081f8:	fbb5 f1f3 	udiv	r1, r5, r3
 80081fc:	fb03 5711 	mls	r7, r3, r1, r5
 8008200:	5dc7      	ldrb	r7, [r0, r7]
 8008202:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008206:	462f      	mov	r7, r5
 8008208:	42bb      	cmp	r3, r7
 800820a:	460d      	mov	r5, r1
 800820c:	d9f4      	bls.n	80081f8 <_printf_i+0x110>
 800820e:	2b08      	cmp	r3, #8
 8008210:	d10b      	bne.n	800822a <_printf_i+0x142>
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	07df      	lsls	r7, r3, #31
 8008216:	d508      	bpl.n	800822a <_printf_i+0x142>
 8008218:	6923      	ldr	r3, [r4, #16]
 800821a:	6861      	ldr	r1, [r4, #4]
 800821c:	4299      	cmp	r1, r3
 800821e:	bfde      	ittt	le
 8008220:	2330      	movle	r3, #48	@ 0x30
 8008222:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008226:	f106 36ff 	addle.w	r6, r6, #4294967295
 800822a:	1b92      	subs	r2, r2, r6
 800822c:	6122      	str	r2, [r4, #16]
 800822e:	f8cd a000 	str.w	sl, [sp]
 8008232:	464b      	mov	r3, r9
 8008234:	aa03      	add	r2, sp, #12
 8008236:	4621      	mov	r1, r4
 8008238:	4640      	mov	r0, r8
 800823a:	f7ff fee7 	bl	800800c <_printf_common>
 800823e:	3001      	adds	r0, #1
 8008240:	d14a      	bne.n	80082d8 <_printf_i+0x1f0>
 8008242:	f04f 30ff 	mov.w	r0, #4294967295
 8008246:	b004      	add	sp, #16
 8008248:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	f043 0320 	orr.w	r3, r3, #32
 8008252:	6023      	str	r3, [r4, #0]
 8008254:	4832      	ldr	r0, [pc, #200]	@ (8008320 <_printf_i+0x238>)
 8008256:	2778      	movs	r7, #120	@ 0x78
 8008258:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	6831      	ldr	r1, [r6, #0]
 8008260:	061f      	lsls	r7, r3, #24
 8008262:	f851 5b04 	ldr.w	r5, [r1], #4
 8008266:	d402      	bmi.n	800826e <_printf_i+0x186>
 8008268:	065f      	lsls	r7, r3, #25
 800826a:	bf48      	it	mi
 800826c:	b2ad      	uxthmi	r5, r5
 800826e:	6031      	str	r1, [r6, #0]
 8008270:	07d9      	lsls	r1, r3, #31
 8008272:	bf44      	itt	mi
 8008274:	f043 0320 	orrmi.w	r3, r3, #32
 8008278:	6023      	strmi	r3, [r4, #0]
 800827a:	b11d      	cbz	r5, 8008284 <_printf_i+0x19c>
 800827c:	2310      	movs	r3, #16
 800827e:	e7ad      	b.n	80081dc <_printf_i+0xf4>
 8008280:	4826      	ldr	r0, [pc, #152]	@ (800831c <_printf_i+0x234>)
 8008282:	e7e9      	b.n	8008258 <_printf_i+0x170>
 8008284:	6823      	ldr	r3, [r4, #0]
 8008286:	f023 0320 	bic.w	r3, r3, #32
 800828a:	6023      	str	r3, [r4, #0]
 800828c:	e7f6      	b.n	800827c <_printf_i+0x194>
 800828e:	4616      	mov	r6, r2
 8008290:	e7bd      	b.n	800820e <_printf_i+0x126>
 8008292:	6833      	ldr	r3, [r6, #0]
 8008294:	6825      	ldr	r5, [r4, #0]
 8008296:	6961      	ldr	r1, [r4, #20]
 8008298:	1d18      	adds	r0, r3, #4
 800829a:	6030      	str	r0, [r6, #0]
 800829c:	062e      	lsls	r6, r5, #24
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	d501      	bpl.n	80082a6 <_printf_i+0x1be>
 80082a2:	6019      	str	r1, [r3, #0]
 80082a4:	e002      	b.n	80082ac <_printf_i+0x1c4>
 80082a6:	0668      	lsls	r0, r5, #25
 80082a8:	d5fb      	bpl.n	80082a2 <_printf_i+0x1ba>
 80082aa:	8019      	strh	r1, [r3, #0]
 80082ac:	2300      	movs	r3, #0
 80082ae:	6123      	str	r3, [r4, #16]
 80082b0:	4616      	mov	r6, r2
 80082b2:	e7bc      	b.n	800822e <_printf_i+0x146>
 80082b4:	6833      	ldr	r3, [r6, #0]
 80082b6:	1d1a      	adds	r2, r3, #4
 80082b8:	6032      	str	r2, [r6, #0]
 80082ba:	681e      	ldr	r6, [r3, #0]
 80082bc:	6862      	ldr	r2, [r4, #4]
 80082be:	2100      	movs	r1, #0
 80082c0:	4630      	mov	r0, r6
 80082c2:	f7f7 ff9d 	bl	8000200 <memchr>
 80082c6:	b108      	cbz	r0, 80082cc <_printf_i+0x1e4>
 80082c8:	1b80      	subs	r0, r0, r6
 80082ca:	6060      	str	r0, [r4, #4]
 80082cc:	6863      	ldr	r3, [r4, #4]
 80082ce:	6123      	str	r3, [r4, #16]
 80082d0:	2300      	movs	r3, #0
 80082d2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082d6:	e7aa      	b.n	800822e <_printf_i+0x146>
 80082d8:	6923      	ldr	r3, [r4, #16]
 80082da:	4632      	mov	r2, r6
 80082dc:	4649      	mov	r1, r9
 80082de:	4640      	mov	r0, r8
 80082e0:	47d0      	blx	sl
 80082e2:	3001      	adds	r0, #1
 80082e4:	d0ad      	beq.n	8008242 <_printf_i+0x15a>
 80082e6:	6823      	ldr	r3, [r4, #0]
 80082e8:	079b      	lsls	r3, r3, #30
 80082ea:	d413      	bmi.n	8008314 <_printf_i+0x22c>
 80082ec:	68e0      	ldr	r0, [r4, #12]
 80082ee:	9b03      	ldr	r3, [sp, #12]
 80082f0:	4298      	cmp	r0, r3
 80082f2:	bfb8      	it	lt
 80082f4:	4618      	movlt	r0, r3
 80082f6:	e7a6      	b.n	8008246 <_printf_i+0x15e>
 80082f8:	2301      	movs	r3, #1
 80082fa:	4632      	mov	r2, r6
 80082fc:	4649      	mov	r1, r9
 80082fe:	4640      	mov	r0, r8
 8008300:	47d0      	blx	sl
 8008302:	3001      	adds	r0, #1
 8008304:	d09d      	beq.n	8008242 <_printf_i+0x15a>
 8008306:	3501      	adds	r5, #1
 8008308:	68e3      	ldr	r3, [r4, #12]
 800830a:	9903      	ldr	r1, [sp, #12]
 800830c:	1a5b      	subs	r3, r3, r1
 800830e:	42ab      	cmp	r3, r5
 8008310:	dcf2      	bgt.n	80082f8 <_printf_i+0x210>
 8008312:	e7eb      	b.n	80082ec <_printf_i+0x204>
 8008314:	2500      	movs	r5, #0
 8008316:	f104 0619 	add.w	r6, r4, #25
 800831a:	e7f5      	b.n	8008308 <_printf_i+0x220>
 800831c:	0800ba68 	.word	0x0800ba68
 8008320:	0800ba79 	.word	0x0800ba79

08008324 <_scanf_float>:
 8008324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008328:	b087      	sub	sp, #28
 800832a:	4691      	mov	r9, r2
 800832c:	9303      	str	r3, [sp, #12]
 800832e:	688b      	ldr	r3, [r1, #8]
 8008330:	1e5a      	subs	r2, r3, #1
 8008332:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008336:	bf81      	itttt	hi
 8008338:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800833c:	eb03 0b05 	addhi.w	fp, r3, r5
 8008340:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008344:	608b      	strhi	r3, [r1, #8]
 8008346:	680b      	ldr	r3, [r1, #0]
 8008348:	460a      	mov	r2, r1
 800834a:	f04f 0500 	mov.w	r5, #0
 800834e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008352:	f842 3b1c 	str.w	r3, [r2], #28
 8008356:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800835a:	4680      	mov	r8, r0
 800835c:	460c      	mov	r4, r1
 800835e:	bf98      	it	ls
 8008360:	f04f 0b00 	movls.w	fp, #0
 8008364:	9201      	str	r2, [sp, #4]
 8008366:	4616      	mov	r6, r2
 8008368:	46aa      	mov	sl, r5
 800836a:	462f      	mov	r7, r5
 800836c:	9502      	str	r5, [sp, #8]
 800836e:	68a2      	ldr	r2, [r4, #8]
 8008370:	b15a      	cbz	r2, 800838a <_scanf_float+0x66>
 8008372:	f8d9 3000 	ldr.w	r3, [r9]
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	2b4e      	cmp	r3, #78	@ 0x4e
 800837a:	d863      	bhi.n	8008444 <_scanf_float+0x120>
 800837c:	2b40      	cmp	r3, #64	@ 0x40
 800837e:	d83b      	bhi.n	80083f8 <_scanf_float+0xd4>
 8008380:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008384:	b2c8      	uxtb	r0, r1
 8008386:	280e      	cmp	r0, #14
 8008388:	d939      	bls.n	80083fe <_scanf_float+0xda>
 800838a:	b11f      	cbz	r7, 8008394 <_scanf_float+0x70>
 800838c:	6823      	ldr	r3, [r4, #0]
 800838e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008392:	6023      	str	r3, [r4, #0]
 8008394:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008398:	f1ba 0f01 	cmp.w	sl, #1
 800839c:	f200 8114 	bhi.w	80085c8 <_scanf_float+0x2a4>
 80083a0:	9b01      	ldr	r3, [sp, #4]
 80083a2:	429e      	cmp	r6, r3
 80083a4:	f200 8105 	bhi.w	80085b2 <_scanf_float+0x28e>
 80083a8:	2001      	movs	r0, #1
 80083aa:	b007      	add	sp, #28
 80083ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80083b4:	2a0d      	cmp	r2, #13
 80083b6:	d8e8      	bhi.n	800838a <_scanf_float+0x66>
 80083b8:	a101      	add	r1, pc, #4	@ (adr r1, 80083c0 <_scanf_float+0x9c>)
 80083ba:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80083be:	bf00      	nop
 80083c0:	08008509 	.word	0x08008509
 80083c4:	0800838b 	.word	0x0800838b
 80083c8:	0800838b 	.word	0x0800838b
 80083cc:	0800838b 	.word	0x0800838b
 80083d0:	08008565 	.word	0x08008565
 80083d4:	0800853f 	.word	0x0800853f
 80083d8:	0800838b 	.word	0x0800838b
 80083dc:	0800838b 	.word	0x0800838b
 80083e0:	08008517 	.word	0x08008517
 80083e4:	0800838b 	.word	0x0800838b
 80083e8:	0800838b 	.word	0x0800838b
 80083ec:	0800838b 	.word	0x0800838b
 80083f0:	0800838b 	.word	0x0800838b
 80083f4:	080084d3 	.word	0x080084d3
 80083f8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80083fc:	e7da      	b.n	80083b4 <_scanf_float+0x90>
 80083fe:	290e      	cmp	r1, #14
 8008400:	d8c3      	bhi.n	800838a <_scanf_float+0x66>
 8008402:	a001      	add	r0, pc, #4	@ (adr r0, 8008408 <_scanf_float+0xe4>)
 8008404:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008408:	080084c3 	.word	0x080084c3
 800840c:	0800838b 	.word	0x0800838b
 8008410:	080084c3 	.word	0x080084c3
 8008414:	08008553 	.word	0x08008553
 8008418:	0800838b 	.word	0x0800838b
 800841c:	08008465 	.word	0x08008465
 8008420:	080084a9 	.word	0x080084a9
 8008424:	080084a9 	.word	0x080084a9
 8008428:	080084a9 	.word	0x080084a9
 800842c:	080084a9 	.word	0x080084a9
 8008430:	080084a9 	.word	0x080084a9
 8008434:	080084a9 	.word	0x080084a9
 8008438:	080084a9 	.word	0x080084a9
 800843c:	080084a9 	.word	0x080084a9
 8008440:	080084a9 	.word	0x080084a9
 8008444:	2b6e      	cmp	r3, #110	@ 0x6e
 8008446:	d809      	bhi.n	800845c <_scanf_float+0x138>
 8008448:	2b60      	cmp	r3, #96	@ 0x60
 800844a:	d8b1      	bhi.n	80083b0 <_scanf_float+0x8c>
 800844c:	2b54      	cmp	r3, #84	@ 0x54
 800844e:	d07b      	beq.n	8008548 <_scanf_float+0x224>
 8008450:	2b59      	cmp	r3, #89	@ 0x59
 8008452:	d19a      	bne.n	800838a <_scanf_float+0x66>
 8008454:	2d07      	cmp	r5, #7
 8008456:	d198      	bne.n	800838a <_scanf_float+0x66>
 8008458:	2508      	movs	r5, #8
 800845a:	e02f      	b.n	80084bc <_scanf_float+0x198>
 800845c:	2b74      	cmp	r3, #116	@ 0x74
 800845e:	d073      	beq.n	8008548 <_scanf_float+0x224>
 8008460:	2b79      	cmp	r3, #121	@ 0x79
 8008462:	e7f6      	b.n	8008452 <_scanf_float+0x12e>
 8008464:	6821      	ldr	r1, [r4, #0]
 8008466:	05c8      	lsls	r0, r1, #23
 8008468:	d51e      	bpl.n	80084a8 <_scanf_float+0x184>
 800846a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800846e:	6021      	str	r1, [r4, #0]
 8008470:	3701      	adds	r7, #1
 8008472:	f1bb 0f00 	cmp.w	fp, #0
 8008476:	d003      	beq.n	8008480 <_scanf_float+0x15c>
 8008478:	3201      	adds	r2, #1
 800847a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800847e:	60a2      	str	r2, [r4, #8]
 8008480:	68a3      	ldr	r3, [r4, #8]
 8008482:	3b01      	subs	r3, #1
 8008484:	60a3      	str	r3, [r4, #8]
 8008486:	6923      	ldr	r3, [r4, #16]
 8008488:	3301      	adds	r3, #1
 800848a:	6123      	str	r3, [r4, #16]
 800848c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8008490:	3b01      	subs	r3, #1
 8008492:	2b00      	cmp	r3, #0
 8008494:	f8c9 3004 	str.w	r3, [r9, #4]
 8008498:	f340 8082 	ble.w	80085a0 <_scanf_float+0x27c>
 800849c:	f8d9 3000 	ldr.w	r3, [r9]
 80084a0:	3301      	adds	r3, #1
 80084a2:	f8c9 3000 	str.w	r3, [r9]
 80084a6:	e762      	b.n	800836e <_scanf_float+0x4a>
 80084a8:	eb1a 0105 	adds.w	r1, sl, r5
 80084ac:	f47f af6d 	bne.w	800838a <_scanf_float+0x66>
 80084b0:	6822      	ldr	r2, [r4, #0]
 80084b2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80084b6:	6022      	str	r2, [r4, #0]
 80084b8:	460d      	mov	r5, r1
 80084ba:	468a      	mov	sl, r1
 80084bc:	f806 3b01 	strb.w	r3, [r6], #1
 80084c0:	e7de      	b.n	8008480 <_scanf_float+0x15c>
 80084c2:	6822      	ldr	r2, [r4, #0]
 80084c4:	0610      	lsls	r0, r2, #24
 80084c6:	f57f af60 	bpl.w	800838a <_scanf_float+0x66>
 80084ca:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80084ce:	6022      	str	r2, [r4, #0]
 80084d0:	e7f4      	b.n	80084bc <_scanf_float+0x198>
 80084d2:	f1ba 0f00 	cmp.w	sl, #0
 80084d6:	d10c      	bne.n	80084f2 <_scanf_float+0x1ce>
 80084d8:	b977      	cbnz	r7, 80084f8 <_scanf_float+0x1d4>
 80084da:	6822      	ldr	r2, [r4, #0]
 80084dc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80084e0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80084e4:	d108      	bne.n	80084f8 <_scanf_float+0x1d4>
 80084e6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80084ea:	6022      	str	r2, [r4, #0]
 80084ec:	f04f 0a01 	mov.w	sl, #1
 80084f0:	e7e4      	b.n	80084bc <_scanf_float+0x198>
 80084f2:	f1ba 0f02 	cmp.w	sl, #2
 80084f6:	d050      	beq.n	800859a <_scanf_float+0x276>
 80084f8:	2d01      	cmp	r5, #1
 80084fa:	d002      	beq.n	8008502 <_scanf_float+0x1de>
 80084fc:	2d04      	cmp	r5, #4
 80084fe:	f47f af44 	bne.w	800838a <_scanf_float+0x66>
 8008502:	3501      	adds	r5, #1
 8008504:	b2ed      	uxtb	r5, r5
 8008506:	e7d9      	b.n	80084bc <_scanf_float+0x198>
 8008508:	f1ba 0f01 	cmp.w	sl, #1
 800850c:	f47f af3d 	bne.w	800838a <_scanf_float+0x66>
 8008510:	f04f 0a02 	mov.w	sl, #2
 8008514:	e7d2      	b.n	80084bc <_scanf_float+0x198>
 8008516:	b975      	cbnz	r5, 8008536 <_scanf_float+0x212>
 8008518:	2f00      	cmp	r7, #0
 800851a:	f47f af37 	bne.w	800838c <_scanf_float+0x68>
 800851e:	6822      	ldr	r2, [r4, #0]
 8008520:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008524:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008528:	f040 8103 	bne.w	8008732 <_scanf_float+0x40e>
 800852c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008530:	6022      	str	r2, [r4, #0]
 8008532:	2501      	movs	r5, #1
 8008534:	e7c2      	b.n	80084bc <_scanf_float+0x198>
 8008536:	2d03      	cmp	r5, #3
 8008538:	d0e3      	beq.n	8008502 <_scanf_float+0x1de>
 800853a:	2d05      	cmp	r5, #5
 800853c:	e7df      	b.n	80084fe <_scanf_float+0x1da>
 800853e:	2d02      	cmp	r5, #2
 8008540:	f47f af23 	bne.w	800838a <_scanf_float+0x66>
 8008544:	2503      	movs	r5, #3
 8008546:	e7b9      	b.n	80084bc <_scanf_float+0x198>
 8008548:	2d06      	cmp	r5, #6
 800854a:	f47f af1e 	bne.w	800838a <_scanf_float+0x66>
 800854e:	2507      	movs	r5, #7
 8008550:	e7b4      	b.n	80084bc <_scanf_float+0x198>
 8008552:	6822      	ldr	r2, [r4, #0]
 8008554:	0591      	lsls	r1, r2, #22
 8008556:	f57f af18 	bpl.w	800838a <_scanf_float+0x66>
 800855a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800855e:	6022      	str	r2, [r4, #0]
 8008560:	9702      	str	r7, [sp, #8]
 8008562:	e7ab      	b.n	80084bc <_scanf_float+0x198>
 8008564:	6822      	ldr	r2, [r4, #0]
 8008566:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800856a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800856e:	d005      	beq.n	800857c <_scanf_float+0x258>
 8008570:	0550      	lsls	r0, r2, #21
 8008572:	f57f af0a 	bpl.w	800838a <_scanf_float+0x66>
 8008576:	2f00      	cmp	r7, #0
 8008578:	f000 80db 	beq.w	8008732 <_scanf_float+0x40e>
 800857c:	0591      	lsls	r1, r2, #22
 800857e:	bf58      	it	pl
 8008580:	9902      	ldrpl	r1, [sp, #8]
 8008582:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008586:	bf58      	it	pl
 8008588:	1a79      	subpl	r1, r7, r1
 800858a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800858e:	bf58      	it	pl
 8008590:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008594:	6022      	str	r2, [r4, #0]
 8008596:	2700      	movs	r7, #0
 8008598:	e790      	b.n	80084bc <_scanf_float+0x198>
 800859a:	f04f 0a03 	mov.w	sl, #3
 800859e:	e78d      	b.n	80084bc <_scanf_float+0x198>
 80085a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80085a4:	4649      	mov	r1, r9
 80085a6:	4640      	mov	r0, r8
 80085a8:	4798      	blx	r3
 80085aa:	2800      	cmp	r0, #0
 80085ac:	f43f aedf 	beq.w	800836e <_scanf_float+0x4a>
 80085b0:	e6eb      	b.n	800838a <_scanf_float+0x66>
 80085b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80085b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085ba:	464a      	mov	r2, r9
 80085bc:	4640      	mov	r0, r8
 80085be:	4798      	blx	r3
 80085c0:	6923      	ldr	r3, [r4, #16]
 80085c2:	3b01      	subs	r3, #1
 80085c4:	6123      	str	r3, [r4, #16]
 80085c6:	e6eb      	b.n	80083a0 <_scanf_float+0x7c>
 80085c8:	1e6b      	subs	r3, r5, #1
 80085ca:	2b06      	cmp	r3, #6
 80085cc:	d824      	bhi.n	8008618 <_scanf_float+0x2f4>
 80085ce:	2d02      	cmp	r5, #2
 80085d0:	d836      	bhi.n	8008640 <_scanf_float+0x31c>
 80085d2:	9b01      	ldr	r3, [sp, #4]
 80085d4:	429e      	cmp	r6, r3
 80085d6:	f67f aee7 	bls.w	80083a8 <_scanf_float+0x84>
 80085da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80085de:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80085e2:	464a      	mov	r2, r9
 80085e4:	4640      	mov	r0, r8
 80085e6:	4798      	blx	r3
 80085e8:	6923      	ldr	r3, [r4, #16]
 80085ea:	3b01      	subs	r3, #1
 80085ec:	6123      	str	r3, [r4, #16]
 80085ee:	e7f0      	b.n	80085d2 <_scanf_float+0x2ae>
 80085f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80085f4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80085f8:	464a      	mov	r2, r9
 80085fa:	4640      	mov	r0, r8
 80085fc:	4798      	blx	r3
 80085fe:	6923      	ldr	r3, [r4, #16]
 8008600:	3b01      	subs	r3, #1
 8008602:	6123      	str	r3, [r4, #16]
 8008604:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008608:	fa5f fa8a 	uxtb.w	sl, sl
 800860c:	f1ba 0f02 	cmp.w	sl, #2
 8008610:	d1ee      	bne.n	80085f0 <_scanf_float+0x2cc>
 8008612:	3d03      	subs	r5, #3
 8008614:	b2ed      	uxtb	r5, r5
 8008616:	1b76      	subs	r6, r6, r5
 8008618:	6823      	ldr	r3, [r4, #0]
 800861a:	05da      	lsls	r2, r3, #23
 800861c:	d530      	bpl.n	8008680 <_scanf_float+0x35c>
 800861e:	055b      	lsls	r3, r3, #21
 8008620:	d511      	bpl.n	8008646 <_scanf_float+0x322>
 8008622:	9b01      	ldr	r3, [sp, #4]
 8008624:	429e      	cmp	r6, r3
 8008626:	f67f aebf 	bls.w	80083a8 <_scanf_float+0x84>
 800862a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800862e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008632:	464a      	mov	r2, r9
 8008634:	4640      	mov	r0, r8
 8008636:	4798      	blx	r3
 8008638:	6923      	ldr	r3, [r4, #16]
 800863a:	3b01      	subs	r3, #1
 800863c:	6123      	str	r3, [r4, #16]
 800863e:	e7f0      	b.n	8008622 <_scanf_float+0x2fe>
 8008640:	46aa      	mov	sl, r5
 8008642:	46b3      	mov	fp, r6
 8008644:	e7de      	b.n	8008604 <_scanf_float+0x2e0>
 8008646:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800864a:	6923      	ldr	r3, [r4, #16]
 800864c:	2965      	cmp	r1, #101	@ 0x65
 800864e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008652:	f106 35ff 	add.w	r5, r6, #4294967295
 8008656:	6123      	str	r3, [r4, #16]
 8008658:	d00c      	beq.n	8008674 <_scanf_float+0x350>
 800865a:	2945      	cmp	r1, #69	@ 0x45
 800865c:	d00a      	beq.n	8008674 <_scanf_float+0x350>
 800865e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008662:	464a      	mov	r2, r9
 8008664:	4640      	mov	r0, r8
 8008666:	4798      	blx	r3
 8008668:	6923      	ldr	r3, [r4, #16]
 800866a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800866e:	3b01      	subs	r3, #1
 8008670:	1eb5      	subs	r5, r6, #2
 8008672:	6123      	str	r3, [r4, #16]
 8008674:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008678:	464a      	mov	r2, r9
 800867a:	4640      	mov	r0, r8
 800867c:	4798      	blx	r3
 800867e:	462e      	mov	r6, r5
 8008680:	6822      	ldr	r2, [r4, #0]
 8008682:	f012 0210 	ands.w	r2, r2, #16
 8008686:	d001      	beq.n	800868c <_scanf_float+0x368>
 8008688:	2000      	movs	r0, #0
 800868a:	e68e      	b.n	80083aa <_scanf_float+0x86>
 800868c:	7032      	strb	r2, [r6, #0]
 800868e:	6823      	ldr	r3, [r4, #0]
 8008690:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8008694:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008698:	d125      	bne.n	80086e6 <_scanf_float+0x3c2>
 800869a:	9b02      	ldr	r3, [sp, #8]
 800869c:	429f      	cmp	r7, r3
 800869e:	d00a      	beq.n	80086b6 <_scanf_float+0x392>
 80086a0:	1bda      	subs	r2, r3, r7
 80086a2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80086a6:	429e      	cmp	r6, r3
 80086a8:	bf28      	it	cs
 80086aa:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80086ae:	4922      	ldr	r1, [pc, #136]	@ (8008738 <_scanf_float+0x414>)
 80086b0:	4630      	mov	r0, r6
 80086b2:	f000 f9ad 	bl	8008a10 <siprintf>
 80086b6:	9901      	ldr	r1, [sp, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	4640      	mov	r0, r8
 80086bc:	f7ff f8ec 	bl	8007898 <_strtod_r>
 80086c0:	9b03      	ldr	r3, [sp, #12]
 80086c2:	6821      	ldr	r1, [r4, #0]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	f011 0f02 	tst.w	r1, #2
 80086ca:	ec57 6b10 	vmov	r6, r7, d0
 80086ce:	f103 0204 	add.w	r2, r3, #4
 80086d2:	d015      	beq.n	8008700 <_scanf_float+0x3dc>
 80086d4:	9903      	ldr	r1, [sp, #12]
 80086d6:	600a      	str	r2, [r1, #0]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	e9c3 6700 	strd	r6, r7, [r3]
 80086de:	68e3      	ldr	r3, [r4, #12]
 80086e0:	3301      	adds	r3, #1
 80086e2:	60e3      	str	r3, [r4, #12]
 80086e4:	e7d0      	b.n	8008688 <_scanf_float+0x364>
 80086e6:	9b04      	ldr	r3, [sp, #16]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d0e4      	beq.n	80086b6 <_scanf_float+0x392>
 80086ec:	9905      	ldr	r1, [sp, #20]
 80086ee:	230a      	movs	r3, #10
 80086f0:	3101      	adds	r1, #1
 80086f2:	4640      	mov	r0, r8
 80086f4:	f7ff f9b4 	bl	8007a60 <_strtol_r>
 80086f8:	9b04      	ldr	r3, [sp, #16]
 80086fa:	9e05      	ldr	r6, [sp, #20]
 80086fc:	1ac2      	subs	r2, r0, r3
 80086fe:	e7d0      	b.n	80086a2 <_scanf_float+0x37e>
 8008700:	f011 0f04 	tst.w	r1, #4
 8008704:	9903      	ldr	r1, [sp, #12]
 8008706:	600a      	str	r2, [r1, #0]
 8008708:	d1e6      	bne.n	80086d8 <_scanf_float+0x3b4>
 800870a:	681d      	ldr	r5, [r3, #0]
 800870c:	4632      	mov	r2, r6
 800870e:	463b      	mov	r3, r7
 8008710:	4630      	mov	r0, r6
 8008712:	4639      	mov	r1, r7
 8008714:	f7f8 fa22 	bl	8000b5c <__aeabi_dcmpun>
 8008718:	b128      	cbz	r0, 8008726 <_scanf_float+0x402>
 800871a:	4808      	ldr	r0, [pc, #32]	@ (800873c <_scanf_float+0x418>)
 800871c:	f000 fb8c 	bl	8008e38 <nanf>
 8008720:	ed85 0a00 	vstr	s0, [r5]
 8008724:	e7db      	b.n	80086de <_scanf_float+0x3ba>
 8008726:	4630      	mov	r0, r6
 8008728:	4639      	mov	r1, r7
 800872a:	f7f8 fa75 	bl	8000c18 <__aeabi_d2f>
 800872e:	6028      	str	r0, [r5, #0]
 8008730:	e7d5      	b.n	80086de <_scanf_float+0x3ba>
 8008732:	2700      	movs	r7, #0
 8008734:	e62e      	b.n	8008394 <_scanf_float+0x70>
 8008736:	bf00      	nop
 8008738:	0800ba8a 	.word	0x0800ba8a
 800873c:	0800bb43 	.word	0x0800bb43

08008740 <std>:
 8008740:	2300      	movs	r3, #0
 8008742:	b510      	push	{r4, lr}
 8008744:	4604      	mov	r4, r0
 8008746:	e9c0 3300 	strd	r3, r3, [r0]
 800874a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800874e:	6083      	str	r3, [r0, #8]
 8008750:	8181      	strh	r1, [r0, #12]
 8008752:	6643      	str	r3, [r0, #100]	@ 0x64
 8008754:	81c2      	strh	r2, [r0, #14]
 8008756:	6183      	str	r3, [r0, #24]
 8008758:	4619      	mov	r1, r3
 800875a:	2208      	movs	r2, #8
 800875c:	305c      	adds	r0, #92	@ 0x5c
 800875e:	f000 fa51 	bl	8008c04 <memset>
 8008762:	4b0d      	ldr	r3, [pc, #52]	@ (8008798 <std+0x58>)
 8008764:	6263      	str	r3, [r4, #36]	@ 0x24
 8008766:	4b0d      	ldr	r3, [pc, #52]	@ (800879c <std+0x5c>)
 8008768:	62a3      	str	r3, [r4, #40]	@ 0x28
 800876a:	4b0d      	ldr	r3, [pc, #52]	@ (80087a0 <std+0x60>)
 800876c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800876e:	4b0d      	ldr	r3, [pc, #52]	@ (80087a4 <std+0x64>)
 8008770:	6323      	str	r3, [r4, #48]	@ 0x30
 8008772:	4b0d      	ldr	r3, [pc, #52]	@ (80087a8 <std+0x68>)
 8008774:	6224      	str	r4, [r4, #32]
 8008776:	429c      	cmp	r4, r3
 8008778:	d006      	beq.n	8008788 <std+0x48>
 800877a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800877e:	4294      	cmp	r4, r2
 8008780:	d002      	beq.n	8008788 <std+0x48>
 8008782:	33d0      	adds	r3, #208	@ 0xd0
 8008784:	429c      	cmp	r4, r3
 8008786:	d105      	bne.n	8008794 <std+0x54>
 8008788:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800878c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008790:	f000 bb36 	b.w	8008e00 <__retarget_lock_init_recursive>
 8008794:	bd10      	pop	{r4, pc}
 8008796:	bf00      	nop
 8008798:	08008a55 	.word	0x08008a55
 800879c:	08008a77 	.word	0x08008a77
 80087a0:	08008aaf 	.word	0x08008aaf
 80087a4:	08008ad3 	.word	0x08008ad3
 80087a8:	20000650 	.word	0x20000650

080087ac <stdio_exit_handler>:
 80087ac:	4a02      	ldr	r2, [pc, #8]	@ (80087b8 <stdio_exit_handler+0xc>)
 80087ae:	4903      	ldr	r1, [pc, #12]	@ (80087bc <stdio_exit_handler+0x10>)
 80087b0:	4803      	ldr	r0, [pc, #12]	@ (80087c0 <stdio_exit_handler+0x14>)
 80087b2:	f000 b869 	b.w	8008888 <_fwalk_sglue>
 80087b6:	bf00      	nop
 80087b8:	2000002c 	.word	0x2000002c
 80087bc:	0800b371 	.word	0x0800b371
 80087c0:	200001a8 	.word	0x200001a8

080087c4 <cleanup_stdio>:
 80087c4:	6841      	ldr	r1, [r0, #4]
 80087c6:	4b0c      	ldr	r3, [pc, #48]	@ (80087f8 <cleanup_stdio+0x34>)
 80087c8:	4299      	cmp	r1, r3
 80087ca:	b510      	push	{r4, lr}
 80087cc:	4604      	mov	r4, r0
 80087ce:	d001      	beq.n	80087d4 <cleanup_stdio+0x10>
 80087d0:	f002 fdce 	bl	800b370 <_fflush_r>
 80087d4:	68a1      	ldr	r1, [r4, #8]
 80087d6:	4b09      	ldr	r3, [pc, #36]	@ (80087fc <cleanup_stdio+0x38>)
 80087d8:	4299      	cmp	r1, r3
 80087da:	d002      	beq.n	80087e2 <cleanup_stdio+0x1e>
 80087dc:	4620      	mov	r0, r4
 80087de:	f002 fdc7 	bl	800b370 <_fflush_r>
 80087e2:	68e1      	ldr	r1, [r4, #12]
 80087e4:	4b06      	ldr	r3, [pc, #24]	@ (8008800 <cleanup_stdio+0x3c>)
 80087e6:	4299      	cmp	r1, r3
 80087e8:	d004      	beq.n	80087f4 <cleanup_stdio+0x30>
 80087ea:	4620      	mov	r0, r4
 80087ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087f0:	f002 bdbe 	b.w	800b370 <_fflush_r>
 80087f4:	bd10      	pop	{r4, pc}
 80087f6:	bf00      	nop
 80087f8:	20000650 	.word	0x20000650
 80087fc:	200006b8 	.word	0x200006b8
 8008800:	20000720 	.word	0x20000720

08008804 <global_stdio_init.part.0>:
 8008804:	b510      	push	{r4, lr}
 8008806:	4b0b      	ldr	r3, [pc, #44]	@ (8008834 <global_stdio_init.part.0+0x30>)
 8008808:	4c0b      	ldr	r4, [pc, #44]	@ (8008838 <global_stdio_init.part.0+0x34>)
 800880a:	4a0c      	ldr	r2, [pc, #48]	@ (800883c <global_stdio_init.part.0+0x38>)
 800880c:	601a      	str	r2, [r3, #0]
 800880e:	4620      	mov	r0, r4
 8008810:	2200      	movs	r2, #0
 8008812:	2104      	movs	r1, #4
 8008814:	f7ff ff94 	bl	8008740 <std>
 8008818:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800881c:	2201      	movs	r2, #1
 800881e:	2109      	movs	r1, #9
 8008820:	f7ff ff8e 	bl	8008740 <std>
 8008824:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008828:	2202      	movs	r2, #2
 800882a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800882e:	2112      	movs	r1, #18
 8008830:	f7ff bf86 	b.w	8008740 <std>
 8008834:	20000788 	.word	0x20000788
 8008838:	20000650 	.word	0x20000650
 800883c:	080087ad 	.word	0x080087ad

08008840 <__sfp_lock_acquire>:
 8008840:	4801      	ldr	r0, [pc, #4]	@ (8008848 <__sfp_lock_acquire+0x8>)
 8008842:	f000 bade 	b.w	8008e02 <__retarget_lock_acquire_recursive>
 8008846:	bf00      	nop
 8008848:	20000791 	.word	0x20000791

0800884c <__sfp_lock_release>:
 800884c:	4801      	ldr	r0, [pc, #4]	@ (8008854 <__sfp_lock_release+0x8>)
 800884e:	f000 bad9 	b.w	8008e04 <__retarget_lock_release_recursive>
 8008852:	bf00      	nop
 8008854:	20000791 	.word	0x20000791

08008858 <__sinit>:
 8008858:	b510      	push	{r4, lr}
 800885a:	4604      	mov	r4, r0
 800885c:	f7ff fff0 	bl	8008840 <__sfp_lock_acquire>
 8008860:	6a23      	ldr	r3, [r4, #32]
 8008862:	b11b      	cbz	r3, 800886c <__sinit+0x14>
 8008864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008868:	f7ff bff0 	b.w	800884c <__sfp_lock_release>
 800886c:	4b04      	ldr	r3, [pc, #16]	@ (8008880 <__sinit+0x28>)
 800886e:	6223      	str	r3, [r4, #32]
 8008870:	4b04      	ldr	r3, [pc, #16]	@ (8008884 <__sinit+0x2c>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d1f5      	bne.n	8008864 <__sinit+0xc>
 8008878:	f7ff ffc4 	bl	8008804 <global_stdio_init.part.0>
 800887c:	e7f2      	b.n	8008864 <__sinit+0xc>
 800887e:	bf00      	nop
 8008880:	080087c5 	.word	0x080087c5
 8008884:	20000788 	.word	0x20000788

08008888 <_fwalk_sglue>:
 8008888:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800888c:	4607      	mov	r7, r0
 800888e:	4688      	mov	r8, r1
 8008890:	4614      	mov	r4, r2
 8008892:	2600      	movs	r6, #0
 8008894:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008898:	f1b9 0901 	subs.w	r9, r9, #1
 800889c:	d505      	bpl.n	80088aa <_fwalk_sglue+0x22>
 800889e:	6824      	ldr	r4, [r4, #0]
 80088a0:	2c00      	cmp	r4, #0
 80088a2:	d1f7      	bne.n	8008894 <_fwalk_sglue+0xc>
 80088a4:	4630      	mov	r0, r6
 80088a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088aa:	89ab      	ldrh	r3, [r5, #12]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d907      	bls.n	80088c0 <_fwalk_sglue+0x38>
 80088b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80088b4:	3301      	adds	r3, #1
 80088b6:	d003      	beq.n	80088c0 <_fwalk_sglue+0x38>
 80088b8:	4629      	mov	r1, r5
 80088ba:	4638      	mov	r0, r7
 80088bc:	47c0      	blx	r8
 80088be:	4306      	orrs	r6, r0
 80088c0:	3568      	adds	r5, #104	@ 0x68
 80088c2:	e7e9      	b.n	8008898 <_fwalk_sglue+0x10>

080088c4 <iprintf>:
 80088c4:	b40f      	push	{r0, r1, r2, r3}
 80088c6:	b507      	push	{r0, r1, r2, lr}
 80088c8:	4906      	ldr	r1, [pc, #24]	@ (80088e4 <iprintf+0x20>)
 80088ca:	ab04      	add	r3, sp, #16
 80088cc:	6808      	ldr	r0, [r1, #0]
 80088ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80088d2:	6881      	ldr	r1, [r0, #8]
 80088d4:	9301      	str	r3, [sp, #4]
 80088d6:	f002 fbaf 	bl	800b038 <_vfiprintf_r>
 80088da:	b003      	add	sp, #12
 80088dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80088e0:	b004      	add	sp, #16
 80088e2:	4770      	bx	lr
 80088e4:	200001a4 	.word	0x200001a4

080088e8 <_puts_r>:
 80088e8:	6a03      	ldr	r3, [r0, #32]
 80088ea:	b570      	push	{r4, r5, r6, lr}
 80088ec:	6884      	ldr	r4, [r0, #8]
 80088ee:	4605      	mov	r5, r0
 80088f0:	460e      	mov	r6, r1
 80088f2:	b90b      	cbnz	r3, 80088f8 <_puts_r+0x10>
 80088f4:	f7ff ffb0 	bl	8008858 <__sinit>
 80088f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088fa:	07db      	lsls	r3, r3, #31
 80088fc:	d405      	bmi.n	800890a <_puts_r+0x22>
 80088fe:	89a3      	ldrh	r3, [r4, #12]
 8008900:	0598      	lsls	r0, r3, #22
 8008902:	d402      	bmi.n	800890a <_puts_r+0x22>
 8008904:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008906:	f000 fa7c 	bl	8008e02 <__retarget_lock_acquire_recursive>
 800890a:	89a3      	ldrh	r3, [r4, #12]
 800890c:	0719      	lsls	r1, r3, #28
 800890e:	d502      	bpl.n	8008916 <_puts_r+0x2e>
 8008910:	6923      	ldr	r3, [r4, #16]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d135      	bne.n	8008982 <_puts_r+0x9a>
 8008916:	4621      	mov	r1, r4
 8008918:	4628      	mov	r0, r5
 800891a:	f000 f91d 	bl	8008b58 <__swsetup_r>
 800891e:	b380      	cbz	r0, 8008982 <_puts_r+0x9a>
 8008920:	f04f 35ff 	mov.w	r5, #4294967295
 8008924:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008926:	07da      	lsls	r2, r3, #31
 8008928:	d405      	bmi.n	8008936 <_puts_r+0x4e>
 800892a:	89a3      	ldrh	r3, [r4, #12]
 800892c:	059b      	lsls	r3, r3, #22
 800892e:	d402      	bmi.n	8008936 <_puts_r+0x4e>
 8008930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008932:	f000 fa67 	bl	8008e04 <__retarget_lock_release_recursive>
 8008936:	4628      	mov	r0, r5
 8008938:	bd70      	pop	{r4, r5, r6, pc}
 800893a:	2b00      	cmp	r3, #0
 800893c:	da04      	bge.n	8008948 <_puts_r+0x60>
 800893e:	69a2      	ldr	r2, [r4, #24]
 8008940:	429a      	cmp	r2, r3
 8008942:	dc17      	bgt.n	8008974 <_puts_r+0x8c>
 8008944:	290a      	cmp	r1, #10
 8008946:	d015      	beq.n	8008974 <_puts_r+0x8c>
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	1c5a      	adds	r2, r3, #1
 800894c:	6022      	str	r2, [r4, #0]
 800894e:	7019      	strb	r1, [r3, #0]
 8008950:	68a3      	ldr	r3, [r4, #8]
 8008952:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008956:	3b01      	subs	r3, #1
 8008958:	60a3      	str	r3, [r4, #8]
 800895a:	2900      	cmp	r1, #0
 800895c:	d1ed      	bne.n	800893a <_puts_r+0x52>
 800895e:	2b00      	cmp	r3, #0
 8008960:	da11      	bge.n	8008986 <_puts_r+0x9e>
 8008962:	4622      	mov	r2, r4
 8008964:	210a      	movs	r1, #10
 8008966:	4628      	mov	r0, r5
 8008968:	f000 f8b7 	bl	8008ada <__swbuf_r>
 800896c:	3001      	adds	r0, #1
 800896e:	d0d7      	beq.n	8008920 <_puts_r+0x38>
 8008970:	250a      	movs	r5, #10
 8008972:	e7d7      	b.n	8008924 <_puts_r+0x3c>
 8008974:	4622      	mov	r2, r4
 8008976:	4628      	mov	r0, r5
 8008978:	f000 f8af 	bl	8008ada <__swbuf_r>
 800897c:	3001      	adds	r0, #1
 800897e:	d1e7      	bne.n	8008950 <_puts_r+0x68>
 8008980:	e7ce      	b.n	8008920 <_puts_r+0x38>
 8008982:	3e01      	subs	r6, #1
 8008984:	e7e4      	b.n	8008950 <_puts_r+0x68>
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	1c5a      	adds	r2, r3, #1
 800898a:	6022      	str	r2, [r4, #0]
 800898c:	220a      	movs	r2, #10
 800898e:	701a      	strb	r2, [r3, #0]
 8008990:	e7ee      	b.n	8008970 <_puts_r+0x88>
	...

08008994 <puts>:
 8008994:	4b02      	ldr	r3, [pc, #8]	@ (80089a0 <puts+0xc>)
 8008996:	4601      	mov	r1, r0
 8008998:	6818      	ldr	r0, [r3, #0]
 800899a:	f7ff bfa5 	b.w	80088e8 <_puts_r>
 800899e:	bf00      	nop
 80089a0:	200001a4 	.word	0x200001a4

080089a4 <sniprintf>:
 80089a4:	b40c      	push	{r2, r3}
 80089a6:	b530      	push	{r4, r5, lr}
 80089a8:	4b18      	ldr	r3, [pc, #96]	@ (8008a0c <sniprintf+0x68>)
 80089aa:	1e0c      	subs	r4, r1, #0
 80089ac:	681d      	ldr	r5, [r3, #0]
 80089ae:	b09d      	sub	sp, #116	@ 0x74
 80089b0:	da08      	bge.n	80089c4 <sniprintf+0x20>
 80089b2:	238b      	movs	r3, #139	@ 0x8b
 80089b4:	602b      	str	r3, [r5, #0]
 80089b6:	f04f 30ff 	mov.w	r0, #4294967295
 80089ba:	b01d      	add	sp, #116	@ 0x74
 80089bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089c0:	b002      	add	sp, #8
 80089c2:	4770      	bx	lr
 80089c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80089c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80089cc:	f04f 0300 	mov.w	r3, #0
 80089d0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80089d2:	bf14      	ite	ne
 80089d4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80089d8:	4623      	moveq	r3, r4
 80089da:	9304      	str	r3, [sp, #16]
 80089dc:	9307      	str	r3, [sp, #28]
 80089de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80089e2:	9002      	str	r0, [sp, #8]
 80089e4:	9006      	str	r0, [sp, #24]
 80089e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80089ea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80089ec:	ab21      	add	r3, sp, #132	@ 0x84
 80089ee:	a902      	add	r1, sp, #8
 80089f0:	4628      	mov	r0, r5
 80089f2:	9301      	str	r3, [sp, #4]
 80089f4:	f002 f9fa 	bl	800adec <_svfiprintf_r>
 80089f8:	1c43      	adds	r3, r0, #1
 80089fa:	bfbc      	itt	lt
 80089fc:	238b      	movlt	r3, #139	@ 0x8b
 80089fe:	602b      	strlt	r3, [r5, #0]
 8008a00:	2c00      	cmp	r4, #0
 8008a02:	d0da      	beq.n	80089ba <sniprintf+0x16>
 8008a04:	9b02      	ldr	r3, [sp, #8]
 8008a06:	2200      	movs	r2, #0
 8008a08:	701a      	strb	r2, [r3, #0]
 8008a0a:	e7d6      	b.n	80089ba <sniprintf+0x16>
 8008a0c:	200001a4 	.word	0x200001a4

08008a10 <siprintf>:
 8008a10:	b40e      	push	{r1, r2, r3}
 8008a12:	b510      	push	{r4, lr}
 8008a14:	b09d      	sub	sp, #116	@ 0x74
 8008a16:	ab1f      	add	r3, sp, #124	@ 0x7c
 8008a18:	9002      	str	r0, [sp, #8]
 8008a1a:	9006      	str	r0, [sp, #24]
 8008a1c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008a20:	480a      	ldr	r0, [pc, #40]	@ (8008a4c <siprintf+0x3c>)
 8008a22:	9107      	str	r1, [sp, #28]
 8008a24:	9104      	str	r1, [sp, #16]
 8008a26:	490a      	ldr	r1, [pc, #40]	@ (8008a50 <siprintf+0x40>)
 8008a28:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a2c:	9105      	str	r1, [sp, #20]
 8008a2e:	2400      	movs	r4, #0
 8008a30:	a902      	add	r1, sp, #8
 8008a32:	6800      	ldr	r0, [r0, #0]
 8008a34:	9301      	str	r3, [sp, #4]
 8008a36:	941b      	str	r4, [sp, #108]	@ 0x6c
 8008a38:	f002 f9d8 	bl	800adec <_svfiprintf_r>
 8008a3c:	9b02      	ldr	r3, [sp, #8]
 8008a3e:	701c      	strb	r4, [r3, #0]
 8008a40:	b01d      	add	sp, #116	@ 0x74
 8008a42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a46:	b003      	add	sp, #12
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop
 8008a4c:	200001a4 	.word	0x200001a4
 8008a50:	ffff0208 	.word	0xffff0208

08008a54 <__sread>:
 8008a54:	b510      	push	{r4, lr}
 8008a56:	460c      	mov	r4, r1
 8008a58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a5c:	f000 f982 	bl	8008d64 <_read_r>
 8008a60:	2800      	cmp	r0, #0
 8008a62:	bfab      	itete	ge
 8008a64:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008a66:	89a3      	ldrhlt	r3, [r4, #12]
 8008a68:	181b      	addge	r3, r3, r0
 8008a6a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008a6e:	bfac      	ite	ge
 8008a70:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008a72:	81a3      	strhlt	r3, [r4, #12]
 8008a74:	bd10      	pop	{r4, pc}

08008a76 <__swrite>:
 8008a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a7a:	461f      	mov	r7, r3
 8008a7c:	898b      	ldrh	r3, [r1, #12]
 8008a7e:	05db      	lsls	r3, r3, #23
 8008a80:	4605      	mov	r5, r0
 8008a82:	460c      	mov	r4, r1
 8008a84:	4616      	mov	r6, r2
 8008a86:	d505      	bpl.n	8008a94 <__swrite+0x1e>
 8008a88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a8c:	2302      	movs	r3, #2
 8008a8e:	2200      	movs	r2, #0
 8008a90:	f000 f956 	bl	8008d40 <_lseek_r>
 8008a94:	89a3      	ldrh	r3, [r4, #12]
 8008a96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a9a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a9e:	81a3      	strh	r3, [r4, #12]
 8008aa0:	4632      	mov	r2, r6
 8008aa2:	463b      	mov	r3, r7
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008aaa:	f000 b96d 	b.w	8008d88 <_write_r>

08008aae <__sseek>:
 8008aae:	b510      	push	{r4, lr}
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ab6:	f000 f943 	bl	8008d40 <_lseek_r>
 8008aba:	1c43      	adds	r3, r0, #1
 8008abc:	89a3      	ldrh	r3, [r4, #12]
 8008abe:	bf15      	itete	ne
 8008ac0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008ac2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008ac6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008aca:	81a3      	strheq	r3, [r4, #12]
 8008acc:	bf18      	it	ne
 8008ace:	81a3      	strhne	r3, [r4, #12]
 8008ad0:	bd10      	pop	{r4, pc}

08008ad2 <__sclose>:
 8008ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ad6:	f000 b923 	b.w	8008d20 <_close_r>

08008ada <__swbuf_r>:
 8008ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008adc:	460e      	mov	r6, r1
 8008ade:	4614      	mov	r4, r2
 8008ae0:	4605      	mov	r5, r0
 8008ae2:	b118      	cbz	r0, 8008aec <__swbuf_r+0x12>
 8008ae4:	6a03      	ldr	r3, [r0, #32]
 8008ae6:	b90b      	cbnz	r3, 8008aec <__swbuf_r+0x12>
 8008ae8:	f7ff feb6 	bl	8008858 <__sinit>
 8008aec:	69a3      	ldr	r3, [r4, #24]
 8008aee:	60a3      	str	r3, [r4, #8]
 8008af0:	89a3      	ldrh	r3, [r4, #12]
 8008af2:	071a      	lsls	r2, r3, #28
 8008af4:	d501      	bpl.n	8008afa <__swbuf_r+0x20>
 8008af6:	6923      	ldr	r3, [r4, #16]
 8008af8:	b943      	cbnz	r3, 8008b0c <__swbuf_r+0x32>
 8008afa:	4621      	mov	r1, r4
 8008afc:	4628      	mov	r0, r5
 8008afe:	f000 f82b 	bl	8008b58 <__swsetup_r>
 8008b02:	b118      	cbz	r0, 8008b0c <__swbuf_r+0x32>
 8008b04:	f04f 37ff 	mov.w	r7, #4294967295
 8008b08:	4638      	mov	r0, r7
 8008b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	6922      	ldr	r2, [r4, #16]
 8008b10:	1a98      	subs	r0, r3, r2
 8008b12:	6963      	ldr	r3, [r4, #20]
 8008b14:	b2f6      	uxtb	r6, r6
 8008b16:	4283      	cmp	r3, r0
 8008b18:	4637      	mov	r7, r6
 8008b1a:	dc05      	bgt.n	8008b28 <__swbuf_r+0x4e>
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	4628      	mov	r0, r5
 8008b20:	f002 fc26 	bl	800b370 <_fflush_r>
 8008b24:	2800      	cmp	r0, #0
 8008b26:	d1ed      	bne.n	8008b04 <__swbuf_r+0x2a>
 8008b28:	68a3      	ldr	r3, [r4, #8]
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	60a3      	str	r3, [r4, #8]
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	1c5a      	adds	r2, r3, #1
 8008b32:	6022      	str	r2, [r4, #0]
 8008b34:	701e      	strb	r6, [r3, #0]
 8008b36:	6962      	ldr	r2, [r4, #20]
 8008b38:	1c43      	adds	r3, r0, #1
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d004      	beq.n	8008b48 <__swbuf_r+0x6e>
 8008b3e:	89a3      	ldrh	r3, [r4, #12]
 8008b40:	07db      	lsls	r3, r3, #31
 8008b42:	d5e1      	bpl.n	8008b08 <__swbuf_r+0x2e>
 8008b44:	2e0a      	cmp	r6, #10
 8008b46:	d1df      	bne.n	8008b08 <__swbuf_r+0x2e>
 8008b48:	4621      	mov	r1, r4
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f002 fc10 	bl	800b370 <_fflush_r>
 8008b50:	2800      	cmp	r0, #0
 8008b52:	d0d9      	beq.n	8008b08 <__swbuf_r+0x2e>
 8008b54:	e7d6      	b.n	8008b04 <__swbuf_r+0x2a>
	...

08008b58 <__swsetup_r>:
 8008b58:	b538      	push	{r3, r4, r5, lr}
 8008b5a:	4b29      	ldr	r3, [pc, #164]	@ (8008c00 <__swsetup_r+0xa8>)
 8008b5c:	4605      	mov	r5, r0
 8008b5e:	6818      	ldr	r0, [r3, #0]
 8008b60:	460c      	mov	r4, r1
 8008b62:	b118      	cbz	r0, 8008b6c <__swsetup_r+0x14>
 8008b64:	6a03      	ldr	r3, [r0, #32]
 8008b66:	b90b      	cbnz	r3, 8008b6c <__swsetup_r+0x14>
 8008b68:	f7ff fe76 	bl	8008858 <__sinit>
 8008b6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b70:	0719      	lsls	r1, r3, #28
 8008b72:	d422      	bmi.n	8008bba <__swsetup_r+0x62>
 8008b74:	06da      	lsls	r2, r3, #27
 8008b76:	d407      	bmi.n	8008b88 <__swsetup_r+0x30>
 8008b78:	2209      	movs	r2, #9
 8008b7a:	602a      	str	r2, [r5, #0]
 8008b7c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b80:	81a3      	strh	r3, [r4, #12]
 8008b82:	f04f 30ff 	mov.w	r0, #4294967295
 8008b86:	e033      	b.n	8008bf0 <__swsetup_r+0x98>
 8008b88:	0758      	lsls	r0, r3, #29
 8008b8a:	d512      	bpl.n	8008bb2 <__swsetup_r+0x5a>
 8008b8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b8e:	b141      	cbz	r1, 8008ba2 <__swsetup_r+0x4a>
 8008b90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b94:	4299      	cmp	r1, r3
 8008b96:	d002      	beq.n	8008b9e <__swsetup_r+0x46>
 8008b98:	4628      	mov	r0, r5
 8008b9a:	f000 ffc9 	bl	8009b30 <_free_r>
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	6363      	str	r3, [r4, #52]	@ 0x34
 8008ba2:	89a3      	ldrh	r3, [r4, #12]
 8008ba4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008ba8:	81a3      	strh	r3, [r4, #12]
 8008baa:	2300      	movs	r3, #0
 8008bac:	6063      	str	r3, [r4, #4]
 8008bae:	6923      	ldr	r3, [r4, #16]
 8008bb0:	6023      	str	r3, [r4, #0]
 8008bb2:	89a3      	ldrh	r3, [r4, #12]
 8008bb4:	f043 0308 	orr.w	r3, r3, #8
 8008bb8:	81a3      	strh	r3, [r4, #12]
 8008bba:	6923      	ldr	r3, [r4, #16]
 8008bbc:	b94b      	cbnz	r3, 8008bd2 <__swsetup_r+0x7a>
 8008bbe:	89a3      	ldrh	r3, [r4, #12]
 8008bc0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008bc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bc8:	d003      	beq.n	8008bd2 <__swsetup_r+0x7a>
 8008bca:	4621      	mov	r1, r4
 8008bcc:	4628      	mov	r0, r5
 8008bce:	f002 fc2f 	bl	800b430 <__smakebuf_r>
 8008bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bd6:	f013 0201 	ands.w	r2, r3, #1
 8008bda:	d00a      	beq.n	8008bf2 <__swsetup_r+0x9a>
 8008bdc:	2200      	movs	r2, #0
 8008bde:	60a2      	str	r2, [r4, #8]
 8008be0:	6962      	ldr	r2, [r4, #20]
 8008be2:	4252      	negs	r2, r2
 8008be4:	61a2      	str	r2, [r4, #24]
 8008be6:	6922      	ldr	r2, [r4, #16]
 8008be8:	b942      	cbnz	r2, 8008bfc <__swsetup_r+0xa4>
 8008bea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008bee:	d1c5      	bne.n	8008b7c <__swsetup_r+0x24>
 8008bf0:	bd38      	pop	{r3, r4, r5, pc}
 8008bf2:	0799      	lsls	r1, r3, #30
 8008bf4:	bf58      	it	pl
 8008bf6:	6962      	ldrpl	r2, [r4, #20]
 8008bf8:	60a2      	str	r2, [r4, #8]
 8008bfa:	e7f4      	b.n	8008be6 <__swsetup_r+0x8e>
 8008bfc:	2000      	movs	r0, #0
 8008bfe:	e7f7      	b.n	8008bf0 <__swsetup_r+0x98>
 8008c00:	200001a4 	.word	0x200001a4

08008c04 <memset>:
 8008c04:	4402      	add	r2, r0
 8008c06:	4603      	mov	r3, r0
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d100      	bne.n	8008c0e <memset+0xa>
 8008c0c:	4770      	bx	lr
 8008c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8008c12:	e7f9      	b.n	8008c08 <memset+0x4>

08008c14 <strncmp>:
 8008c14:	b510      	push	{r4, lr}
 8008c16:	b16a      	cbz	r2, 8008c34 <strncmp+0x20>
 8008c18:	3901      	subs	r1, #1
 8008c1a:	1884      	adds	r4, r0, r2
 8008c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c20:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d103      	bne.n	8008c30 <strncmp+0x1c>
 8008c28:	42a0      	cmp	r0, r4
 8008c2a:	d001      	beq.n	8008c30 <strncmp+0x1c>
 8008c2c:	2a00      	cmp	r2, #0
 8008c2e:	d1f5      	bne.n	8008c1c <strncmp+0x8>
 8008c30:	1ad0      	subs	r0, r2, r3
 8008c32:	bd10      	pop	{r4, pc}
 8008c34:	4610      	mov	r0, r2
 8008c36:	e7fc      	b.n	8008c32 <strncmp+0x1e>

08008c38 <strncpy>:
 8008c38:	b510      	push	{r4, lr}
 8008c3a:	3901      	subs	r1, #1
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	b132      	cbz	r2, 8008c4e <strncpy+0x16>
 8008c40:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008c44:	f803 4b01 	strb.w	r4, [r3], #1
 8008c48:	3a01      	subs	r2, #1
 8008c4a:	2c00      	cmp	r4, #0
 8008c4c:	d1f7      	bne.n	8008c3e <strncpy+0x6>
 8008c4e:	441a      	add	r2, r3
 8008c50:	2100      	movs	r1, #0
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d100      	bne.n	8008c58 <strncpy+0x20>
 8008c56:	bd10      	pop	{r4, pc}
 8008c58:	f803 1b01 	strb.w	r1, [r3], #1
 8008c5c:	e7f9      	b.n	8008c52 <strncpy+0x1a>
	...

08008c60 <strtok>:
 8008c60:	4b16      	ldr	r3, [pc, #88]	@ (8008cbc <strtok+0x5c>)
 8008c62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c66:	681f      	ldr	r7, [r3, #0]
 8008c68:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8008c6a:	4605      	mov	r5, r0
 8008c6c:	460e      	mov	r6, r1
 8008c6e:	b9ec      	cbnz	r4, 8008cac <strtok+0x4c>
 8008c70:	2050      	movs	r0, #80	@ 0x50
 8008c72:	f001 fae1 	bl	800a238 <malloc>
 8008c76:	4602      	mov	r2, r0
 8008c78:	6478      	str	r0, [r7, #68]	@ 0x44
 8008c7a:	b920      	cbnz	r0, 8008c86 <strtok+0x26>
 8008c7c:	4b10      	ldr	r3, [pc, #64]	@ (8008cc0 <strtok+0x60>)
 8008c7e:	4811      	ldr	r0, [pc, #68]	@ (8008cc4 <strtok+0x64>)
 8008c80:	215b      	movs	r1, #91	@ 0x5b
 8008c82:	f000 f8df 	bl	8008e44 <__assert_func>
 8008c86:	e9c0 4400 	strd	r4, r4, [r0]
 8008c8a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008c8e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008c92:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8008c96:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8008c9a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8008c9e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8008ca2:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8008ca6:	6184      	str	r4, [r0, #24]
 8008ca8:	7704      	strb	r4, [r0, #28]
 8008caa:	6244      	str	r4, [r0, #36]	@ 0x24
 8008cac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cae:	4631      	mov	r1, r6
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cb8:	f000 b806 	b.w	8008cc8 <__strtok_r>
 8008cbc:	200001a4 	.word	0x200001a4
 8008cc0:	0800ba8f 	.word	0x0800ba8f
 8008cc4:	0800baa6 	.word	0x0800baa6

08008cc8 <__strtok_r>:
 8008cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cca:	4604      	mov	r4, r0
 8008ccc:	b908      	cbnz	r0, 8008cd2 <__strtok_r+0xa>
 8008cce:	6814      	ldr	r4, [r2, #0]
 8008cd0:	b144      	cbz	r4, 8008ce4 <__strtok_r+0x1c>
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008cd8:	460f      	mov	r7, r1
 8008cda:	f817 6b01 	ldrb.w	r6, [r7], #1
 8008cde:	b91e      	cbnz	r6, 8008ce8 <__strtok_r+0x20>
 8008ce0:	b965      	cbnz	r5, 8008cfc <__strtok_r+0x34>
 8008ce2:	6015      	str	r5, [r2, #0]
 8008ce4:	2000      	movs	r0, #0
 8008ce6:	e005      	b.n	8008cf4 <__strtok_r+0x2c>
 8008ce8:	42b5      	cmp	r5, r6
 8008cea:	d1f6      	bne.n	8008cda <__strtok_r+0x12>
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d1f0      	bne.n	8008cd2 <__strtok_r+0xa>
 8008cf0:	6014      	str	r4, [r2, #0]
 8008cf2:	7003      	strb	r3, [r0, #0]
 8008cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cf6:	461c      	mov	r4, r3
 8008cf8:	e00c      	b.n	8008d14 <__strtok_r+0x4c>
 8008cfa:	b91d      	cbnz	r5, 8008d04 <__strtok_r+0x3c>
 8008cfc:	4627      	mov	r7, r4
 8008cfe:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008d02:	460e      	mov	r6, r1
 8008d04:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008d08:	42ab      	cmp	r3, r5
 8008d0a:	d1f6      	bne.n	8008cfa <__strtok_r+0x32>
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d0f2      	beq.n	8008cf6 <__strtok_r+0x2e>
 8008d10:	2300      	movs	r3, #0
 8008d12:	703b      	strb	r3, [r7, #0]
 8008d14:	6014      	str	r4, [r2, #0]
 8008d16:	e7ed      	b.n	8008cf4 <__strtok_r+0x2c>

08008d18 <_localeconv_r>:
 8008d18:	4800      	ldr	r0, [pc, #0]	@ (8008d1c <_localeconv_r+0x4>)
 8008d1a:	4770      	bx	lr
 8008d1c:	20000128 	.word	0x20000128

08008d20 <_close_r>:
 8008d20:	b538      	push	{r3, r4, r5, lr}
 8008d22:	4d06      	ldr	r5, [pc, #24]	@ (8008d3c <_close_r+0x1c>)
 8008d24:	2300      	movs	r3, #0
 8008d26:	4604      	mov	r4, r0
 8008d28:	4608      	mov	r0, r1
 8008d2a:	602b      	str	r3, [r5, #0]
 8008d2c:	f7fa f838 	bl	8002da0 <_close>
 8008d30:	1c43      	adds	r3, r0, #1
 8008d32:	d102      	bne.n	8008d3a <_close_r+0x1a>
 8008d34:	682b      	ldr	r3, [r5, #0]
 8008d36:	b103      	cbz	r3, 8008d3a <_close_r+0x1a>
 8008d38:	6023      	str	r3, [r4, #0]
 8008d3a:	bd38      	pop	{r3, r4, r5, pc}
 8008d3c:	2000078c 	.word	0x2000078c

08008d40 <_lseek_r>:
 8008d40:	b538      	push	{r3, r4, r5, lr}
 8008d42:	4d07      	ldr	r5, [pc, #28]	@ (8008d60 <_lseek_r+0x20>)
 8008d44:	4604      	mov	r4, r0
 8008d46:	4608      	mov	r0, r1
 8008d48:	4611      	mov	r1, r2
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	602a      	str	r2, [r5, #0]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	f7fa f84d 	bl	8002dee <_lseek>
 8008d54:	1c43      	adds	r3, r0, #1
 8008d56:	d102      	bne.n	8008d5e <_lseek_r+0x1e>
 8008d58:	682b      	ldr	r3, [r5, #0]
 8008d5a:	b103      	cbz	r3, 8008d5e <_lseek_r+0x1e>
 8008d5c:	6023      	str	r3, [r4, #0]
 8008d5e:	bd38      	pop	{r3, r4, r5, pc}
 8008d60:	2000078c 	.word	0x2000078c

08008d64 <_read_r>:
 8008d64:	b538      	push	{r3, r4, r5, lr}
 8008d66:	4d07      	ldr	r5, [pc, #28]	@ (8008d84 <_read_r+0x20>)
 8008d68:	4604      	mov	r4, r0
 8008d6a:	4608      	mov	r0, r1
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	2200      	movs	r2, #0
 8008d70:	602a      	str	r2, [r5, #0]
 8008d72:	461a      	mov	r2, r3
 8008d74:	f7f9 ffdb 	bl	8002d2e <_read>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	d102      	bne.n	8008d82 <_read_r+0x1e>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	b103      	cbz	r3, 8008d82 <_read_r+0x1e>
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	2000078c 	.word	0x2000078c

08008d88 <_write_r>:
 8008d88:	b538      	push	{r3, r4, r5, lr}
 8008d8a:	4d07      	ldr	r5, [pc, #28]	@ (8008da8 <_write_r+0x20>)
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	4608      	mov	r0, r1
 8008d90:	4611      	mov	r1, r2
 8008d92:	2200      	movs	r2, #0
 8008d94:	602a      	str	r2, [r5, #0]
 8008d96:	461a      	mov	r2, r3
 8008d98:	f7f9 ffe6 	bl	8002d68 <_write>
 8008d9c:	1c43      	adds	r3, r0, #1
 8008d9e:	d102      	bne.n	8008da6 <_write_r+0x1e>
 8008da0:	682b      	ldr	r3, [r5, #0]
 8008da2:	b103      	cbz	r3, 8008da6 <_write_r+0x1e>
 8008da4:	6023      	str	r3, [r4, #0]
 8008da6:	bd38      	pop	{r3, r4, r5, pc}
 8008da8:	2000078c 	.word	0x2000078c

08008dac <__errno>:
 8008dac:	4b01      	ldr	r3, [pc, #4]	@ (8008db4 <__errno+0x8>)
 8008dae:	6818      	ldr	r0, [r3, #0]
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	200001a4 	.word	0x200001a4

08008db8 <__libc_init_array>:
 8008db8:	b570      	push	{r4, r5, r6, lr}
 8008dba:	4d0d      	ldr	r5, [pc, #52]	@ (8008df0 <__libc_init_array+0x38>)
 8008dbc:	4c0d      	ldr	r4, [pc, #52]	@ (8008df4 <__libc_init_array+0x3c>)
 8008dbe:	1b64      	subs	r4, r4, r5
 8008dc0:	10a4      	asrs	r4, r4, #2
 8008dc2:	2600      	movs	r6, #0
 8008dc4:	42a6      	cmp	r6, r4
 8008dc6:	d109      	bne.n	8008ddc <__libc_init_array+0x24>
 8008dc8:	4d0b      	ldr	r5, [pc, #44]	@ (8008df8 <__libc_init_array+0x40>)
 8008dca:	4c0c      	ldr	r4, [pc, #48]	@ (8008dfc <__libc_init_array+0x44>)
 8008dcc:	f002 fc4e 	bl	800b66c <_init>
 8008dd0:	1b64      	subs	r4, r4, r5
 8008dd2:	10a4      	asrs	r4, r4, #2
 8008dd4:	2600      	movs	r6, #0
 8008dd6:	42a6      	cmp	r6, r4
 8008dd8:	d105      	bne.n	8008de6 <__libc_init_array+0x2e>
 8008dda:	bd70      	pop	{r4, r5, r6, pc}
 8008ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008de0:	4798      	blx	r3
 8008de2:	3601      	adds	r6, #1
 8008de4:	e7ee      	b.n	8008dc4 <__libc_init_array+0xc>
 8008de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dea:	4798      	blx	r3
 8008dec:	3601      	adds	r6, #1
 8008dee:	e7f2      	b.n	8008dd6 <__libc_init_array+0x1e>
 8008df0:	0800bee0 	.word	0x0800bee0
 8008df4:	0800bee0 	.word	0x0800bee0
 8008df8:	0800bee0 	.word	0x0800bee0
 8008dfc:	0800bee4 	.word	0x0800bee4

08008e00 <__retarget_lock_init_recursive>:
 8008e00:	4770      	bx	lr

08008e02 <__retarget_lock_acquire_recursive>:
 8008e02:	4770      	bx	lr

08008e04 <__retarget_lock_release_recursive>:
 8008e04:	4770      	bx	lr

08008e06 <memcpy>:
 8008e06:	440a      	add	r2, r1
 8008e08:	4291      	cmp	r1, r2
 8008e0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e0e:	d100      	bne.n	8008e12 <memcpy+0xc>
 8008e10:	4770      	bx	lr
 8008e12:	b510      	push	{r4, lr}
 8008e14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e1c:	4291      	cmp	r1, r2
 8008e1e:	d1f9      	bne.n	8008e14 <memcpy+0xe>
 8008e20:	bd10      	pop	{r4, pc}
 8008e22:	0000      	movs	r0, r0
 8008e24:	0000      	movs	r0, r0
	...

08008e28 <nan>:
 8008e28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008e30 <nan+0x8>
 8008e2c:	4770      	bx	lr
 8008e2e:	bf00      	nop
 8008e30:	00000000 	.word	0x00000000
 8008e34:	7ff80000 	.word	0x7ff80000

08008e38 <nanf>:
 8008e38:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008e40 <nanf+0x8>
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	7fc00000 	.word	0x7fc00000

08008e44 <__assert_func>:
 8008e44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008e46:	4614      	mov	r4, r2
 8008e48:	461a      	mov	r2, r3
 8008e4a:	4b09      	ldr	r3, [pc, #36]	@ (8008e70 <__assert_func+0x2c>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4605      	mov	r5, r0
 8008e50:	68d8      	ldr	r0, [r3, #12]
 8008e52:	b14c      	cbz	r4, 8008e68 <__assert_func+0x24>
 8008e54:	4b07      	ldr	r3, [pc, #28]	@ (8008e74 <__assert_func+0x30>)
 8008e56:	9100      	str	r1, [sp, #0]
 8008e58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e5c:	4906      	ldr	r1, [pc, #24]	@ (8008e78 <__assert_func+0x34>)
 8008e5e:	462b      	mov	r3, r5
 8008e60:	f002 faae 	bl	800b3c0 <fiprintf>
 8008e64:	f002 fb6c 	bl	800b540 <abort>
 8008e68:	4b04      	ldr	r3, [pc, #16]	@ (8008e7c <__assert_func+0x38>)
 8008e6a:	461c      	mov	r4, r3
 8008e6c:	e7f3      	b.n	8008e56 <__assert_func+0x12>
 8008e6e:	bf00      	nop
 8008e70:	200001a4 	.word	0x200001a4
 8008e74:	0800bb08 	.word	0x0800bb08
 8008e78:	0800bb15 	.word	0x0800bb15
 8008e7c:	0800bb43 	.word	0x0800bb43

08008e80 <quorem>:
 8008e80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e84:	6903      	ldr	r3, [r0, #16]
 8008e86:	690c      	ldr	r4, [r1, #16]
 8008e88:	42a3      	cmp	r3, r4
 8008e8a:	4607      	mov	r7, r0
 8008e8c:	db7e      	blt.n	8008f8c <quorem+0x10c>
 8008e8e:	3c01      	subs	r4, #1
 8008e90:	f101 0814 	add.w	r8, r1, #20
 8008e94:	00a3      	lsls	r3, r4, #2
 8008e96:	f100 0514 	add.w	r5, r0, #20
 8008e9a:	9300      	str	r3, [sp, #0]
 8008e9c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ea6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008eaa:	3301      	adds	r3, #1
 8008eac:	429a      	cmp	r2, r3
 8008eae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008eb2:	fbb2 f6f3 	udiv	r6, r2, r3
 8008eb6:	d32e      	bcc.n	8008f16 <quorem+0x96>
 8008eb8:	f04f 0a00 	mov.w	sl, #0
 8008ebc:	46c4      	mov	ip, r8
 8008ebe:	46ae      	mov	lr, r5
 8008ec0:	46d3      	mov	fp, sl
 8008ec2:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008ec6:	b298      	uxth	r0, r3
 8008ec8:	fb06 a000 	mla	r0, r6, r0, sl
 8008ecc:	0c02      	lsrs	r2, r0, #16
 8008ece:	0c1b      	lsrs	r3, r3, #16
 8008ed0:	fb06 2303 	mla	r3, r6, r3, r2
 8008ed4:	f8de 2000 	ldr.w	r2, [lr]
 8008ed8:	b280      	uxth	r0, r0
 8008eda:	b292      	uxth	r2, r2
 8008edc:	1a12      	subs	r2, r2, r0
 8008ede:	445a      	add	r2, fp
 8008ee0:	f8de 0000 	ldr.w	r0, [lr]
 8008ee4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008eee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008ef2:	b292      	uxth	r2, r2
 8008ef4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008ef8:	45e1      	cmp	r9, ip
 8008efa:	f84e 2b04 	str.w	r2, [lr], #4
 8008efe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008f02:	d2de      	bcs.n	8008ec2 <quorem+0x42>
 8008f04:	9b00      	ldr	r3, [sp, #0]
 8008f06:	58eb      	ldr	r3, [r5, r3]
 8008f08:	b92b      	cbnz	r3, 8008f16 <quorem+0x96>
 8008f0a:	9b01      	ldr	r3, [sp, #4]
 8008f0c:	3b04      	subs	r3, #4
 8008f0e:	429d      	cmp	r5, r3
 8008f10:	461a      	mov	r2, r3
 8008f12:	d32f      	bcc.n	8008f74 <quorem+0xf4>
 8008f14:	613c      	str	r4, [r7, #16]
 8008f16:	4638      	mov	r0, r7
 8008f18:	f001 fd12 	bl	800a940 <__mcmp>
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	db25      	blt.n	8008f6c <quorem+0xec>
 8008f20:	4629      	mov	r1, r5
 8008f22:	2000      	movs	r0, #0
 8008f24:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f28:	f8d1 c000 	ldr.w	ip, [r1]
 8008f2c:	fa1f fe82 	uxth.w	lr, r2
 8008f30:	fa1f f38c 	uxth.w	r3, ip
 8008f34:	eba3 030e 	sub.w	r3, r3, lr
 8008f38:	4403      	add	r3, r0
 8008f3a:	0c12      	lsrs	r2, r2, #16
 8008f3c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008f40:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008f44:	b29b      	uxth	r3, r3
 8008f46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f4a:	45c1      	cmp	r9, r8
 8008f4c:	f841 3b04 	str.w	r3, [r1], #4
 8008f50:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008f54:	d2e6      	bcs.n	8008f24 <quorem+0xa4>
 8008f56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f5e:	b922      	cbnz	r2, 8008f6a <quorem+0xea>
 8008f60:	3b04      	subs	r3, #4
 8008f62:	429d      	cmp	r5, r3
 8008f64:	461a      	mov	r2, r3
 8008f66:	d30b      	bcc.n	8008f80 <quorem+0x100>
 8008f68:	613c      	str	r4, [r7, #16]
 8008f6a:	3601      	adds	r6, #1
 8008f6c:	4630      	mov	r0, r6
 8008f6e:	b003      	add	sp, #12
 8008f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f74:	6812      	ldr	r2, [r2, #0]
 8008f76:	3b04      	subs	r3, #4
 8008f78:	2a00      	cmp	r2, #0
 8008f7a:	d1cb      	bne.n	8008f14 <quorem+0x94>
 8008f7c:	3c01      	subs	r4, #1
 8008f7e:	e7c6      	b.n	8008f0e <quorem+0x8e>
 8008f80:	6812      	ldr	r2, [r2, #0]
 8008f82:	3b04      	subs	r3, #4
 8008f84:	2a00      	cmp	r2, #0
 8008f86:	d1ef      	bne.n	8008f68 <quorem+0xe8>
 8008f88:	3c01      	subs	r4, #1
 8008f8a:	e7ea      	b.n	8008f62 <quorem+0xe2>
 8008f8c:	2000      	movs	r0, #0
 8008f8e:	e7ee      	b.n	8008f6e <quorem+0xee>

08008f90 <_dtoa_r>:
 8008f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f94:	69c7      	ldr	r7, [r0, #28]
 8008f96:	b097      	sub	sp, #92	@ 0x5c
 8008f98:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008f9c:	ec55 4b10 	vmov	r4, r5, d0
 8008fa0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008fa2:	9107      	str	r1, [sp, #28]
 8008fa4:	4681      	mov	r9, r0
 8008fa6:	920c      	str	r2, [sp, #48]	@ 0x30
 8008fa8:	9311      	str	r3, [sp, #68]	@ 0x44
 8008faa:	b97f      	cbnz	r7, 8008fcc <_dtoa_r+0x3c>
 8008fac:	2010      	movs	r0, #16
 8008fae:	f001 f943 	bl	800a238 <malloc>
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	f8c9 001c 	str.w	r0, [r9, #28]
 8008fb8:	b920      	cbnz	r0, 8008fc4 <_dtoa_r+0x34>
 8008fba:	4ba9      	ldr	r3, [pc, #676]	@ (8009260 <_dtoa_r+0x2d0>)
 8008fbc:	21ef      	movs	r1, #239	@ 0xef
 8008fbe:	48a9      	ldr	r0, [pc, #676]	@ (8009264 <_dtoa_r+0x2d4>)
 8008fc0:	f7ff ff40 	bl	8008e44 <__assert_func>
 8008fc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008fc8:	6007      	str	r7, [r0, #0]
 8008fca:	60c7      	str	r7, [r0, #12]
 8008fcc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008fd0:	6819      	ldr	r1, [r3, #0]
 8008fd2:	b159      	cbz	r1, 8008fec <_dtoa_r+0x5c>
 8008fd4:	685a      	ldr	r2, [r3, #4]
 8008fd6:	604a      	str	r2, [r1, #4]
 8008fd8:	2301      	movs	r3, #1
 8008fda:	4093      	lsls	r3, r2
 8008fdc:	608b      	str	r3, [r1, #8]
 8008fde:	4648      	mov	r0, r9
 8008fe0:	f001 fa32 	bl	800a448 <_Bfree>
 8008fe4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	601a      	str	r2, [r3, #0]
 8008fec:	1e2b      	subs	r3, r5, #0
 8008fee:	bfb9      	ittee	lt
 8008ff0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008ff4:	9305      	strlt	r3, [sp, #20]
 8008ff6:	2300      	movge	r3, #0
 8008ff8:	6033      	strge	r3, [r6, #0]
 8008ffa:	9f05      	ldr	r7, [sp, #20]
 8008ffc:	4b9a      	ldr	r3, [pc, #616]	@ (8009268 <_dtoa_r+0x2d8>)
 8008ffe:	bfbc      	itt	lt
 8009000:	2201      	movlt	r2, #1
 8009002:	6032      	strlt	r2, [r6, #0]
 8009004:	43bb      	bics	r3, r7
 8009006:	d112      	bne.n	800902e <_dtoa_r+0x9e>
 8009008:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800900a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800900e:	6013      	str	r3, [r2, #0]
 8009010:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009014:	4323      	orrs	r3, r4
 8009016:	f000 855a 	beq.w	8009ace <_dtoa_r+0xb3e>
 800901a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800901c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800927c <_dtoa_r+0x2ec>
 8009020:	2b00      	cmp	r3, #0
 8009022:	f000 855c 	beq.w	8009ade <_dtoa_r+0xb4e>
 8009026:	f10a 0303 	add.w	r3, sl, #3
 800902a:	f000 bd56 	b.w	8009ada <_dtoa_r+0xb4a>
 800902e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009032:	2200      	movs	r2, #0
 8009034:	ec51 0b17 	vmov	r0, r1, d7
 8009038:	2300      	movs	r3, #0
 800903a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800903e:	f7f7 fd5b 	bl	8000af8 <__aeabi_dcmpeq>
 8009042:	4680      	mov	r8, r0
 8009044:	b158      	cbz	r0, 800905e <_dtoa_r+0xce>
 8009046:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009048:	2301      	movs	r3, #1
 800904a:	6013      	str	r3, [r2, #0]
 800904c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800904e:	b113      	cbz	r3, 8009056 <_dtoa_r+0xc6>
 8009050:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009052:	4b86      	ldr	r3, [pc, #536]	@ (800926c <_dtoa_r+0x2dc>)
 8009054:	6013      	str	r3, [r2, #0]
 8009056:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009280 <_dtoa_r+0x2f0>
 800905a:	f000 bd40 	b.w	8009ade <_dtoa_r+0xb4e>
 800905e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009062:	aa14      	add	r2, sp, #80	@ 0x50
 8009064:	a915      	add	r1, sp, #84	@ 0x54
 8009066:	4648      	mov	r0, r9
 8009068:	f001 fd8a 	bl	800ab80 <__d2b>
 800906c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009070:	9002      	str	r0, [sp, #8]
 8009072:	2e00      	cmp	r6, #0
 8009074:	d078      	beq.n	8009168 <_dtoa_r+0x1d8>
 8009076:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009078:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800907c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009080:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009084:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009088:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800908c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009090:	4619      	mov	r1, r3
 8009092:	2200      	movs	r2, #0
 8009094:	4b76      	ldr	r3, [pc, #472]	@ (8009270 <_dtoa_r+0x2e0>)
 8009096:	f7f7 f90f 	bl	80002b8 <__aeabi_dsub>
 800909a:	a36b      	add	r3, pc, #428	@ (adr r3, 8009248 <_dtoa_r+0x2b8>)
 800909c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090a0:	f7f7 fac2 	bl	8000628 <__aeabi_dmul>
 80090a4:	a36a      	add	r3, pc, #424	@ (adr r3, 8009250 <_dtoa_r+0x2c0>)
 80090a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090aa:	f7f7 f907 	bl	80002bc <__adddf3>
 80090ae:	4604      	mov	r4, r0
 80090b0:	4630      	mov	r0, r6
 80090b2:	460d      	mov	r5, r1
 80090b4:	f7f7 fa4e 	bl	8000554 <__aeabi_i2d>
 80090b8:	a367      	add	r3, pc, #412	@ (adr r3, 8009258 <_dtoa_r+0x2c8>)
 80090ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090be:	f7f7 fab3 	bl	8000628 <__aeabi_dmul>
 80090c2:	4602      	mov	r2, r0
 80090c4:	460b      	mov	r3, r1
 80090c6:	4620      	mov	r0, r4
 80090c8:	4629      	mov	r1, r5
 80090ca:	f7f7 f8f7 	bl	80002bc <__adddf3>
 80090ce:	4604      	mov	r4, r0
 80090d0:	460d      	mov	r5, r1
 80090d2:	f7f7 fd59 	bl	8000b88 <__aeabi_d2iz>
 80090d6:	2200      	movs	r2, #0
 80090d8:	4607      	mov	r7, r0
 80090da:	2300      	movs	r3, #0
 80090dc:	4620      	mov	r0, r4
 80090de:	4629      	mov	r1, r5
 80090e0:	f7f7 fd14 	bl	8000b0c <__aeabi_dcmplt>
 80090e4:	b140      	cbz	r0, 80090f8 <_dtoa_r+0x168>
 80090e6:	4638      	mov	r0, r7
 80090e8:	f7f7 fa34 	bl	8000554 <__aeabi_i2d>
 80090ec:	4622      	mov	r2, r4
 80090ee:	462b      	mov	r3, r5
 80090f0:	f7f7 fd02 	bl	8000af8 <__aeabi_dcmpeq>
 80090f4:	b900      	cbnz	r0, 80090f8 <_dtoa_r+0x168>
 80090f6:	3f01      	subs	r7, #1
 80090f8:	2f16      	cmp	r7, #22
 80090fa:	d852      	bhi.n	80091a2 <_dtoa_r+0x212>
 80090fc:	4b5d      	ldr	r3, [pc, #372]	@ (8009274 <_dtoa_r+0x2e4>)
 80090fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009106:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800910a:	f7f7 fcff 	bl	8000b0c <__aeabi_dcmplt>
 800910e:	2800      	cmp	r0, #0
 8009110:	d049      	beq.n	80091a6 <_dtoa_r+0x216>
 8009112:	3f01      	subs	r7, #1
 8009114:	2300      	movs	r3, #0
 8009116:	9310      	str	r3, [sp, #64]	@ 0x40
 8009118:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800911a:	1b9b      	subs	r3, r3, r6
 800911c:	1e5a      	subs	r2, r3, #1
 800911e:	bf45      	ittet	mi
 8009120:	f1c3 0301 	rsbmi	r3, r3, #1
 8009124:	9300      	strmi	r3, [sp, #0]
 8009126:	2300      	movpl	r3, #0
 8009128:	2300      	movmi	r3, #0
 800912a:	9206      	str	r2, [sp, #24]
 800912c:	bf54      	ite	pl
 800912e:	9300      	strpl	r3, [sp, #0]
 8009130:	9306      	strmi	r3, [sp, #24]
 8009132:	2f00      	cmp	r7, #0
 8009134:	db39      	blt.n	80091aa <_dtoa_r+0x21a>
 8009136:	9b06      	ldr	r3, [sp, #24]
 8009138:	970d      	str	r7, [sp, #52]	@ 0x34
 800913a:	443b      	add	r3, r7
 800913c:	9306      	str	r3, [sp, #24]
 800913e:	2300      	movs	r3, #0
 8009140:	9308      	str	r3, [sp, #32]
 8009142:	9b07      	ldr	r3, [sp, #28]
 8009144:	2b09      	cmp	r3, #9
 8009146:	d863      	bhi.n	8009210 <_dtoa_r+0x280>
 8009148:	2b05      	cmp	r3, #5
 800914a:	bfc4      	itt	gt
 800914c:	3b04      	subgt	r3, #4
 800914e:	9307      	strgt	r3, [sp, #28]
 8009150:	9b07      	ldr	r3, [sp, #28]
 8009152:	f1a3 0302 	sub.w	r3, r3, #2
 8009156:	bfcc      	ite	gt
 8009158:	2400      	movgt	r4, #0
 800915a:	2401      	movle	r4, #1
 800915c:	2b03      	cmp	r3, #3
 800915e:	d863      	bhi.n	8009228 <_dtoa_r+0x298>
 8009160:	e8df f003 	tbb	[pc, r3]
 8009164:	2b375452 	.word	0x2b375452
 8009168:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800916c:	441e      	add	r6, r3
 800916e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009172:	2b20      	cmp	r3, #32
 8009174:	bfc1      	itttt	gt
 8009176:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800917a:	409f      	lslgt	r7, r3
 800917c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009180:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009184:	bfd6      	itet	le
 8009186:	f1c3 0320 	rsble	r3, r3, #32
 800918a:	ea47 0003 	orrgt.w	r0, r7, r3
 800918e:	fa04 f003 	lslle.w	r0, r4, r3
 8009192:	f7f7 f9cf 	bl	8000534 <__aeabi_ui2d>
 8009196:	2201      	movs	r2, #1
 8009198:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800919c:	3e01      	subs	r6, #1
 800919e:	9212      	str	r2, [sp, #72]	@ 0x48
 80091a0:	e776      	b.n	8009090 <_dtoa_r+0x100>
 80091a2:	2301      	movs	r3, #1
 80091a4:	e7b7      	b.n	8009116 <_dtoa_r+0x186>
 80091a6:	9010      	str	r0, [sp, #64]	@ 0x40
 80091a8:	e7b6      	b.n	8009118 <_dtoa_r+0x188>
 80091aa:	9b00      	ldr	r3, [sp, #0]
 80091ac:	1bdb      	subs	r3, r3, r7
 80091ae:	9300      	str	r3, [sp, #0]
 80091b0:	427b      	negs	r3, r7
 80091b2:	9308      	str	r3, [sp, #32]
 80091b4:	2300      	movs	r3, #0
 80091b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80091b8:	e7c3      	b.n	8009142 <_dtoa_r+0x1b2>
 80091ba:	2301      	movs	r3, #1
 80091bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80091be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091c0:	eb07 0b03 	add.w	fp, r7, r3
 80091c4:	f10b 0301 	add.w	r3, fp, #1
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	9303      	str	r3, [sp, #12]
 80091cc:	bfb8      	it	lt
 80091ce:	2301      	movlt	r3, #1
 80091d0:	e006      	b.n	80091e0 <_dtoa_r+0x250>
 80091d2:	2301      	movs	r3, #1
 80091d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80091d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80091d8:	2b00      	cmp	r3, #0
 80091da:	dd28      	ble.n	800922e <_dtoa_r+0x29e>
 80091dc:	469b      	mov	fp, r3
 80091de:	9303      	str	r3, [sp, #12]
 80091e0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80091e4:	2100      	movs	r1, #0
 80091e6:	2204      	movs	r2, #4
 80091e8:	f102 0514 	add.w	r5, r2, #20
 80091ec:	429d      	cmp	r5, r3
 80091ee:	d926      	bls.n	800923e <_dtoa_r+0x2ae>
 80091f0:	6041      	str	r1, [r0, #4]
 80091f2:	4648      	mov	r0, r9
 80091f4:	f001 f8e8 	bl	800a3c8 <_Balloc>
 80091f8:	4682      	mov	sl, r0
 80091fa:	2800      	cmp	r0, #0
 80091fc:	d142      	bne.n	8009284 <_dtoa_r+0x2f4>
 80091fe:	4b1e      	ldr	r3, [pc, #120]	@ (8009278 <_dtoa_r+0x2e8>)
 8009200:	4602      	mov	r2, r0
 8009202:	f240 11af 	movw	r1, #431	@ 0x1af
 8009206:	e6da      	b.n	8008fbe <_dtoa_r+0x2e>
 8009208:	2300      	movs	r3, #0
 800920a:	e7e3      	b.n	80091d4 <_dtoa_r+0x244>
 800920c:	2300      	movs	r3, #0
 800920e:	e7d5      	b.n	80091bc <_dtoa_r+0x22c>
 8009210:	2401      	movs	r4, #1
 8009212:	2300      	movs	r3, #0
 8009214:	9307      	str	r3, [sp, #28]
 8009216:	9409      	str	r4, [sp, #36]	@ 0x24
 8009218:	f04f 3bff 	mov.w	fp, #4294967295
 800921c:	2200      	movs	r2, #0
 800921e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009222:	2312      	movs	r3, #18
 8009224:	920c      	str	r2, [sp, #48]	@ 0x30
 8009226:	e7db      	b.n	80091e0 <_dtoa_r+0x250>
 8009228:	2301      	movs	r3, #1
 800922a:	9309      	str	r3, [sp, #36]	@ 0x24
 800922c:	e7f4      	b.n	8009218 <_dtoa_r+0x288>
 800922e:	f04f 0b01 	mov.w	fp, #1
 8009232:	f8cd b00c 	str.w	fp, [sp, #12]
 8009236:	465b      	mov	r3, fp
 8009238:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800923c:	e7d0      	b.n	80091e0 <_dtoa_r+0x250>
 800923e:	3101      	adds	r1, #1
 8009240:	0052      	lsls	r2, r2, #1
 8009242:	e7d1      	b.n	80091e8 <_dtoa_r+0x258>
 8009244:	f3af 8000 	nop.w
 8009248:	636f4361 	.word	0x636f4361
 800924c:	3fd287a7 	.word	0x3fd287a7
 8009250:	8b60c8b3 	.word	0x8b60c8b3
 8009254:	3fc68a28 	.word	0x3fc68a28
 8009258:	509f79fb 	.word	0x509f79fb
 800925c:	3fd34413 	.word	0x3fd34413
 8009260:	0800ba8f 	.word	0x0800ba8f
 8009264:	0800bb51 	.word	0x0800bb51
 8009268:	7ff00000 	.word	0x7ff00000
 800926c:	0800ba67 	.word	0x0800ba67
 8009270:	3ff80000 	.word	0x3ff80000
 8009274:	0800be10 	.word	0x0800be10
 8009278:	0800bba9 	.word	0x0800bba9
 800927c:	0800bb4d 	.word	0x0800bb4d
 8009280:	0800ba66 	.word	0x0800ba66
 8009284:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009288:	6018      	str	r0, [r3, #0]
 800928a:	9b03      	ldr	r3, [sp, #12]
 800928c:	2b0e      	cmp	r3, #14
 800928e:	f200 80a1 	bhi.w	80093d4 <_dtoa_r+0x444>
 8009292:	2c00      	cmp	r4, #0
 8009294:	f000 809e 	beq.w	80093d4 <_dtoa_r+0x444>
 8009298:	2f00      	cmp	r7, #0
 800929a:	dd33      	ble.n	8009304 <_dtoa_r+0x374>
 800929c:	4b9c      	ldr	r3, [pc, #624]	@ (8009510 <_dtoa_r+0x580>)
 800929e:	f007 020f 	and.w	r2, r7, #15
 80092a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092a6:	ed93 7b00 	vldr	d7, [r3]
 80092aa:	05f8      	lsls	r0, r7, #23
 80092ac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80092b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80092b4:	d516      	bpl.n	80092e4 <_dtoa_r+0x354>
 80092b6:	4b97      	ldr	r3, [pc, #604]	@ (8009514 <_dtoa_r+0x584>)
 80092b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80092bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80092c0:	f7f7 fadc 	bl	800087c <__aeabi_ddiv>
 80092c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092c8:	f004 040f 	and.w	r4, r4, #15
 80092cc:	2603      	movs	r6, #3
 80092ce:	4d91      	ldr	r5, [pc, #580]	@ (8009514 <_dtoa_r+0x584>)
 80092d0:	b954      	cbnz	r4, 80092e8 <_dtoa_r+0x358>
 80092d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80092d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80092da:	f7f7 facf 	bl	800087c <__aeabi_ddiv>
 80092de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80092e2:	e028      	b.n	8009336 <_dtoa_r+0x3a6>
 80092e4:	2602      	movs	r6, #2
 80092e6:	e7f2      	b.n	80092ce <_dtoa_r+0x33e>
 80092e8:	07e1      	lsls	r1, r4, #31
 80092ea:	d508      	bpl.n	80092fe <_dtoa_r+0x36e>
 80092ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80092f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80092f4:	f7f7 f998 	bl	8000628 <__aeabi_dmul>
 80092f8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80092fc:	3601      	adds	r6, #1
 80092fe:	1064      	asrs	r4, r4, #1
 8009300:	3508      	adds	r5, #8
 8009302:	e7e5      	b.n	80092d0 <_dtoa_r+0x340>
 8009304:	f000 80af 	beq.w	8009466 <_dtoa_r+0x4d6>
 8009308:	427c      	negs	r4, r7
 800930a:	4b81      	ldr	r3, [pc, #516]	@ (8009510 <_dtoa_r+0x580>)
 800930c:	4d81      	ldr	r5, [pc, #516]	@ (8009514 <_dtoa_r+0x584>)
 800930e:	f004 020f 	and.w	r2, r4, #15
 8009312:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800931e:	f7f7 f983 	bl	8000628 <__aeabi_dmul>
 8009322:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009326:	1124      	asrs	r4, r4, #4
 8009328:	2300      	movs	r3, #0
 800932a:	2602      	movs	r6, #2
 800932c:	2c00      	cmp	r4, #0
 800932e:	f040 808f 	bne.w	8009450 <_dtoa_r+0x4c0>
 8009332:	2b00      	cmp	r3, #0
 8009334:	d1d3      	bne.n	80092de <_dtoa_r+0x34e>
 8009336:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009338:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800933c:	2b00      	cmp	r3, #0
 800933e:	f000 8094 	beq.w	800946a <_dtoa_r+0x4da>
 8009342:	4b75      	ldr	r3, [pc, #468]	@ (8009518 <_dtoa_r+0x588>)
 8009344:	2200      	movs	r2, #0
 8009346:	4620      	mov	r0, r4
 8009348:	4629      	mov	r1, r5
 800934a:	f7f7 fbdf 	bl	8000b0c <__aeabi_dcmplt>
 800934e:	2800      	cmp	r0, #0
 8009350:	f000 808b 	beq.w	800946a <_dtoa_r+0x4da>
 8009354:	9b03      	ldr	r3, [sp, #12]
 8009356:	2b00      	cmp	r3, #0
 8009358:	f000 8087 	beq.w	800946a <_dtoa_r+0x4da>
 800935c:	f1bb 0f00 	cmp.w	fp, #0
 8009360:	dd34      	ble.n	80093cc <_dtoa_r+0x43c>
 8009362:	4620      	mov	r0, r4
 8009364:	4b6d      	ldr	r3, [pc, #436]	@ (800951c <_dtoa_r+0x58c>)
 8009366:	2200      	movs	r2, #0
 8009368:	4629      	mov	r1, r5
 800936a:	f7f7 f95d 	bl	8000628 <__aeabi_dmul>
 800936e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009372:	f107 38ff 	add.w	r8, r7, #4294967295
 8009376:	3601      	adds	r6, #1
 8009378:	465c      	mov	r4, fp
 800937a:	4630      	mov	r0, r6
 800937c:	f7f7 f8ea 	bl	8000554 <__aeabi_i2d>
 8009380:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009384:	f7f7 f950 	bl	8000628 <__aeabi_dmul>
 8009388:	4b65      	ldr	r3, [pc, #404]	@ (8009520 <_dtoa_r+0x590>)
 800938a:	2200      	movs	r2, #0
 800938c:	f7f6 ff96 	bl	80002bc <__adddf3>
 8009390:	4605      	mov	r5, r0
 8009392:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009396:	2c00      	cmp	r4, #0
 8009398:	d16a      	bne.n	8009470 <_dtoa_r+0x4e0>
 800939a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800939e:	4b61      	ldr	r3, [pc, #388]	@ (8009524 <_dtoa_r+0x594>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	f7f6 ff89 	bl	80002b8 <__aeabi_dsub>
 80093a6:	4602      	mov	r2, r0
 80093a8:	460b      	mov	r3, r1
 80093aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80093ae:	462a      	mov	r2, r5
 80093b0:	4633      	mov	r3, r6
 80093b2:	f7f7 fbc9 	bl	8000b48 <__aeabi_dcmpgt>
 80093b6:	2800      	cmp	r0, #0
 80093b8:	f040 8298 	bne.w	80098ec <_dtoa_r+0x95c>
 80093bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80093c0:	462a      	mov	r2, r5
 80093c2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80093c6:	f7f7 fba1 	bl	8000b0c <__aeabi_dcmplt>
 80093ca:	bb38      	cbnz	r0, 800941c <_dtoa_r+0x48c>
 80093cc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80093d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80093d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	f2c0 8157 	blt.w	800968a <_dtoa_r+0x6fa>
 80093dc:	2f0e      	cmp	r7, #14
 80093de:	f300 8154 	bgt.w	800968a <_dtoa_r+0x6fa>
 80093e2:	4b4b      	ldr	r3, [pc, #300]	@ (8009510 <_dtoa_r+0x580>)
 80093e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80093e8:	ed93 7b00 	vldr	d7, [r3]
 80093ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	ed8d 7b00 	vstr	d7, [sp]
 80093f4:	f280 80e5 	bge.w	80095c2 <_dtoa_r+0x632>
 80093f8:	9b03      	ldr	r3, [sp, #12]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f300 80e1 	bgt.w	80095c2 <_dtoa_r+0x632>
 8009400:	d10c      	bne.n	800941c <_dtoa_r+0x48c>
 8009402:	4b48      	ldr	r3, [pc, #288]	@ (8009524 <_dtoa_r+0x594>)
 8009404:	2200      	movs	r2, #0
 8009406:	ec51 0b17 	vmov	r0, r1, d7
 800940a:	f7f7 f90d 	bl	8000628 <__aeabi_dmul>
 800940e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009412:	f7f7 fb8f 	bl	8000b34 <__aeabi_dcmpge>
 8009416:	2800      	cmp	r0, #0
 8009418:	f000 8266 	beq.w	80098e8 <_dtoa_r+0x958>
 800941c:	2400      	movs	r4, #0
 800941e:	4625      	mov	r5, r4
 8009420:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009422:	4656      	mov	r6, sl
 8009424:	ea6f 0803 	mvn.w	r8, r3
 8009428:	2700      	movs	r7, #0
 800942a:	4621      	mov	r1, r4
 800942c:	4648      	mov	r0, r9
 800942e:	f001 f80b 	bl	800a448 <_Bfree>
 8009432:	2d00      	cmp	r5, #0
 8009434:	f000 80bd 	beq.w	80095b2 <_dtoa_r+0x622>
 8009438:	b12f      	cbz	r7, 8009446 <_dtoa_r+0x4b6>
 800943a:	42af      	cmp	r7, r5
 800943c:	d003      	beq.n	8009446 <_dtoa_r+0x4b6>
 800943e:	4639      	mov	r1, r7
 8009440:	4648      	mov	r0, r9
 8009442:	f001 f801 	bl	800a448 <_Bfree>
 8009446:	4629      	mov	r1, r5
 8009448:	4648      	mov	r0, r9
 800944a:	f000 fffd 	bl	800a448 <_Bfree>
 800944e:	e0b0      	b.n	80095b2 <_dtoa_r+0x622>
 8009450:	07e2      	lsls	r2, r4, #31
 8009452:	d505      	bpl.n	8009460 <_dtoa_r+0x4d0>
 8009454:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009458:	f7f7 f8e6 	bl	8000628 <__aeabi_dmul>
 800945c:	3601      	adds	r6, #1
 800945e:	2301      	movs	r3, #1
 8009460:	1064      	asrs	r4, r4, #1
 8009462:	3508      	adds	r5, #8
 8009464:	e762      	b.n	800932c <_dtoa_r+0x39c>
 8009466:	2602      	movs	r6, #2
 8009468:	e765      	b.n	8009336 <_dtoa_r+0x3a6>
 800946a:	9c03      	ldr	r4, [sp, #12]
 800946c:	46b8      	mov	r8, r7
 800946e:	e784      	b.n	800937a <_dtoa_r+0x3ea>
 8009470:	4b27      	ldr	r3, [pc, #156]	@ (8009510 <_dtoa_r+0x580>)
 8009472:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009474:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009478:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800947c:	4454      	add	r4, sl
 800947e:	2900      	cmp	r1, #0
 8009480:	d054      	beq.n	800952c <_dtoa_r+0x59c>
 8009482:	4929      	ldr	r1, [pc, #164]	@ (8009528 <_dtoa_r+0x598>)
 8009484:	2000      	movs	r0, #0
 8009486:	f7f7 f9f9 	bl	800087c <__aeabi_ddiv>
 800948a:	4633      	mov	r3, r6
 800948c:	462a      	mov	r2, r5
 800948e:	f7f6 ff13 	bl	80002b8 <__aeabi_dsub>
 8009492:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009496:	4656      	mov	r6, sl
 8009498:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800949c:	f7f7 fb74 	bl	8000b88 <__aeabi_d2iz>
 80094a0:	4605      	mov	r5, r0
 80094a2:	f7f7 f857 	bl	8000554 <__aeabi_i2d>
 80094a6:	4602      	mov	r2, r0
 80094a8:	460b      	mov	r3, r1
 80094aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094ae:	f7f6 ff03 	bl	80002b8 <__aeabi_dsub>
 80094b2:	3530      	adds	r5, #48	@ 0x30
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80094bc:	f806 5b01 	strb.w	r5, [r6], #1
 80094c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80094c4:	f7f7 fb22 	bl	8000b0c <__aeabi_dcmplt>
 80094c8:	2800      	cmp	r0, #0
 80094ca:	d172      	bne.n	80095b2 <_dtoa_r+0x622>
 80094cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80094d0:	4911      	ldr	r1, [pc, #68]	@ (8009518 <_dtoa_r+0x588>)
 80094d2:	2000      	movs	r0, #0
 80094d4:	f7f6 fef0 	bl	80002b8 <__aeabi_dsub>
 80094d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80094dc:	f7f7 fb16 	bl	8000b0c <__aeabi_dcmplt>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	f040 80b4 	bne.w	800964e <_dtoa_r+0x6be>
 80094e6:	42a6      	cmp	r6, r4
 80094e8:	f43f af70 	beq.w	80093cc <_dtoa_r+0x43c>
 80094ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80094f0:	4b0a      	ldr	r3, [pc, #40]	@ (800951c <_dtoa_r+0x58c>)
 80094f2:	2200      	movs	r2, #0
 80094f4:	f7f7 f898 	bl	8000628 <__aeabi_dmul>
 80094f8:	4b08      	ldr	r3, [pc, #32]	@ (800951c <_dtoa_r+0x58c>)
 80094fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80094fe:	2200      	movs	r2, #0
 8009500:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009504:	f7f7 f890 	bl	8000628 <__aeabi_dmul>
 8009508:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800950c:	e7c4      	b.n	8009498 <_dtoa_r+0x508>
 800950e:	bf00      	nop
 8009510:	0800be10 	.word	0x0800be10
 8009514:	0800bde8 	.word	0x0800bde8
 8009518:	3ff00000 	.word	0x3ff00000
 800951c:	40240000 	.word	0x40240000
 8009520:	401c0000 	.word	0x401c0000
 8009524:	40140000 	.word	0x40140000
 8009528:	3fe00000 	.word	0x3fe00000
 800952c:	4631      	mov	r1, r6
 800952e:	4628      	mov	r0, r5
 8009530:	f7f7 f87a 	bl	8000628 <__aeabi_dmul>
 8009534:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009538:	9413      	str	r4, [sp, #76]	@ 0x4c
 800953a:	4656      	mov	r6, sl
 800953c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009540:	f7f7 fb22 	bl	8000b88 <__aeabi_d2iz>
 8009544:	4605      	mov	r5, r0
 8009546:	f7f7 f805 	bl	8000554 <__aeabi_i2d>
 800954a:	4602      	mov	r2, r0
 800954c:	460b      	mov	r3, r1
 800954e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009552:	f7f6 feb1 	bl	80002b8 <__aeabi_dsub>
 8009556:	3530      	adds	r5, #48	@ 0x30
 8009558:	f806 5b01 	strb.w	r5, [r6], #1
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	42a6      	cmp	r6, r4
 8009562:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009566:	f04f 0200 	mov.w	r2, #0
 800956a:	d124      	bne.n	80095b6 <_dtoa_r+0x626>
 800956c:	4baf      	ldr	r3, [pc, #700]	@ (800982c <_dtoa_r+0x89c>)
 800956e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009572:	f7f6 fea3 	bl	80002bc <__adddf3>
 8009576:	4602      	mov	r2, r0
 8009578:	460b      	mov	r3, r1
 800957a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800957e:	f7f7 fae3 	bl	8000b48 <__aeabi_dcmpgt>
 8009582:	2800      	cmp	r0, #0
 8009584:	d163      	bne.n	800964e <_dtoa_r+0x6be>
 8009586:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800958a:	49a8      	ldr	r1, [pc, #672]	@ (800982c <_dtoa_r+0x89c>)
 800958c:	2000      	movs	r0, #0
 800958e:	f7f6 fe93 	bl	80002b8 <__aeabi_dsub>
 8009592:	4602      	mov	r2, r0
 8009594:	460b      	mov	r3, r1
 8009596:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800959a:	f7f7 fab7 	bl	8000b0c <__aeabi_dcmplt>
 800959e:	2800      	cmp	r0, #0
 80095a0:	f43f af14 	beq.w	80093cc <_dtoa_r+0x43c>
 80095a4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80095a6:	1e73      	subs	r3, r6, #1
 80095a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80095aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80095ae:	2b30      	cmp	r3, #48	@ 0x30
 80095b0:	d0f8      	beq.n	80095a4 <_dtoa_r+0x614>
 80095b2:	4647      	mov	r7, r8
 80095b4:	e03b      	b.n	800962e <_dtoa_r+0x69e>
 80095b6:	4b9e      	ldr	r3, [pc, #632]	@ (8009830 <_dtoa_r+0x8a0>)
 80095b8:	f7f7 f836 	bl	8000628 <__aeabi_dmul>
 80095bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095c0:	e7bc      	b.n	800953c <_dtoa_r+0x5ac>
 80095c2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80095c6:	4656      	mov	r6, sl
 80095c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095cc:	4620      	mov	r0, r4
 80095ce:	4629      	mov	r1, r5
 80095d0:	f7f7 f954 	bl	800087c <__aeabi_ddiv>
 80095d4:	f7f7 fad8 	bl	8000b88 <__aeabi_d2iz>
 80095d8:	4680      	mov	r8, r0
 80095da:	f7f6 ffbb 	bl	8000554 <__aeabi_i2d>
 80095de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095e2:	f7f7 f821 	bl	8000628 <__aeabi_dmul>
 80095e6:	4602      	mov	r2, r0
 80095e8:	460b      	mov	r3, r1
 80095ea:	4620      	mov	r0, r4
 80095ec:	4629      	mov	r1, r5
 80095ee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80095f2:	f7f6 fe61 	bl	80002b8 <__aeabi_dsub>
 80095f6:	f806 4b01 	strb.w	r4, [r6], #1
 80095fa:	9d03      	ldr	r5, [sp, #12]
 80095fc:	eba6 040a 	sub.w	r4, r6, sl
 8009600:	42a5      	cmp	r5, r4
 8009602:	4602      	mov	r2, r0
 8009604:	460b      	mov	r3, r1
 8009606:	d133      	bne.n	8009670 <_dtoa_r+0x6e0>
 8009608:	f7f6 fe58 	bl	80002bc <__adddf3>
 800960c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009610:	4604      	mov	r4, r0
 8009612:	460d      	mov	r5, r1
 8009614:	f7f7 fa98 	bl	8000b48 <__aeabi_dcmpgt>
 8009618:	b9c0      	cbnz	r0, 800964c <_dtoa_r+0x6bc>
 800961a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800961e:	4620      	mov	r0, r4
 8009620:	4629      	mov	r1, r5
 8009622:	f7f7 fa69 	bl	8000af8 <__aeabi_dcmpeq>
 8009626:	b110      	cbz	r0, 800962e <_dtoa_r+0x69e>
 8009628:	f018 0f01 	tst.w	r8, #1
 800962c:	d10e      	bne.n	800964c <_dtoa_r+0x6bc>
 800962e:	9902      	ldr	r1, [sp, #8]
 8009630:	4648      	mov	r0, r9
 8009632:	f000 ff09 	bl	800a448 <_Bfree>
 8009636:	2300      	movs	r3, #0
 8009638:	7033      	strb	r3, [r6, #0]
 800963a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800963c:	3701      	adds	r7, #1
 800963e:	601f      	str	r7, [r3, #0]
 8009640:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009642:	2b00      	cmp	r3, #0
 8009644:	f000 824b 	beq.w	8009ade <_dtoa_r+0xb4e>
 8009648:	601e      	str	r6, [r3, #0]
 800964a:	e248      	b.n	8009ade <_dtoa_r+0xb4e>
 800964c:	46b8      	mov	r8, r7
 800964e:	4633      	mov	r3, r6
 8009650:	461e      	mov	r6, r3
 8009652:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009656:	2a39      	cmp	r2, #57	@ 0x39
 8009658:	d106      	bne.n	8009668 <_dtoa_r+0x6d8>
 800965a:	459a      	cmp	sl, r3
 800965c:	d1f8      	bne.n	8009650 <_dtoa_r+0x6c0>
 800965e:	2230      	movs	r2, #48	@ 0x30
 8009660:	f108 0801 	add.w	r8, r8, #1
 8009664:	f88a 2000 	strb.w	r2, [sl]
 8009668:	781a      	ldrb	r2, [r3, #0]
 800966a:	3201      	adds	r2, #1
 800966c:	701a      	strb	r2, [r3, #0]
 800966e:	e7a0      	b.n	80095b2 <_dtoa_r+0x622>
 8009670:	4b6f      	ldr	r3, [pc, #444]	@ (8009830 <_dtoa_r+0x8a0>)
 8009672:	2200      	movs	r2, #0
 8009674:	f7f6 ffd8 	bl	8000628 <__aeabi_dmul>
 8009678:	2200      	movs	r2, #0
 800967a:	2300      	movs	r3, #0
 800967c:	4604      	mov	r4, r0
 800967e:	460d      	mov	r5, r1
 8009680:	f7f7 fa3a 	bl	8000af8 <__aeabi_dcmpeq>
 8009684:	2800      	cmp	r0, #0
 8009686:	d09f      	beq.n	80095c8 <_dtoa_r+0x638>
 8009688:	e7d1      	b.n	800962e <_dtoa_r+0x69e>
 800968a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800968c:	2a00      	cmp	r2, #0
 800968e:	f000 80ea 	beq.w	8009866 <_dtoa_r+0x8d6>
 8009692:	9a07      	ldr	r2, [sp, #28]
 8009694:	2a01      	cmp	r2, #1
 8009696:	f300 80cd 	bgt.w	8009834 <_dtoa_r+0x8a4>
 800969a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800969c:	2a00      	cmp	r2, #0
 800969e:	f000 80c1 	beq.w	8009824 <_dtoa_r+0x894>
 80096a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80096a6:	9c08      	ldr	r4, [sp, #32]
 80096a8:	9e00      	ldr	r6, [sp, #0]
 80096aa:	9a00      	ldr	r2, [sp, #0]
 80096ac:	441a      	add	r2, r3
 80096ae:	9200      	str	r2, [sp, #0]
 80096b0:	9a06      	ldr	r2, [sp, #24]
 80096b2:	2101      	movs	r1, #1
 80096b4:	441a      	add	r2, r3
 80096b6:	4648      	mov	r0, r9
 80096b8:	9206      	str	r2, [sp, #24]
 80096ba:	f000 ffc3 	bl	800a644 <__i2b>
 80096be:	4605      	mov	r5, r0
 80096c0:	b166      	cbz	r6, 80096dc <_dtoa_r+0x74c>
 80096c2:	9b06      	ldr	r3, [sp, #24]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	dd09      	ble.n	80096dc <_dtoa_r+0x74c>
 80096c8:	42b3      	cmp	r3, r6
 80096ca:	9a00      	ldr	r2, [sp, #0]
 80096cc:	bfa8      	it	ge
 80096ce:	4633      	movge	r3, r6
 80096d0:	1ad2      	subs	r2, r2, r3
 80096d2:	9200      	str	r2, [sp, #0]
 80096d4:	9a06      	ldr	r2, [sp, #24]
 80096d6:	1af6      	subs	r6, r6, r3
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	9306      	str	r3, [sp, #24]
 80096dc:	9b08      	ldr	r3, [sp, #32]
 80096de:	b30b      	cbz	r3, 8009724 <_dtoa_r+0x794>
 80096e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	f000 80c6 	beq.w	8009874 <_dtoa_r+0x8e4>
 80096e8:	2c00      	cmp	r4, #0
 80096ea:	f000 80c0 	beq.w	800986e <_dtoa_r+0x8de>
 80096ee:	4629      	mov	r1, r5
 80096f0:	4622      	mov	r2, r4
 80096f2:	4648      	mov	r0, r9
 80096f4:	f001 f85e 	bl	800a7b4 <__pow5mult>
 80096f8:	9a02      	ldr	r2, [sp, #8]
 80096fa:	4601      	mov	r1, r0
 80096fc:	4605      	mov	r5, r0
 80096fe:	4648      	mov	r0, r9
 8009700:	f000 ffb6 	bl	800a670 <__multiply>
 8009704:	9902      	ldr	r1, [sp, #8]
 8009706:	4680      	mov	r8, r0
 8009708:	4648      	mov	r0, r9
 800970a:	f000 fe9d 	bl	800a448 <_Bfree>
 800970e:	9b08      	ldr	r3, [sp, #32]
 8009710:	1b1b      	subs	r3, r3, r4
 8009712:	9308      	str	r3, [sp, #32]
 8009714:	f000 80b1 	beq.w	800987a <_dtoa_r+0x8ea>
 8009718:	9a08      	ldr	r2, [sp, #32]
 800971a:	4641      	mov	r1, r8
 800971c:	4648      	mov	r0, r9
 800971e:	f001 f849 	bl	800a7b4 <__pow5mult>
 8009722:	9002      	str	r0, [sp, #8]
 8009724:	2101      	movs	r1, #1
 8009726:	4648      	mov	r0, r9
 8009728:	f000 ff8c 	bl	800a644 <__i2b>
 800972c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800972e:	4604      	mov	r4, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 81d8 	beq.w	8009ae6 <_dtoa_r+0xb56>
 8009736:	461a      	mov	r2, r3
 8009738:	4601      	mov	r1, r0
 800973a:	4648      	mov	r0, r9
 800973c:	f001 f83a 	bl	800a7b4 <__pow5mult>
 8009740:	9b07      	ldr	r3, [sp, #28]
 8009742:	2b01      	cmp	r3, #1
 8009744:	4604      	mov	r4, r0
 8009746:	f300 809f 	bgt.w	8009888 <_dtoa_r+0x8f8>
 800974a:	9b04      	ldr	r3, [sp, #16]
 800974c:	2b00      	cmp	r3, #0
 800974e:	f040 8097 	bne.w	8009880 <_dtoa_r+0x8f0>
 8009752:	9b05      	ldr	r3, [sp, #20]
 8009754:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009758:	2b00      	cmp	r3, #0
 800975a:	f040 8093 	bne.w	8009884 <_dtoa_r+0x8f4>
 800975e:	9b05      	ldr	r3, [sp, #20]
 8009760:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009764:	0d1b      	lsrs	r3, r3, #20
 8009766:	051b      	lsls	r3, r3, #20
 8009768:	b133      	cbz	r3, 8009778 <_dtoa_r+0x7e8>
 800976a:	9b00      	ldr	r3, [sp, #0]
 800976c:	3301      	adds	r3, #1
 800976e:	9300      	str	r3, [sp, #0]
 8009770:	9b06      	ldr	r3, [sp, #24]
 8009772:	3301      	adds	r3, #1
 8009774:	9306      	str	r3, [sp, #24]
 8009776:	2301      	movs	r3, #1
 8009778:	9308      	str	r3, [sp, #32]
 800977a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800977c:	2b00      	cmp	r3, #0
 800977e:	f000 81b8 	beq.w	8009af2 <_dtoa_r+0xb62>
 8009782:	6923      	ldr	r3, [r4, #16]
 8009784:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009788:	6918      	ldr	r0, [r3, #16]
 800978a:	f000 ff0f 	bl	800a5ac <__hi0bits>
 800978e:	f1c0 0020 	rsb	r0, r0, #32
 8009792:	9b06      	ldr	r3, [sp, #24]
 8009794:	4418      	add	r0, r3
 8009796:	f010 001f 	ands.w	r0, r0, #31
 800979a:	f000 8082 	beq.w	80098a2 <_dtoa_r+0x912>
 800979e:	f1c0 0320 	rsb	r3, r0, #32
 80097a2:	2b04      	cmp	r3, #4
 80097a4:	dd73      	ble.n	800988e <_dtoa_r+0x8fe>
 80097a6:	9b00      	ldr	r3, [sp, #0]
 80097a8:	f1c0 001c 	rsb	r0, r0, #28
 80097ac:	4403      	add	r3, r0
 80097ae:	9300      	str	r3, [sp, #0]
 80097b0:	9b06      	ldr	r3, [sp, #24]
 80097b2:	4403      	add	r3, r0
 80097b4:	4406      	add	r6, r0
 80097b6:	9306      	str	r3, [sp, #24]
 80097b8:	9b00      	ldr	r3, [sp, #0]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	dd05      	ble.n	80097ca <_dtoa_r+0x83a>
 80097be:	9902      	ldr	r1, [sp, #8]
 80097c0:	461a      	mov	r2, r3
 80097c2:	4648      	mov	r0, r9
 80097c4:	f001 f850 	bl	800a868 <__lshift>
 80097c8:	9002      	str	r0, [sp, #8]
 80097ca:	9b06      	ldr	r3, [sp, #24]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	dd05      	ble.n	80097dc <_dtoa_r+0x84c>
 80097d0:	4621      	mov	r1, r4
 80097d2:	461a      	mov	r2, r3
 80097d4:	4648      	mov	r0, r9
 80097d6:	f001 f847 	bl	800a868 <__lshift>
 80097da:	4604      	mov	r4, r0
 80097dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d061      	beq.n	80098a6 <_dtoa_r+0x916>
 80097e2:	9802      	ldr	r0, [sp, #8]
 80097e4:	4621      	mov	r1, r4
 80097e6:	f001 f8ab 	bl	800a940 <__mcmp>
 80097ea:	2800      	cmp	r0, #0
 80097ec:	da5b      	bge.n	80098a6 <_dtoa_r+0x916>
 80097ee:	2300      	movs	r3, #0
 80097f0:	9902      	ldr	r1, [sp, #8]
 80097f2:	220a      	movs	r2, #10
 80097f4:	4648      	mov	r0, r9
 80097f6:	f000 fe49 	bl	800a48c <__multadd>
 80097fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097fc:	9002      	str	r0, [sp, #8]
 80097fe:	f107 38ff 	add.w	r8, r7, #4294967295
 8009802:	2b00      	cmp	r3, #0
 8009804:	f000 8177 	beq.w	8009af6 <_dtoa_r+0xb66>
 8009808:	4629      	mov	r1, r5
 800980a:	2300      	movs	r3, #0
 800980c:	220a      	movs	r2, #10
 800980e:	4648      	mov	r0, r9
 8009810:	f000 fe3c 	bl	800a48c <__multadd>
 8009814:	f1bb 0f00 	cmp.w	fp, #0
 8009818:	4605      	mov	r5, r0
 800981a:	dc6f      	bgt.n	80098fc <_dtoa_r+0x96c>
 800981c:	9b07      	ldr	r3, [sp, #28]
 800981e:	2b02      	cmp	r3, #2
 8009820:	dc49      	bgt.n	80098b6 <_dtoa_r+0x926>
 8009822:	e06b      	b.n	80098fc <_dtoa_r+0x96c>
 8009824:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009826:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800982a:	e73c      	b.n	80096a6 <_dtoa_r+0x716>
 800982c:	3fe00000 	.word	0x3fe00000
 8009830:	40240000 	.word	0x40240000
 8009834:	9b03      	ldr	r3, [sp, #12]
 8009836:	1e5c      	subs	r4, r3, #1
 8009838:	9b08      	ldr	r3, [sp, #32]
 800983a:	42a3      	cmp	r3, r4
 800983c:	db09      	blt.n	8009852 <_dtoa_r+0x8c2>
 800983e:	1b1c      	subs	r4, r3, r4
 8009840:	9b03      	ldr	r3, [sp, #12]
 8009842:	2b00      	cmp	r3, #0
 8009844:	f6bf af30 	bge.w	80096a8 <_dtoa_r+0x718>
 8009848:	9b00      	ldr	r3, [sp, #0]
 800984a:	9a03      	ldr	r2, [sp, #12]
 800984c:	1a9e      	subs	r6, r3, r2
 800984e:	2300      	movs	r3, #0
 8009850:	e72b      	b.n	80096aa <_dtoa_r+0x71a>
 8009852:	9b08      	ldr	r3, [sp, #32]
 8009854:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009856:	9408      	str	r4, [sp, #32]
 8009858:	1ae3      	subs	r3, r4, r3
 800985a:	441a      	add	r2, r3
 800985c:	9e00      	ldr	r6, [sp, #0]
 800985e:	9b03      	ldr	r3, [sp, #12]
 8009860:	920d      	str	r2, [sp, #52]	@ 0x34
 8009862:	2400      	movs	r4, #0
 8009864:	e721      	b.n	80096aa <_dtoa_r+0x71a>
 8009866:	9c08      	ldr	r4, [sp, #32]
 8009868:	9e00      	ldr	r6, [sp, #0]
 800986a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800986c:	e728      	b.n	80096c0 <_dtoa_r+0x730>
 800986e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009872:	e751      	b.n	8009718 <_dtoa_r+0x788>
 8009874:	9a08      	ldr	r2, [sp, #32]
 8009876:	9902      	ldr	r1, [sp, #8]
 8009878:	e750      	b.n	800971c <_dtoa_r+0x78c>
 800987a:	f8cd 8008 	str.w	r8, [sp, #8]
 800987e:	e751      	b.n	8009724 <_dtoa_r+0x794>
 8009880:	2300      	movs	r3, #0
 8009882:	e779      	b.n	8009778 <_dtoa_r+0x7e8>
 8009884:	9b04      	ldr	r3, [sp, #16]
 8009886:	e777      	b.n	8009778 <_dtoa_r+0x7e8>
 8009888:	2300      	movs	r3, #0
 800988a:	9308      	str	r3, [sp, #32]
 800988c:	e779      	b.n	8009782 <_dtoa_r+0x7f2>
 800988e:	d093      	beq.n	80097b8 <_dtoa_r+0x828>
 8009890:	9a00      	ldr	r2, [sp, #0]
 8009892:	331c      	adds	r3, #28
 8009894:	441a      	add	r2, r3
 8009896:	9200      	str	r2, [sp, #0]
 8009898:	9a06      	ldr	r2, [sp, #24]
 800989a:	441a      	add	r2, r3
 800989c:	441e      	add	r6, r3
 800989e:	9206      	str	r2, [sp, #24]
 80098a0:	e78a      	b.n	80097b8 <_dtoa_r+0x828>
 80098a2:	4603      	mov	r3, r0
 80098a4:	e7f4      	b.n	8009890 <_dtoa_r+0x900>
 80098a6:	9b03      	ldr	r3, [sp, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	46b8      	mov	r8, r7
 80098ac:	dc20      	bgt.n	80098f0 <_dtoa_r+0x960>
 80098ae:	469b      	mov	fp, r3
 80098b0:	9b07      	ldr	r3, [sp, #28]
 80098b2:	2b02      	cmp	r3, #2
 80098b4:	dd1e      	ble.n	80098f4 <_dtoa_r+0x964>
 80098b6:	f1bb 0f00 	cmp.w	fp, #0
 80098ba:	f47f adb1 	bne.w	8009420 <_dtoa_r+0x490>
 80098be:	4621      	mov	r1, r4
 80098c0:	465b      	mov	r3, fp
 80098c2:	2205      	movs	r2, #5
 80098c4:	4648      	mov	r0, r9
 80098c6:	f000 fde1 	bl	800a48c <__multadd>
 80098ca:	4601      	mov	r1, r0
 80098cc:	4604      	mov	r4, r0
 80098ce:	9802      	ldr	r0, [sp, #8]
 80098d0:	f001 f836 	bl	800a940 <__mcmp>
 80098d4:	2800      	cmp	r0, #0
 80098d6:	f77f ada3 	ble.w	8009420 <_dtoa_r+0x490>
 80098da:	4656      	mov	r6, sl
 80098dc:	2331      	movs	r3, #49	@ 0x31
 80098de:	f806 3b01 	strb.w	r3, [r6], #1
 80098e2:	f108 0801 	add.w	r8, r8, #1
 80098e6:	e59f      	b.n	8009428 <_dtoa_r+0x498>
 80098e8:	9c03      	ldr	r4, [sp, #12]
 80098ea:	46b8      	mov	r8, r7
 80098ec:	4625      	mov	r5, r4
 80098ee:	e7f4      	b.n	80098da <_dtoa_r+0x94a>
 80098f0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80098f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	f000 8101 	beq.w	8009afe <_dtoa_r+0xb6e>
 80098fc:	2e00      	cmp	r6, #0
 80098fe:	dd05      	ble.n	800990c <_dtoa_r+0x97c>
 8009900:	4629      	mov	r1, r5
 8009902:	4632      	mov	r2, r6
 8009904:	4648      	mov	r0, r9
 8009906:	f000 ffaf 	bl	800a868 <__lshift>
 800990a:	4605      	mov	r5, r0
 800990c:	9b08      	ldr	r3, [sp, #32]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d05c      	beq.n	80099cc <_dtoa_r+0xa3c>
 8009912:	6869      	ldr	r1, [r5, #4]
 8009914:	4648      	mov	r0, r9
 8009916:	f000 fd57 	bl	800a3c8 <_Balloc>
 800991a:	4606      	mov	r6, r0
 800991c:	b928      	cbnz	r0, 800992a <_dtoa_r+0x99a>
 800991e:	4b82      	ldr	r3, [pc, #520]	@ (8009b28 <_dtoa_r+0xb98>)
 8009920:	4602      	mov	r2, r0
 8009922:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009926:	f7ff bb4a 	b.w	8008fbe <_dtoa_r+0x2e>
 800992a:	692a      	ldr	r2, [r5, #16]
 800992c:	3202      	adds	r2, #2
 800992e:	0092      	lsls	r2, r2, #2
 8009930:	f105 010c 	add.w	r1, r5, #12
 8009934:	300c      	adds	r0, #12
 8009936:	f7ff fa66 	bl	8008e06 <memcpy>
 800993a:	2201      	movs	r2, #1
 800993c:	4631      	mov	r1, r6
 800993e:	4648      	mov	r0, r9
 8009940:	f000 ff92 	bl	800a868 <__lshift>
 8009944:	f10a 0301 	add.w	r3, sl, #1
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	eb0a 030b 	add.w	r3, sl, fp
 800994e:	9308      	str	r3, [sp, #32]
 8009950:	9b04      	ldr	r3, [sp, #16]
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	462f      	mov	r7, r5
 8009958:	9306      	str	r3, [sp, #24]
 800995a:	4605      	mov	r5, r0
 800995c:	9b00      	ldr	r3, [sp, #0]
 800995e:	9802      	ldr	r0, [sp, #8]
 8009960:	4621      	mov	r1, r4
 8009962:	f103 3bff 	add.w	fp, r3, #4294967295
 8009966:	f7ff fa8b 	bl	8008e80 <quorem>
 800996a:	4603      	mov	r3, r0
 800996c:	3330      	adds	r3, #48	@ 0x30
 800996e:	9003      	str	r0, [sp, #12]
 8009970:	4639      	mov	r1, r7
 8009972:	9802      	ldr	r0, [sp, #8]
 8009974:	9309      	str	r3, [sp, #36]	@ 0x24
 8009976:	f000 ffe3 	bl	800a940 <__mcmp>
 800997a:	462a      	mov	r2, r5
 800997c:	9004      	str	r0, [sp, #16]
 800997e:	4621      	mov	r1, r4
 8009980:	4648      	mov	r0, r9
 8009982:	f000 fff9 	bl	800a978 <__mdiff>
 8009986:	68c2      	ldr	r2, [r0, #12]
 8009988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800998a:	4606      	mov	r6, r0
 800998c:	bb02      	cbnz	r2, 80099d0 <_dtoa_r+0xa40>
 800998e:	4601      	mov	r1, r0
 8009990:	9802      	ldr	r0, [sp, #8]
 8009992:	f000 ffd5 	bl	800a940 <__mcmp>
 8009996:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009998:	4602      	mov	r2, r0
 800999a:	4631      	mov	r1, r6
 800999c:	4648      	mov	r0, r9
 800999e:	920c      	str	r2, [sp, #48]	@ 0x30
 80099a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80099a2:	f000 fd51 	bl	800a448 <_Bfree>
 80099a6:	9b07      	ldr	r3, [sp, #28]
 80099a8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80099aa:	9e00      	ldr	r6, [sp, #0]
 80099ac:	ea42 0103 	orr.w	r1, r2, r3
 80099b0:	9b06      	ldr	r3, [sp, #24]
 80099b2:	4319      	orrs	r1, r3
 80099b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099b6:	d10d      	bne.n	80099d4 <_dtoa_r+0xa44>
 80099b8:	2b39      	cmp	r3, #57	@ 0x39
 80099ba:	d027      	beq.n	8009a0c <_dtoa_r+0xa7c>
 80099bc:	9a04      	ldr	r2, [sp, #16]
 80099be:	2a00      	cmp	r2, #0
 80099c0:	dd01      	ble.n	80099c6 <_dtoa_r+0xa36>
 80099c2:	9b03      	ldr	r3, [sp, #12]
 80099c4:	3331      	adds	r3, #49	@ 0x31
 80099c6:	f88b 3000 	strb.w	r3, [fp]
 80099ca:	e52e      	b.n	800942a <_dtoa_r+0x49a>
 80099cc:	4628      	mov	r0, r5
 80099ce:	e7b9      	b.n	8009944 <_dtoa_r+0x9b4>
 80099d0:	2201      	movs	r2, #1
 80099d2:	e7e2      	b.n	800999a <_dtoa_r+0xa0a>
 80099d4:	9904      	ldr	r1, [sp, #16]
 80099d6:	2900      	cmp	r1, #0
 80099d8:	db04      	blt.n	80099e4 <_dtoa_r+0xa54>
 80099da:	9807      	ldr	r0, [sp, #28]
 80099dc:	4301      	orrs	r1, r0
 80099de:	9806      	ldr	r0, [sp, #24]
 80099e0:	4301      	orrs	r1, r0
 80099e2:	d120      	bne.n	8009a26 <_dtoa_r+0xa96>
 80099e4:	2a00      	cmp	r2, #0
 80099e6:	ddee      	ble.n	80099c6 <_dtoa_r+0xa36>
 80099e8:	9902      	ldr	r1, [sp, #8]
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	2201      	movs	r2, #1
 80099ee:	4648      	mov	r0, r9
 80099f0:	f000 ff3a 	bl	800a868 <__lshift>
 80099f4:	4621      	mov	r1, r4
 80099f6:	9002      	str	r0, [sp, #8]
 80099f8:	f000 ffa2 	bl	800a940 <__mcmp>
 80099fc:	2800      	cmp	r0, #0
 80099fe:	9b00      	ldr	r3, [sp, #0]
 8009a00:	dc02      	bgt.n	8009a08 <_dtoa_r+0xa78>
 8009a02:	d1e0      	bne.n	80099c6 <_dtoa_r+0xa36>
 8009a04:	07da      	lsls	r2, r3, #31
 8009a06:	d5de      	bpl.n	80099c6 <_dtoa_r+0xa36>
 8009a08:	2b39      	cmp	r3, #57	@ 0x39
 8009a0a:	d1da      	bne.n	80099c2 <_dtoa_r+0xa32>
 8009a0c:	2339      	movs	r3, #57	@ 0x39
 8009a0e:	f88b 3000 	strb.w	r3, [fp]
 8009a12:	4633      	mov	r3, r6
 8009a14:	461e      	mov	r6, r3
 8009a16:	3b01      	subs	r3, #1
 8009a18:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009a1c:	2a39      	cmp	r2, #57	@ 0x39
 8009a1e:	d04e      	beq.n	8009abe <_dtoa_r+0xb2e>
 8009a20:	3201      	adds	r2, #1
 8009a22:	701a      	strb	r2, [r3, #0]
 8009a24:	e501      	b.n	800942a <_dtoa_r+0x49a>
 8009a26:	2a00      	cmp	r2, #0
 8009a28:	dd03      	ble.n	8009a32 <_dtoa_r+0xaa2>
 8009a2a:	2b39      	cmp	r3, #57	@ 0x39
 8009a2c:	d0ee      	beq.n	8009a0c <_dtoa_r+0xa7c>
 8009a2e:	3301      	adds	r3, #1
 8009a30:	e7c9      	b.n	80099c6 <_dtoa_r+0xa36>
 8009a32:	9a00      	ldr	r2, [sp, #0]
 8009a34:	9908      	ldr	r1, [sp, #32]
 8009a36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009a3a:	428a      	cmp	r2, r1
 8009a3c:	d028      	beq.n	8009a90 <_dtoa_r+0xb00>
 8009a3e:	9902      	ldr	r1, [sp, #8]
 8009a40:	2300      	movs	r3, #0
 8009a42:	220a      	movs	r2, #10
 8009a44:	4648      	mov	r0, r9
 8009a46:	f000 fd21 	bl	800a48c <__multadd>
 8009a4a:	42af      	cmp	r7, r5
 8009a4c:	9002      	str	r0, [sp, #8]
 8009a4e:	f04f 0300 	mov.w	r3, #0
 8009a52:	f04f 020a 	mov.w	r2, #10
 8009a56:	4639      	mov	r1, r7
 8009a58:	4648      	mov	r0, r9
 8009a5a:	d107      	bne.n	8009a6c <_dtoa_r+0xadc>
 8009a5c:	f000 fd16 	bl	800a48c <__multadd>
 8009a60:	4607      	mov	r7, r0
 8009a62:	4605      	mov	r5, r0
 8009a64:	9b00      	ldr	r3, [sp, #0]
 8009a66:	3301      	adds	r3, #1
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	e777      	b.n	800995c <_dtoa_r+0x9cc>
 8009a6c:	f000 fd0e 	bl	800a48c <__multadd>
 8009a70:	4629      	mov	r1, r5
 8009a72:	4607      	mov	r7, r0
 8009a74:	2300      	movs	r3, #0
 8009a76:	220a      	movs	r2, #10
 8009a78:	4648      	mov	r0, r9
 8009a7a:	f000 fd07 	bl	800a48c <__multadd>
 8009a7e:	4605      	mov	r5, r0
 8009a80:	e7f0      	b.n	8009a64 <_dtoa_r+0xad4>
 8009a82:	f1bb 0f00 	cmp.w	fp, #0
 8009a86:	bfcc      	ite	gt
 8009a88:	465e      	movgt	r6, fp
 8009a8a:	2601      	movle	r6, #1
 8009a8c:	4456      	add	r6, sl
 8009a8e:	2700      	movs	r7, #0
 8009a90:	9902      	ldr	r1, [sp, #8]
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	2201      	movs	r2, #1
 8009a96:	4648      	mov	r0, r9
 8009a98:	f000 fee6 	bl	800a868 <__lshift>
 8009a9c:	4621      	mov	r1, r4
 8009a9e:	9002      	str	r0, [sp, #8]
 8009aa0:	f000 ff4e 	bl	800a940 <__mcmp>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	dcb4      	bgt.n	8009a12 <_dtoa_r+0xa82>
 8009aa8:	d102      	bne.n	8009ab0 <_dtoa_r+0xb20>
 8009aaa:	9b00      	ldr	r3, [sp, #0]
 8009aac:	07db      	lsls	r3, r3, #31
 8009aae:	d4b0      	bmi.n	8009a12 <_dtoa_r+0xa82>
 8009ab0:	4633      	mov	r3, r6
 8009ab2:	461e      	mov	r6, r3
 8009ab4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ab8:	2a30      	cmp	r2, #48	@ 0x30
 8009aba:	d0fa      	beq.n	8009ab2 <_dtoa_r+0xb22>
 8009abc:	e4b5      	b.n	800942a <_dtoa_r+0x49a>
 8009abe:	459a      	cmp	sl, r3
 8009ac0:	d1a8      	bne.n	8009a14 <_dtoa_r+0xa84>
 8009ac2:	2331      	movs	r3, #49	@ 0x31
 8009ac4:	f108 0801 	add.w	r8, r8, #1
 8009ac8:	f88a 3000 	strb.w	r3, [sl]
 8009acc:	e4ad      	b.n	800942a <_dtoa_r+0x49a>
 8009ace:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ad0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009b2c <_dtoa_r+0xb9c>
 8009ad4:	b11b      	cbz	r3, 8009ade <_dtoa_r+0xb4e>
 8009ad6:	f10a 0308 	add.w	r3, sl, #8
 8009ada:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009adc:	6013      	str	r3, [r2, #0]
 8009ade:	4650      	mov	r0, sl
 8009ae0:	b017      	add	sp, #92	@ 0x5c
 8009ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ae6:	9b07      	ldr	r3, [sp, #28]
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	f77f ae2e 	ble.w	800974a <_dtoa_r+0x7ba>
 8009aee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009af0:	9308      	str	r3, [sp, #32]
 8009af2:	2001      	movs	r0, #1
 8009af4:	e64d      	b.n	8009792 <_dtoa_r+0x802>
 8009af6:	f1bb 0f00 	cmp.w	fp, #0
 8009afa:	f77f aed9 	ble.w	80098b0 <_dtoa_r+0x920>
 8009afe:	4656      	mov	r6, sl
 8009b00:	9802      	ldr	r0, [sp, #8]
 8009b02:	4621      	mov	r1, r4
 8009b04:	f7ff f9bc 	bl	8008e80 <quorem>
 8009b08:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009b0c:	f806 3b01 	strb.w	r3, [r6], #1
 8009b10:	eba6 020a 	sub.w	r2, r6, sl
 8009b14:	4593      	cmp	fp, r2
 8009b16:	ddb4      	ble.n	8009a82 <_dtoa_r+0xaf2>
 8009b18:	9902      	ldr	r1, [sp, #8]
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	220a      	movs	r2, #10
 8009b1e:	4648      	mov	r0, r9
 8009b20:	f000 fcb4 	bl	800a48c <__multadd>
 8009b24:	9002      	str	r0, [sp, #8]
 8009b26:	e7eb      	b.n	8009b00 <_dtoa_r+0xb70>
 8009b28:	0800bba9 	.word	0x0800bba9
 8009b2c:	0800bb44 	.word	0x0800bb44

08009b30 <_free_r>:
 8009b30:	b538      	push	{r3, r4, r5, lr}
 8009b32:	4605      	mov	r5, r0
 8009b34:	2900      	cmp	r1, #0
 8009b36:	d041      	beq.n	8009bbc <_free_r+0x8c>
 8009b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b3c:	1f0c      	subs	r4, r1, #4
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	bfb8      	it	lt
 8009b42:	18e4      	addlt	r4, r4, r3
 8009b44:	f000 fc34 	bl	800a3b0 <__malloc_lock>
 8009b48:	4a1d      	ldr	r2, [pc, #116]	@ (8009bc0 <_free_r+0x90>)
 8009b4a:	6813      	ldr	r3, [r2, #0]
 8009b4c:	b933      	cbnz	r3, 8009b5c <_free_r+0x2c>
 8009b4e:	6063      	str	r3, [r4, #4]
 8009b50:	6014      	str	r4, [r2, #0]
 8009b52:	4628      	mov	r0, r5
 8009b54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b58:	f000 bc30 	b.w	800a3bc <__malloc_unlock>
 8009b5c:	42a3      	cmp	r3, r4
 8009b5e:	d908      	bls.n	8009b72 <_free_r+0x42>
 8009b60:	6820      	ldr	r0, [r4, #0]
 8009b62:	1821      	adds	r1, r4, r0
 8009b64:	428b      	cmp	r3, r1
 8009b66:	bf01      	itttt	eq
 8009b68:	6819      	ldreq	r1, [r3, #0]
 8009b6a:	685b      	ldreq	r3, [r3, #4]
 8009b6c:	1809      	addeq	r1, r1, r0
 8009b6e:	6021      	streq	r1, [r4, #0]
 8009b70:	e7ed      	b.n	8009b4e <_free_r+0x1e>
 8009b72:	461a      	mov	r2, r3
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	b10b      	cbz	r3, 8009b7c <_free_r+0x4c>
 8009b78:	42a3      	cmp	r3, r4
 8009b7a:	d9fa      	bls.n	8009b72 <_free_r+0x42>
 8009b7c:	6811      	ldr	r1, [r2, #0]
 8009b7e:	1850      	adds	r0, r2, r1
 8009b80:	42a0      	cmp	r0, r4
 8009b82:	d10b      	bne.n	8009b9c <_free_r+0x6c>
 8009b84:	6820      	ldr	r0, [r4, #0]
 8009b86:	4401      	add	r1, r0
 8009b88:	1850      	adds	r0, r2, r1
 8009b8a:	4283      	cmp	r3, r0
 8009b8c:	6011      	str	r1, [r2, #0]
 8009b8e:	d1e0      	bne.n	8009b52 <_free_r+0x22>
 8009b90:	6818      	ldr	r0, [r3, #0]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	6053      	str	r3, [r2, #4]
 8009b96:	4408      	add	r0, r1
 8009b98:	6010      	str	r0, [r2, #0]
 8009b9a:	e7da      	b.n	8009b52 <_free_r+0x22>
 8009b9c:	d902      	bls.n	8009ba4 <_free_r+0x74>
 8009b9e:	230c      	movs	r3, #12
 8009ba0:	602b      	str	r3, [r5, #0]
 8009ba2:	e7d6      	b.n	8009b52 <_free_r+0x22>
 8009ba4:	6820      	ldr	r0, [r4, #0]
 8009ba6:	1821      	adds	r1, r4, r0
 8009ba8:	428b      	cmp	r3, r1
 8009baa:	bf04      	itt	eq
 8009bac:	6819      	ldreq	r1, [r3, #0]
 8009bae:	685b      	ldreq	r3, [r3, #4]
 8009bb0:	6063      	str	r3, [r4, #4]
 8009bb2:	bf04      	itt	eq
 8009bb4:	1809      	addeq	r1, r1, r0
 8009bb6:	6021      	streq	r1, [r4, #0]
 8009bb8:	6054      	str	r4, [r2, #4]
 8009bba:	e7ca      	b.n	8009b52 <_free_r+0x22>
 8009bbc:	bd38      	pop	{r3, r4, r5, pc}
 8009bbe:	bf00      	nop
 8009bc0:	20000798 	.word	0x20000798

08009bc4 <rshift>:
 8009bc4:	6903      	ldr	r3, [r0, #16]
 8009bc6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009bca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009bce:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009bd2:	f100 0414 	add.w	r4, r0, #20
 8009bd6:	dd45      	ble.n	8009c64 <rshift+0xa0>
 8009bd8:	f011 011f 	ands.w	r1, r1, #31
 8009bdc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009be0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009be4:	d10c      	bne.n	8009c00 <rshift+0x3c>
 8009be6:	f100 0710 	add.w	r7, r0, #16
 8009bea:	4629      	mov	r1, r5
 8009bec:	42b1      	cmp	r1, r6
 8009bee:	d334      	bcc.n	8009c5a <rshift+0x96>
 8009bf0:	1a9b      	subs	r3, r3, r2
 8009bf2:	009b      	lsls	r3, r3, #2
 8009bf4:	1eea      	subs	r2, r5, #3
 8009bf6:	4296      	cmp	r6, r2
 8009bf8:	bf38      	it	cc
 8009bfa:	2300      	movcc	r3, #0
 8009bfc:	4423      	add	r3, r4
 8009bfe:	e015      	b.n	8009c2c <rshift+0x68>
 8009c00:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009c04:	f1c1 0820 	rsb	r8, r1, #32
 8009c08:	40cf      	lsrs	r7, r1
 8009c0a:	f105 0e04 	add.w	lr, r5, #4
 8009c0e:	46a1      	mov	r9, r4
 8009c10:	4576      	cmp	r6, lr
 8009c12:	46f4      	mov	ip, lr
 8009c14:	d815      	bhi.n	8009c42 <rshift+0x7e>
 8009c16:	1a9a      	subs	r2, r3, r2
 8009c18:	0092      	lsls	r2, r2, #2
 8009c1a:	3a04      	subs	r2, #4
 8009c1c:	3501      	adds	r5, #1
 8009c1e:	42ae      	cmp	r6, r5
 8009c20:	bf38      	it	cc
 8009c22:	2200      	movcc	r2, #0
 8009c24:	18a3      	adds	r3, r4, r2
 8009c26:	50a7      	str	r7, [r4, r2]
 8009c28:	b107      	cbz	r7, 8009c2c <rshift+0x68>
 8009c2a:	3304      	adds	r3, #4
 8009c2c:	1b1a      	subs	r2, r3, r4
 8009c2e:	42a3      	cmp	r3, r4
 8009c30:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009c34:	bf08      	it	eq
 8009c36:	2300      	moveq	r3, #0
 8009c38:	6102      	str	r2, [r0, #16]
 8009c3a:	bf08      	it	eq
 8009c3c:	6143      	streq	r3, [r0, #20]
 8009c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c42:	f8dc c000 	ldr.w	ip, [ip]
 8009c46:	fa0c fc08 	lsl.w	ip, ip, r8
 8009c4a:	ea4c 0707 	orr.w	r7, ip, r7
 8009c4e:	f849 7b04 	str.w	r7, [r9], #4
 8009c52:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c56:	40cf      	lsrs	r7, r1
 8009c58:	e7da      	b.n	8009c10 <rshift+0x4c>
 8009c5a:	f851 cb04 	ldr.w	ip, [r1], #4
 8009c5e:	f847 cf04 	str.w	ip, [r7, #4]!
 8009c62:	e7c3      	b.n	8009bec <rshift+0x28>
 8009c64:	4623      	mov	r3, r4
 8009c66:	e7e1      	b.n	8009c2c <rshift+0x68>

08009c68 <__hexdig_fun>:
 8009c68:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009c6c:	2b09      	cmp	r3, #9
 8009c6e:	d802      	bhi.n	8009c76 <__hexdig_fun+0xe>
 8009c70:	3820      	subs	r0, #32
 8009c72:	b2c0      	uxtb	r0, r0
 8009c74:	4770      	bx	lr
 8009c76:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009c7a:	2b05      	cmp	r3, #5
 8009c7c:	d801      	bhi.n	8009c82 <__hexdig_fun+0x1a>
 8009c7e:	3847      	subs	r0, #71	@ 0x47
 8009c80:	e7f7      	b.n	8009c72 <__hexdig_fun+0xa>
 8009c82:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009c86:	2b05      	cmp	r3, #5
 8009c88:	d801      	bhi.n	8009c8e <__hexdig_fun+0x26>
 8009c8a:	3827      	subs	r0, #39	@ 0x27
 8009c8c:	e7f1      	b.n	8009c72 <__hexdig_fun+0xa>
 8009c8e:	2000      	movs	r0, #0
 8009c90:	4770      	bx	lr
	...

08009c94 <__gethex>:
 8009c94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c98:	b085      	sub	sp, #20
 8009c9a:	468a      	mov	sl, r1
 8009c9c:	9302      	str	r3, [sp, #8]
 8009c9e:	680b      	ldr	r3, [r1, #0]
 8009ca0:	9001      	str	r0, [sp, #4]
 8009ca2:	4690      	mov	r8, r2
 8009ca4:	1c9c      	adds	r4, r3, #2
 8009ca6:	46a1      	mov	r9, r4
 8009ca8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009cac:	2830      	cmp	r0, #48	@ 0x30
 8009cae:	d0fa      	beq.n	8009ca6 <__gethex+0x12>
 8009cb0:	eba9 0303 	sub.w	r3, r9, r3
 8009cb4:	f1a3 0b02 	sub.w	fp, r3, #2
 8009cb8:	f7ff ffd6 	bl	8009c68 <__hexdig_fun>
 8009cbc:	4605      	mov	r5, r0
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d168      	bne.n	8009d94 <__gethex+0x100>
 8009cc2:	49a0      	ldr	r1, [pc, #640]	@ (8009f44 <__gethex+0x2b0>)
 8009cc4:	2201      	movs	r2, #1
 8009cc6:	4648      	mov	r0, r9
 8009cc8:	f7fe ffa4 	bl	8008c14 <strncmp>
 8009ccc:	4607      	mov	r7, r0
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d167      	bne.n	8009da2 <__gethex+0x10e>
 8009cd2:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009cd6:	4626      	mov	r6, r4
 8009cd8:	f7ff ffc6 	bl	8009c68 <__hexdig_fun>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d062      	beq.n	8009da6 <__gethex+0x112>
 8009ce0:	4623      	mov	r3, r4
 8009ce2:	7818      	ldrb	r0, [r3, #0]
 8009ce4:	2830      	cmp	r0, #48	@ 0x30
 8009ce6:	4699      	mov	r9, r3
 8009ce8:	f103 0301 	add.w	r3, r3, #1
 8009cec:	d0f9      	beq.n	8009ce2 <__gethex+0x4e>
 8009cee:	f7ff ffbb 	bl	8009c68 <__hexdig_fun>
 8009cf2:	fab0 f580 	clz	r5, r0
 8009cf6:	096d      	lsrs	r5, r5, #5
 8009cf8:	f04f 0b01 	mov.w	fp, #1
 8009cfc:	464a      	mov	r2, r9
 8009cfe:	4616      	mov	r6, r2
 8009d00:	3201      	adds	r2, #1
 8009d02:	7830      	ldrb	r0, [r6, #0]
 8009d04:	f7ff ffb0 	bl	8009c68 <__hexdig_fun>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	d1f8      	bne.n	8009cfe <__gethex+0x6a>
 8009d0c:	498d      	ldr	r1, [pc, #564]	@ (8009f44 <__gethex+0x2b0>)
 8009d0e:	2201      	movs	r2, #1
 8009d10:	4630      	mov	r0, r6
 8009d12:	f7fe ff7f 	bl	8008c14 <strncmp>
 8009d16:	2800      	cmp	r0, #0
 8009d18:	d13f      	bne.n	8009d9a <__gethex+0x106>
 8009d1a:	b944      	cbnz	r4, 8009d2e <__gethex+0x9a>
 8009d1c:	1c74      	adds	r4, r6, #1
 8009d1e:	4622      	mov	r2, r4
 8009d20:	4616      	mov	r6, r2
 8009d22:	3201      	adds	r2, #1
 8009d24:	7830      	ldrb	r0, [r6, #0]
 8009d26:	f7ff ff9f 	bl	8009c68 <__hexdig_fun>
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	d1f8      	bne.n	8009d20 <__gethex+0x8c>
 8009d2e:	1ba4      	subs	r4, r4, r6
 8009d30:	00a7      	lsls	r7, r4, #2
 8009d32:	7833      	ldrb	r3, [r6, #0]
 8009d34:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009d38:	2b50      	cmp	r3, #80	@ 0x50
 8009d3a:	d13e      	bne.n	8009dba <__gethex+0x126>
 8009d3c:	7873      	ldrb	r3, [r6, #1]
 8009d3e:	2b2b      	cmp	r3, #43	@ 0x2b
 8009d40:	d033      	beq.n	8009daa <__gethex+0x116>
 8009d42:	2b2d      	cmp	r3, #45	@ 0x2d
 8009d44:	d034      	beq.n	8009db0 <__gethex+0x11c>
 8009d46:	1c71      	adds	r1, r6, #1
 8009d48:	2400      	movs	r4, #0
 8009d4a:	7808      	ldrb	r0, [r1, #0]
 8009d4c:	f7ff ff8c 	bl	8009c68 <__hexdig_fun>
 8009d50:	1e43      	subs	r3, r0, #1
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	2b18      	cmp	r3, #24
 8009d56:	d830      	bhi.n	8009dba <__gethex+0x126>
 8009d58:	f1a0 0210 	sub.w	r2, r0, #16
 8009d5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d60:	f7ff ff82 	bl	8009c68 <__hexdig_fun>
 8009d64:	f100 3cff 	add.w	ip, r0, #4294967295
 8009d68:	fa5f fc8c 	uxtb.w	ip, ip
 8009d6c:	f1bc 0f18 	cmp.w	ip, #24
 8009d70:	f04f 030a 	mov.w	r3, #10
 8009d74:	d91e      	bls.n	8009db4 <__gethex+0x120>
 8009d76:	b104      	cbz	r4, 8009d7a <__gethex+0xe6>
 8009d78:	4252      	negs	r2, r2
 8009d7a:	4417      	add	r7, r2
 8009d7c:	f8ca 1000 	str.w	r1, [sl]
 8009d80:	b1ed      	cbz	r5, 8009dbe <__gethex+0x12a>
 8009d82:	f1bb 0f00 	cmp.w	fp, #0
 8009d86:	bf0c      	ite	eq
 8009d88:	2506      	moveq	r5, #6
 8009d8a:	2500      	movne	r5, #0
 8009d8c:	4628      	mov	r0, r5
 8009d8e:	b005      	add	sp, #20
 8009d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d94:	2500      	movs	r5, #0
 8009d96:	462c      	mov	r4, r5
 8009d98:	e7b0      	b.n	8009cfc <__gethex+0x68>
 8009d9a:	2c00      	cmp	r4, #0
 8009d9c:	d1c7      	bne.n	8009d2e <__gethex+0x9a>
 8009d9e:	4627      	mov	r7, r4
 8009da0:	e7c7      	b.n	8009d32 <__gethex+0x9e>
 8009da2:	464e      	mov	r6, r9
 8009da4:	462f      	mov	r7, r5
 8009da6:	2501      	movs	r5, #1
 8009da8:	e7c3      	b.n	8009d32 <__gethex+0x9e>
 8009daa:	2400      	movs	r4, #0
 8009dac:	1cb1      	adds	r1, r6, #2
 8009dae:	e7cc      	b.n	8009d4a <__gethex+0xb6>
 8009db0:	2401      	movs	r4, #1
 8009db2:	e7fb      	b.n	8009dac <__gethex+0x118>
 8009db4:	fb03 0002 	mla	r0, r3, r2, r0
 8009db8:	e7ce      	b.n	8009d58 <__gethex+0xc4>
 8009dba:	4631      	mov	r1, r6
 8009dbc:	e7de      	b.n	8009d7c <__gethex+0xe8>
 8009dbe:	eba6 0309 	sub.w	r3, r6, r9
 8009dc2:	3b01      	subs	r3, #1
 8009dc4:	4629      	mov	r1, r5
 8009dc6:	2b07      	cmp	r3, #7
 8009dc8:	dc0a      	bgt.n	8009de0 <__gethex+0x14c>
 8009dca:	9801      	ldr	r0, [sp, #4]
 8009dcc:	f000 fafc 	bl	800a3c8 <_Balloc>
 8009dd0:	4604      	mov	r4, r0
 8009dd2:	b940      	cbnz	r0, 8009de6 <__gethex+0x152>
 8009dd4:	4b5c      	ldr	r3, [pc, #368]	@ (8009f48 <__gethex+0x2b4>)
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	21e4      	movs	r1, #228	@ 0xe4
 8009dda:	485c      	ldr	r0, [pc, #368]	@ (8009f4c <__gethex+0x2b8>)
 8009ddc:	f7ff f832 	bl	8008e44 <__assert_func>
 8009de0:	3101      	adds	r1, #1
 8009de2:	105b      	asrs	r3, r3, #1
 8009de4:	e7ef      	b.n	8009dc6 <__gethex+0x132>
 8009de6:	f100 0a14 	add.w	sl, r0, #20
 8009dea:	2300      	movs	r3, #0
 8009dec:	4655      	mov	r5, sl
 8009dee:	469b      	mov	fp, r3
 8009df0:	45b1      	cmp	r9, r6
 8009df2:	d337      	bcc.n	8009e64 <__gethex+0x1d0>
 8009df4:	f845 bb04 	str.w	fp, [r5], #4
 8009df8:	eba5 050a 	sub.w	r5, r5, sl
 8009dfc:	10ad      	asrs	r5, r5, #2
 8009dfe:	6125      	str	r5, [r4, #16]
 8009e00:	4658      	mov	r0, fp
 8009e02:	f000 fbd3 	bl	800a5ac <__hi0bits>
 8009e06:	016d      	lsls	r5, r5, #5
 8009e08:	f8d8 6000 	ldr.w	r6, [r8]
 8009e0c:	1a2d      	subs	r5, r5, r0
 8009e0e:	42b5      	cmp	r5, r6
 8009e10:	dd54      	ble.n	8009ebc <__gethex+0x228>
 8009e12:	1bad      	subs	r5, r5, r6
 8009e14:	4629      	mov	r1, r5
 8009e16:	4620      	mov	r0, r4
 8009e18:	f000 ff5f 	bl	800acda <__any_on>
 8009e1c:	4681      	mov	r9, r0
 8009e1e:	b178      	cbz	r0, 8009e40 <__gethex+0x1ac>
 8009e20:	1e6b      	subs	r3, r5, #1
 8009e22:	1159      	asrs	r1, r3, #5
 8009e24:	f003 021f 	and.w	r2, r3, #31
 8009e28:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009e2c:	f04f 0901 	mov.w	r9, #1
 8009e30:	fa09 f202 	lsl.w	r2, r9, r2
 8009e34:	420a      	tst	r2, r1
 8009e36:	d003      	beq.n	8009e40 <__gethex+0x1ac>
 8009e38:	454b      	cmp	r3, r9
 8009e3a:	dc36      	bgt.n	8009eaa <__gethex+0x216>
 8009e3c:	f04f 0902 	mov.w	r9, #2
 8009e40:	4629      	mov	r1, r5
 8009e42:	4620      	mov	r0, r4
 8009e44:	f7ff febe 	bl	8009bc4 <rshift>
 8009e48:	442f      	add	r7, r5
 8009e4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e4e:	42bb      	cmp	r3, r7
 8009e50:	da42      	bge.n	8009ed8 <__gethex+0x244>
 8009e52:	9801      	ldr	r0, [sp, #4]
 8009e54:	4621      	mov	r1, r4
 8009e56:	f000 faf7 	bl	800a448 <_Bfree>
 8009e5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	25a3      	movs	r5, #163	@ 0xa3
 8009e62:	e793      	b.n	8009d8c <__gethex+0xf8>
 8009e64:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009e68:	2a2e      	cmp	r2, #46	@ 0x2e
 8009e6a:	d012      	beq.n	8009e92 <__gethex+0x1fe>
 8009e6c:	2b20      	cmp	r3, #32
 8009e6e:	d104      	bne.n	8009e7a <__gethex+0x1e6>
 8009e70:	f845 bb04 	str.w	fp, [r5], #4
 8009e74:	f04f 0b00 	mov.w	fp, #0
 8009e78:	465b      	mov	r3, fp
 8009e7a:	7830      	ldrb	r0, [r6, #0]
 8009e7c:	9303      	str	r3, [sp, #12]
 8009e7e:	f7ff fef3 	bl	8009c68 <__hexdig_fun>
 8009e82:	9b03      	ldr	r3, [sp, #12]
 8009e84:	f000 000f 	and.w	r0, r0, #15
 8009e88:	4098      	lsls	r0, r3
 8009e8a:	ea4b 0b00 	orr.w	fp, fp, r0
 8009e8e:	3304      	adds	r3, #4
 8009e90:	e7ae      	b.n	8009df0 <__gethex+0x15c>
 8009e92:	45b1      	cmp	r9, r6
 8009e94:	d8ea      	bhi.n	8009e6c <__gethex+0x1d8>
 8009e96:	492b      	ldr	r1, [pc, #172]	@ (8009f44 <__gethex+0x2b0>)
 8009e98:	9303      	str	r3, [sp, #12]
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	4630      	mov	r0, r6
 8009e9e:	f7fe feb9 	bl	8008c14 <strncmp>
 8009ea2:	9b03      	ldr	r3, [sp, #12]
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	d1e1      	bne.n	8009e6c <__gethex+0x1d8>
 8009ea8:	e7a2      	b.n	8009df0 <__gethex+0x15c>
 8009eaa:	1ea9      	subs	r1, r5, #2
 8009eac:	4620      	mov	r0, r4
 8009eae:	f000 ff14 	bl	800acda <__any_on>
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d0c2      	beq.n	8009e3c <__gethex+0x1a8>
 8009eb6:	f04f 0903 	mov.w	r9, #3
 8009eba:	e7c1      	b.n	8009e40 <__gethex+0x1ac>
 8009ebc:	da09      	bge.n	8009ed2 <__gethex+0x23e>
 8009ebe:	1b75      	subs	r5, r6, r5
 8009ec0:	4621      	mov	r1, r4
 8009ec2:	9801      	ldr	r0, [sp, #4]
 8009ec4:	462a      	mov	r2, r5
 8009ec6:	f000 fccf 	bl	800a868 <__lshift>
 8009eca:	1b7f      	subs	r7, r7, r5
 8009ecc:	4604      	mov	r4, r0
 8009ece:	f100 0a14 	add.w	sl, r0, #20
 8009ed2:	f04f 0900 	mov.w	r9, #0
 8009ed6:	e7b8      	b.n	8009e4a <__gethex+0x1b6>
 8009ed8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009edc:	42bd      	cmp	r5, r7
 8009ede:	dd6f      	ble.n	8009fc0 <__gethex+0x32c>
 8009ee0:	1bed      	subs	r5, r5, r7
 8009ee2:	42ae      	cmp	r6, r5
 8009ee4:	dc34      	bgt.n	8009f50 <__gethex+0x2bc>
 8009ee6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009eea:	2b02      	cmp	r3, #2
 8009eec:	d022      	beq.n	8009f34 <__gethex+0x2a0>
 8009eee:	2b03      	cmp	r3, #3
 8009ef0:	d024      	beq.n	8009f3c <__gethex+0x2a8>
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	d115      	bne.n	8009f22 <__gethex+0x28e>
 8009ef6:	42ae      	cmp	r6, r5
 8009ef8:	d113      	bne.n	8009f22 <__gethex+0x28e>
 8009efa:	2e01      	cmp	r6, #1
 8009efc:	d10b      	bne.n	8009f16 <__gethex+0x282>
 8009efe:	9a02      	ldr	r2, [sp, #8]
 8009f00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009f04:	6013      	str	r3, [r2, #0]
 8009f06:	2301      	movs	r3, #1
 8009f08:	6123      	str	r3, [r4, #16]
 8009f0a:	f8ca 3000 	str.w	r3, [sl]
 8009f0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f10:	2562      	movs	r5, #98	@ 0x62
 8009f12:	601c      	str	r4, [r3, #0]
 8009f14:	e73a      	b.n	8009d8c <__gethex+0xf8>
 8009f16:	1e71      	subs	r1, r6, #1
 8009f18:	4620      	mov	r0, r4
 8009f1a:	f000 fede 	bl	800acda <__any_on>
 8009f1e:	2800      	cmp	r0, #0
 8009f20:	d1ed      	bne.n	8009efe <__gethex+0x26a>
 8009f22:	9801      	ldr	r0, [sp, #4]
 8009f24:	4621      	mov	r1, r4
 8009f26:	f000 fa8f 	bl	800a448 <_Bfree>
 8009f2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	6013      	str	r3, [r2, #0]
 8009f30:	2550      	movs	r5, #80	@ 0x50
 8009f32:	e72b      	b.n	8009d8c <__gethex+0xf8>
 8009f34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d1f3      	bne.n	8009f22 <__gethex+0x28e>
 8009f3a:	e7e0      	b.n	8009efe <__gethex+0x26a>
 8009f3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1dd      	bne.n	8009efe <__gethex+0x26a>
 8009f42:	e7ee      	b.n	8009f22 <__gethex+0x28e>
 8009f44:	0800ba54 	.word	0x0800ba54
 8009f48:	0800bba9 	.word	0x0800bba9
 8009f4c:	0800bbba 	.word	0x0800bbba
 8009f50:	1e6f      	subs	r7, r5, #1
 8009f52:	f1b9 0f00 	cmp.w	r9, #0
 8009f56:	d130      	bne.n	8009fba <__gethex+0x326>
 8009f58:	b127      	cbz	r7, 8009f64 <__gethex+0x2d0>
 8009f5a:	4639      	mov	r1, r7
 8009f5c:	4620      	mov	r0, r4
 8009f5e:	f000 febc 	bl	800acda <__any_on>
 8009f62:	4681      	mov	r9, r0
 8009f64:	117a      	asrs	r2, r7, #5
 8009f66:	2301      	movs	r3, #1
 8009f68:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009f6c:	f007 071f 	and.w	r7, r7, #31
 8009f70:	40bb      	lsls	r3, r7
 8009f72:	4213      	tst	r3, r2
 8009f74:	4629      	mov	r1, r5
 8009f76:	4620      	mov	r0, r4
 8009f78:	bf18      	it	ne
 8009f7a:	f049 0902 	orrne.w	r9, r9, #2
 8009f7e:	f7ff fe21 	bl	8009bc4 <rshift>
 8009f82:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009f86:	1b76      	subs	r6, r6, r5
 8009f88:	2502      	movs	r5, #2
 8009f8a:	f1b9 0f00 	cmp.w	r9, #0
 8009f8e:	d047      	beq.n	800a020 <__gethex+0x38c>
 8009f90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f94:	2b02      	cmp	r3, #2
 8009f96:	d015      	beq.n	8009fc4 <__gethex+0x330>
 8009f98:	2b03      	cmp	r3, #3
 8009f9a:	d017      	beq.n	8009fcc <__gethex+0x338>
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d109      	bne.n	8009fb4 <__gethex+0x320>
 8009fa0:	f019 0f02 	tst.w	r9, #2
 8009fa4:	d006      	beq.n	8009fb4 <__gethex+0x320>
 8009fa6:	f8da 3000 	ldr.w	r3, [sl]
 8009faa:	ea49 0903 	orr.w	r9, r9, r3
 8009fae:	f019 0f01 	tst.w	r9, #1
 8009fb2:	d10e      	bne.n	8009fd2 <__gethex+0x33e>
 8009fb4:	f045 0510 	orr.w	r5, r5, #16
 8009fb8:	e032      	b.n	800a020 <__gethex+0x38c>
 8009fba:	f04f 0901 	mov.w	r9, #1
 8009fbe:	e7d1      	b.n	8009f64 <__gethex+0x2d0>
 8009fc0:	2501      	movs	r5, #1
 8009fc2:	e7e2      	b.n	8009f8a <__gethex+0x2f6>
 8009fc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fc6:	f1c3 0301 	rsb	r3, r3, #1
 8009fca:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009fcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d0f0      	beq.n	8009fb4 <__gethex+0x320>
 8009fd2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009fd6:	f104 0314 	add.w	r3, r4, #20
 8009fda:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009fde:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009fe2:	f04f 0c00 	mov.w	ip, #0
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fec:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009ff0:	d01b      	beq.n	800a02a <__gethex+0x396>
 8009ff2:	3201      	adds	r2, #1
 8009ff4:	6002      	str	r2, [r0, #0]
 8009ff6:	2d02      	cmp	r5, #2
 8009ff8:	f104 0314 	add.w	r3, r4, #20
 8009ffc:	d13c      	bne.n	800a078 <__gethex+0x3e4>
 8009ffe:	f8d8 2000 	ldr.w	r2, [r8]
 800a002:	3a01      	subs	r2, #1
 800a004:	42b2      	cmp	r2, r6
 800a006:	d109      	bne.n	800a01c <__gethex+0x388>
 800a008:	1171      	asrs	r1, r6, #5
 800a00a:	2201      	movs	r2, #1
 800a00c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a010:	f006 061f 	and.w	r6, r6, #31
 800a014:	fa02 f606 	lsl.w	r6, r2, r6
 800a018:	421e      	tst	r6, r3
 800a01a:	d13a      	bne.n	800a092 <__gethex+0x3fe>
 800a01c:	f045 0520 	orr.w	r5, r5, #32
 800a020:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a022:	601c      	str	r4, [r3, #0]
 800a024:	9b02      	ldr	r3, [sp, #8]
 800a026:	601f      	str	r7, [r3, #0]
 800a028:	e6b0      	b.n	8009d8c <__gethex+0xf8>
 800a02a:	4299      	cmp	r1, r3
 800a02c:	f843 cc04 	str.w	ip, [r3, #-4]
 800a030:	d8d9      	bhi.n	8009fe6 <__gethex+0x352>
 800a032:	68a3      	ldr	r3, [r4, #8]
 800a034:	459b      	cmp	fp, r3
 800a036:	db17      	blt.n	800a068 <__gethex+0x3d4>
 800a038:	6861      	ldr	r1, [r4, #4]
 800a03a:	9801      	ldr	r0, [sp, #4]
 800a03c:	3101      	adds	r1, #1
 800a03e:	f000 f9c3 	bl	800a3c8 <_Balloc>
 800a042:	4681      	mov	r9, r0
 800a044:	b918      	cbnz	r0, 800a04e <__gethex+0x3ba>
 800a046:	4b1a      	ldr	r3, [pc, #104]	@ (800a0b0 <__gethex+0x41c>)
 800a048:	4602      	mov	r2, r0
 800a04a:	2184      	movs	r1, #132	@ 0x84
 800a04c:	e6c5      	b.n	8009dda <__gethex+0x146>
 800a04e:	6922      	ldr	r2, [r4, #16]
 800a050:	3202      	adds	r2, #2
 800a052:	f104 010c 	add.w	r1, r4, #12
 800a056:	0092      	lsls	r2, r2, #2
 800a058:	300c      	adds	r0, #12
 800a05a:	f7fe fed4 	bl	8008e06 <memcpy>
 800a05e:	4621      	mov	r1, r4
 800a060:	9801      	ldr	r0, [sp, #4]
 800a062:	f000 f9f1 	bl	800a448 <_Bfree>
 800a066:	464c      	mov	r4, r9
 800a068:	6923      	ldr	r3, [r4, #16]
 800a06a:	1c5a      	adds	r2, r3, #1
 800a06c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a070:	6122      	str	r2, [r4, #16]
 800a072:	2201      	movs	r2, #1
 800a074:	615a      	str	r2, [r3, #20]
 800a076:	e7be      	b.n	8009ff6 <__gethex+0x362>
 800a078:	6922      	ldr	r2, [r4, #16]
 800a07a:	455a      	cmp	r2, fp
 800a07c:	dd0b      	ble.n	800a096 <__gethex+0x402>
 800a07e:	2101      	movs	r1, #1
 800a080:	4620      	mov	r0, r4
 800a082:	f7ff fd9f 	bl	8009bc4 <rshift>
 800a086:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a08a:	3701      	adds	r7, #1
 800a08c:	42bb      	cmp	r3, r7
 800a08e:	f6ff aee0 	blt.w	8009e52 <__gethex+0x1be>
 800a092:	2501      	movs	r5, #1
 800a094:	e7c2      	b.n	800a01c <__gethex+0x388>
 800a096:	f016 061f 	ands.w	r6, r6, #31
 800a09a:	d0fa      	beq.n	800a092 <__gethex+0x3fe>
 800a09c:	4453      	add	r3, sl
 800a09e:	f1c6 0620 	rsb	r6, r6, #32
 800a0a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a0a6:	f000 fa81 	bl	800a5ac <__hi0bits>
 800a0aa:	42b0      	cmp	r0, r6
 800a0ac:	dbe7      	blt.n	800a07e <__gethex+0x3ea>
 800a0ae:	e7f0      	b.n	800a092 <__gethex+0x3fe>
 800a0b0:	0800bba9 	.word	0x0800bba9

0800a0b4 <L_shift>:
 800a0b4:	f1c2 0208 	rsb	r2, r2, #8
 800a0b8:	0092      	lsls	r2, r2, #2
 800a0ba:	b570      	push	{r4, r5, r6, lr}
 800a0bc:	f1c2 0620 	rsb	r6, r2, #32
 800a0c0:	6843      	ldr	r3, [r0, #4]
 800a0c2:	6804      	ldr	r4, [r0, #0]
 800a0c4:	fa03 f506 	lsl.w	r5, r3, r6
 800a0c8:	432c      	orrs	r4, r5
 800a0ca:	40d3      	lsrs	r3, r2
 800a0cc:	6004      	str	r4, [r0, #0]
 800a0ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800a0d2:	4288      	cmp	r0, r1
 800a0d4:	d3f4      	bcc.n	800a0c0 <L_shift+0xc>
 800a0d6:	bd70      	pop	{r4, r5, r6, pc}

0800a0d8 <__match>:
 800a0d8:	b530      	push	{r4, r5, lr}
 800a0da:	6803      	ldr	r3, [r0, #0]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0e2:	b914      	cbnz	r4, 800a0ea <__match+0x12>
 800a0e4:	6003      	str	r3, [r0, #0]
 800a0e6:	2001      	movs	r0, #1
 800a0e8:	bd30      	pop	{r4, r5, pc}
 800a0ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0ee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a0f2:	2d19      	cmp	r5, #25
 800a0f4:	bf98      	it	ls
 800a0f6:	3220      	addls	r2, #32
 800a0f8:	42a2      	cmp	r2, r4
 800a0fa:	d0f0      	beq.n	800a0de <__match+0x6>
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	e7f3      	b.n	800a0e8 <__match+0x10>

0800a100 <__hexnan>:
 800a100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a104:	680b      	ldr	r3, [r1, #0]
 800a106:	6801      	ldr	r1, [r0, #0]
 800a108:	115e      	asrs	r6, r3, #5
 800a10a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a10e:	f013 031f 	ands.w	r3, r3, #31
 800a112:	b087      	sub	sp, #28
 800a114:	bf18      	it	ne
 800a116:	3604      	addne	r6, #4
 800a118:	2500      	movs	r5, #0
 800a11a:	1f37      	subs	r7, r6, #4
 800a11c:	4682      	mov	sl, r0
 800a11e:	4690      	mov	r8, r2
 800a120:	9301      	str	r3, [sp, #4]
 800a122:	f846 5c04 	str.w	r5, [r6, #-4]
 800a126:	46b9      	mov	r9, r7
 800a128:	463c      	mov	r4, r7
 800a12a:	9502      	str	r5, [sp, #8]
 800a12c:	46ab      	mov	fp, r5
 800a12e:	784a      	ldrb	r2, [r1, #1]
 800a130:	1c4b      	adds	r3, r1, #1
 800a132:	9303      	str	r3, [sp, #12]
 800a134:	b342      	cbz	r2, 800a188 <__hexnan+0x88>
 800a136:	4610      	mov	r0, r2
 800a138:	9105      	str	r1, [sp, #20]
 800a13a:	9204      	str	r2, [sp, #16]
 800a13c:	f7ff fd94 	bl	8009c68 <__hexdig_fun>
 800a140:	2800      	cmp	r0, #0
 800a142:	d151      	bne.n	800a1e8 <__hexnan+0xe8>
 800a144:	9a04      	ldr	r2, [sp, #16]
 800a146:	9905      	ldr	r1, [sp, #20]
 800a148:	2a20      	cmp	r2, #32
 800a14a:	d818      	bhi.n	800a17e <__hexnan+0x7e>
 800a14c:	9b02      	ldr	r3, [sp, #8]
 800a14e:	459b      	cmp	fp, r3
 800a150:	dd13      	ble.n	800a17a <__hexnan+0x7a>
 800a152:	454c      	cmp	r4, r9
 800a154:	d206      	bcs.n	800a164 <__hexnan+0x64>
 800a156:	2d07      	cmp	r5, #7
 800a158:	dc04      	bgt.n	800a164 <__hexnan+0x64>
 800a15a:	462a      	mov	r2, r5
 800a15c:	4649      	mov	r1, r9
 800a15e:	4620      	mov	r0, r4
 800a160:	f7ff ffa8 	bl	800a0b4 <L_shift>
 800a164:	4544      	cmp	r4, r8
 800a166:	d952      	bls.n	800a20e <__hexnan+0x10e>
 800a168:	2300      	movs	r3, #0
 800a16a:	f1a4 0904 	sub.w	r9, r4, #4
 800a16e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a172:	f8cd b008 	str.w	fp, [sp, #8]
 800a176:	464c      	mov	r4, r9
 800a178:	461d      	mov	r5, r3
 800a17a:	9903      	ldr	r1, [sp, #12]
 800a17c:	e7d7      	b.n	800a12e <__hexnan+0x2e>
 800a17e:	2a29      	cmp	r2, #41	@ 0x29
 800a180:	d157      	bne.n	800a232 <__hexnan+0x132>
 800a182:	3102      	adds	r1, #2
 800a184:	f8ca 1000 	str.w	r1, [sl]
 800a188:	f1bb 0f00 	cmp.w	fp, #0
 800a18c:	d051      	beq.n	800a232 <__hexnan+0x132>
 800a18e:	454c      	cmp	r4, r9
 800a190:	d206      	bcs.n	800a1a0 <__hexnan+0xa0>
 800a192:	2d07      	cmp	r5, #7
 800a194:	dc04      	bgt.n	800a1a0 <__hexnan+0xa0>
 800a196:	462a      	mov	r2, r5
 800a198:	4649      	mov	r1, r9
 800a19a:	4620      	mov	r0, r4
 800a19c:	f7ff ff8a 	bl	800a0b4 <L_shift>
 800a1a0:	4544      	cmp	r4, r8
 800a1a2:	d936      	bls.n	800a212 <__hexnan+0x112>
 800a1a4:	f1a8 0204 	sub.w	r2, r8, #4
 800a1a8:	4623      	mov	r3, r4
 800a1aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800a1ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800a1b2:	429f      	cmp	r7, r3
 800a1b4:	d2f9      	bcs.n	800a1aa <__hexnan+0xaa>
 800a1b6:	1b3b      	subs	r3, r7, r4
 800a1b8:	f023 0303 	bic.w	r3, r3, #3
 800a1bc:	3304      	adds	r3, #4
 800a1be:	3401      	adds	r4, #1
 800a1c0:	3e03      	subs	r6, #3
 800a1c2:	42b4      	cmp	r4, r6
 800a1c4:	bf88      	it	hi
 800a1c6:	2304      	movhi	r3, #4
 800a1c8:	4443      	add	r3, r8
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	f843 2b04 	str.w	r2, [r3], #4
 800a1d0:	429f      	cmp	r7, r3
 800a1d2:	d2fb      	bcs.n	800a1cc <__hexnan+0xcc>
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	b91b      	cbnz	r3, 800a1e0 <__hexnan+0xe0>
 800a1d8:	4547      	cmp	r7, r8
 800a1da:	d128      	bne.n	800a22e <__hexnan+0x12e>
 800a1dc:	2301      	movs	r3, #1
 800a1de:	603b      	str	r3, [r7, #0]
 800a1e0:	2005      	movs	r0, #5
 800a1e2:	b007      	add	sp, #28
 800a1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1e8:	3501      	adds	r5, #1
 800a1ea:	2d08      	cmp	r5, #8
 800a1ec:	f10b 0b01 	add.w	fp, fp, #1
 800a1f0:	dd06      	ble.n	800a200 <__hexnan+0x100>
 800a1f2:	4544      	cmp	r4, r8
 800a1f4:	d9c1      	bls.n	800a17a <__hexnan+0x7a>
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1fc:	2501      	movs	r5, #1
 800a1fe:	3c04      	subs	r4, #4
 800a200:	6822      	ldr	r2, [r4, #0]
 800a202:	f000 000f 	and.w	r0, r0, #15
 800a206:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a20a:	6020      	str	r0, [r4, #0]
 800a20c:	e7b5      	b.n	800a17a <__hexnan+0x7a>
 800a20e:	2508      	movs	r5, #8
 800a210:	e7b3      	b.n	800a17a <__hexnan+0x7a>
 800a212:	9b01      	ldr	r3, [sp, #4]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d0dd      	beq.n	800a1d4 <__hexnan+0xd4>
 800a218:	f1c3 0320 	rsb	r3, r3, #32
 800a21c:	f04f 32ff 	mov.w	r2, #4294967295
 800a220:	40da      	lsrs	r2, r3
 800a222:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a226:	4013      	ands	r3, r2
 800a228:	f846 3c04 	str.w	r3, [r6, #-4]
 800a22c:	e7d2      	b.n	800a1d4 <__hexnan+0xd4>
 800a22e:	3f04      	subs	r7, #4
 800a230:	e7d0      	b.n	800a1d4 <__hexnan+0xd4>
 800a232:	2004      	movs	r0, #4
 800a234:	e7d5      	b.n	800a1e2 <__hexnan+0xe2>
	...

0800a238 <malloc>:
 800a238:	4b02      	ldr	r3, [pc, #8]	@ (800a244 <malloc+0xc>)
 800a23a:	4601      	mov	r1, r0
 800a23c:	6818      	ldr	r0, [r3, #0]
 800a23e:	f000 b825 	b.w	800a28c <_malloc_r>
 800a242:	bf00      	nop
 800a244:	200001a4 	.word	0x200001a4

0800a248 <sbrk_aligned>:
 800a248:	b570      	push	{r4, r5, r6, lr}
 800a24a:	4e0f      	ldr	r6, [pc, #60]	@ (800a288 <sbrk_aligned+0x40>)
 800a24c:	460c      	mov	r4, r1
 800a24e:	6831      	ldr	r1, [r6, #0]
 800a250:	4605      	mov	r5, r0
 800a252:	b911      	cbnz	r1, 800a25a <sbrk_aligned+0x12>
 800a254:	f001 f964 	bl	800b520 <_sbrk_r>
 800a258:	6030      	str	r0, [r6, #0]
 800a25a:	4621      	mov	r1, r4
 800a25c:	4628      	mov	r0, r5
 800a25e:	f001 f95f 	bl	800b520 <_sbrk_r>
 800a262:	1c43      	adds	r3, r0, #1
 800a264:	d103      	bne.n	800a26e <sbrk_aligned+0x26>
 800a266:	f04f 34ff 	mov.w	r4, #4294967295
 800a26a:	4620      	mov	r0, r4
 800a26c:	bd70      	pop	{r4, r5, r6, pc}
 800a26e:	1cc4      	adds	r4, r0, #3
 800a270:	f024 0403 	bic.w	r4, r4, #3
 800a274:	42a0      	cmp	r0, r4
 800a276:	d0f8      	beq.n	800a26a <sbrk_aligned+0x22>
 800a278:	1a21      	subs	r1, r4, r0
 800a27a:	4628      	mov	r0, r5
 800a27c:	f001 f950 	bl	800b520 <_sbrk_r>
 800a280:	3001      	adds	r0, #1
 800a282:	d1f2      	bne.n	800a26a <sbrk_aligned+0x22>
 800a284:	e7ef      	b.n	800a266 <sbrk_aligned+0x1e>
 800a286:	bf00      	nop
 800a288:	20000794 	.word	0x20000794

0800a28c <_malloc_r>:
 800a28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a290:	1ccd      	adds	r5, r1, #3
 800a292:	f025 0503 	bic.w	r5, r5, #3
 800a296:	3508      	adds	r5, #8
 800a298:	2d0c      	cmp	r5, #12
 800a29a:	bf38      	it	cc
 800a29c:	250c      	movcc	r5, #12
 800a29e:	2d00      	cmp	r5, #0
 800a2a0:	4606      	mov	r6, r0
 800a2a2:	db01      	blt.n	800a2a8 <_malloc_r+0x1c>
 800a2a4:	42a9      	cmp	r1, r5
 800a2a6:	d904      	bls.n	800a2b2 <_malloc_r+0x26>
 800a2a8:	230c      	movs	r3, #12
 800a2aa:	6033      	str	r3, [r6, #0]
 800a2ac:	2000      	movs	r0, #0
 800a2ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2b2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a388 <_malloc_r+0xfc>
 800a2b6:	f000 f87b 	bl	800a3b0 <__malloc_lock>
 800a2ba:	f8d8 3000 	ldr.w	r3, [r8]
 800a2be:	461c      	mov	r4, r3
 800a2c0:	bb44      	cbnz	r4, 800a314 <_malloc_r+0x88>
 800a2c2:	4629      	mov	r1, r5
 800a2c4:	4630      	mov	r0, r6
 800a2c6:	f7ff ffbf 	bl	800a248 <sbrk_aligned>
 800a2ca:	1c43      	adds	r3, r0, #1
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	d158      	bne.n	800a382 <_malloc_r+0xf6>
 800a2d0:	f8d8 4000 	ldr.w	r4, [r8]
 800a2d4:	4627      	mov	r7, r4
 800a2d6:	2f00      	cmp	r7, #0
 800a2d8:	d143      	bne.n	800a362 <_malloc_r+0xd6>
 800a2da:	2c00      	cmp	r4, #0
 800a2dc:	d04b      	beq.n	800a376 <_malloc_r+0xea>
 800a2de:	6823      	ldr	r3, [r4, #0]
 800a2e0:	4639      	mov	r1, r7
 800a2e2:	4630      	mov	r0, r6
 800a2e4:	eb04 0903 	add.w	r9, r4, r3
 800a2e8:	f001 f91a 	bl	800b520 <_sbrk_r>
 800a2ec:	4581      	cmp	r9, r0
 800a2ee:	d142      	bne.n	800a376 <_malloc_r+0xea>
 800a2f0:	6821      	ldr	r1, [r4, #0]
 800a2f2:	1a6d      	subs	r5, r5, r1
 800a2f4:	4629      	mov	r1, r5
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	f7ff ffa6 	bl	800a248 <sbrk_aligned>
 800a2fc:	3001      	adds	r0, #1
 800a2fe:	d03a      	beq.n	800a376 <_malloc_r+0xea>
 800a300:	6823      	ldr	r3, [r4, #0]
 800a302:	442b      	add	r3, r5
 800a304:	6023      	str	r3, [r4, #0]
 800a306:	f8d8 3000 	ldr.w	r3, [r8]
 800a30a:	685a      	ldr	r2, [r3, #4]
 800a30c:	bb62      	cbnz	r2, 800a368 <_malloc_r+0xdc>
 800a30e:	f8c8 7000 	str.w	r7, [r8]
 800a312:	e00f      	b.n	800a334 <_malloc_r+0xa8>
 800a314:	6822      	ldr	r2, [r4, #0]
 800a316:	1b52      	subs	r2, r2, r5
 800a318:	d420      	bmi.n	800a35c <_malloc_r+0xd0>
 800a31a:	2a0b      	cmp	r2, #11
 800a31c:	d917      	bls.n	800a34e <_malloc_r+0xc2>
 800a31e:	1961      	adds	r1, r4, r5
 800a320:	42a3      	cmp	r3, r4
 800a322:	6025      	str	r5, [r4, #0]
 800a324:	bf18      	it	ne
 800a326:	6059      	strne	r1, [r3, #4]
 800a328:	6863      	ldr	r3, [r4, #4]
 800a32a:	bf08      	it	eq
 800a32c:	f8c8 1000 	streq.w	r1, [r8]
 800a330:	5162      	str	r2, [r4, r5]
 800a332:	604b      	str	r3, [r1, #4]
 800a334:	4630      	mov	r0, r6
 800a336:	f000 f841 	bl	800a3bc <__malloc_unlock>
 800a33a:	f104 000b 	add.w	r0, r4, #11
 800a33e:	1d23      	adds	r3, r4, #4
 800a340:	f020 0007 	bic.w	r0, r0, #7
 800a344:	1ac2      	subs	r2, r0, r3
 800a346:	bf1c      	itt	ne
 800a348:	1a1b      	subne	r3, r3, r0
 800a34a:	50a3      	strne	r3, [r4, r2]
 800a34c:	e7af      	b.n	800a2ae <_malloc_r+0x22>
 800a34e:	6862      	ldr	r2, [r4, #4]
 800a350:	42a3      	cmp	r3, r4
 800a352:	bf0c      	ite	eq
 800a354:	f8c8 2000 	streq.w	r2, [r8]
 800a358:	605a      	strne	r2, [r3, #4]
 800a35a:	e7eb      	b.n	800a334 <_malloc_r+0xa8>
 800a35c:	4623      	mov	r3, r4
 800a35e:	6864      	ldr	r4, [r4, #4]
 800a360:	e7ae      	b.n	800a2c0 <_malloc_r+0x34>
 800a362:	463c      	mov	r4, r7
 800a364:	687f      	ldr	r7, [r7, #4]
 800a366:	e7b6      	b.n	800a2d6 <_malloc_r+0x4a>
 800a368:	461a      	mov	r2, r3
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	42a3      	cmp	r3, r4
 800a36e:	d1fb      	bne.n	800a368 <_malloc_r+0xdc>
 800a370:	2300      	movs	r3, #0
 800a372:	6053      	str	r3, [r2, #4]
 800a374:	e7de      	b.n	800a334 <_malloc_r+0xa8>
 800a376:	230c      	movs	r3, #12
 800a378:	6033      	str	r3, [r6, #0]
 800a37a:	4630      	mov	r0, r6
 800a37c:	f000 f81e 	bl	800a3bc <__malloc_unlock>
 800a380:	e794      	b.n	800a2ac <_malloc_r+0x20>
 800a382:	6005      	str	r5, [r0, #0]
 800a384:	e7d6      	b.n	800a334 <_malloc_r+0xa8>
 800a386:	bf00      	nop
 800a388:	20000798 	.word	0x20000798

0800a38c <__ascii_mbtowc>:
 800a38c:	b082      	sub	sp, #8
 800a38e:	b901      	cbnz	r1, 800a392 <__ascii_mbtowc+0x6>
 800a390:	a901      	add	r1, sp, #4
 800a392:	b142      	cbz	r2, 800a3a6 <__ascii_mbtowc+0x1a>
 800a394:	b14b      	cbz	r3, 800a3aa <__ascii_mbtowc+0x1e>
 800a396:	7813      	ldrb	r3, [r2, #0]
 800a398:	600b      	str	r3, [r1, #0]
 800a39a:	7812      	ldrb	r2, [r2, #0]
 800a39c:	1e10      	subs	r0, r2, #0
 800a39e:	bf18      	it	ne
 800a3a0:	2001      	movne	r0, #1
 800a3a2:	b002      	add	sp, #8
 800a3a4:	4770      	bx	lr
 800a3a6:	4610      	mov	r0, r2
 800a3a8:	e7fb      	b.n	800a3a2 <__ascii_mbtowc+0x16>
 800a3aa:	f06f 0001 	mvn.w	r0, #1
 800a3ae:	e7f8      	b.n	800a3a2 <__ascii_mbtowc+0x16>

0800a3b0 <__malloc_lock>:
 800a3b0:	4801      	ldr	r0, [pc, #4]	@ (800a3b8 <__malloc_lock+0x8>)
 800a3b2:	f7fe bd26 	b.w	8008e02 <__retarget_lock_acquire_recursive>
 800a3b6:	bf00      	nop
 800a3b8:	20000790 	.word	0x20000790

0800a3bc <__malloc_unlock>:
 800a3bc:	4801      	ldr	r0, [pc, #4]	@ (800a3c4 <__malloc_unlock+0x8>)
 800a3be:	f7fe bd21 	b.w	8008e04 <__retarget_lock_release_recursive>
 800a3c2:	bf00      	nop
 800a3c4:	20000790 	.word	0x20000790

0800a3c8 <_Balloc>:
 800a3c8:	b570      	push	{r4, r5, r6, lr}
 800a3ca:	69c6      	ldr	r6, [r0, #28]
 800a3cc:	4604      	mov	r4, r0
 800a3ce:	460d      	mov	r5, r1
 800a3d0:	b976      	cbnz	r6, 800a3f0 <_Balloc+0x28>
 800a3d2:	2010      	movs	r0, #16
 800a3d4:	f7ff ff30 	bl	800a238 <malloc>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	61e0      	str	r0, [r4, #28]
 800a3dc:	b920      	cbnz	r0, 800a3e8 <_Balloc+0x20>
 800a3de:	4b18      	ldr	r3, [pc, #96]	@ (800a440 <_Balloc+0x78>)
 800a3e0:	4818      	ldr	r0, [pc, #96]	@ (800a444 <_Balloc+0x7c>)
 800a3e2:	216b      	movs	r1, #107	@ 0x6b
 800a3e4:	f7fe fd2e 	bl	8008e44 <__assert_func>
 800a3e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3ec:	6006      	str	r6, [r0, #0]
 800a3ee:	60c6      	str	r6, [r0, #12]
 800a3f0:	69e6      	ldr	r6, [r4, #28]
 800a3f2:	68f3      	ldr	r3, [r6, #12]
 800a3f4:	b183      	cbz	r3, 800a418 <_Balloc+0x50>
 800a3f6:	69e3      	ldr	r3, [r4, #28]
 800a3f8:	68db      	ldr	r3, [r3, #12]
 800a3fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a3fe:	b9b8      	cbnz	r0, 800a430 <_Balloc+0x68>
 800a400:	2101      	movs	r1, #1
 800a402:	fa01 f605 	lsl.w	r6, r1, r5
 800a406:	1d72      	adds	r2, r6, #5
 800a408:	0092      	lsls	r2, r2, #2
 800a40a:	4620      	mov	r0, r4
 800a40c:	f001 f89f 	bl	800b54e <_calloc_r>
 800a410:	b160      	cbz	r0, 800a42c <_Balloc+0x64>
 800a412:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a416:	e00e      	b.n	800a436 <_Balloc+0x6e>
 800a418:	2221      	movs	r2, #33	@ 0x21
 800a41a:	2104      	movs	r1, #4
 800a41c:	4620      	mov	r0, r4
 800a41e:	f001 f896 	bl	800b54e <_calloc_r>
 800a422:	69e3      	ldr	r3, [r4, #28]
 800a424:	60f0      	str	r0, [r6, #12]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d1e4      	bne.n	800a3f6 <_Balloc+0x2e>
 800a42c:	2000      	movs	r0, #0
 800a42e:	bd70      	pop	{r4, r5, r6, pc}
 800a430:	6802      	ldr	r2, [r0, #0]
 800a432:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a436:	2300      	movs	r3, #0
 800a438:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a43c:	e7f7      	b.n	800a42e <_Balloc+0x66>
 800a43e:	bf00      	nop
 800a440:	0800ba8f 	.word	0x0800ba8f
 800a444:	0800bc1a 	.word	0x0800bc1a

0800a448 <_Bfree>:
 800a448:	b570      	push	{r4, r5, r6, lr}
 800a44a:	69c6      	ldr	r6, [r0, #28]
 800a44c:	4605      	mov	r5, r0
 800a44e:	460c      	mov	r4, r1
 800a450:	b976      	cbnz	r6, 800a470 <_Bfree+0x28>
 800a452:	2010      	movs	r0, #16
 800a454:	f7ff fef0 	bl	800a238 <malloc>
 800a458:	4602      	mov	r2, r0
 800a45a:	61e8      	str	r0, [r5, #28]
 800a45c:	b920      	cbnz	r0, 800a468 <_Bfree+0x20>
 800a45e:	4b09      	ldr	r3, [pc, #36]	@ (800a484 <_Bfree+0x3c>)
 800a460:	4809      	ldr	r0, [pc, #36]	@ (800a488 <_Bfree+0x40>)
 800a462:	218f      	movs	r1, #143	@ 0x8f
 800a464:	f7fe fcee 	bl	8008e44 <__assert_func>
 800a468:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a46c:	6006      	str	r6, [r0, #0]
 800a46e:	60c6      	str	r6, [r0, #12]
 800a470:	b13c      	cbz	r4, 800a482 <_Bfree+0x3a>
 800a472:	69eb      	ldr	r3, [r5, #28]
 800a474:	6862      	ldr	r2, [r4, #4]
 800a476:	68db      	ldr	r3, [r3, #12]
 800a478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a47c:	6021      	str	r1, [r4, #0]
 800a47e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a482:	bd70      	pop	{r4, r5, r6, pc}
 800a484:	0800ba8f 	.word	0x0800ba8f
 800a488:	0800bc1a 	.word	0x0800bc1a

0800a48c <__multadd>:
 800a48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a490:	690d      	ldr	r5, [r1, #16]
 800a492:	4607      	mov	r7, r0
 800a494:	460c      	mov	r4, r1
 800a496:	461e      	mov	r6, r3
 800a498:	f101 0c14 	add.w	ip, r1, #20
 800a49c:	2000      	movs	r0, #0
 800a49e:	f8dc 3000 	ldr.w	r3, [ip]
 800a4a2:	b299      	uxth	r1, r3
 800a4a4:	fb02 6101 	mla	r1, r2, r1, r6
 800a4a8:	0c1e      	lsrs	r6, r3, #16
 800a4aa:	0c0b      	lsrs	r3, r1, #16
 800a4ac:	fb02 3306 	mla	r3, r2, r6, r3
 800a4b0:	b289      	uxth	r1, r1
 800a4b2:	3001      	adds	r0, #1
 800a4b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4b8:	4285      	cmp	r5, r0
 800a4ba:	f84c 1b04 	str.w	r1, [ip], #4
 800a4be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4c2:	dcec      	bgt.n	800a49e <__multadd+0x12>
 800a4c4:	b30e      	cbz	r6, 800a50a <__multadd+0x7e>
 800a4c6:	68a3      	ldr	r3, [r4, #8]
 800a4c8:	42ab      	cmp	r3, r5
 800a4ca:	dc19      	bgt.n	800a500 <__multadd+0x74>
 800a4cc:	6861      	ldr	r1, [r4, #4]
 800a4ce:	4638      	mov	r0, r7
 800a4d0:	3101      	adds	r1, #1
 800a4d2:	f7ff ff79 	bl	800a3c8 <_Balloc>
 800a4d6:	4680      	mov	r8, r0
 800a4d8:	b928      	cbnz	r0, 800a4e6 <__multadd+0x5a>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a510 <__multadd+0x84>)
 800a4de:	480d      	ldr	r0, [pc, #52]	@ (800a514 <__multadd+0x88>)
 800a4e0:	21ba      	movs	r1, #186	@ 0xba
 800a4e2:	f7fe fcaf 	bl	8008e44 <__assert_func>
 800a4e6:	6922      	ldr	r2, [r4, #16]
 800a4e8:	3202      	adds	r2, #2
 800a4ea:	f104 010c 	add.w	r1, r4, #12
 800a4ee:	0092      	lsls	r2, r2, #2
 800a4f0:	300c      	adds	r0, #12
 800a4f2:	f7fe fc88 	bl	8008e06 <memcpy>
 800a4f6:	4621      	mov	r1, r4
 800a4f8:	4638      	mov	r0, r7
 800a4fa:	f7ff ffa5 	bl	800a448 <_Bfree>
 800a4fe:	4644      	mov	r4, r8
 800a500:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a504:	3501      	adds	r5, #1
 800a506:	615e      	str	r6, [r3, #20]
 800a508:	6125      	str	r5, [r4, #16]
 800a50a:	4620      	mov	r0, r4
 800a50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a510:	0800bba9 	.word	0x0800bba9
 800a514:	0800bc1a 	.word	0x0800bc1a

0800a518 <__s2b>:
 800a518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a51c:	460c      	mov	r4, r1
 800a51e:	4615      	mov	r5, r2
 800a520:	461f      	mov	r7, r3
 800a522:	2209      	movs	r2, #9
 800a524:	3308      	adds	r3, #8
 800a526:	4606      	mov	r6, r0
 800a528:	fb93 f3f2 	sdiv	r3, r3, r2
 800a52c:	2100      	movs	r1, #0
 800a52e:	2201      	movs	r2, #1
 800a530:	429a      	cmp	r2, r3
 800a532:	db09      	blt.n	800a548 <__s2b+0x30>
 800a534:	4630      	mov	r0, r6
 800a536:	f7ff ff47 	bl	800a3c8 <_Balloc>
 800a53a:	b940      	cbnz	r0, 800a54e <__s2b+0x36>
 800a53c:	4602      	mov	r2, r0
 800a53e:	4b19      	ldr	r3, [pc, #100]	@ (800a5a4 <__s2b+0x8c>)
 800a540:	4819      	ldr	r0, [pc, #100]	@ (800a5a8 <__s2b+0x90>)
 800a542:	21d3      	movs	r1, #211	@ 0xd3
 800a544:	f7fe fc7e 	bl	8008e44 <__assert_func>
 800a548:	0052      	lsls	r2, r2, #1
 800a54a:	3101      	adds	r1, #1
 800a54c:	e7f0      	b.n	800a530 <__s2b+0x18>
 800a54e:	9b08      	ldr	r3, [sp, #32]
 800a550:	6143      	str	r3, [r0, #20]
 800a552:	2d09      	cmp	r5, #9
 800a554:	f04f 0301 	mov.w	r3, #1
 800a558:	6103      	str	r3, [r0, #16]
 800a55a:	dd16      	ble.n	800a58a <__s2b+0x72>
 800a55c:	f104 0909 	add.w	r9, r4, #9
 800a560:	46c8      	mov	r8, r9
 800a562:	442c      	add	r4, r5
 800a564:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a568:	4601      	mov	r1, r0
 800a56a:	3b30      	subs	r3, #48	@ 0x30
 800a56c:	220a      	movs	r2, #10
 800a56e:	4630      	mov	r0, r6
 800a570:	f7ff ff8c 	bl	800a48c <__multadd>
 800a574:	45a0      	cmp	r8, r4
 800a576:	d1f5      	bne.n	800a564 <__s2b+0x4c>
 800a578:	f1a5 0408 	sub.w	r4, r5, #8
 800a57c:	444c      	add	r4, r9
 800a57e:	1b2d      	subs	r5, r5, r4
 800a580:	1963      	adds	r3, r4, r5
 800a582:	42bb      	cmp	r3, r7
 800a584:	db04      	blt.n	800a590 <__s2b+0x78>
 800a586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a58a:	340a      	adds	r4, #10
 800a58c:	2509      	movs	r5, #9
 800a58e:	e7f6      	b.n	800a57e <__s2b+0x66>
 800a590:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a594:	4601      	mov	r1, r0
 800a596:	3b30      	subs	r3, #48	@ 0x30
 800a598:	220a      	movs	r2, #10
 800a59a:	4630      	mov	r0, r6
 800a59c:	f7ff ff76 	bl	800a48c <__multadd>
 800a5a0:	e7ee      	b.n	800a580 <__s2b+0x68>
 800a5a2:	bf00      	nop
 800a5a4:	0800bba9 	.word	0x0800bba9
 800a5a8:	0800bc1a 	.word	0x0800bc1a

0800a5ac <__hi0bits>:
 800a5ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	bf36      	itet	cc
 800a5b4:	0403      	lslcc	r3, r0, #16
 800a5b6:	2000      	movcs	r0, #0
 800a5b8:	2010      	movcc	r0, #16
 800a5ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a5be:	bf3c      	itt	cc
 800a5c0:	021b      	lslcc	r3, r3, #8
 800a5c2:	3008      	addcc	r0, #8
 800a5c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5c8:	bf3c      	itt	cc
 800a5ca:	011b      	lslcc	r3, r3, #4
 800a5cc:	3004      	addcc	r0, #4
 800a5ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5d2:	bf3c      	itt	cc
 800a5d4:	009b      	lslcc	r3, r3, #2
 800a5d6:	3002      	addcc	r0, #2
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	db05      	blt.n	800a5e8 <__hi0bits+0x3c>
 800a5dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a5e0:	f100 0001 	add.w	r0, r0, #1
 800a5e4:	bf08      	it	eq
 800a5e6:	2020      	moveq	r0, #32
 800a5e8:	4770      	bx	lr

0800a5ea <__lo0bits>:
 800a5ea:	6803      	ldr	r3, [r0, #0]
 800a5ec:	4602      	mov	r2, r0
 800a5ee:	f013 0007 	ands.w	r0, r3, #7
 800a5f2:	d00b      	beq.n	800a60c <__lo0bits+0x22>
 800a5f4:	07d9      	lsls	r1, r3, #31
 800a5f6:	d421      	bmi.n	800a63c <__lo0bits+0x52>
 800a5f8:	0798      	lsls	r0, r3, #30
 800a5fa:	bf49      	itett	mi
 800a5fc:	085b      	lsrmi	r3, r3, #1
 800a5fe:	089b      	lsrpl	r3, r3, #2
 800a600:	2001      	movmi	r0, #1
 800a602:	6013      	strmi	r3, [r2, #0]
 800a604:	bf5c      	itt	pl
 800a606:	6013      	strpl	r3, [r2, #0]
 800a608:	2002      	movpl	r0, #2
 800a60a:	4770      	bx	lr
 800a60c:	b299      	uxth	r1, r3
 800a60e:	b909      	cbnz	r1, 800a614 <__lo0bits+0x2a>
 800a610:	0c1b      	lsrs	r3, r3, #16
 800a612:	2010      	movs	r0, #16
 800a614:	b2d9      	uxtb	r1, r3
 800a616:	b909      	cbnz	r1, 800a61c <__lo0bits+0x32>
 800a618:	3008      	adds	r0, #8
 800a61a:	0a1b      	lsrs	r3, r3, #8
 800a61c:	0719      	lsls	r1, r3, #28
 800a61e:	bf04      	itt	eq
 800a620:	091b      	lsreq	r3, r3, #4
 800a622:	3004      	addeq	r0, #4
 800a624:	0799      	lsls	r1, r3, #30
 800a626:	bf04      	itt	eq
 800a628:	089b      	lsreq	r3, r3, #2
 800a62a:	3002      	addeq	r0, #2
 800a62c:	07d9      	lsls	r1, r3, #31
 800a62e:	d403      	bmi.n	800a638 <__lo0bits+0x4e>
 800a630:	085b      	lsrs	r3, r3, #1
 800a632:	f100 0001 	add.w	r0, r0, #1
 800a636:	d003      	beq.n	800a640 <__lo0bits+0x56>
 800a638:	6013      	str	r3, [r2, #0]
 800a63a:	4770      	bx	lr
 800a63c:	2000      	movs	r0, #0
 800a63e:	4770      	bx	lr
 800a640:	2020      	movs	r0, #32
 800a642:	4770      	bx	lr

0800a644 <__i2b>:
 800a644:	b510      	push	{r4, lr}
 800a646:	460c      	mov	r4, r1
 800a648:	2101      	movs	r1, #1
 800a64a:	f7ff febd 	bl	800a3c8 <_Balloc>
 800a64e:	4602      	mov	r2, r0
 800a650:	b928      	cbnz	r0, 800a65e <__i2b+0x1a>
 800a652:	4b05      	ldr	r3, [pc, #20]	@ (800a668 <__i2b+0x24>)
 800a654:	4805      	ldr	r0, [pc, #20]	@ (800a66c <__i2b+0x28>)
 800a656:	f240 1145 	movw	r1, #325	@ 0x145
 800a65a:	f7fe fbf3 	bl	8008e44 <__assert_func>
 800a65e:	2301      	movs	r3, #1
 800a660:	6144      	str	r4, [r0, #20]
 800a662:	6103      	str	r3, [r0, #16]
 800a664:	bd10      	pop	{r4, pc}
 800a666:	bf00      	nop
 800a668:	0800bba9 	.word	0x0800bba9
 800a66c:	0800bc1a 	.word	0x0800bc1a

0800a670 <__multiply>:
 800a670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a674:	4617      	mov	r7, r2
 800a676:	690a      	ldr	r2, [r1, #16]
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	429a      	cmp	r2, r3
 800a67c:	bfa8      	it	ge
 800a67e:	463b      	movge	r3, r7
 800a680:	4689      	mov	r9, r1
 800a682:	bfa4      	itt	ge
 800a684:	460f      	movge	r7, r1
 800a686:	4699      	movge	r9, r3
 800a688:	693d      	ldr	r5, [r7, #16]
 800a68a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	6879      	ldr	r1, [r7, #4]
 800a692:	eb05 060a 	add.w	r6, r5, sl
 800a696:	42b3      	cmp	r3, r6
 800a698:	b085      	sub	sp, #20
 800a69a:	bfb8      	it	lt
 800a69c:	3101      	addlt	r1, #1
 800a69e:	f7ff fe93 	bl	800a3c8 <_Balloc>
 800a6a2:	b930      	cbnz	r0, 800a6b2 <__multiply+0x42>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	4b41      	ldr	r3, [pc, #260]	@ (800a7ac <__multiply+0x13c>)
 800a6a8:	4841      	ldr	r0, [pc, #260]	@ (800a7b0 <__multiply+0x140>)
 800a6aa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a6ae:	f7fe fbc9 	bl	8008e44 <__assert_func>
 800a6b2:	f100 0414 	add.w	r4, r0, #20
 800a6b6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a6ba:	4623      	mov	r3, r4
 800a6bc:	2200      	movs	r2, #0
 800a6be:	4573      	cmp	r3, lr
 800a6c0:	d320      	bcc.n	800a704 <__multiply+0x94>
 800a6c2:	f107 0814 	add.w	r8, r7, #20
 800a6c6:	f109 0114 	add.w	r1, r9, #20
 800a6ca:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a6ce:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a6d2:	9302      	str	r3, [sp, #8]
 800a6d4:	1beb      	subs	r3, r5, r7
 800a6d6:	3b15      	subs	r3, #21
 800a6d8:	f023 0303 	bic.w	r3, r3, #3
 800a6dc:	3304      	adds	r3, #4
 800a6de:	3715      	adds	r7, #21
 800a6e0:	42bd      	cmp	r5, r7
 800a6e2:	bf38      	it	cc
 800a6e4:	2304      	movcc	r3, #4
 800a6e6:	9301      	str	r3, [sp, #4]
 800a6e8:	9b02      	ldr	r3, [sp, #8]
 800a6ea:	9103      	str	r1, [sp, #12]
 800a6ec:	428b      	cmp	r3, r1
 800a6ee:	d80c      	bhi.n	800a70a <__multiply+0x9a>
 800a6f0:	2e00      	cmp	r6, #0
 800a6f2:	dd03      	ble.n	800a6fc <__multiply+0x8c>
 800a6f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d055      	beq.n	800a7a8 <__multiply+0x138>
 800a6fc:	6106      	str	r6, [r0, #16]
 800a6fe:	b005      	add	sp, #20
 800a700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a704:	f843 2b04 	str.w	r2, [r3], #4
 800a708:	e7d9      	b.n	800a6be <__multiply+0x4e>
 800a70a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a70e:	f1ba 0f00 	cmp.w	sl, #0
 800a712:	d01f      	beq.n	800a754 <__multiply+0xe4>
 800a714:	46c4      	mov	ip, r8
 800a716:	46a1      	mov	r9, r4
 800a718:	2700      	movs	r7, #0
 800a71a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a71e:	f8d9 3000 	ldr.w	r3, [r9]
 800a722:	fa1f fb82 	uxth.w	fp, r2
 800a726:	b29b      	uxth	r3, r3
 800a728:	fb0a 330b 	mla	r3, sl, fp, r3
 800a72c:	443b      	add	r3, r7
 800a72e:	f8d9 7000 	ldr.w	r7, [r9]
 800a732:	0c12      	lsrs	r2, r2, #16
 800a734:	0c3f      	lsrs	r7, r7, #16
 800a736:	fb0a 7202 	mla	r2, sl, r2, r7
 800a73a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a73e:	b29b      	uxth	r3, r3
 800a740:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a744:	4565      	cmp	r5, ip
 800a746:	f849 3b04 	str.w	r3, [r9], #4
 800a74a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a74e:	d8e4      	bhi.n	800a71a <__multiply+0xaa>
 800a750:	9b01      	ldr	r3, [sp, #4]
 800a752:	50e7      	str	r7, [r4, r3]
 800a754:	9b03      	ldr	r3, [sp, #12]
 800a756:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a75a:	3104      	adds	r1, #4
 800a75c:	f1b9 0f00 	cmp.w	r9, #0
 800a760:	d020      	beq.n	800a7a4 <__multiply+0x134>
 800a762:	6823      	ldr	r3, [r4, #0]
 800a764:	4647      	mov	r7, r8
 800a766:	46a4      	mov	ip, r4
 800a768:	f04f 0a00 	mov.w	sl, #0
 800a76c:	f8b7 b000 	ldrh.w	fp, [r7]
 800a770:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a774:	fb09 220b 	mla	r2, r9, fp, r2
 800a778:	4452      	add	r2, sl
 800a77a:	b29b      	uxth	r3, r3
 800a77c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a780:	f84c 3b04 	str.w	r3, [ip], #4
 800a784:	f857 3b04 	ldr.w	r3, [r7], #4
 800a788:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a78c:	f8bc 3000 	ldrh.w	r3, [ip]
 800a790:	fb09 330a 	mla	r3, r9, sl, r3
 800a794:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a798:	42bd      	cmp	r5, r7
 800a79a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a79e:	d8e5      	bhi.n	800a76c <__multiply+0xfc>
 800a7a0:	9a01      	ldr	r2, [sp, #4]
 800a7a2:	50a3      	str	r3, [r4, r2]
 800a7a4:	3404      	adds	r4, #4
 800a7a6:	e79f      	b.n	800a6e8 <__multiply+0x78>
 800a7a8:	3e01      	subs	r6, #1
 800a7aa:	e7a1      	b.n	800a6f0 <__multiply+0x80>
 800a7ac:	0800bba9 	.word	0x0800bba9
 800a7b0:	0800bc1a 	.word	0x0800bc1a

0800a7b4 <__pow5mult>:
 800a7b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7b8:	4615      	mov	r5, r2
 800a7ba:	f012 0203 	ands.w	r2, r2, #3
 800a7be:	4607      	mov	r7, r0
 800a7c0:	460e      	mov	r6, r1
 800a7c2:	d007      	beq.n	800a7d4 <__pow5mult+0x20>
 800a7c4:	4c25      	ldr	r4, [pc, #148]	@ (800a85c <__pow5mult+0xa8>)
 800a7c6:	3a01      	subs	r2, #1
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7ce:	f7ff fe5d 	bl	800a48c <__multadd>
 800a7d2:	4606      	mov	r6, r0
 800a7d4:	10ad      	asrs	r5, r5, #2
 800a7d6:	d03d      	beq.n	800a854 <__pow5mult+0xa0>
 800a7d8:	69fc      	ldr	r4, [r7, #28]
 800a7da:	b97c      	cbnz	r4, 800a7fc <__pow5mult+0x48>
 800a7dc:	2010      	movs	r0, #16
 800a7de:	f7ff fd2b 	bl	800a238 <malloc>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	61f8      	str	r0, [r7, #28]
 800a7e6:	b928      	cbnz	r0, 800a7f4 <__pow5mult+0x40>
 800a7e8:	4b1d      	ldr	r3, [pc, #116]	@ (800a860 <__pow5mult+0xac>)
 800a7ea:	481e      	ldr	r0, [pc, #120]	@ (800a864 <__pow5mult+0xb0>)
 800a7ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a7f0:	f7fe fb28 	bl	8008e44 <__assert_func>
 800a7f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a7f8:	6004      	str	r4, [r0, #0]
 800a7fa:	60c4      	str	r4, [r0, #12]
 800a7fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a800:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a804:	b94c      	cbnz	r4, 800a81a <__pow5mult+0x66>
 800a806:	f240 2171 	movw	r1, #625	@ 0x271
 800a80a:	4638      	mov	r0, r7
 800a80c:	f7ff ff1a 	bl	800a644 <__i2b>
 800a810:	2300      	movs	r3, #0
 800a812:	f8c8 0008 	str.w	r0, [r8, #8]
 800a816:	4604      	mov	r4, r0
 800a818:	6003      	str	r3, [r0, #0]
 800a81a:	f04f 0900 	mov.w	r9, #0
 800a81e:	07eb      	lsls	r3, r5, #31
 800a820:	d50a      	bpl.n	800a838 <__pow5mult+0x84>
 800a822:	4631      	mov	r1, r6
 800a824:	4622      	mov	r2, r4
 800a826:	4638      	mov	r0, r7
 800a828:	f7ff ff22 	bl	800a670 <__multiply>
 800a82c:	4631      	mov	r1, r6
 800a82e:	4680      	mov	r8, r0
 800a830:	4638      	mov	r0, r7
 800a832:	f7ff fe09 	bl	800a448 <_Bfree>
 800a836:	4646      	mov	r6, r8
 800a838:	106d      	asrs	r5, r5, #1
 800a83a:	d00b      	beq.n	800a854 <__pow5mult+0xa0>
 800a83c:	6820      	ldr	r0, [r4, #0]
 800a83e:	b938      	cbnz	r0, 800a850 <__pow5mult+0x9c>
 800a840:	4622      	mov	r2, r4
 800a842:	4621      	mov	r1, r4
 800a844:	4638      	mov	r0, r7
 800a846:	f7ff ff13 	bl	800a670 <__multiply>
 800a84a:	6020      	str	r0, [r4, #0]
 800a84c:	f8c0 9000 	str.w	r9, [r0]
 800a850:	4604      	mov	r4, r0
 800a852:	e7e4      	b.n	800a81e <__pow5mult+0x6a>
 800a854:	4630      	mov	r0, r6
 800a856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a85a:	bf00      	nop
 800a85c:	0800bddc 	.word	0x0800bddc
 800a860:	0800ba8f 	.word	0x0800ba8f
 800a864:	0800bc1a 	.word	0x0800bc1a

0800a868 <__lshift>:
 800a868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a86c:	460c      	mov	r4, r1
 800a86e:	6849      	ldr	r1, [r1, #4]
 800a870:	6923      	ldr	r3, [r4, #16]
 800a872:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a876:	68a3      	ldr	r3, [r4, #8]
 800a878:	4607      	mov	r7, r0
 800a87a:	4691      	mov	r9, r2
 800a87c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a880:	f108 0601 	add.w	r6, r8, #1
 800a884:	42b3      	cmp	r3, r6
 800a886:	db0b      	blt.n	800a8a0 <__lshift+0x38>
 800a888:	4638      	mov	r0, r7
 800a88a:	f7ff fd9d 	bl	800a3c8 <_Balloc>
 800a88e:	4605      	mov	r5, r0
 800a890:	b948      	cbnz	r0, 800a8a6 <__lshift+0x3e>
 800a892:	4602      	mov	r2, r0
 800a894:	4b28      	ldr	r3, [pc, #160]	@ (800a938 <__lshift+0xd0>)
 800a896:	4829      	ldr	r0, [pc, #164]	@ (800a93c <__lshift+0xd4>)
 800a898:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a89c:	f7fe fad2 	bl	8008e44 <__assert_func>
 800a8a0:	3101      	adds	r1, #1
 800a8a2:	005b      	lsls	r3, r3, #1
 800a8a4:	e7ee      	b.n	800a884 <__lshift+0x1c>
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	f100 0114 	add.w	r1, r0, #20
 800a8ac:	f100 0210 	add.w	r2, r0, #16
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	4553      	cmp	r3, sl
 800a8b4:	db33      	blt.n	800a91e <__lshift+0xb6>
 800a8b6:	6920      	ldr	r0, [r4, #16]
 800a8b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8bc:	f104 0314 	add.w	r3, r4, #20
 800a8c0:	f019 091f 	ands.w	r9, r9, #31
 800a8c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a8cc:	d02b      	beq.n	800a926 <__lshift+0xbe>
 800a8ce:	f1c9 0e20 	rsb	lr, r9, #32
 800a8d2:	468a      	mov	sl, r1
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	6818      	ldr	r0, [r3, #0]
 800a8d8:	fa00 f009 	lsl.w	r0, r0, r9
 800a8dc:	4310      	orrs	r0, r2
 800a8de:	f84a 0b04 	str.w	r0, [sl], #4
 800a8e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8e6:	459c      	cmp	ip, r3
 800a8e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a8ec:	d8f3      	bhi.n	800a8d6 <__lshift+0x6e>
 800a8ee:	ebac 0304 	sub.w	r3, ip, r4
 800a8f2:	3b15      	subs	r3, #21
 800a8f4:	f023 0303 	bic.w	r3, r3, #3
 800a8f8:	3304      	adds	r3, #4
 800a8fa:	f104 0015 	add.w	r0, r4, #21
 800a8fe:	4560      	cmp	r0, ip
 800a900:	bf88      	it	hi
 800a902:	2304      	movhi	r3, #4
 800a904:	50ca      	str	r2, [r1, r3]
 800a906:	b10a      	cbz	r2, 800a90c <__lshift+0xa4>
 800a908:	f108 0602 	add.w	r6, r8, #2
 800a90c:	3e01      	subs	r6, #1
 800a90e:	4638      	mov	r0, r7
 800a910:	612e      	str	r6, [r5, #16]
 800a912:	4621      	mov	r1, r4
 800a914:	f7ff fd98 	bl	800a448 <_Bfree>
 800a918:	4628      	mov	r0, r5
 800a91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a91e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a922:	3301      	adds	r3, #1
 800a924:	e7c5      	b.n	800a8b2 <__lshift+0x4a>
 800a926:	3904      	subs	r1, #4
 800a928:	f853 2b04 	ldr.w	r2, [r3], #4
 800a92c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a930:	459c      	cmp	ip, r3
 800a932:	d8f9      	bhi.n	800a928 <__lshift+0xc0>
 800a934:	e7ea      	b.n	800a90c <__lshift+0xa4>
 800a936:	bf00      	nop
 800a938:	0800bba9 	.word	0x0800bba9
 800a93c:	0800bc1a 	.word	0x0800bc1a

0800a940 <__mcmp>:
 800a940:	690a      	ldr	r2, [r1, #16]
 800a942:	4603      	mov	r3, r0
 800a944:	6900      	ldr	r0, [r0, #16]
 800a946:	1a80      	subs	r0, r0, r2
 800a948:	b530      	push	{r4, r5, lr}
 800a94a:	d10e      	bne.n	800a96a <__mcmp+0x2a>
 800a94c:	3314      	adds	r3, #20
 800a94e:	3114      	adds	r1, #20
 800a950:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a954:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a958:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a95c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a960:	4295      	cmp	r5, r2
 800a962:	d003      	beq.n	800a96c <__mcmp+0x2c>
 800a964:	d205      	bcs.n	800a972 <__mcmp+0x32>
 800a966:	f04f 30ff 	mov.w	r0, #4294967295
 800a96a:	bd30      	pop	{r4, r5, pc}
 800a96c:	42a3      	cmp	r3, r4
 800a96e:	d3f3      	bcc.n	800a958 <__mcmp+0x18>
 800a970:	e7fb      	b.n	800a96a <__mcmp+0x2a>
 800a972:	2001      	movs	r0, #1
 800a974:	e7f9      	b.n	800a96a <__mcmp+0x2a>
	...

0800a978 <__mdiff>:
 800a978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a97c:	4689      	mov	r9, r1
 800a97e:	4606      	mov	r6, r0
 800a980:	4611      	mov	r1, r2
 800a982:	4648      	mov	r0, r9
 800a984:	4614      	mov	r4, r2
 800a986:	f7ff ffdb 	bl	800a940 <__mcmp>
 800a98a:	1e05      	subs	r5, r0, #0
 800a98c:	d112      	bne.n	800a9b4 <__mdiff+0x3c>
 800a98e:	4629      	mov	r1, r5
 800a990:	4630      	mov	r0, r6
 800a992:	f7ff fd19 	bl	800a3c8 <_Balloc>
 800a996:	4602      	mov	r2, r0
 800a998:	b928      	cbnz	r0, 800a9a6 <__mdiff+0x2e>
 800a99a:	4b3f      	ldr	r3, [pc, #252]	@ (800aa98 <__mdiff+0x120>)
 800a99c:	f240 2137 	movw	r1, #567	@ 0x237
 800a9a0:	483e      	ldr	r0, [pc, #248]	@ (800aa9c <__mdiff+0x124>)
 800a9a2:	f7fe fa4f 	bl	8008e44 <__assert_func>
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9ac:	4610      	mov	r0, r2
 800a9ae:	b003      	add	sp, #12
 800a9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9b4:	bfbc      	itt	lt
 800a9b6:	464b      	movlt	r3, r9
 800a9b8:	46a1      	movlt	r9, r4
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a9c0:	bfba      	itte	lt
 800a9c2:	461c      	movlt	r4, r3
 800a9c4:	2501      	movlt	r5, #1
 800a9c6:	2500      	movge	r5, #0
 800a9c8:	f7ff fcfe 	bl	800a3c8 <_Balloc>
 800a9cc:	4602      	mov	r2, r0
 800a9ce:	b918      	cbnz	r0, 800a9d8 <__mdiff+0x60>
 800a9d0:	4b31      	ldr	r3, [pc, #196]	@ (800aa98 <__mdiff+0x120>)
 800a9d2:	f240 2145 	movw	r1, #581	@ 0x245
 800a9d6:	e7e3      	b.n	800a9a0 <__mdiff+0x28>
 800a9d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a9dc:	6926      	ldr	r6, [r4, #16]
 800a9de:	60c5      	str	r5, [r0, #12]
 800a9e0:	f109 0310 	add.w	r3, r9, #16
 800a9e4:	f109 0514 	add.w	r5, r9, #20
 800a9e8:	f104 0e14 	add.w	lr, r4, #20
 800a9ec:	f100 0b14 	add.w	fp, r0, #20
 800a9f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a9f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a9f8:	9301      	str	r3, [sp, #4]
 800a9fa:	46d9      	mov	r9, fp
 800a9fc:	f04f 0c00 	mov.w	ip, #0
 800aa00:	9b01      	ldr	r3, [sp, #4]
 800aa02:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aa06:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aa0a:	9301      	str	r3, [sp, #4]
 800aa0c:	fa1f f38a 	uxth.w	r3, sl
 800aa10:	4619      	mov	r1, r3
 800aa12:	b283      	uxth	r3, r0
 800aa14:	1acb      	subs	r3, r1, r3
 800aa16:	0c00      	lsrs	r0, r0, #16
 800aa18:	4463      	add	r3, ip
 800aa1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aa1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aa22:	b29b      	uxth	r3, r3
 800aa24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aa28:	4576      	cmp	r6, lr
 800aa2a:	f849 3b04 	str.w	r3, [r9], #4
 800aa2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa32:	d8e5      	bhi.n	800aa00 <__mdiff+0x88>
 800aa34:	1b33      	subs	r3, r6, r4
 800aa36:	3b15      	subs	r3, #21
 800aa38:	f023 0303 	bic.w	r3, r3, #3
 800aa3c:	3415      	adds	r4, #21
 800aa3e:	3304      	adds	r3, #4
 800aa40:	42a6      	cmp	r6, r4
 800aa42:	bf38      	it	cc
 800aa44:	2304      	movcc	r3, #4
 800aa46:	441d      	add	r5, r3
 800aa48:	445b      	add	r3, fp
 800aa4a:	461e      	mov	r6, r3
 800aa4c:	462c      	mov	r4, r5
 800aa4e:	4544      	cmp	r4, r8
 800aa50:	d30e      	bcc.n	800aa70 <__mdiff+0xf8>
 800aa52:	f108 0103 	add.w	r1, r8, #3
 800aa56:	1b49      	subs	r1, r1, r5
 800aa58:	f021 0103 	bic.w	r1, r1, #3
 800aa5c:	3d03      	subs	r5, #3
 800aa5e:	45a8      	cmp	r8, r5
 800aa60:	bf38      	it	cc
 800aa62:	2100      	movcc	r1, #0
 800aa64:	440b      	add	r3, r1
 800aa66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa6a:	b191      	cbz	r1, 800aa92 <__mdiff+0x11a>
 800aa6c:	6117      	str	r7, [r2, #16]
 800aa6e:	e79d      	b.n	800a9ac <__mdiff+0x34>
 800aa70:	f854 1b04 	ldr.w	r1, [r4], #4
 800aa74:	46e6      	mov	lr, ip
 800aa76:	0c08      	lsrs	r0, r1, #16
 800aa78:	fa1c fc81 	uxtah	ip, ip, r1
 800aa7c:	4471      	add	r1, lr
 800aa7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aa82:	b289      	uxth	r1, r1
 800aa84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aa88:	f846 1b04 	str.w	r1, [r6], #4
 800aa8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa90:	e7dd      	b.n	800aa4e <__mdiff+0xd6>
 800aa92:	3f01      	subs	r7, #1
 800aa94:	e7e7      	b.n	800aa66 <__mdiff+0xee>
 800aa96:	bf00      	nop
 800aa98:	0800bba9 	.word	0x0800bba9
 800aa9c:	0800bc1a 	.word	0x0800bc1a

0800aaa0 <__ulp>:
 800aaa0:	b082      	sub	sp, #8
 800aaa2:	ed8d 0b00 	vstr	d0, [sp]
 800aaa6:	9a01      	ldr	r2, [sp, #4]
 800aaa8:	4b0f      	ldr	r3, [pc, #60]	@ (800aae8 <__ulp+0x48>)
 800aaaa:	4013      	ands	r3, r2
 800aaac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	dc08      	bgt.n	800aac6 <__ulp+0x26>
 800aab4:	425b      	negs	r3, r3
 800aab6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800aaba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aabe:	da04      	bge.n	800aaca <__ulp+0x2a>
 800aac0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800aac4:	4113      	asrs	r3, r2
 800aac6:	2200      	movs	r2, #0
 800aac8:	e008      	b.n	800aadc <__ulp+0x3c>
 800aaca:	f1a2 0314 	sub.w	r3, r2, #20
 800aace:	2b1e      	cmp	r3, #30
 800aad0:	bfda      	itte	le
 800aad2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800aad6:	40da      	lsrle	r2, r3
 800aad8:	2201      	movgt	r2, #1
 800aada:	2300      	movs	r3, #0
 800aadc:	4619      	mov	r1, r3
 800aade:	4610      	mov	r0, r2
 800aae0:	ec41 0b10 	vmov	d0, r0, r1
 800aae4:	b002      	add	sp, #8
 800aae6:	4770      	bx	lr
 800aae8:	7ff00000 	.word	0x7ff00000

0800aaec <__b2d>:
 800aaec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaf0:	6906      	ldr	r6, [r0, #16]
 800aaf2:	f100 0814 	add.w	r8, r0, #20
 800aaf6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800aafa:	1f37      	subs	r7, r6, #4
 800aafc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ab00:	4610      	mov	r0, r2
 800ab02:	f7ff fd53 	bl	800a5ac <__hi0bits>
 800ab06:	f1c0 0320 	rsb	r3, r0, #32
 800ab0a:	280a      	cmp	r0, #10
 800ab0c:	600b      	str	r3, [r1, #0]
 800ab0e:	491b      	ldr	r1, [pc, #108]	@ (800ab7c <__b2d+0x90>)
 800ab10:	dc15      	bgt.n	800ab3e <__b2d+0x52>
 800ab12:	f1c0 0c0b 	rsb	ip, r0, #11
 800ab16:	fa22 f30c 	lsr.w	r3, r2, ip
 800ab1a:	45b8      	cmp	r8, r7
 800ab1c:	ea43 0501 	orr.w	r5, r3, r1
 800ab20:	bf34      	ite	cc
 800ab22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ab26:	2300      	movcs	r3, #0
 800ab28:	3015      	adds	r0, #21
 800ab2a:	fa02 f000 	lsl.w	r0, r2, r0
 800ab2e:	fa23 f30c 	lsr.w	r3, r3, ip
 800ab32:	4303      	orrs	r3, r0
 800ab34:	461c      	mov	r4, r3
 800ab36:	ec45 4b10 	vmov	d0, r4, r5
 800ab3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab3e:	45b8      	cmp	r8, r7
 800ab40:	bf3a      	itte	cc
 800ab42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ab46:	f1a6 0708 	subcc.w	r7, r6, #8
 800ab4a:	2300      	movcs	r3, #0
 800ab4c:	380b      	subs	r0, #11
 800ab4e:	d012      	beq.n	800ab76 <__b2d+0x8a>
 800ab50:	f1c0 0120 	rsb	r1, r0, #32
 800ab54:	fa23 f401 	lsr.w	r4, r3, r1
 800ab58:	4082      	lsls	r2, r0
 800ab5a:	4322      	orrs	r2, r4
 800ab5c:	4547      	cmp	r7, r8
 800ab5e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ab62:	bf8c      	ite	hi
 800ab64:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ab68:	2200      	movls	r2, #0
 800ab6a:	4083      	lsls	r3, r0
 800ab6c:	40ca      	lsrs	r2, r1
 800ab6e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ab72:	4313      	orrs	r3, r2
 800ab74:	e7de      	b.n	800ab34 <__b2d+0x48>
 800ab76:	ea42 0501 	orr.w	r5, r2, r1
 800ab7a:	e7db      	b.n	800ab34 <__b2d+0x48>
 800ab7c:	3ff00000 	.word	0x3ff00000

0800ab80 <__d2b>:
 800ab80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ab84:	460f      	mov	r7, r1
 800ab86:	2101      	movs	r1, #1
 800ab88:	ec59 8b10 	vmov	r8, r9, d0
 800ab8c:	4616      	mov	r6, r2
 800ab8e:	f7ff fc1b 	bl	800a3c8 <_Balloc>
 800ab92:	4604      	mov	r4, r0
 800ab94:	b930      	cbnz	r0, 800aba4 <__d2b+0x24>
 800ab96:	4602      	mov	r2, r0
 800ab98:	4b23      	ldr	r3, [pc, #140]	@ (800ac28 <__d2b+0xa8>)
 800ab9a:	4824      	ldr	r0, [pc, #144]	@ (800ac2c <__d2b+0xac>)
 800ab9c:	f240 310f 	movw	r1, #783	@ 0x30f
 800aba0:	f7fe f950 	bl	8008e44 <__assert_func>
 800aba4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aba8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abac:	b10d      	cbz	r5, 800abb2 <__d2b+0x32>
 800abae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800abb2:	9301      	str	r3, [sp, #4]
 800abb4:	f1b8 0300 	subs.w	r3, r8, #0
 800abb8:	d023      	beq.n	800ac02 <__d2b+0x82>
 800abba:	4668      	mov	r0, sp
 800abbc:	9300      	str	r3, [sp, #0]
 800abbe:	f7ff fd14 	bl	800a5ea <__lo0bits>
 800abc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800abc6:	b1d0      	cbz	r0, 800abfe <__d2b+0x7e>
 800abc8:	f1c0 0320 	rsb	r3, r0, #32
 800abcc:	fa02 f303 	lsl.w	r3, r2, r3
 800abd0:	430b      	orrs	r3, r1
 800abd2:	40c2      	lsrs	r2, r0
 800abd4:	6163      	str	r3, [r4, #20]
 800abd6:	9201      	str	r2, [sp, #4]
 800abd8:	9b01      	ldr	r3, [sp, #4]
 800abda:	61a3      	str	r3, [r4, #24]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	bf0c      	ite	eq
 800abe0:	2201      	moveq	r2, #1
 800abe2:	2202      	movne	r2, #2
 800abe4:	6122      	str	r2, [r4, #16]
 800abe6:	b1a5      	cbz	r5, 800ac12 <__d2b+0x92>
 800abe8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800abec:	4405      	add	r5, r0
 800abee:	603d      	str	r5, [r7, #0]
 800abf0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800abf4:	6030      	str	r0, [r6, #0]
 800abf6:	4620      	mov	r0, r4
 800abf8:	b003      	add	sp, #12
 800abfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800abfe:	6161      	str	r1, [r4, #20]
 800ac00:	e7ea      	b.n	800abd8 <__d2b+0x58>
 800ac02:	a801      	add	r0, sp, #4
 800ac04:	f7ff fcf1 	bl	800a5ea <__lo0bits>
 800ac08:	9b01      	ldr	r3, [sp, #4]
 800ac0a:	6163      	str	r3, [r4, #20]
 800ac0c:	3020      	adds	r0, #32
 800ac0e:	2201      	movs	r2, #1
 800ac10:	e7e8      	b.n	800abe4 <__d2b+0x64>
 800ac12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ac1a:	6038      	str	r0, [r7, #0]
 800ac1c:	6918      	ldr	r0, [r3, #16]
 800ac1e:	f7ff fcc5 	bl	800a5ac <__hi0bits>
 800ac22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac26:	e7e5      	b.n	800abf4 <__d2b+0x74>
 800ac28:	0800bba9 	.word	0x0800bba9
 800ac2c:	0800bc1a 	.word	0x0800bc1a

0800ac30 <__ratio>:
 800ac30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac34:	b085      	sub	sp, #20
 800ac36:	e9cd 1000 	strd	r1, r0, [sp]
 800ac3a:	a902      	add	r1, sp, #8
 800ac3c:	f7ff ff56 	bl	800aaec <__b2d>
 800ac40:	9800      	ldr	r0, [sp, #0]
 800ac42:	a903      	add	r1, sp, #12
 800ac44:	ec55 4b10 	vmov	r4, r5, d0
 800ac48:	f7ff ff50 	bl	800aaec <__b2d>
 800ac4c:	9b01      	ldr	r3, [sp, #4]
 800ac4e:	6919      	ldr	r1, [r3, #16]
 800ac50:	9b00      	ldr	r3, [sp, #0]
 800ac52:	691b      	ldr	r3, [r3, #16]
 800ac54:	1ac9      	subs	r1, r1, r3
 800ac56:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ac5a:	1a9b      	subs	r3, r3, r2
 800ac5c:	ec5b ab10 	vmov	sl, fp, d0
 800ac60:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	bfce      	itee	gt
 800ac68:	462a      	movgt	r2, r5
 800ac6a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ac6e:	465a      	movle	r2, fp
 800ac70:	462f      	mov	r7, r5
 800ac72:	46d9      	mov	r9, fp
 800ac74:	bfcc      	ite	gt
 800ac76:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ac7a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ac7e:	464b      	mov	r3, r9
 800ac80:	4652      	mov	r2, sl
 800ac82:	4620      	mov	r0, r4
 800ac84:	4639      	mov	r1, r7
 800ac86:	f7f5 fdf9 	bl	800087c <__aeabi_ddiv>
 800ac8a:	ec41 0b10 	vmov	d0, r0, r1
 800ac8e:	b005      	add	sp, #20
 800ac90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ac94 <__copybits>:
 800ac94:	3901      	subs	r1, #1
 800ac96:	b570      	push	{r4, r5, r6, lr}
 800ac98:	1149      	asrs	r1, r1, #5
 800ac9a:	6914      	ldr	r4, [r2, #16]
 800ac9c:	3101      	adds	r1, #1
 800ac9e:	f102 0314 	add.w	r3, r2, #20
 800aca2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aca6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800acaa:	1f05      	subs	r5, r0, #4
 800acac:	42a3      	cmp	r3, r4
 800acae:	d30c      	bcc.n	800acca <__copybits+0x36>
 800acb0:	1aa3      	subs	r3, r4, r2
 800acb2:	3b11      	subs	r3, #17
 800acb4:	f023 0303 	bic.w	r3, r3, #3
 800acb8:	3211      	adds	r2, #17
 800acba:	42a2      	cmp	r2, r4
 800acbc:	bf88      	it	hi
 800acbe:	2300      	movhi	r3, #0
 800acc0:	4418      	add	r0, r3
 800acc2:	2300      	movs	r3, #0
 800acc4:	4288      	cmp	r0, r1
 800acc6:	d305      	bcc.n	800acd4 <__copybits+0x40>
 800acc8:	bd70      	pop	{r4, r5, r6, pc}
 800acca:	f853 6b04 	ldr.w	r6, [r3], #4
 800acce:	f845 6f04 	str.w	r6, [r5, #4]!
 800acd2:	e7eb      	b.n	800acac <__copybits+0x18>
 800acd4:	f840 3b04 	str.w	r3, [r0], #4
 800acd8:	e7f4      	b.n	800acc4 <__copybits+0x30>

0800acda <__any_on>:
 800acda:	f100 0214 	add.w	r2, r0, #20
 800acde:	6900      	ldr	r0, [r0, #16]
 800ace0:	114b      	asrs	r3, r1, #5
 800ace2:	4298      	cmp	r0, r3
 800ace4:	b510      	push	{r4, lr}
 800ace6:	db11      	blt.n	800ad0c <__any_on+0x32>
 800ace8:	dd0a      	ble.n	800ad00 <__any_on+0x26>
 800acea:	f011 011f 	ands.w	r1, r1, #31
 800acee:	d007      	beq.n	800ad00 <__any_on+0x26>
 800acf0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800acf4:	fa24 f001 	lsr.w	r0, r4, r1
 800acf8:	fa00 f101 	lsl.w	r1, r0, r1
 800acfc:	428c      	cmp	r4, r1
 800acfe:	d10b      	bne.n	800ad18 <__any_on+0x3e>
 800ad00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad04:	4293      	cmp	r3, r2
 800ad06:	d803      	bhi.n	800ad10 <__any_on+0x36>
 800ad08:	2000      	movs	r0, #0
 800ad0a:	bd10      	pop	{r4, pc}
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	e7f7      	b.n	800ad00 <__any_on+0x26>
 800ad10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad14:	2900      	cmp	r1, #0
 800ad16:	d0f5      	beq.n	800ad04 <__any_on+0x2a>
 800ad18:	2001      	movs	r0, #1
 800ad1a:	e7f6      	b.n	800ad0a <__any_on+0x30>

0800ad1c <__ascii_wctomb>:
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	4608      	mov	r0, r1
 800ad20:	b141      	cbz	r1, 800ad34 <__ascii_wctomb+0x18>
 800ad22:	2aff      	cmp	r2, #255	@ 0xff
 800ad24:	d904      	bls.n	800ad30 <__ascii_wctomb+0x14>
 800ad26:	228a      	movs	r2, #138	@ 0x8a
 800ad28:	601a      	str	r2, [r3, #0]
 800ad2a:	f04f 30ff 	mov.w	r0, #4294967295
 800ad2e:	4770      	bx	lr
 800ad30:	700a      	strb	r2, [r1, #0]
 800ad32:	2001      	movs	r0, #1
 800ad34:	4770      	bx	lr

0800ad36 <__ssputs_r>:
 800ad36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad3a:	688e      	ldr	r6, [r1, #8]
 800ad3c:	461f      	mov	r7, r3
 800ad3e:	42be      	cmp	r6, r7
 800ad40:	680b      	ldr	r3, [r1, #0]
 800ad42:	4682      	mov	sl, r0
 800ad44:	460c      	mov	r4, r1
 800ad46:	4690      	mov	r8, r2
 800ad48:	d82d      	bhi.n	800ada6 <__ssputs_r+0x70>
 800ad4a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad4e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ad52:	d026      	beq.n	800ada2 <__ssputs_r+0x6c>
 800ad54:	6965      	ldr	r5, [r4, #20]
 800ad56:	6909      	ldr	r1, [r1, #16]
 800ad58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad5c:	eba3 0901 	sub.w	r9, r3, r1
 800ad60:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad64:	1c7b      	adds	r3, r7, #1
 800ad66:	444b      	add	r3, r9
 800ad68:	106d      	asrs	r5, r5, #1
 800ad6a:	429d      	cmp	r5, r3
 800ad6c:	bf38      	it	cc
 800ad6e:	461d      	movcc	r5, r3
 800ad70:	0553      	lsls	r3, r2, #21
 800ad72:	d527      	bpl.n	800adc4 <__ssputs_r+0x8e>
 800ad74:	4629      	mov	r1, r5
 800ad76:	f7ff fa89 	bl	800a28c <_malloc_r>
 800ad7a:	4606      	mov	r6, r0
 800ad7c:	b360      	cbz	r0, 800add8 <__ssputs_r+0xa2>
 800ad7e:	6921      	ldr	r1, [r4, #16]
 800ad80:	464a      	mov	r2, r9
 800ad82:	f7fe f840 	bl	8008e06 <memcpy>
 800ad86:	89a3      	ldrh	r3, [r4, #12]
 800ad88:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad90:	81a3      	strh	r3, [r4, #12]
 800ad92:	6126      	str	r6, [r4, #16]
 800ad94:	6165      	str	r5, [r4, #20]
 800ad96:	444e      	add	r6, r9
 800ad98:	eba5 0509 	sub.w	r5, r5, r9
 800ad9c:	6026      	str	r6, [r4, #0]
 800ad9e:	60a5      	str	r5, [r4, #8]
 800ada0:	463e      	mov	r6, r7
 800ada2:	42be      	cmp	r6, r7
 800ada4:	d900      	bls.n	800ada8 <__ssputs_r+0x72>
 800ada6:	463e      	mov	r6, r7
 800ada8:	6820      	ldr	r0, [r4, #0]
 800adaa:	4632      	mov	r2, r6
 800adac:	4641      	mov	r1, r8
 800adae:	f000 fb7b 	bl	800b4a8 <memmove>
 800adb2:	68a3      	ldr	r3, [r4, #8]
 800adb4:	1b9b      	subs	r3, r3, r6
 800adb6:	60a3      	str	r3, [r4, #8]
 800adb8:	6823      	ldr	r3, [r4, #0]
 800adba:	4433      	add	r3, r6
 800adbc:	6023      	str	r3, [r4, #0]
 800adbe:	2000      	movs	r0, #0
 800adc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800adc4:	462a      	mov	r2, r5
 800adc6:	f000 fbd6 	bl	800b576 <_realloc_r>
 800adca:	4606      	mov	r6, r0
 800adcc:	2800      	cmp	r0, #0
 800adce:	d1e0      	bne.n	800ad92 <__ssputs_r+0x5c>
 800add0:	6921      	ldr	r1, [r4, #16]
 800add2:	4650      	mov	r0, sl
 800add4:	f7fe feac 	bl	8009b30 <_free_r>
 800add8:	230c      	movs	r3, #12
 800adda:	f8ca 3000 	str.w	r3, [sl]
 800adde:	89a3      	ldrh	r3, [r4, #12]
 800ade0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ade4:	81a3      	strh	r3, [r4, #12]
 800ade6:	f04f 30ff 	mov.w	r0, #4294967295
 800adea:	e7e9      	b.n	800adc0 <__ssputs_r+0x8a>

0800adec <_svfiprintf_r>:
 800adec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf0:	4698      	mov	r8, r3
 800adf2:	898b      	ldrh	r3, [r1, #12]
 800adf4:	061b      	lsls	r3, r3, #24
 800adf6:	b09d      	sub	sp, #116	@ 0x74
 800adf8:	4607      	mov	r7, r0
 800adfa:	460d      	mov	r5, r1
 800adfc:	4614      	mov	r4, r2
 800adfe:	d510      	bpl.n	800ae22 <_svfiprintf_r+0x36>
 800ae00:	690b      	ldr	r3, [r1, #16]
 800ae02:	b973      	cbnz	r3, 800ae22 <_svfiprintf_r+0x36>
 800ae04:	2140      	movs	r1, #64	@ 0x40
 800ae06:	f7ff fa41 	bl	800a28c <_malloc_r>
 800ae0a:	6028      	str	r0, [r5, #0]
 800ae0c:	6128      	str	r0, [r5, #16]
 800ae0e:	b930      	cbnz	r0, 800ae1e <_svfiprintf_r+0x32>
 800ae10:	230c      	movs	r3, #12
 800ae12:	603b      	str	r3, [r7, #0]
 800ae14:	f04f 30ff 	mov.w	r0, #4294967295
 800ae18:	b01d      	add	sp, #116	@ 0x74
 800ae1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae1e:	2340      	movs	r3, #64	@ 0x40
 800ae20:	616b      	str	r3, [r5, #20]
 800ae22:	2300      	movs	r3, #0
 800ae24:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae26:	2320      	movs	r3, #32
 800ae28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae2c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae30:	2330      	movs	r3, #48	@ 0x30
 800ae32:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800afd0 <_svfiprintf_r+0x1e4>
 800ae36:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae3a:	f04f 0901 	mov.w	r9, #1
 800ae3e:	4623      	mov	r3, r4
 800ae40:	469a      	mov	sl, r3
 800ae42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae46:	b10a      	cbz	r2, 800ae4c <_svfiprintf_r+0x60>
 800ae48:	2a25      	cmp	r2, #37	@ 0x25
 800ae4a:	d1f9      	bne.n	800ae40 <_svfiprintf_r+0x54>
 800ae4c:	ebba 0b04 	subs.w	fp, sl, r4
 800ae50:	d00b      	beq.n	800ae6a <_svfiprintf_r+0x7e>
 800ae52:	465b      	mov	r3, fp
 800ae54:	4622      	mov	r2, r4
 800ae56:	4629      	mov	r1, r5
 800ae58:	4638      	mov	r0, r7
 800ae5a:	f7ff ff6c 	bl	800ad36 <__ssputs_r>
 800ae5e:	3001      	adds	r0, #1
 800ae60:	f000 80a7 	beq.w	800afb2 <_svfiprintf_r+0x1c6>
 800ae64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae66:	445a      	add	r2, fp
 800ae68:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae6a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	f000 809f 	beq.w	800afb2 <_svfiprintf_r+0x1c6>
 800ae74:	2300      	movs	r3, #0
 800ae76:	f04f 32ff 	mov.w	r2, #4294967295
 800ae7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae7e:	f10a 0a01 	add.w	sl, sl, #1
 800ae82:	9304      	str	r3, [sp, #16]
 800ae84:	9307      	str	r3, [sp, #28]
 800ae86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae8a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae8c:	4654      	mov	r4, sl
 800ae8e:	2205      	movs	r2, #5
 800ae90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae94:	484e      	ldr	r0, [pc, #312]	@ (800afd0 <_svfiprintf_r+0x1e4>)
 800ae96:	f7f5 f9b3 	bl	8000200 <memchr>
 800ae9a:	9a04      	ldr	r2, [sp, #16]
 800ae9c:	b9d8      	cbnz	r0, 800aed6 <_svfiprintf_r+0xea>
 800ae9e:	06d0      	lsls	r0, r2, #27
 800aea0:	bf44      	itt	mi
 800aea2:	2320      	movmi	r3, #32
 800aea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aea8:	0711      	lsls	r1, r2, #28
 800aeaa:	bf44      	itt	mi
 800aeac:	232b      	movmi	r3, #43	@ 0x2b
 800aeae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800aeb2:	f89a 3000 	ldrb.w	r3, [sl]
 800aeb6:	2b2a      	cmp	r3, #42	@ 0x2a
 800aeb8:	d015      	beq.n	800aee6 <_svfiprintf_r+0xfa>
 800aeba:	9a07      	ldr	r2, [sp, #28]
 800aebc:	4654      	mov	r4, sl
 800aebe:	2000      	movs	r0, #0
 800aec0:	f04f 0c0a 	mov.w	ip, #10
 800aec4:	4621      	mov	r1, r4
 800aec6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aeca:	3b30      	subs	r3, #48	@ 0x30
 800aecc:	2b09      	cmp	r3, #9
 800aece:	d94b      	bls.n	800af68 <_svfiprintf_r+0x17c>
 800aed0:	b1b0      	cbz	r0, 800af00 <_svfiprintf_r+0x114>
 800aed2:	9207      	str	r2, [sp, #28]
 800aed4:	e014      	b.n	800af00 <_svfiprintf_r+0x114>
 800aed6:	eba0 0308 	sub.w	r3, r0, r8
 800aeda:	fa09 f303 	lsl.w	r3, r9, r3
 800aede:	4313      	orrs	r3, r2
 800aee0:	9304      	str	r3, [sp, #16]
 800aee2:	46a2      	mov	sl, r4
 800aee4:	e7d2      	b.n	800ae8c <_svfiprintf_r+0xa0>
 800aee6:	9b03      	ldr	r3, [sp, #12]
 800aee8:	1d19      	adds	r1, r3, #4
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	9103      	str	r1, [sp, #12]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	bfbb      	ittet	lt
 800aef2:	425b      	neglt	r3, r3
 800aef4:	f042 0202 	orrlt.w	r2, r2, #2
 800aef8:	9307      	strge	r3, [sp, #28]
 800aefa:	9307      	strlt	r3, [sp, #28]
 800aefc:	bfb8      	it	lt
 800aefe:	9204      	strlt	r2, [sp, #16]
 800af00:	7823      	ldrb	r3, [r4, #0]
 800af02:	2b2e      	cmp	r3, #46	@ 0x2e
 800af04:	d10a      	bne.n	800af1c <_svfiprintf_r+0x130>
 800af06:	7863      	ldrb	r3, [r4, #1]
 800af08:	2b2a      	cmp	r3, #42	@ 0x2a
 800af0a:	d132      	bne.n	800af72 <_svfiprintf_r+0x186>
 800af0c:	9b03      	ldr	r3, [sp, #12]
 800af0e:	1d1a      	adds	r2, r3, #4
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	9203      	str	r2, [sp, #12]
 800af14:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800af18:	3402      	adds	r4, #2
 800af1a:	9305      	str	r3, [sp, #20]
 800af1c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800afe0 <_svfiprintf_r+0x1f4>
 800af20:	7821      	ldrb	r1, [r4, #0]
 800af22:	2203      	movs	r2, #3
 800af24:	4650      	mov	r0, sl
 800af26:	f7f5 f96b 	bl	8000200 <memchr>
 800af2a:	b138      	cbz	r0, 800af3c <_svfiprintf_r+0x150>
 800af2c:	9b04      	ldr	r3, [sp, #16]
 800af2e:	eba0 000a 	sub.w	r0, r0, sl
 800af32:	2240      	movs	r2, #64	@ 0x40
 800af34:	4082      	lsls	r2, r0
 800af36:	4313      	orrs	r3, r2
 800af38:	3401      	adds	r4, #1
 800af3a:	9304      	str	r3, [sp, #16]
 800af3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af40:	4824      	ldr	r0, [pc, #144]	@ (800afd4 <_svfiprintf_r+0x1e8>)
 800af42:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af46:	2206      	movs	r2, #6
 800af48:	f7f5 f95a 	bl	8000200 <memchr>
 800af4c:	2800      	cmp	r0, #0
 800af4e:	d036      	beq.n	800afbe <_svfiprintf_r+0x1d2>
 800af50:	4b21      	ldr	r3, [pc, #132]	@ (800afd8 <_svfiprintf_r+0x1ec>)
 800af52:	bb1b      	cbnz	r3, 800af9c <_svfiprintf_r+0x1b0>
 800af54:	9b03      	ldr	r3, [sp, #12]
 800af56:	3307      	adds	r3, #7
 800af58:	f023 0307 	bic.w	r3, r3, #7
 800af5c:	3308      	adds	r3, #8
 800af5e:	9303      	str	r3, [sp, #12]
 800af60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af62:	4433      	add	r3, r6
 800af64:	9309      	str	r3, [sp, #36]	@ 0x24
 800af66:	e76a      	b.n	800ae3e <_svfiprintf_r+0x52>
 800af68:	fb0c 3202 	mla	r2, ip, r2, r3
 800af6c:	460c      	mov	r4, r1
 800af6e:	2001      	movs	r0, #1
 800af70:	e7a8      	b.n	800aec4 <_svfiprintf_r+0xd8>
 800af72:	2300      	movs	r3, #0
 800af74:	3401      	adds	r4, #1
 800af76:	9305      	str	r3, [sp, #20]
 800af78:	4619      	mov	r1, r3
 800af7a:	f04f 0c0a 	mov.w	ip, #10
 800af7e:	4620      	mov	r0, r4
 800af80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af84:	3a30      	subs	r2, #48	@ 0x30
 800af86:	2a09      	cmp	r2, #9
 800af88:	d903      	bls.n	800af92 <_svfiprintf_r+0x1a6>
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d0c6      	beq.n	800af1c <_svfiprintf_r+0x130>
 800af8e:	9105      	str	r1, [sp, #20]
 800af90:	e7c4      	b.n	800af1c <_svfiprintf_r+0x130>
 800af92:	fb0c 2101 	mla	r1, ip, r1, r2
 800af96:	4604      	mov	r4, r0
 800af98:	2301      	movs	r3, #1
 800af9a:	e7f0      	b.n	800af7e <_svfiprintf_r+0x192>
 800af9c:	ab03      	add	r3, sp, #12
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	462a      	mov	r2, r5
 800afa2:	4b0e      	ldr	r3, [pc, #56]	@ (800afdc <_svfiprintf_r+0x1f0>)
 800afa4:	a904      	add	r1, sp, #16
 800afa6:	4638      	mov	r0, r7
 800afa8:	f7fc fe06 	bl	8007bb8 <_printf_float>
 800afac:	1c42      	adds	r2, r0, #1
 800afae:	4606      	mov	r6, r0
 800afb0:	d1d6      	bne.n	800af60 <_svfiprintf_r+0x174>
 800afb2:	89ab      	ldrh	r3, [r5, #12]
 800afb4:	065b      	lsls	r3, r3, #25
 800afb6:	f53f af2d 	bmi.w	800ae14 <_svfiprintf_r+0x28>
 800afba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afbc:	e72c      	b.n	800ae18 <_svfiprintf_r+0x2c>
 800afbe:	ab03      	add	r3, sp, #12
 800afc0:	9300      	str	r3, [sp, #0]
 800afc2:	462a      	mov	r2, r5
 800afc4:	4b05      	ldr	r3, [pc, #20]	@ (800afdc <_svfiprintf_r+0x1f0>)
 800afc6:	a904      	add	r1, sp, #16
 800afc8:	4638      	mov	r0, r7
 800afca:	f7fd f88d 	bl	80080e8 <_printf_i>
 800afce:	e7ed      	b.n	800afac <_svfiprintf_r+0x1c0>
 800afd0:	0800bc73 	.word	0x0800bc73
 800afd4:	0800bc7d 	.word	0x0800bc7d
 800afd8:	08007bb9 	.word	0x08007bb9
 800afdc:	0800ad37 	.word	0x0800ad37
 800afe0:	0800bc79 	.word	0x0800bc79

0800afe4 <__sfputc_r>:
 800afe4:	6893      	ldr	r3, [r2, #8]
 800afe6:	3b01      	subs	r3, #1
 800afe8:	2b00      	cmp	r3, #0
 800afea:	b410      	push	{r4}
 800afec:	6093      	str	r3, [r2, #8]
 800afee:	da08      	bge.n	800b002 <__sfputc_r+0x1e>
 800aff0:	6994      	ldr	r4, [r2, #24]
 800aff2:	42a3      	cmp	r3, r4
 800aff4:	db01      	blt.n	800affa <__sfputc_r+0x16>
 800aff6:	290a      	cmp	r1, #10
 800aff8:	d103      	bne.n	800b002 <__sfputc_r+0x1e>
 800affa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800affe:	f7fd bd6c 	b.w	8008ada <__swbuf_r>
 800b002:	6813      	ldr	r3, [r2, #0]
 800b004:	1c58      	adds	r0, r3, #1
 800b006:	6010      	str	r0, [r2, #0]
 800b008:	7019      	strb	r1, [r3, #0]
 800b00a:	4608      	mov	r0, r1
 800b00c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b010:	4770      	bx	lr

0800b012 <__sfputs_r>:
 800b012:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b014:	4606      	mov	r6, r0
 800b016:	460f      	mov	r7, r1
 800b018:	4614      	mov	r4, r2
 800b01a:	18d5      	adds	r5, r2, r3
 800b01c:	42ac      	cmp	r4, r5
 800b01e:	d101      	bne.n	800b024 <__sfputs_r+0x12>
 800b020:	2000      	movs	r0, #0
 800b022:	e007      	b.n	800b034 <__sfputs_r+0x22>
 800b024:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b028:	463a      	mov	r2, r7
 800b02a:	4630      	mov	r0, r6
 800b02c:	f7ff ffda 	bl	800afe4 <__sfputc_r>
 800b030:	1c43      	adds	r3, r0, #1
 800b032:	d1f3      	bne.n	800b01c <__sfputs_r+0xa>
 800b034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b038 <_vfiprintf_r>:
 800b038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b03c:	460d      	mov	r5, r1
 800b03e:	b09d      	sub	sp, #116	@ 0x74
 800b040:	4614      	mov	r4, r2
 800b042:	4698      	mov	r8, r3
 800b044:	4606      	mov	r6, r0
 800b046:	b118      	cbz	r0, 800b050 <_vfiprintf_r+0x18>
 800b048:	6a03      	ldr	r3, [r0, #32]
 800b04a:	b90b      	cbnz	r3, 800b050 <_vfiprintf_r+0x18>
 800b04c:	f7fd fc04 	bl	8008858 <__sinit>
 800b050:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b052:	07d9      	lsls	r1, r3, #31
 800b054:	d405      	bmi.n	800b062 <_vfiprintf_r+0x2a>
 800b056:	89ab      	ldrh	r3, [r5, #12]
 800b058:	059a      	lsls	r2, r3, #22
 800b05a:	d402      	bmi.n	800b062 <_vfiprintf_r+0x2a>
 800b05c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b05e:	f7fd fed0 	bl	8008e02 <__retarget_lock_acquire_recursive>
 800b062:	89ab      	ldrh	r3, [r5, #12]
 800b064:	071b      	lsls	r3, r3, #28
 800b066:	d501      	bpl.n	800b06c <_vfiprintf_r+0x34>
 800b068:	692b      	ldr	r3, [r5, #16]
 800b06a:	b99b      	cbnz	r3, 800b094 <_vfiprintf_r+0x5c>
 800b06c:	4629      	mov	r1, r5
 800b06e:	4630      	mov	r0, r6
 800b070:	f7fd fd72 	bl	8008b58 <__swsetup_r>
 800b074:	b170      	cbz	r0, 800b094 <_vfiprintf_r+0x5c>
 800b076:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b078:	07dc      	lsls	r4, r3, #31
 800b07a:	d504      	bpl.n	800b086 <_vfiprintf_r+0x4e>
 800b07c:	f04f 30ff 	mov.w	r0, #4294967295
 800b080:	b01d      	add	sp, #116	@ 0x74
 800b082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b086:	89ab      	ldrh	r3, [r5, #12]
 800b088:	0598      	lsls	r0, r3, #22
 800b08a:	d4f7      	bmi.n	800b07c <_vfiprintf_r+0x44>
 800b08c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b08e:	f7fd feb9 	bl	8008e04 <__retarget_lock_release_recursive>
 800b092:	e7f3      	b.n	800b07c <_vfiprintf_r+0x44>
 800b094:	2300      	movs	r3, #0
 800b096:	9309      	str	r3, [sp, #36]	@ 0x24
 800b098:	2320      	movs	r3, #32
 800b09a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b09e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b0a2:	2330      	movs	r3, #48	@ 0x30
 800b0a4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b254 <_vfiprintf_r+0x21c>
 800b0a8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b0ac:	f04f 0901 	mov.w	r9, #1
 800b0b0:	4623      	mov	r3, r4
 800b0b2:	469a      	mov	sl, r3
 800b0b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b0b8:	b10a      	cbz	r2, 800b0be <_vfiprintf_r+0x86>
 800b0ba:	2a25      	cmp	r2, #37	@ 0x25
 800b0bc:	d1f9      	bne.n	800b0b2 <_vfiprintf_r+0x7a>
 800b0be:	ebba 0b04 	subs.w	fp, sl, r4
 800b0c2:	d00b      	beq.n	800b0dc <_vfiprintf_r+0xa4>
 800b0c4:	465b      	mov	r3, fp
 800b0c6:	4622      	mov	r2, r4
 800b0c8:	4629      	mov	r1, r5
 800b0ca:	4630      	mov	r0, r6
 800b0cc:	f7ff ffa1 	bl	800b012 <__sfputs_r>
 800b0d0:	3001      	adds	r0, #1
 800b0d2:	f000 80a7 	beq.w	800b224 <_vfiprintf_r+0x1ec>
 800b0d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b0d8:	445a      	add	r2, fp
 800b0da:	9209      	str	r2, [sp, #36]	@ 0x24
 800b0dc:	f89a 3000 	ldrb.w	r3, [sl]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 809f 	beq.w	800b224 <_vfiprintf_r+0x1ec>
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	f04f 32ff 	mov.w	r2, #4294967295
 800b0ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b0f0:	f10a 0a01 	add.w	sl, sl, #1
 800b0f4:	9304      	str	r3, [sp, #16]
 800b0f6:	9307      	str	r3, [sp, #28]
 800b0f8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b0fc:	931a      	str	r3, [sp, #104]	@ 0x68
 800b0fe:	4654      	mov	r4, sl
 800b100:	2205      	movs	r2, #5
 800b102:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b106:	4853      	ldr	r0, [pc, #332]	@ (800b254 <_vfiprintf_r+0x21c>)
 800b108:	f7f5 f87a 	bl	8000200 <memchr>
 800b10c:	9a04      	ldr	r2, [sp, #16]
 800b10e:	b9d8      	cbnz	r0, 800b148 <_vfiprintf_r+0x110>
 800b110:	06d1      	lsls	r1, r2, #27
 800b112:	bf44      	itt	mi
 800b114:	2320      	movmi	r3, #32
 800b116:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b11a:	0713      	lsls	r3, r2, #28
 800b11c:	bf44      	itt	mi
 800b11e:	232b      	movmi	r3, #43	@ 0x2b
 800b120:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b124:	f89a 3000 	ldrb.w	r3, [sl]
 800b128:	2b2a      	cmp	r3, #42	@ 0x2a
 800b12a:	d015      	beq.n	800b158 <_vfiprintf_r+0x120>
 800b12c:	9a07      	ldr	r2, [sp, #28]
 800b12e:	4654      	mov	r4, sl
 800b130:	2000      	movs	r0, #0
 800b132:	f04f 0c0a 	mov.w	ip, #10
 800b136:	4621      	mov	r1, r4
 800b138:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b13c:	3b30      	subs	r3, #48	@ 0x30
 800b13e:	2b09      	cmp	r3, #9
 800b140:	d94b      	bls.n	800b1da <_vfiprintf_r+0x1a2>
 800b142:	b1b0      	cbz	r0, 800b172 <_vfiprintf_r+0x13a>
 800b144:	9207      	str	r2, [sp, #28]
 800b146:	e014      	b.n	800b172 <_vfiprintf_r+0x13a>
 800b148:	eba0 0308 	sub.w	r3, r0, r8
 800b14c:	fa09 f303 	lsl.w	r3, r9, r3
 800b150:	4313      	orrs	r3, r2
 800b152:	9304      	str	r3, [sp, #16]
 800b154:	46a2      	mov	sl, r4
 800b156:	e7d2      	b.n	800b0fe <_vfiprintf_r+0xc6>
 800b158:	9b03      	ldr	r3, [sp, #12]
 800b15a:	1d19      	adds	r1, r3, #4
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	9103      	str	r1, [sp, #12]
 800b160:	2b00      	cmp	r3, #0
 800b162:	bfbb      	ittet	lt
 800b164:	425b      	neglt	r3, r3
 800b166:	f042 0202 	orrlt.w	r2, r2, #2
 800b16a:	9307      	strge	r3, [sp, #28]
 800b16c:	9307      	strlt	r3, [sp, #28]
 800b16e:	bfb8      	it	lt
 800b170:	9204      	strlt	r2, [sp, #16]
 800b172:	7823      	ldrb	r3, [r4, #0]
 800b174:	2b2e      	cmp	r3, #46	@ 0x2e
 800b176:	d10a      	bne.n	800b18e <_vfiprintf_r+0x156>
 800b178:	7863      	ldrb	r3, [r4, #1]
 800b17a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b17c:	d132      	bne.n	800b1e4 <_vfiprintf_r+0x1ac>
 800b17e:	9b03      	ldr	r3, [sp, #12]
 800b180:	1d1a      	adds	r2, r3, #4
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	9203      	str	r2, [sp, #12]
 800b186:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b18a:	3402      	adds	r4, #2
 800b18c:	9305      	str	r3, [sp, #20]
 800b18e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b264 <_vfiprintf_r+0x22c>
 800b192:	7821      	ldrb	r1, [r4, #0]
 800b194:	2203      	movs	r2, #3
 800b196:	4650      	mov	r0, sl
 800b198:	f7f5 f832 	bl	8000200 <memchr>
 800b19c:	b138      	cbz	r0, 800b1ae <_vfiprintf_r+0x176>
 800b19e:	9b04      	ldr	r3, [sp, #16]
 800b1a0:	eba0 000a 	sub.w	r0, r0, sl
 800b1a4:	2240      	movs	r2, #64	@ 0x40
 800b1a6:	4082      	lsls	r2, r0
 800b1a8:	4313      	orrs	r3, r2
 800b1aa:	3401      	adds	r4, #1
 800b1ac:	9304      	str	r3, [sp, #16]
 800b1ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1b2:	4829      	ldr	r0, [pc, #164]	@ (800b258 <_vfiprintf_r+0x220>)
 800b1b4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b1b8:	2206      	movs	r2, #6
 800b1ba:	f7f5 f821 	bl	8000200 <memchr>
 800b1be:	2800      	cmp	r0, #0
 800b1c0:	d03f      	beq.n	800b242 <_vfiprintf_r+0x20a>
 800b1c2:	4b26      	ldr	r3, [pc, #152]	@ (800b25c <_vfiprintf_r+0x224>)
 800b1c4:	bb1b      	cbnz	r3, 800b20e <_vfiprintf_r+0x1d6>
 800b1c6:	9b03      	ldr	r3, [sp, #12]
 800b1c8:	3307      	adds	r3, #7
 800b1ca:	f023 0307 	bic.w	r3, r3, #7
 800b1ce:	3308      	adds	r3, #8
 800b1d0:	9303      	str	r3, [sp, #12]
 800b1d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1d4:	443b      	add	r3, r7
 800b1d6:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1d8:	e76a      	b.n	800b0b0 <_vfiprintf_r+0x78>
 800b1da:	fb0c 3202 	mla	r2, ip, r2, r3
 800b1de:	460c      	mov	r4, r1
 800b1e0:	2001      	movs	r0, #1
 800b1e2:	e7a8      	b.n	800b136 <_vfiprintf_r+0xfe>
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	3401      	adds	r4, #1
 800b1e8:	9305      	str	r3, [sp, #20]
 800b1ea:	4619      	mov	r1, r3
 800b1ec:	f04f 0c0a 	mov.w	ip, #10
 800b1f0:	4620      	mov	r0, r4
 800b1f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b1f6:	3a30      	subs	r2, #48	@ 0x30
 800b1f8:	2a09      	cmp	r2, #9
 800b1fa:	d903      	bls.n	800b204 <_vfiprintf_r+0x1cc>
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d0c6      	beq.n	800b18e <_vfiprintf_r+0x156>
 800b200:	9105      	str	r1, [sp, #20]
 800b202:	e7c4      	b.n	800b18e <_vfiprintf_r+0x156>
 800b204:	fb0c 2101 	mla	r1, ip, r1, r2
 800b208:	4604      	mov	r4, r0
 800b20a:	2301      	movs	r3, #1
 800b20c:	e7f0      	b.n	800b1f0 <_vfiprintf_r+0x1b8>
 800b20e:	ab03      	add	r3, sp, #12
 800b210:	9300      	str	r3, [sp, #0]
 800b212:	462a      	mov	r2, r5
 800b214:	4b12      	ldr	r3, [pc, #72]	@ (800b260 <_vfiprintf_r+0x228>)
 800b216:	a904      	add	r1, sp, #16
 800b218:	4630      	mov	r0, r6
 800b21a:	f7fc fccd 	bl	8007bb8 <_printf_float>
 800b21e:	4607      	mov	r7, r0
 800b220:	1c78      	adds	r0, r7, #1
 800b222:	d1d6      	bne.n	800b1d2 <_vfiprintf_r+0x19a>
 800b224:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b226:	07d9      	lsls	r1, r3, #31
 800b228:	d405      	bmi.n	800b236 <_vfiprintf_r+0x1fe>
 800b22a:	89ab      	ldrh	r3, [r5, #12]
 800b22c:	059a      	lsls	r2, r3, #22
 800b22e:	d402      	bmi.n	800b236 <_vfiprintf_r+0x1fe>
 800b230:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b232:	f7fd fde7 	bl	8008e04 <__retarget_lock_release_recursive>
 800b236:	89ab      	ldrh	r3, [r5, #12]
 800b238:	065b      	lsls	r3, r3, #25
 800b23a:	f53f af1f 	bmi.w	800b07c <_vfiprintf_r+0x44>
 800b23e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b240:	e71e      	b.n	800b080 <_vfiprintf_r+0x48>
 800b242:	ab03      	add	r3, sp, #12
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	462a      	mov	r2, r5
 800b248:	4b05      	ldr	r3, [pc, #20]	@ (800b260 <_vfiprintf_r+0x228>)
 800b24a:	a904      	add	r1, sp, #16
 800b24c:	4630      	mov	r0, r6
 800b24e:	f7fc ff4b 	bl	80080e8 <_printf_i>
 800b252:	e7e4      	b.n	800b21e <_vfiprintf_r+0x1e6>
 800b254:	0800bc73 	.word	0x0800bc73
 800b258:	0800bc7d 	.word	0x0800bc7d
 800b25c:	08007bb9 	.word	0x08007bb9
 800b260:	0800b013 	.word	0x0800b013
 800b264:	0800bc79 	.word	0x0800bc79

0800b268 <__sflush_r>:
 800b268:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b26c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b270:	0716      	lsls	r6, r2, #28
 800b272:	4605      	mov	r5, r0
 800b274:	460c      	mov	r4, r1
 800b276:	d454      	bmi.n	800b322 <__sflush_r+0xba>
 800b278:	684b      	ldr	r3, [r1, #4]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	dc02      	bgt.n	800b284 <__sflush_r+0x1c>
 800b27e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b280:	2b00      	cmp	r3, #0
 800b282:	dd48      	ble.n	800b316 <__sflush_r+0xae>
 800b284:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b286:	2e00      	cmp	r6, #0
 800b288:	d045      	beq.n	800b316 <__sflush_r+0xae>
 800b28a:	2300      	movs	r3, #0
 800b28c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b290:	682f      	ldr	r7, [r5, #0]
 800b292:	6a21      	ldr	r1, [r4, #32]
 800b294:	602b      	str	r3, [r5, #0]
 800b296:	d030      	beq.n	800b2fa <__sflush_r+0x92>
 800b298:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b29a:	89a3      	ldrh	r3, [r4, #12]
 800b29c:	0759      	lsls	r1, r3, #29
 800b29e:	d505      	bpl.n	800b2ac <__sflush_r+0x44>
 800b2a0:	6863      	ldr	r3, [r4, #4]
 800b2a2:	1ad2      	subs	r2, r2, r3
 800b2a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b2a6:	b10b      	cbz	r3, 800b2ac <__sflush_r+0x44>
 800b2a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b2aa:	1ad2      	subs	r2, r2, r3
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b2b0:	6a21      	ldr	r1, [r4, #32]
 800b2b2:	4628      	mov	r0, r5
 800b2b4:	47b0      	blx	r6
 800b2b6:	1c43      	adds	r3, r0, #1
 800b2b8:	89a3      	ldrh	r3, [r4, #12]
 800b2ba:	d106      	bne.n	800b2ca <__sflush_r+0x62>
 800b2bc:	6829      	ldr	r1, [r5, #0]
 800b2be:	291d      	cmp	r1, #29
 800b2c0:	d82b      	bhi.n	800b31a <__sflush_r+0xb2>
 800b2c2:	4a2a      	ldr	r2, [pc, #168]	@ (800b36c <__sflush_r+0x104>)
 800b2c4:	40ca      	lsrs	r2, r1
 800b2c6:	07d6      	lsls	r6, r2, #31
 800b2c8:	d527      	bpl.n	800b31a <__sflush_r+0xb2>
 800b2ca:	2200      	movs	r2, #0
 800b2cc:	6062      	str	r2, [r4, #4]
 800b2ce:	04d9      	lsls	r1, r3, #19
 800b2d0:	6922      	ldr	r2, [r4, #16]
 800b2d2:	6022      	str	r2, [r4, #0]
 800b2d4:	d504      	bpl.n	800b2e0 <__sflush_r+0x78>
 800b2d6:	1c42      	adds	r2, r0, #1
 800b2d8:	d101      	bne.n	800b2de <__sflush_r+0x76>
 800b2da:	682b      	ldr	r3, [r5, #0]
 800b2dc:	b903      	cbnz	r3, 800b2e0 <__sflush_r+0x78>
 800b2de:	6560      	str	r0, [r4, #84]	@ 0x54
 800b2e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b2e2:	602f      	str	r7, [r5, #0]
 800b2e4:	b1b9      	cbz	r1, 800b316 <__sflush_r+0xae>
 800b2e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b2ea:	4299      	cmp	r1, r3
 800b2ec:	d002      	beq.n	800b2f4 <__sflush_r+0x8c>
 800b2ee:	4628      	mov	r0, r5
 800b2f0:	f7fe fc1e 	bl	8009b30 <_free_r>
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	6363      	str	r3, [r4, #52]	@ 0x34
 800b2f8:	e00d      	b.n	800b316 <__sflush_r+0xae>
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	47b0      	blx	r6
 800b300:	4602      	mov	r2, r0
 800b302:	1c50      	adds	r0, r2, #1
 800b304:	d1c9      	bne.n	800b29a <__sflush_r+0x32>
 800b306:	682b      	ldr	r3, [r5, #0]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d0c6      	beq.n	800b29a <__sflush_r+0x32>
 800b30c:	2b1d      	cmp	r3, #29
 800b30e:	d001      	beq.n	800b314 <__sflush_r+0xac>
 800b310:	2b16      	cmp	r3, #22
 800b312:	d11e      	bne.n	800b352 <__sflush_r+0xea>
 800b314:	602f      	str	r7, [r5, #0]
 800b316:	2000      	movs	r0, #0
 800b318:	e022      	b.n	800b360 <__sflush_r+0xf8>
 800b31a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b31e:	b21b      	sxth	r3, r3
 800b320:	e01b      	b.n	800b35a <__sflush_r+0xf2>
 800b322:	690f      	ldr	r7, [r1, #16]
 800b324:	2f00      	cmp	r7, #0
 800b326:	d0f6      	beq.n	800b316 <__sflush_r+0xae>
 800b328:	0793      	lsls	r3, r2, #30
 800b32a:	680e      	ldr	r6, [r1, #0]
 800b32c:	bf08      	it	eq
 800b32e:	694b      	ldreq	r3, [r1, #20]
 800b330:	600f      	str	r7, [r1, #0]
 800b332:	bf18      	it	ne
 800b334:	2300      	movne	r3, #0
 800b336:	eba6 0807 	sub.w	r8, r6, r7
 800b33a:	608b      	str	r3, [r1, #8]
 800b33c:	f1b8 0f00 	cmp.w	r8, #0
 800b340:	dde9      	ble.n	800b316 <__sflush_r+0xae>
 800b342:	6a21      	ldr	r1, [r4, #32]
 800b344:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b346:	4643      	mov	r3, r8
 800b348:	463a      	mov	r2, r7
 800b34a:	4628      	mov	r0, r5
 800b34c:	47b0      	blx	r6
 800b34e:	2800      	cmp	r0, #0
 800b350:	dc08      	bgt.n	800b364 <__sflush_r+0xfc>
 800b352:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b356:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b35a:	81a3      	strh	r3, [r4, #12]
 800b35c:	f04f 30ff 	mov.w	r0, #4294967295
 800b360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b364:	4407      	add	r7, r0
 800b366:	eba8 0800 	sub.w	r8, r8, r0
 800b36a:	e7e7      	b.n	800b33c <__sflush_r+0xd4>
 800b36c:	20400001 	.word	0x20400001

0800b370 <_fflush_r>:
 800b370:	b538      	push	{r3, r4, r5, lr}
 800b372:	690b      	ldr	r3, [r1, #16]
 800b374:	4605      	mov	r5, r0
 800b376:	460c      	mov	r4, r1
 800b378:	b913      	cbnz	r3, 800b380 <_fflush_r+0x10>
 800b37a:	2500      	movs	r5, #0
 800b37c:	4628      	mov	r0, r5
 800b37e:	bd38      	pop	{r3, r4, r5, pc}
 800b380:	b118      	cbz	r0, 800b38a <_fflush_r+0x1a>
 800b382:	6a03      	ldr	r3, [r0, #32]
 800b384:	b90b      	cbnz	r3, 800b38a <_fflush_r+0x1a>
 800b386:	f7fd fa67 	bl	8008858 <__sinit>
 800b38a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d0f3      	beq.n	800b37a <_fflush_r+0xa>
 800b392:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b394:	07d0      	lsls	r0, r2, #31
 800b396:	d404      	bmi.n	800b3a2 <_fflush_r+0x32>
 800b398:	0599      	lsls	r1, r3, #22
 800b39a:	d402      	bmi.n	800b3a2 <_fflush_r+0x32>
 800b39c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b39e:	f7fd fd30 	bl	8008e02 <__retarget_lock_acquire_recursive>
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	4621      	mov	r1, r4
 800b3a6:	f7ff ff5f 	bl	800b268 <__sflush_r>
 800b3aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b3ac:	07da      	lsls	r2, r3, #31
 800b3ae:	4605      	mov	r5, r0
 800b3b0:	d4e4      	bmi.n	800b37c <_fflush_r+0xc>
 800b3b2:	89a3      	ldrh	r3, [r4, #12]
 800b3b4:	059b      	lsls	r3, r3, #22
 800b3b6:	d4e1      	bmi.n	800b37c <_fflush_r+0xc>
 800b3b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b3ba:	f7fd fd23 	bl	8008e04 <__retarget_lock_release_recursive>
 800b3be:	e7dd      	b.n	800b37c <_fflush_r+0xc>

0800b3c0 <fiprintf>:
 800b3c0:	b40e      	push	{r1, r2, r3}
 800b3c2:	b503      	push	{r0, r1, lr}
 800b3c4:	4601      	mov	r1, r0
 800b3c6:	ab03      	add	r3, sp, #12
 800b3c8:	4805      	ldr	r0, [pc, #20]	@ (800b3e0 <fiprintf+0x20>)
 800b3ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3ce:	6800      	ldr	r0, [r0, #0]
 800b3d0:	9301      	str	r3, [sp, #4]
 800b3d2:	f7ff fe31 	bl	800b038 <_vfiprintf_r>
 800b3d6:	b002      	add	sp, #8
 800b3d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3dc:	b003      	add	sp, #12
 800b3de:	4770      	bx	lr
 800b3e0:	200001a4 	.word	0x200001a4

0800b3e4 <__swhatbuf_r>:
 800b3e4:	b570      	push	{r4, r5, r6, lr}
 800b3e6:	460c      	mov	r4, r1
 800b3e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ec:	2900      	cmp	r1, #0
 800b3ee:	b096      	sub	sp, #88	@ 0x58
 800b3f0:	4615      	mov	r5, r2
 800b3f2:	461e      	mov	r6, r3
 800b3f4:	da0d      	bge.n	800b412 <__swhatbuf_r+0x2e>
 800b3f6:	89a3      	ldrh	r3, [r4, #12]
 800b3f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b3fc:	f04f 0100 	mov.w	r1, #0
 800b400:	bf14      	ite	ne
 800b402:	2340      	movne	r3, #64	@ 0x40
 800b404:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b408:	2000      	movs	r0, #0
 800b40a:	6031      	str	r1, [r6, #0]
 800b40c:	602b      	str	r3, [r5, #0]
 800b40e:	b016      	add	sp, #88	@ 0x58
 800b410:	bd70      	pop	{r4, r5, r6, pc}
 800b412:	466a      	mov	r2, sp
 800b414:	f000 f862 	bl	800b4dc <_fstat_r>
 800b418:	2800      	cmp	r0, #0
 800b41a:	dbec      	blt.n	800b3f6 <__swhatbuf_r+0x12>
 800b41c:	9901      	ldr	r1, [sp, #4]
 800b41e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b422:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b426:	4259      	negs	r1, r3
 800b428:	4159      	adcs	r1, r3
 800b42a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b42e:	e7eb      	b.n	800b408 <__swhatbuf_r+0x24>

0800b430 <__smakebuf_r>:
 800b430:	898b      	ldrh	r3, [r1, #12]
 800b432:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b434:	079d      	lsls	r5, r3, #30
 800b436:	4606      	mov	r6, r0
 800b438:	460c      	mov	r4, r1
 800b43a:	d507      	bpl.n	800b44c <__smakebuf_r+0x1c>
 800b43c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b440:	6023      	str	r3, [r4, #0]
 800b442:	6123      	str	r3, [r4, #16]
 800b444:	2301      	movs	r3, #1
 800b446:	6163      	str	r3, [r4, #20]
 800b448:	b003      	add	sp, #12
 800b44a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b44c:	ab01      	add	r3, sp, #4
 800b44e:	466a      	mov	r2, sp
 800b450:	f7ff ffc8 	bl	800b3e4 <__swhatbuf_r>
 800b454:	9f00      	ldr	r7, [sp, #0]
 800b456:	4605      	mov	r5, r0
 800b458:	4639      	mov	r1, r7
 800b45a:	4630      	mov	r0, r6
 800b45c:	f7fe ff16 	bl	800a28c <_malloc_r>
 800b460:	b948      	cbnz	r0, 800b476 <__smakebuf_r+0x46>
 800b462:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b466:	059a      	lsls	r2, r3, #22
 800b468:	d4ee      	bmi.n	800b448 <__smakebuf_r+0x18>
 800b46a:	f023 0303 	bic.w	r3, r3, #3
 800b46e:	f043 0302 	orr.w	r3, r3, #2
 800b472:	81a3      	strh	r3, [r4, #12]
 800b474:	e7e2      	b.n	800b43c <__smakebuf_r+0xc>
 800b476:	89a3      	ldrh	r3, [r4, #12]
 800b478:	6020      	str	r0, [r4, #0]
 800b47a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b47e:	81a3      	strh	r3, [r4, #12]
 800b480:	9b01      	ldr	r3, [sp, #4]
 800b482:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b486:	b15b      	cbz	r3, 800b4a0 <__smakebuf_r+0x70>
 800b488:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b48c:	4630      	mov	r0, r6
 800b48e:	f000 f837 	bl	800b500 <_isatty_r>
 800b492:	b128      	cbz	r0, 800b4a0 <__smakebuf_r+0x70>
 800b494:	89a3      	ldrh	r3, [r4, #12]
 800b496:	f023 0303 	bic.w	r3, r3, #3
 800b49a:	f043 0301 	orr.w	r3, r3, #1
 800b49e:	81a3      	strh	r3, [r4, #12]
 800b4a0:	89a3      	ldrh	r3, [r4, #12]
 800b4a2:	431d      	orrs	r5, r3
 800b4a4:	81a5      	strh	r5, [r4, #12]
 800b4a6:	e7cf      	b.n	800b448 <__smakebuf_r+0x18>

0800b4a8 <memmove>:
 800b4a8:	4288      	cmp	r0, r1
 800b4aa:	b510      	push	{r4, lr}
 800b4ac:	eb01 0402 	add.w	r4, r1, r2
 800b4b0:	d902      	bls.n	800b4b8 <memmove+0x10>
 800b4b2:	4284      	cmp	r4, r0
 800b4b4:	4623      	mov	r3, r4
 800b4b6:	d807      	bhi.n	800b4c8 <memmove+0x20>
 800b4b8:	1e43      	subs	r3, r0, #1
 800b4ba:	42a1      	cmp	r1, r4
 800b4bc:	d008      	beq.n	800b4d0 <memmove+0x28>
 800b4be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b4c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b4c6:	e7f8      	b.n	800b4ba <memmove+0x12>
 800b4c8:	4402      	add	r2, r0
 800b4ca:	4601      	mov	r1, r0
 800b4cc:	428a      	cmp	r2, r1
 800b4ce:	d100      	bne.n	800b4d2 <memmove+0x2a>
 800b4d0:	bd10      	pop	{r4, pc}
 800b4d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b4d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b4da:	e7f7      	b.n	800b4cc <memmove+0x24>

0800b4dc <_fstat_r>:
 800b4dc:	b538      	push	{r3, r4, r5, lr}
 800b4de:	4d07      	ldr	r5, [pc, #28]	@ (800b4fc <_fstat_r+0x20>)
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	4608      	mov	r0, r1
 800b4e6:	4611      	mov	r1, r2
 800b4e8:	602b      	str	r3, [r5, #0]
 800b4ea:	f7f7 fc65 	bl	8002db8 <_fstat>
 800b4ee:	1c43      	adds	r3, r0, #1
 800b4f0:	d102      	bne.n	800b4f8 <_fstat_r+0x1c>
 800b4f2:	682b      	ldr	r3, [r5, #0]
 800b4f4:	b103      	cbz	r3, 800b4f8 <_fstat_r+0x1c>
 800b4f6:	6023      	str	r3, [r4, #0]
 800b4f8:	bd38      	pop	{r3, r4, r5, pc}
 800b4fa:	bf00      	nop
 800b4fc:	2000078c 	.word	0x2000078c

0800b500 <_isatty_r>:
 800b500:	b538      	push	{r3, r4, r5, lr}
 800b502:	4d06      	ldr	r5, [pc, #24]	@ (800b51c <_isatty_r+0x1c>)
 800b504:	2300      	movs	r3, #0
 800b506:	4604      	mov	r4, r0
 800b508:	4608      	mov	r0, r1
 800b50a:	602b      	str	r3, [r5, #0]
 800b50c:	f7f7 fc64 	bl	8002dd8 <_isatty>
 800b510:	1c43      	adds	r3, r0, #1
 800b512:	d102      	bne.n	800b51a <_isatty_r+0x1a>
 800b514:	682b      	ldr	r3, [r5, #0]
 800b516:	b103      	cbz	r3, 800b51a <_isatty_r+0x1a>
 800b518:	6023      	str	r3, [r4, #0]
 800b51a:	bd38      	pop	{r3, r4, r5, pc}
 800b51c:	2000078c 	.word	0x2000078c

0800b520 <_sbrk_r>:
 800b520:	b538      	push	{r3, r4, r5, lr}
 800b522:	4d06      	ldr	r5, [pc, #24]	@ (800b53c <_sbrk_r+0x1c>)
 800b524:	2300      	movs	r3, #0
 800b526:	4604      	mov	r4, r0
 800b528:	4608      	mov	r0, r1
 800b52a:	602b      	str	r3, [r5, #0]
 800b52c:	f7f7 fc6c 	bl	8002e08 <_sbrk>
 800b530:	1c43      	adds	r3, r0, #1
 800b532:	d102      	bne.n	800b53a <_sbrk_r+0x1a>
 800b534:	682b      	ldr	r3, [r5, #0]
 800b536:	b103      	cbz	r3, 800b53a <_sbrk_r+0x1a>
 800b538:	6023      	str	r3, [r4, #0]
 800b53a:	bd38      	pop	{r3, r4, r5, pc}
 800b53c:	2000078c 	.word	0x2000078c

0800b540 <abort>:
 800b540:	b508      	push	{r3, lr}
 800b542:	2006      	movs	r0, #6
 800b544:	f000 f86e 	bl	800b624 <raise>
 800b548:	2001      	movs	r0, #1
 800b54a:	f7f7 fbe5 	bl	8002d18 <_exit>

0800b54e <_calloc_r>:
 800b54e:	b570      	push	{r4, r5, r6, lr}
 800b550:	fba1 5402 	umull	r5, r4, r1, r2
 800b554:	b934      	cbnz	r4, 800b564 <_calloc_r+0x16>
 800b556:	4629      	mov	r1, r5
 800b558:	f7fe fe98 	bl	800a28c <_malloc_r>
 800b55c:	4606      	mov	r6, r0
 800b55e:	b928      	cbnz	r0, 800b56c <_calloc_r+0x1e>
 800b560:	4630      	mov	r0, r6
 800b562:	bd70      	pop	{r4, r5, r6, pc}
 800b564:	220c      	movs	r2, #12
 800b566:	6002      	str	r2, [r0, #0]
 800b568:	2600      	movs	r6, #0
 800b56a:	e7f9      	b.n	800b560 <_calloc_r+0x12>
 800b56c:	462a      	mov	r2, r5
 800b56e:	4621      	mov	r1, r4
 800b570:	f7fd fb48 	bl	8008c04 <memset>
 800b574:	e7f4      	b.n	800b560 <_calloc_r+0x12>

0800b576 <_realloc_r>:
 800b576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b57a:	4607      	mov	r7, r0
 800b57c:	4614      	mov	r4, r2
 800b57e:	460d      	mov	r5, r1
 800b580:	b921      	cbnz	r1, 800b58c <_realloc_r+0x16>
 800b582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b586:	4611      	mov	r1, r2
 800b588:	f7fe be80 	b.w	800a28c <_malloc_r>
 800b58c:	b92a      	cbnz	r2, 800b59a <_realloc_r+0x24>
 800b58e:	f7fe facf 	bl	8009b30 <_free_r>
 800b592:	4625      	mov	r5, r4
 800b594:	4628      	mov	r0, r5
 800b596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b59a:	f000 f85f 	bl	800b65c <_malloc_usable_size_r>
 800b59e:	4284      	cmp	r4, r0
 800b5a0:	4606      	mov	r6, r0
 800b5a2:	d802      	bhi.n	800b5aa <_realloc_r+0x34>
 800b5a4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b5a8:	d8f4      	bhi.n	800b594 <_realloc_r+0x1e>
 800b5aa:	4621      	mov	r1, r4
 800b5ac:	4638      	mov	r0, r7
 800b5ae:	f7fe fe6d 	bl	800a28c <_malloc_r>
 800b5b2:	4680      	mov	r8, r0
 800b5b4:	b908      	cbnz	r0, 800b5ba <_realloc_r+0x44>
 800b5b6:	4645      	mov	r5, r8
 800b5b8:	e7ec      	b.n	800b594 <_realloc_r+0x1e>
 800b5ba:	42b4      	cmp	r4, r6
 800b5bc:	4622      	mov	r2, r4
 800b5be:	4629      	mov	r1, r5
 800b5c0:	bf28      	it	cs
 800b5c2:	4632      	movcs	r2, r6
 800b5c4:	f7fd fc1f 	bl	8008e06 <memcpy>
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	4638      	mov	r0, r7
 800b5cc:	f7fe fab0 	bl	8009b30 <_free_r>
 800b5d0:	e7f1      	b.n	800b5b6 <_realloc_r+0x40>

0800b5d2 <_raise_r>:
 800b5d2:	291f      	cmp	r1, #31
 800b5d4:	b538      	push	{r3, r4, r5, lr}
 800b5d6:	4605      	mov	r5, r0
 800b5d8:	460c      	mov	r4, r1
 800b5da:	d904      	bls.n	800b5e6 <_raise_r+0x14>
 800b5dc:	2316      	movs	r3, #22
 800b5de:	6003      	str	r3, [r0, #0]
 800b5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e4:	bd38      	pop	{r3, r4, r5, pc}
 800b5e6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b5e8:	b112      	cbz	r2, 800b5f0 <_raise_r+0x1e>
 800b5ea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5ee:	b94b      	cbnz	r3, 800b604 <_raise_r+0x32>
 800b5f0:	4628      	mov	r0, r5
 800b5f2:	f000 f831 	bl	800b658 <_getpid_r>
 800b5f6:	4622      	mov	r2, r4
 800b5f8:	4601      	mov	r1, r0
 800b5fa:	4628      	mov	r0, r5
 800b5fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b600:	f000 b818 	b.w	800b634 <_kill_r>
 800b604:	2b01      	cmp	r3, #1
 800b606:	d00a      	beq.n	800b61e <_raise_r+0x4c>
 800b608:	1c59      	adds	r1, r3, #1
 800b60a:	d103      	bne.n	800b614 <_raise_r+0x42>
 800b60c:	2316      	movs	r3, #22
 800b60e:	6003      	str	r3, [r0, #0]
 800b610:	2001      	movs	r0, #1
 800b612:	e7e7      	b.n	800b5e4 <_raise_r+0x12>
 800b614:	2100      	movs	r1, #0
 800b616:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b61a:	4620      	mov	r0, r4
 800b61c:	4798      	blx	r3
 800b61e:	2000      	movs	r0, #0
 800b620:	e7e0      	b.n	800b5e4 <_raise_r+0x12>
	...

0800b624 <raise>:
 800b624:	4b02      	ldr	r3, [pc, #8]	@ (800b630 <raise+0xc>)
 800b626:	4601      	mov	r1, r0
 800b628:	6818      	ldr	r0, [r3, #0]
 800b62a:	f7ff bfd2 	b.w	800b5d2 <_raise_r>
 800b62e:	bf00      	nop
 800b630:	200001a4 	.word	0x200001a4

0800b634 <_kill_r>:
 800b634:	b538      	push	{r3, r4, r5, lr}
 800b636:	4d07      	ldr	r5, [pc, #28]	@ (800b654 <_kill_r+0x20>)
 800b638:	2300      	movs	r3, #0
 800b63a:	4604      	mov	r4, r0
 800b63c:	4608      	mov	r0, r1
 800b63e:	4611      	mov	r1, r2
 800b640:	602b      	str	r3, [r5, #0]
 800b642:	f7f7 fb59 	bl	8002cf8 <_kill>
 800b646:	1c43      	adds	r3, r0, #1
 800b648:	d102      	bne.n	800b650 <_kill_r+0x1c>
 800b64a:	682b      	ldr	r3, [r5, #0]
 800b64c:	b103      	cbz	r3, 800b650 <_kill_r+0x1c>
 800b64e:	6023      	str	r3, [r4, #0]
 800b650:	bd38      	pop	{r3, r4, r5, pc}
 800b652:	bf00      	nop
 800b654:	2000078c 	.word	0x2000078c

0800b658 <_getpid_r>:
 800b658:	f7f7 bb46 	b.w	8002ce8 <_getpid>

0800b65c <_malloc_usable_size_r>:
 800b65c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b660:	1f18      	subs	r0, r3, #4
 800b662:	2b00      	cmp	r3, #0
 800b664:	bfbc      	itt	lt
 800b666:	580b      	ldrlt	r3, [r1, r0]
 800b668:	18c0      	addlt	r0, r0, r3
 800b66a:	4770      	bx	lr

0800b66c <_init>:
 800b66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b66e:	bf00      	nop
 800b670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b672:	bc08      	pop	{r3}
 800b674:	469e      	mov	lr, r3
 800b676:	4770      	bx	lr

0800b678 <_fini>:
 800b678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b67a:	bf00      	nop
 800b67c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b67e:	bc08      	pop	{r3}
 800b680:	469e      	mov	lr, r3
 800b682:	4770      	bx	lr
