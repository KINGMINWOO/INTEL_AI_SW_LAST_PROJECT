
smart_farm_with_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009478  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  08009618  08009618  0000a618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ddc  08009ddc  0000b1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009ddc  08009ddc  0000addc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009de4  08009de4  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009de4  08009de4  0000ade4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009de8  08009de8  0000ade8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009dec  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b38  200001d8  08009fc4  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d10  08009fc4  0000bd10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3ff  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000228a  00000000  00000000  00019607  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc8  00000000  00000000  0001b898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac0  00000000  00000000  0001c660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178c7  00000000  00000000  0001d120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f520  00000000  00000000  000349e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009057f  00000000  00000000  00043f07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4486  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050c8  00000000  00000000  000d44cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d9594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009600 	.word	0x08009600

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08009600 	.word	0x08009600

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9be 	b.w	800104c <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	@ (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	468e      	mov	lr, r1
 8000d5c:	4604      	mov	r4, r0
 8000d5e:	4688      	mov	r8, r1
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d14a      	bne.n	8000dfa <__udivmoddi4+0xa6>
 8000d64:	428a      	cmp	r2, r1
 8000d66:	4617      	mov	r7, r2
 8000d68:	d962      	bls.n	8000e30 <__udivmoddi4+0xdc>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	b14e      	cbz	r6, 8000d84 <__udivmoddi4+0x30>
 8000d70:	f1c6 0320 	rsb	r3, r6, #32
 8000d74:	fa01 f806 	lsl.w	r8, r1, r6
 8000d78:	fa20 f303 	lsr.w	r3, r0, r3
 8000d7c:	40b7      	lsls	r7, r6
 8000d7e:	ea43 0808 	orr.w	r8, r3, r8
 8000d82:	40b4      	lsls	r4, r6
 8000d84:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d88:	fa1f fc87 	uxth.w	ip, r7
 8000d8c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d90:	0c23      	lsrs	r3, r4, #16
 8000d92:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	d909      	bls.n	8000db6 <__udivmoddi4+0x62>
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000da8:	f080 80ea 	bcs.w	8000f80 <__udivmoddi4+0x22c>
 8000dac:	429a      	cmp	r2, r3
 8000dae:	f240 80e7 	bls.w	8000f80 <__udivmoddi4+0x22c>
 8000db2:	3902      	subs	r1, #2
 8000db4:	443b      	add	r3, r7
 8000db6:	1a9a      	subs	r2, r3, r2
 8000db8:	b2a3      	uxth	r3, r4
 8000dba:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dbe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dc6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dca:	459c      	cmp	ip, r3
 8000dcc:	d909      	bls.n	8000de2 <__udivmoddi4+0x8e>
 8000dce:	18fb      	adds	r3, r7, r3
 8000dd0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dd4:	f080 80d6 	bcs.w	8000f84 <__udivmoddi4+0x230>
 8000dd8:	459c      	cmp	ip, r3
 8000dda:	f240 80d3 	bls.w	8000f84 <__udivmoddi4+0x230>
 8000dde:	443b      	add	r3, r7
 8000de0:	3802      	subs	r0, #2
 8000de2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000de6:	eba3 030c 	sub.w	r3, r3, ip
 8000dea:	2100      	movs	r1, #0
 8000dec:	b11d      	cbz	r5, 8000df6 <__udivmoddi4+0xa2>
 8000dee:	40f3      	lsrs	r3, r6
 8000df0:	2200      	movs	r2, #0
 8000df2:	e9c5 3200 	strd	r3, r2, [r5]
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	428b      	cmp	r3, r1
 8000dfc:	d905      	bls.n	8000e0a <__udivmoddi4+0xb6>
 8000dfe:	b10d      	cbz	r5, 8000e04 <__udivmoddi4+0xb0>
 8000e00:	e9c5 0100 	strd	r0, r1, [r5]
 8000e04:	2100      	movs	r1, #0
 8000e06:	4608      	mov	r0, r1
 8000e08:	e7f5      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e0a:	fab3 f183 	clz	r1, r3
 8000e0e:	2900      	cmp	r1, #0
 8000e10:	d146      	bne.n	8000ea0 <__udivmoddi4+0x14c>
 8000e12:	4573      	cmp	r3, lr
 8000e14:	d302      	bcc.n	8000e1c <__udivmoddi4+0xc8>
 8000e16:	4282      	cmp	r2, r0
 8000e18:	f200 8105 	bhi.w	8001026 <__udivmoddi4+0x2d2>
 8000e1c:	1a84      	subs	r4, r0, r2
 8000e1e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e22:	2001      	movs	r0, #1
 8000e24:	4690      	mov	r8, r2
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d0e5      	beq.n	8000df6 <__udivmoddi4+0xa2>
 8000e2a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e2e:	e7e2      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	f000 8090 	beq.w	8000f56 <__udivmoddi4+0x202>
 8000e36:	fab2 f682 	clz	r6, r2
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	f040 80a4 	bne.w	8000f88 <__udivmoddi4+0x234>
 8000e40:	1a8a      	subs	r2, r1, r2
 8000e42:	0c03      	lsrs	r3, r0, #16
 8000e44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e48:	b280      	uxth	r0, r0
 8000e4a:	b2bc      	uxth	r4, r7
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e52:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e5a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x11e>
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x11c>
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	f200 80e0 	bhi.w	8001030 <__udivmoddi4+0x2dc>
 8000e70:	46c4      	mov	ip, r8
 8000e72:	1a9b      	subs	r3, r3, r2
 8000e74:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e78:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e7c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e80:	fb02 f404 	mul.w	r4, r2, r4
 8000e84:	429c      	cmp	r4, r3
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x144>
 8000e88:	18fb      	adds	r3, r7, r3
 8000e8a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x142>
 8000e90:	429c      	cmp	r4, r3
 8000e92:	f200 80ca 	bhi.w	800102a <__udivmoddi4+0x2d6>
 8000e96:	4602      	mov	r2, r0
 8000e98:	1b1b      	subs	r3, r3, r4
 8000e9a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e9e:	e7a5      	b.n	8000dec <__udivmoddi4+0x98>
 8000ea0:	f1c1 0620 	rsb	r6, r1, #32
 8000ea4:	408b      	lsls	r3, r1
 8000ea6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eaa:	431f      	orrs	r7, r3
 8000eac:	fa0e f401 	lsl.w	r4, lr, r1
 8000eb0:	fa20 f306 	lsr.w	r3, r0, r6
 8000eb4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000eb8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ebc:	4323      	orrs	r3, r4
 8000ebe:	fa00 f801 	lsl.w	r8, r0, r1
 8000ec2:	fa1f fc87 	uxth.w	ip, r7
 8000ec6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eca:	0c1c      	lsrs	r4, r3, #16
 8000ecc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ed0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ed4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ed8:	45a6      	cmp	lr, r4
 8000eda:	fa02 f201 	lsl.w	r2, r2, r1
 8000ede:	d909      	bls.n	8000ef4 <__udivmoddi4+0x1a0>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ee6:	f080 809c 	bcs.w	8001022 <__udivmoddi4+0x2ce>
 8000eea:	45a6      	cmp	lr, r4
 8000eec:	f240 8099 	bls.w	8001022 <__udivmoddi4+0x2ce>
 8000ef0:	3802      	subs	r0, #2
 8000ef2:	443c      	add	r4, r7
 8000ef4:	eba4 040e 	sub.w	r4, r4, lr
 8000ef8:	fa1f fe83 	uxth.w	lr, r3
 8000efc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f00:	fb09 4413 	mls	r4, r9, r3, r4
 8000f04:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f08:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f0c:	45a4      	cmp	ip, r4
 8000f0e:	d908      	bls.n	8000f22 <__udivmoddi4+0x1ce>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f16:	f080 8082 	bcs.w	800101e <__udivmoddi4+0x2ca>
 8000f1a:	45a4      	cmp	ip, r4
 8000f1c:	d97f      	bls.n	800101e <__udivmoddi4+0x2ca>
 8000f1e:	3b02      	subs	r3, #2
 8000f20:	443c      	add	r4, r7
 8000f22:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f26:	eba4 040c 	sub.w	r4, r4, ip
 8000f2a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f2e:	4564      	cmp	r4, ip
 8000f30:	4673      	mov	r3, lr
 8000f32:	46e1      	mov	r9, ip
 8000f34:	d362      	bcc.n	8000ffc <__udivmoddi4+0x2a8>
 8000f36:	d05f      	beq.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f38:	b15d      	cbz	r5, 8000f52 <__udivmoddi4+0x1fe>
 8000f3a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f3e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f42:	fa04 f606 	lsl.w	r6, r4, r6
 8000f46:	fa22 f301 	lsr.w	r3, r2, r1
 8000f4a:	431e      	orrs	r6, r3
 8000f4c:	40cc      	lsrs	r4, r1
 8000f4e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f52:	2100      	movs	r1, #0
 8000f54:	e74f      	b.n	8000df6 <__udivmoddi4+0xa2>
 8000f56:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f5a:	0c01      	lsrs	r1, r0, #16
 8000f5c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f60:	b280      	uxth	r0, r0
 8000f62:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f66:	463b      	mov	r3, r7
 8000f68:	4638      	mov	r0, r7
 8000f6a:	463c      	mov	r4, r7
 8000f6c:	46b8      	mov	r8, r7
 8000f6e:	46be      	mov	lr, r7
 8000f70:	2620      	movs	r6, #32
 8000f72:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f76:	eba2 0208 	sub.w	r2, r2, r8
 8000f7a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f7e:	e766      	b.n	8000e4e <__udivmoddi4+0xfa>
 8000f80:	4601      	mov	r1, r0
 8000f82:	e718      	b.n	8000db6 <__udivmoddi4+0x62>
 8000f84:	4610      	mov	r0, r2
 8000f86:	e72c      	b.n	8000de2 <__udivmoddi4+0x8e>
 8000f88:	f1c6 0220 	rsb	r2, r6, #32
 8000f8c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f90:	40b7      	lsls	r7, r6
 8000f92:	40b1      	lsls	r1, r6
 8000f94:	fa20 f202 	lsr.w	r2, r0, r2
 8000f98:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f9c:	430a      	orrs	r2, r1
 8000f9e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fa2:	b2bc      	uxth	r4, r7
 8000fa4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fae:	fb08 f904 	mul.w	r9, r8, r4
 8000fb2:	40b0      	lsls	r0, r6
 8000fb4:	4589      	cmp	r9, r1
 8000fb6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fba:	b280      	uxth	r0, r0
 8000fbc:	d93e      	bls.n	800103c <__udivmoddi4+0x2e8>
 8000fbe:	1879      	adds	r1, r7, r1
 8000fc0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fc4:	d201      	bcs.n	8000fca <__udivmoddi4+0x276>
 8000fc6:	4589      	cmp	r9, r1
 8000fc8:	d81f      	bhi.n	800100a <__udivmoddi4+0x2b6>
 8000fca:	eba1 0109 	sub.w	r1, r1, r9
 8000fce:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fd2:	fb09 f804 	mul.w	r8, r9, r4
 8000fd6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fda:	b292      	uxth	r2, r2
 8000fdc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fe0:	4542      	cmp	r2, r8
 8000fe2:	d229      	bcs.n	8001038 <__udivmoddi4+0x2e4>
 8000fe4:	18ba      	adds	r2, r7, r2
 8000fe6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fea:	d2c4      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000fec:	4542      	cmp	r2, r8
 8000fee:	d2c2      	bcs.n	8000f76 <__udivmoddi4+0x222>
 8000ff0:	f1a9 0102 	sub.w	r1, r9, #2
 8000ff4:	443a      	add	r2, r7
 8000ff6:	e7be      	b.n	8000f76 <__udivmoddi4+0x222>
 8000ff8:	45f0      	cmp	r8, lr
 8000ffa:	d29d      	bcs.n	8000f38 <__udivmoddi4+0x1e4>
 8000ffc:	ebbe 0302 	subs.w	r3, lr, r2
 8001000:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001004:	3801      	subs	r0, #1
 8001006:	46e1      	mov	r9, ip
 8001008:	e796      	b.n	8000f38 <__udivmoddi4+0x1e4>
 800100a:	eba7 0909 	sub.w	r9, r7, r9
 800100e:	4449      	add	r1, r9
 8001010:	f1a8 0c02 	sub.w	ip, r8, #2
 8001014:	fbb1 f9fe 	udiv	r9, r1, lr
 8001018:	fb09 f804 	mul.w	r8, r9, r4
 800101c:	e7db      	b.n	8000fd6 <__udivmoddi4+0x282>
 800101e:	4673      	mov	r3, lr
 8001020:	e77f      	b.n	8000f22 <__udivmoddi4+0x1ce>
 8001022:	4650      	mov	r0, sl
 8001024:	e766      	b.n	8000ef4 <__udivmoddi4+0x1a0>
 8001026:	4608      	mov	r0, r1
 8001028:	e6fd      	b.n	8000e26 <__udivmoddi4+0xd2>
 800102a:	443b      	add	r3, r7
 800102c:	3a02      	subs	r2, #2
 800102e:	e733      	b.n	8000e98 <__udivmoddi4+0x144>
 8001030:	f1ac 0c02 	sub.w	ip, ip, #2
 8001034:	443b      	add	r3, r7
 8001036:	e71c      	b.n	8000e72 <__udivmoddi4+0x11e>
 8001038:	4649      	mov	r1, r9
 800103a:	e79c      	b.n	8000f76 <__udivmoddi4+0x222>
 800103c:	eba1 0109 	sub.w	r1, r1, r9
 8001040:	46c4      	mov	ip, r8
 8001042:	fbb1 f9fe 	udiv	r9, r1, lr
 8001046:	fb09 f804 	mul.w	r8, r9, r4
 800104a:	e7c4      	b.n	8000fd6 <__udivmoddi4+0x282>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <esp_at_command>:
extern uint8_t cdata;
static uint8_t data;
cb_data_t cb_data;
extern UART_HandleTypeDef huart6;
static int esp_at_command(uint8_t *cmd, uint8_t *resp, uint16_t *length, int16_t time_out)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
 800105c:	807b      	strh	r3, [r7, #2]
    *length = 0;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	801a      	strh	r2, [r3, #0]
    memset(resp, 0x00, MAX_UART_RX_BUFFER);
 8001064:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001068:	2100      	movs	r1, #0
 800106a:	68b8      	ldr	r0, [r7, #8]
 800106c:	f004 fec8 	bl	8005e00 <memset>
    memset(&cb_data, 0x00, sizeof(cb_data_t));
 8001070:	f240 4202 	movw	r2, #1026	@ 0x402
 8001074:	2100      	movs	r1, #0
 8001076:	4826      	ldr	r0, [pc, #152]	@ (8001110 <esp_at_command+0xc0>)
 8001078:	f004 fec2 	bl	8005e00 <memset>
    if(HAL_UART_Transmit(&huart6, cmd, strlen((char *)cmd), 100) != HAL_OK)
 800107c:	68f8      	ldr	r0, [r7, #12]
 800107e:	f7ff f90f 	bl	80002a0 <strlen>
 8001082:	4603      	mov	r3, r0
 8001084:	b29a      	uxth	r2, r3
 8001086:	2364      	movs	r3, #100	@ 0x64
 8001088:	68f9      	ldr	r1, [r7, #12]
 800108a:	4822      	ldr	r0, [pc, #136]	@ (8001114 <esp_at_command+0xc4>)
 800108c:	f002 fd6c 	bl	8003b68 <HAL_UART_Transmit>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d032      	beq.n	80010fc <esp_at_command+0xac>
        return -1;
 8001096:	f04f 33ff 	mov.w	r3, #4294967295
 800109a:	e035      	b.n	8001108 <esp_at_command+0xb8>

    while(time_out > 0)
    {
        if(cb_data.length >= MAX_UART_RX_BUFFER)
 800109c:	4b1c      	ldr	r3, [pc, #112]	@ (8001110 <esp_at_command+0xc0>)
 800109e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80010a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010a6:	d302      	bcc.n	80010ae <esp_at_command+0x5e>
            return -2;
 80010a8:	f06f 0301 	mvn.w	r3, #1
 80010ac:	e02c      	b.n	8001108 <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "ERROR") != NULL)
 80010ae:	491a      	ldr	r1, [pc, #104]	@ (8001118 <esp_at_command+0xc8>)
 80010b0:	4817      	ldr	r0, [pc, #92]	@ (8001110 <esp_at_command+0xc0>)
 80010b2:	f004 ff29 	bl	8005f08 <strstr>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d002      	beq.n	80010c2 <esp_at_command+0x72>
            return -3;
 80010bc:	f06f 0302 	mvn.w	r3, #2
 80010c0:	e022      	b.n	8001108 <esp_at_command+0xb8>
        else if(strstr((char *)cb_data.buf, "OK") != NULL)
 80010c2:	4916      	ldr	r1, [pc, #88]	@ (800111c <esp_at_command+0xcc>)
 80010c4:	4812      	ldr	r0, [pc, #72]	@ (8001110 <esp_at_command+0xc0>)
 80010c6:	f004 ff1f 	bl	8005f08 <strstr>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d00e      	beq.n	80010ee <esp_at_command+0x9e>
        {
            memcpy(resp, cb_data.buf, cb_data.length);
 80010d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001110 <esp_at_command+0xc0>)
 80010d2:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80010d6:	461a      	mov	r2, r3
 80010d8:	490d      	ldr	r1, [pc, #52]	@ (8001110 <esp_at_command+0xc0>)
 80010da:	68b8      	ldr	r0, [r7, #8]
 80010dc:	f004 ffa9 	bl	8006032 <memcpy>
            *length = cb_data.length;
 80010e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001110 <esp_at_command+0xc0>)
 80010e2:	f8b3 2400 	ldrh.w	r2, [r3, #1024]	@ 0x400
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	801a      	strh	r2, [r3, #0]
            return 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	e00c      	b.n	8001108 <esp_at_command+0xb8>
        }
        time_out -= 10;
 80010ee:	887b      	ldrh	r3, [r7, #2]
 80010f0:	3b0a      	subs	r3, #10
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	807b      	strh	r3, [r7, #2]
        HAL_Delay(10);
 80010f6:	200a      	movs	r0, #10
 80010f8:	f001 f8b4 	bl	8002264 <HAL_Delay>
    while(time_out > 0)
 80010fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001100:	2b00      	cmp	r3, #0
 8001102:	dccb      	bgt.n	800109c <esp_at_command+0x4c>
    }
    return -4;
 8001104:	f06f 0303 	mvn.w	r3, #3
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2000063c 	.word	0x2000063c
 8001114:	20000b1c 	.word	0x20000b1c
 8001118:	08009618 	.word	0x08009618
 800111c:	08009620 	.word	0x08009620

08001120 <esp_reset>:

static int esp_reset(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
    uint16_t length = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	80fb      	strh	r3, [r7, #6]
    if(esp_at_command((uint8_t *)"AT+RST\r\n", (uint8_t *)response, &length, 1000) != 0)
 800112a:	1dba      	adds	r2, r7, #6
 800112c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001130:	4909      	ldr	r1, [pc, #36]	@ (8001158 <esp_reset+0x38>)
 8001132:	480a      	ldr	r0, [pc, #40]	@ (800115c <esp_reset+0x3c>)
 8001134:	f7ff ff8c 	bl	8001050 <esp_at_command>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d002      	beq.n	8001144 <esp_reset+0x24>
    {
    	return -1;
 800113e:	f04f 33ff 	mov.w	r3, #4294967295
 8001142:	e004      	b.n	800114e <esp_reset+0x2e>
    }
    else
    	HAL_Delay(500);	//reboot
 8001144:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001148:	f001 f88c 	bl	8002264 <HAL_Delay>
    return 0;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000204 	.word	0x20000204
 800115c:	08009624 	.word	0x08009624

08001160 <request_ip_addr>:

    return 0;
}

static int request_ip_addr(uint8_t is_debug)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
    uint16_t length = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	817b      	strh	r3, [r7, #10]

    if(esp_at_command((uint8_t *)"AT+CIFSR\r\n", (uint8_t *)response, &length, 1000) != 0)
 800116e:	f107 020a 	add.w	r2, r7, #10
 8001172:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001176:	492d      	ldr	r1, [pc, #180]	@ (800122c <request_ip_addr+0xcc>)
 8001178:	482d      	ldr	r0, [pc, #180]	@ (8001230 <request_ip_addr+0xd0>)
 800117a:	f7ff ff69 	bl	8001050 <esp_at_command>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <request_ip_addr+0x2c>
        printf("request ip_addr command fail\r\n");
 8001184:	482b      	ldr	r0, [pc, #172]	@ (8001234 <request_ip_addr+0xd4>)
 8001186:	f004 fd39 	bl	8005bfc <puts>
 800118a:	e049      	b.n	8001220 <request_ip_addr+0xc0>
    else
    {
        char *line = strtok(response, "\r\n");
 800118c:	492a      	ldr	r1, [pc, #168]	@ (8001238 <request_ip_addr+0xd8>)
 800118e:	4827      	ldr	r0, [pc, #156]	@ (800122c <request_ip_addr+0xcc>)
 8001190:	f004 fe5e 	bl	8005e50 <strtok>
 8001194:	6178      	str	r0, [r7, #20]

        if(is_debug)
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d03e      	beq.n	800121a <request_ip_addr+0xba>
        {
            for(int i = 0 ; i < length ; i++)
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	e009      	b.n	80011b6 <request_ip_addr+0x56>
                printf("%c", response[i]);
 80011a2:	4a22      	ldr	r2, [pc, #136]	@ (800122c <request_ip_addr+0xcc>)
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4413      	add	r3, r2
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f004 fcc8 	bl	8005b40 <putchar>
            for(int i = 0 ; i < length ; i++)
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	3301      	adds	r3, #1
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	897b      	ldrh	r3, [r7, #10]
 80011b8:	461a      	mov	r2, r3
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4293      	cmp	r3, r2
 80011be:	dbf0      	blt.n	80011a2 <request_ip_addr+0x42>
        }

        while(line != NULL)
 80011c0:	e02b      	b.n	800121a <request_ip_addr+0xba>
        {
            if(strstr(line, "CIFSR:STAIP") != NULL)
 80011c2:	491e      	ldr	r1, [pc, #120]	@ (800123c <request_ip_addr+0xdc>)
 80011c4:	6978      	ldr	r0, [r7, #20]
 80011c6:	f004 fe9f 	bl	8005f08 <strstr>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d01f      	beq.n	8001210 <request_ip_addr+0xb0>
            {
                char *ip;

                strtok(line, "\"");
 80011d0:	491b      	ldr	r1, [pc, #108]	@ (8001240 <request_ip_addr+0xe0>)
 80011d2:	6978      	ldr	r0, [r7, #20]
 80011d4:	f004 fe3c 	bl	8005e50 <strtok>
                ip = strtok(NULL, "\"");
 80011d8:	4919      	ldr	r1, [pc, #100]	@ (8001240 <request_ip_addr+0xe0>)
 80011da:	2000      	movs	r0, #0
 80011dc:	f004 fe38 	bl	8005e50 <strtok>
 80011e0:	60f8      	str	r0, [r7, #12]
                if(strcmp(ip, "0.0.0.0") != 0)
 80011e2:	4918      	ldr	r1, [pc, #96]	@ (8001244 <request_ip_addr+0xe4>)
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f7fe fffb 	bl	80001e0 <strcmp>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00f      	beq.n	8001210 <request_ip_addr+0xb0>
                {
                    memset(ip_addr, 0x00, sizeof(ip_addr));
 80011f0:	2210      	movs	r2, #16
 80011f2:	2100      	movs	r1, #0
 80011f4:	4814      	ldr	r0, [pc, #80]	@ (8001248 <request_ip_addr+0xe8>)
 80011f6:	f004 fe03 	bl	8005e00 <memset>
                    memcpy(ip_addr, ip, strlen(ip));
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f7ff f850 	bl	80002a0 <strlen>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	68f9      	ldr	r1, [r7, #12]
 8001206:	4810      	ldr	r0, [pc, #64]	@ (8001248 <request_ip_addr+0xe8>)
 8001208:	f004 ff13 	bl	8006032 <memcpy>
                    return 0;
 800120c:	2300      	movs	r3, #0
 800120e:	e009      	b.n	8001224 <request_ip_addr+0xc4>
                }
            }
            line = strtok(NULL, "\r\n");
 8001210:	4909      	ldr	r1, [pc, #36]	@ (8001238 <request_ip_addr+0xd8>)
 8001212:	2000      	movs	r0, #0
 8001214:	f004 fe1c 	bl	8005e50 <strtok>
 8001218:	6178      	str	r0, [r7, #20]
        while(line != NULL)
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d1d0      	bne.n	80011c2 <request_ip_addr+0x62>
        }
    }
    return -1;
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001224:	4618      	mov	r0, r3
 8001226:	3718      	adds	r7, #24
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000204 	.word	0x20000204
 8001230:	0800966c 	.word	0x0800966c
 8001234:	08009678 	.word	0x08009678
 8001238:	08009660 	.word	0x08009660
 800123c:	08009698 	.word	0x08009698
 8001240:	08009668 	.word	0x08009668
 8001244:	08009630 	.word	0x08009630
 8001248:	200001f4 	.word	0x200001f4

0800124c <esp_client_conn>:
int esp_client_conn()
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b092      	sub	sp, #72	@ 0x48
 8001250:	af00      	add	r7, sp, #0
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001252:	f107 0308 	add.w	r3, r7, #8
 8001256:	2240      	movs	r2, #64	@ 0x40
 8001258:	2100      	movs	r1, #0
 800125a:	4618      	mov	r0, r3
 800125c:	f004 fdd0 	bl	8005e00 <memset>
  uint16_t length = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	80fb      	strh	r3, [r7, #6]
	sprintf(at_cmd,"AT+CIPSTART=\"TCP\",\"%s\",%d\r\n",DST_IP,DST_PORT);
 8001264:	f107 0008 	add.w	r0, r7, #8
 8001268:	f241 3388 	movw	r3, #5000	@ 0x1388
 800126c:	4a09      	ldr	r2, [pc, #36]	@ (8001294 <esp_client_conn+0x48>)
 800126e:	490a      	ldr	r1, [pc, #40]	@ (8001298 <esp_client_conn+0x4c>)
 8001270:	f004 fccc 	bl	8005c0c <siprintf>
	esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000);					//CONNECT
 8001274:	1dba      	adds	r2, r7, #6
 8001276:	f107 0008 	add.w	r0, r7, #8
 800127a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800127e:	4907      	ldr	r1, [pc, #28]	@ (800129c <esp_client_conn+0x50>)
 8001280:	f7ff fee6 	bl	8001050 <esp_at_command>

	esp_send_data("["LOGID":"PASSWD"]");
 8001284:	4806      	ldr	r0, [pc, #24]	@ (80012a0 <esp_client_conn+0x54>)
 8001286:	f000 f909 	bl	800149c <esp_send_data>
	return 0;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3748      	adds	r7, #72	@ 0x48
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	080096a4 	.word	0x080096a4
 8001298:	080096b0 	.word	0x080096b0
 800129c:	20000204 	.word	0x20000204
 80012a0:	080096cc 	.word	0x080096cc

080012a4 <esp_get_status>:
int esp_get_status()
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
	uint16_t length = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	80fb      	strh	r3, [r7, #6]
	esp_at_command((uint8_t *)"AT+CIPSTATUS\r\n",(uint8_t *)response, &length, 1000);					//CONNECT
 80012ae:	1dba      	adds	r2, r7, #6
 80012b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012b4:	4909      	ldr	r1, [pc, #36]	@ (80012dc <esp_get_status+0x38>)
 80012b6:	480a      	ldr	r0, [pc, #40]	@ (80012e0 <esp_get_status+0x3c>)
 80012b8:	f7ff feca 	bl	8001050 <esp_at_command>

    if(strstr((char *)response, "STATUS:3") != NULL)  //STATUS:3 The ESP8266 Station has created a TCP or UDP transmission
 80012bc:	4909      	ldr	r1, [pc, #36]	@ (80012e4 <esp_get_status+0x40>)
 80012be:	4807      	ldr	r0, [pc, #28]	@ (80012dc <esp_get_status+0x38>)
 80012c0:	f004 fe22 	bl	8005f08 <strstr>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <esp_get_status+0x2a>
    {
    	return 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	e001      	b.n	80012d2 <esp_get_status+0x2e>
    }
	return -1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000204 	.word	0x20000204
 80012e0:	080096e0 	.word	0x080096e0
 80012e4:	080096f0 	.word	0x080096f0

080012e8 <drv_esp_init>:
int drv_esp_init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
    memset(ip_addr, 0x00, sizeof(ip_addr));
 80012ec:	2210      	movs	r2, #16
 80012ee:	2100      	movs	r1, #0
 80012f0:	4806      	ldr	r0, [pc, #24]	@ (800130c <drv_esp_init+0x24>)
 80012f2:	f004 fd85 	bl	8005e00 <memset>
    HAL_UART_Receive_IT(&huart6, &data, 1);
 80012f6:	2201      	movs	r2, #1
 80012f8:	4905      	ldr	r1, [pc, #20]	@ (8001310 <drv_esp_init+0x28>)
 80012fa:	4806      	ldr	r0, [pc, #24]	@ (8001314 <drv_esp_init+0x2c>)
 80012fc:	f002 fd56 	bl	8003dac <HAL_UART_Receive_IT>

    return esp_reset();
 8001300:	f7ff ff0e 	bl	8001120 <esp_reset>
 8001304:	4603      	mov	r3, r0
}
 8001306:	4618      	mov	r0, r3
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200001f4 	.word	0x200001f4
 8001310:	2000063b 	.word	0x2000063b
 8001314:	20000b1c 	.word	0x20000b1c

08001318 <ap_conn_func>:
          printf("%c", response[i]);
  }
}

void ap_conn_func(char *ssid, char *passwd)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b094      	sub	sp, #80	@ 0x50
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	6039      	str	r1, [r7, #0]
  uint16_t length = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2240      	movs	r2, #64	@ 0x40
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f004 fd65 	bl	8005e00 <memset>
  if(ssid == NULL || passwd == NULL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d002      	beq.n	8001342 <ap_conn_func+0x2a>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d103      	bne.n	800134a <ap_conn_func+0x32>
  {
      printf("invalid command : ap_conn <ssid> <passwd>\r\n");
 8001342:	4817      	ldr	r0, [pc, #92]	@ (80013a0 <ap_conn_func+0x88>)
 8001344:	f004 fc5a 	bl	8005bfc <puts>
 8001348:	e026      	b.n	8001398 <ap_conn_func+0x80>
      return;
  }
  if(esp_at_command((uint8_t *)"AT+CWMODE=1\r\n", (uint8_t *)response, &length, 1000) != 0)
 800134a:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 800134e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001352:	4914      	ldr	r1, [pc, #80]	@ (80013a4 <ap_conn_func+0x8c>)
 8001354:	4814      	ldr	r0, [pc, #80]	@ (80013a8 <ap_conn_func+0x90>)
 8001356:	f7ff fe7b 	bl	8001050 <esp_at_command>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d002      	beq.n	8001366 <ap_conn_func+0x4e>
      printf("Station mode fail\r\n");
 8001360:	4812      	ldr	r0, [pc, #72]	@ (80013ac <ap_conn_func+0x94>)
 8001362:	f004 fc4b 	bl	8005bfc <puts>
  sprintf(at_cmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid,passwd);
 8001366:	f107 000c 	add.w	r0, r7, #12
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	4910      	ldr	r1, [pc, #64]	@ (80013b0 <ap_conn_func+0x98>)
 8001370:	f004 fc4c 	bl	8005c0c <siprintf>
  if(esp_at_command((uint8_t *)at_cmd, (uint8_t *)response, &length, 6000) != 0)
 8001374:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8001378:	f107 000c 	add.w	r0, r7, #12
 800137c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8001380:	4908      	ldr	r1, [pc, #32]	@ (80013a4 <ap_conn_func+0x8c>)
 8001382:	f7ff fe65 	bl	8001050 <esp_at_command>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d005      	beq.n	8001398 <ap_conn_func+0x80>
      printf("ap scan command fail : %s\r\n",at_cmd);
 800138c:	f107 030c 	add.w	r3, r7, #12
 8001390:	4619      	mov	r1, r3
 8001392:	4808      	ldr	r0, [pc, #32]	@ (80013b4 <ap_conn_func+0x9c>)
 8001394:	f004 fbc2 	bl	8005b1c <iprintf>
}
 8001398:	3750      	adds	r7, #80	@ 0x50
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	08009754 	.word	0x08009754
 80013a4:	20000204 	.word	0x20000204
 80013a8:	08009780 	.word	0x08009780
 80013ac:	08009790 	.word	0x08009790
 80013b0:	080097a4 	.word	0x080097a4
 80013b4:	080097bc 	.word	0x080097bc

080013b8 <HAL_UART_RxCpltCallback>:
  if(esp_get_ip_addr(1) == 0)
      printf("ip_addr = [%s]\r\n", ip_addr);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]

    if(huart->Instance == USART6)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a23      	ldr	r2, [pc, #140]	@ (8001454 <HAL_UART_RxCpltCallback+0x9c>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d117      	bne.n	80013fa <HAL_UART_RxCpltCallback+0x42>
    {
        if(cb_data.length < MAX_ESP_RX_BUFFER)
 80013ca:	4b23      	ldr	r3, [pc, #140]	@ (8001458 <HAL_UART_RxCpltCallback+0xa0>)
 80013cc:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80013d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013d4:	d20c      	bcs.n	80013f0 <HAL_UART_RxCpltCallback+0x38>
        {
            cb_data.buf[cb_data.length++] = data;
 80013d6:	4b20      	ldr	r3, [pc, #128]	@ (8001458 <HAL_UART_RxCpltCallback+0xa0>)
 80013d8:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	b291      	uxth	r1, r2
 80013e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001458 <HAL_UART_RxCpltCallback+0xa0>)
 80013e2:	f8a2 1400 	strh.w	r1, [r2, #1024]	@ 0x400
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b1c      	ldr	r3, [pc, #112]	@ (800145c <HAL_UART_RxCpltCallback+0xa4>)
 80013ea:	7819      	ldrb	r1, [r3, #0]
 80013ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <HAL_UART_RxCpltCallback+0xa0>)
 80013ee:	5499      	strb	r1, [r3, r2]
        }

        HAL_UART_Receive_IT(huart, &data, 1);
 80013f0:	2201      	movs	r2, #1
 80013f2:	491a      	ldr	r1, [pc, #104]	@ (800145c <HAL_UART_RxCpltCallback+0xa4>)
 80013f4:	6878      	ldr	r0, [r7, #4]
 80013f6:	f002 fcd9 	bl	8003dac <HAL_UART_Receive_IT>
    }
    if(huart->Instance == USART2)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a18      	ldr	r2, [pc, #96]	@ (8001460 <HAL_UART_RxCpltCallback+0xa8>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d122      	bne.n	800144a <HAL_UART_RxCpltCallback+0x92>
    {
    	static int i=0;
    	rx2Data[i] = cdata;
 8001404:	4b17      	ldr	r3, [pc, #92]	@ (8001464 <HAL_UART_RxCpltCallback+0xac>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a17      	ldr	r2, [pc, #92]	@ (8001468 <HAL_UART_RxCpltCallback+0xb0>)
 800140a:	7811      	ldrb	r1, [r2, #0]
 800140c:	4a17      	ldr	r2, [pc, #92]	@ (800146c <HAL_UART_RxCpltCallback+0xb4>)
 800140e:	54d1      	strb	r1, [r2, r3]
    	if(rx2Data[i] == '\r')
 8001410:	4b14      	ldr	r3, [pc, #80]	@ (8001464 <HAL_UART_RxCpltCallback+0xac>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a15      	ldr	r2, [pc, #84]	@ (800146c <HAL_UART_RxCpltCallback+0xb4>)
 8001416:	5cd3      	ldrb	r3, [r2, r3]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b0d      	cmp	r3, #13
 800141c:	d10b      	bne.n	8001436 <HAL_UART_RxCpltCallback+0x7e>
    	{
    		rx2Data[i] = '\0';
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <HAL_UART_RxCpltCallback+0xac>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a12      	ldr	r2, [pc, #72]	@ (800146c <HAL_UART_RxCpltCallback+0xb4>)
 8001424:	2100      	movs	r1, #0
 8001426:	54d1      	strb	r1, [r2, r3]
    		rx2Flag = 1;
 8001428:	4b11      	ldr	r3, [pc, #68]	@ (8001470 <HAL_UART_RxCpltCallback+0xb8>)
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
    		i = 0;
 800142e:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <HAL_UART_RxCpltCallback+0xac>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	e004      	b.n	8001440 <HAL_UART_RxCpltCallback+0x88>
    	}
    	else
    	{
    		i++;
 8001436:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <HAL_UART_RxCpltCallback+0xac>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	4a09      	ldr	r2, [pc, #36]	@ (8001464 <HAL_UART_RxCpltCallback+0xac>)
 800143e:	6013      	str	r3, [r2, #0]
    	}
    	HAL_UART_Receive_IT(huart, &cdata,1);
 8001440:	2201      	movs	r2, #1
 8001442:	4909      	ldr	r1, [pc, #36]	@ (8001468 <HAL_UART_RxCpltCallback+0xb0>)
 8001444:	6878      	ldr	r0, [r7, #4]
 8001446:	f002 fcb1 	bl	8003dac <HAL_UART_Receive_IT>
    }
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40011400 	.word	0x40011400
 8001458:	2000063c 	.word	0x2000063c
 800145c:	2000063b 	.word	0x2000063b
 8001460:	40004400 	.word	0x40004400
 8001464:	20000a40 	.word	0x20000a40
 8001468:	2000063a 	.word	0x2000063a
 800146c:	20000608 	.word	0x20000608
 8001470:	20000604 	.word	0x20000604

08001474 <AiotClient_Init>:


void AiotClient_Init()
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
//	reset_func();
//	version_func();
	ap_conn_func(SSID,PASS);
 8001478:	4906      	ldr	r1, [pc, #24]	@ (8001494 <AiotClient_Init+0x20>)
 800147a:	4807      	ldr	r0, [pc, #28]	@ (8001498 <AiotClient_Init+0x24>)
 800147c:	f7ff ff4c 	bl	8001318 <ap_conn_func>
//	ip_state_func();
	request_ip_addr(1);
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff fe6d 	bl	8001160 <request_ip_addr>
	esp_client_conn();
 8001486:	f7ff fee1 	bl	800124c <esp_client_conn>
	esp_get_status();
 800148a:	f7ff ff0b 	bl	80012a4 <esp_get_status>
}
 800148e:	bf00      	nop
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	0800981c 	.word	0x0800981c
 8001498:	08009828 	.word	0x08009828

0800149c <esp_send_data>:

void esp_send_data(char *data)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b094      	sub	sp, #80	@ 0x50
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	char at_cmd[MAX_ESP_COMMAND_LEN] = {0, };
 80014a4:	f107 0310 	add.w	r3, r7, #16
 80014a8:	2240      	movs	r2, #64	@ 0x40
 80014aa:	2100      	movs	r1, #0
 80014ac:	4618      	mov	r0, r3
 80014ae:	f004 fca7 	bl	8005e00 <memset>
	uint16_t length = 0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	81fb      	strh	r3, [r7, #14]
	sprintf(at_cmd,"AT+CIPSEND=%d\r\n",strlen(data));
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f7fe fef2 	bl	80002a0 <strlen>
 80014bc:	4602      	mov	r2, r0
 80014be:	f107 0310 	add.w	r3, r7, #16
 80014c2:	490e      	ldr	r1, [pc, #56]	@ (80014fc <esp_send_data+0x60>)
 80014c4:	4618      	mov	r0, r3
 80014c6:	f004 fba1 	bl	8005c0c <siprintf>
	if(esp_at_command((uint8_t *)at_cmd,(uint8_t *)response, &length, 1000) == 0)
 80014ca:	f107 020e 	add.w	r2, r7, #14
 80014ce:	f107 0010 	add.w	r0, r7, #16
 80014d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014d6:	490a      	ldr	r1, [pc, #40]	@ (8001500 <esp_send_data+0x64>)
 80014d8:	f7ff fdba 	bl	8001050 <esp_at_command>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d107      	bne.n	80014f2 <esp_send_data+0x56>
	{
		esp_at_command((uint8_t *)data,(uint8_t *)response, &length, 1000);
 80014e2:	f107 020e 	add.w	r2, r7, #14
 80014e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ea:	4905      	ldr	r1, [pc, #20]	@ (8001500 <esp_send_data+0x64>)
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff fdaf 	bl	8001050 <esp_at_command>
	}
}
 80014f2:	bf00      	nop
 80014f4:	3750      	adds	r7, #80	@ 0x50
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	08009830 	.word	0x08009830
 8001500:	20000204 	.word	0x20000204

08001504 <drv_uart_init>:

//==================uart2=========================
int drv_uart_init(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &cdata,1);
 8001508:	2201      	movs	r2, #1
 800150a:	4903      	ldr	r1, [pc, #12]	@ (8001518 <drv_uart_init+0x14>)
 800150c:	4803      	ldr	r0, [pc, #12]	@ (800151c <drv_uart_init+0x18>)
 800150e:	f002 fc4d 	bl	8003dac <HAL_UART_Receive_IT>
    return 0;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	bd80      	pop	{r7, pc}
 8001518:	2000063a 	.word	0x2000063a
 800151c:	20000ad4 	.word	0x20000ad4

08001520 <__io_putchar>:
        return -1;

    return 0;
}
int __io_putchar(int ch)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
    if(HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 10) == HAL_OK)
 8001528:	1d39      	adds	r1, r7, #4
 800152a:	230a      	movs	r3, #10
 800152c:	2201      	movs	r2, #1
 800152e:	4807      	ldr	r0, [pc, #28]	@ (800154c <__io_putchar+0x2c>)
 8001530:	f002 fb1a 	bl	8003b68 <HAL_UART_Transmit>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d101      	bne.n	800153e <__io_putchar+0x1e>
        return ch;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	e001      	b.n	8001542 <__io_putchar+0x22>
    return -1;
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000ad4 	.word	0x20000ad4

08001550 <ReadTempHumECPH>:
//  return ch;
//}

/* =======================================온도, 습도, EC, PH 값 읽어오기============================================== */
static void ReadTempHumECPH()
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b088      	sub	sp, #32
 8001554:	af00      	add	r7, sp, #0
	uint8_t tx_data[8] = {0x01, 0x03, 0x00, 0x00, 0x00, 0x07, 0x04, 0x08};
 8001556:	4a2c      	ldr	r2, [pc, #176]	@ (8001608 <ReadTempHumECPH+0xb8>)
 8001558:	f107 0318 	add.w	r3, r7, #24
 800155c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001560:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t rx_data[19] = {0,};
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	2200      	movs	r2, #0
 8001568:	601a      	str	r2, [r3, #0]
 800156a:	605a      	str	r2, [r3, #4]
 800156c:	609a      	str	r2, [r3, #8]
 800156e:	60da      	str	r2, [r3, #12]
 8001570:	f8c3 200f 	str.w	r2, [r3, #15]

	HAL_UART_Transmit(&huart1, tx_data, 8, 100);
 8001574:	f107 0118 	add.w	r1, r7, #24
 8001578:	2364      	movs	r3, #100	@ 0x64
 800157a:	2208      	movs	r2, #8
 800157c:	4823      	ldr	r0, [pc, #140]	@ (800160c <ReadTempHumECPH+0xbc>)
 800157e:	f002 faf3 	bl	8003b68 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, rx_data, 19, 100);
 8001582:	1d39      	adds	r1, r7, #4
 8001584:	2364      	movs	r3, #100	@ 0x64
 8001586:	2213      	movs	r2, #19
 8001588:	4820      	ldr	r0, [pc, #128]	@ (800160c <ReadTempHumECPH+0xbc>)
 800158a:	f002 fb78 	bl	8003c7e <HAL_UART_Receive>

	if(rx_data[0] == 1 && rx_data[1] == 3)
 800158e:	793b      	ldrb	r3, [r7, #4]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d135      	bne.n	8001600 <ReadTempHumECPH+0xb0>
 8001594:	797b      	ldrb	r3, [r7, #5]
 8001596:	2b03      	cmp	r3, #3
 8001598:	d132      	bne.n	8001600 <ReadTempHumECPH+0xb0>
	{
	  humi = (float)((rx_data[3] << 8) | rx_data[4]) / 10.0;
 800159a:	79fb      	ldrb	r3, [r7, #7]
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	7a3a      	ldrb	r2, [r7, #8]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	ee07 3a90 	vmov	s15, r3
 80015a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015aa:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80015ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015b2:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <ReadTempHumECPH+0xc0>)
 80015b4:	edc3 7a00 	vstr	s15, [r3]
	  temp = (float)((rx_data[5] << 8) | rx_data[6]) / 10.0;
 80015b8:	7a7b      	ldrb	r3, [r7, #9]
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	7aba      	ldrb	r2, [r7, #10]
 80015be:	4313      	orrs	r3, r2
 80015c0:	ee07 3a90 	vmov	s15, r3
 80015c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015c8:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80015cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015d0:	4b10      	ldr	r3, [pc, #64]	@ (8001614 <ReadTempHumECPH+0xc4>)
 80015d2:	edc3 7a00 	vstr	s15, [r3]
	  ec = (int)((rx_data[7] << 8) | rx_data[8]);
 80015d6:	7afb      	ldrb	r3, [r7, #11]
 80015d8:	021b      	lsls	r3, r3, #8
 80015da:	7b3a      	ldrb	r2, [r7, #12]
 80015dc:	4313      	orrs	r3, r2
 80015de:	4a0e      	ldr	r2, [pc, #56]	@ (8001618 <ReadTempHumECPH+0xc8>)
 80015e0:	6013      	str	r3, [r2, #0]
	  ph = (float)((rx_data[9] << 8) | rx_data[10]) / 10.0;
 80015e2:	7b7b      	ldrb	r3, [r7, #13]
 80015e4:	021b      	lsls	r3, r3, #8
 80015e6:	7bba      	ldrb	r2, [r7, #14]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	ee07 3a90 	vmov	s15, r3
 80015ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015f2:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 80015f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015fa:	4b08      	ldr	r3, [pc, #32]	@ (800161c <ReadTempHumECPH+0xcc>)
 80015fc:	edc3 7a00 	vstr	s15, [r3]

//	  printf("TEM=%.1f C  HUM=%.1f %%RH  EC=%d us/cm  PH=%.1f\r\n",
//			  temp, humi, ec, ph);
	}
}
 8001600:	bf00      	nop
 8001602:	3720      	adds	r7, #32
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	08009840 	.word	0x08009840
 800160c:	20000a8c 	.word	0x20000a8c
 8001610:	20000b68 	.word	0x20000b68
 8001614:	20000b64 	.word	0x20000b64
 8001618:	20000b70 	.word	0x20000b70
 800161c:	20000b6c 	.word	0x20000b6c

08001620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	int ret = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	607b      	str	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800162a:	f000 fda9 	bl	8002180 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800162e:	f000 f89d 	bl	800176c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001632:	f000 f9d1 	bl	80019d8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001636:	f000 f97b 	bl	8001930 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800163a:	f000 f94f 	bl	80018dc <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800163e:	f000 f9a1 	bl	8001984 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8001642:	f000 f8fd 	bl	8001840 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("\r\n[BOOT] Soil Sensor demo (USART1=Sensor, USART2=Debug)\r\n");
 8001646:	483b      	ldr	r0, [pc, #236]	@ (8001734 <main+0x114>)
 8001648:	f004 fad8 	bl	8005bfc <puts>
  printf("Start main() - wifi\r\n");
 800164c:	483a      	ldr	r0, [pc, #232]	@ (8001738 <main+0x118>)
 800164e:	f004 fad5 	bl	8005bfc <puts>
  ret |= drv_uart_init();
 8001652:	f7ff ff57 	bl	8001504 <drv_uart_init>
 8001656:	4602      	mov	r2, r0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4313      	orrs	r3, r2
 800165c:	607b      	str	r3, [r7, #4]
  ret |= drv_esp_init();
 800165e:	f7ff fe43 	bl	80012e8 <drv_esp_init>
 8001662:	4602      	mov	r2, r0
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	4313      	orrs	r3, r2
 8001668:	607b      	str	r3, [r7, #4]
  if(ret != 0)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d004      	beq.n	800167a <main+0x5a>
  {
	  printf("Esp response error\r\n");
 8001670:	4832      	ldr	r0, [pc, #200]	@ (800173c <main+0x11c>)
 8001672:	f004 fac3 	bl	8005bfc <puts>
	  Error_Handler();
 8001676:	f000 fb09 	bl	8001c8c <Error_Handler>
  }

  AiotClient_Init();
 800167a:	f7ff fefb 	bl	8001474 <AiotClient_Init>
  if(HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 800167e:	4830      	ldr	r0, [pc, #192]	@ (8001740 <main+0x120>)
 8001680:	f001 fe3e 	bl	8003300 <HAL_TIM_Base_Start_IT>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <main+0x6e>
  {
	  Error_Handler();
 800168a:	f000 faff 	bl	8001c8c <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 800168e:	492d      	ldr	r1, [pc, #180]	@ (8001744 <main+0x124>)
 8001690:	482d      	ldr	r0, [pc, #180]	@ (8001748 <main+0x128>)
 8001692:	f004 fc39 	bl	8005f08 <strstr>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d01d      	beq.n	80016d8 <main+0xb8>
 800169c:	4b2a      	ldr	r3, [pc, #168]	@ (8001748 <main+0x128>)
 800169e:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 80016a2:	3b01      	subs	r3, #1
 80016a4:	4a28      	ldr	r2, [pc, #160]	@ (8001748 <main+0x128>)
 80016a6:	5cd3      	ldrb	r3, [r2, r3]
 80016a8:	2b0a      	cmp	r3, #10
 80016aa:	d115      	bne.n	80016d8 <main+0xb8>
	  {
		  //?��?��?���??  \r\n+IPD,15:[KSH_LIN]HELLO\n
		  strcpy(strBuff,strchr((char *)cb_data.buf,'['));
 80016ac:	215b      	movs	r1, #91	@ 0x5b
 80016ae:	4826      	ldr	r0, [pc, #152]	@ (8001748 <main+0x128>)
 80016b0:	f004 fbae 	bl	8005e10 <strchr>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4619      	mov	r1, r3
 80016b8:	4824      	ldr	r0, [pc, #144]	@ (800174c <main+0x12c>)
 80016ba:	f004 fcb2 	bl	8006022 <strcpy>
		  memset(cb_data.buf,0x0,sizeof(cb_data.buf));
 80016be:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016c2:	2100      	movs	r1, #0
 80016c4:	4820      	ldr	r0, [pc, #128]	@ (8001748 <main+0x128>)
 80016c6:	f004 fb9b 	bl	8005e00 <memset>
		  cb_data.length = 0;
 80016ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001748 <main+0x128>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400
		  esp_event(strBuff);
 80016d2:	481e      	ldr	r0, [pc, #120]	@ (800174c <main+0x12c>)
 80016d4:	f000 fa12 	bl	8001afc <esp_event>
	  }
	  if(rx2Flag)
 80016d8:	4b1d      	ldr	r3, [pc, #116]	@ (8001750 <main+0x130>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	b2db      	uxtb	r3, r3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d006      	beq.n	80016f0 <main+0xd0>
	  {
			printf("recv2 : %s\r\n",rx2Data);
 80016e2:	491c      	ldr	r1, [pc, #112]	@ (8001754 <main+0x134>)
 80016e4:	481c      	ldr	r0, [pc, #112]	@ (8001758 <main+0x138>)
 80016e6:	f004 fa19 	bl	8005b1c <iprintf>
			rx2Flag =0;
 80016ea:	4b19      	ldr	r3, [pc, #100]	@ (8001750 <main+0x130>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	701a      	strb	r2, [r3, #0]
	//	    HAL_UART_Transmit(&huart6, (uint8_t *)buf, strlen(buf), 0xFFFF);
	  }

	  if(tim3Flag1Sec)	//1초에 한번
 80016f0:	4b1a      	ldr	r3, [pc, #104]	@ (800175c <main+0x13c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0ca      	beq.n	800168e <main+0x6e>
	  {
		  tim3Flag1Sec = 0;
 80016f8:	4b18      	ldr	r3, [pc, #96]	@ (800175c <main+0x13c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]

		  ReadTempHumECPH(); // 온도, 습도, EC, PH값 읽기
 80016fe:	f7ff ff27 	bl	8001550 <ReadTempHumECPH>

		  if(!(tim3Sec%10)) //10초에 한번
 8001702:	4b17      	ldr	r3, [pc, #92]	@ (8001760 <main+0x140>)
 8001704:	6819      	ldr	r1, [r3, #0]
 8001706:	4b17      	ldr	r3, [pc, #92]	@ (8001764 <main+0x144>)
 8001708:	fba3 2301 	umull	r2, r3, r3, r1
 800170c:	08da      	lsrs	r2, r3, #3
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	1aca      	subs	r2, r1, r3
 8001718:	2a00      	cmp	r2, #0
 800171a:	d1b8      	bne.n	800168e <main+0x6e>
		  {
			  if(esp_get_status() != 0)
 800171c:	f7ff fdc2 	bl	80012a4 <esp_get_status>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d0b3      	beq.n	800168e <main+0x6e>
			  {
				  printf("server connecting ...\r\n");
 8001726:	4810      	ldr	r0, [pc, #64]	@ (8001768 <main+0x148>)
 8001728:	f004 fa68 	bl	8005bfc <puts>
				  esp_client_conn();
 800172c:	f7ff fd8e 	bl	800124c <esp_client_conn>
	  if(strstr((char *)cb_data.buf,"+IPD") && cb_data.buf[cb_data.length-1] == '\n')
 8001730:	e7ad      	b.n	800168e <main+0x6e>
 8001732:	bf00      	nop
 8001734:	08009848 	.word	0x08009848
 8001738:	08009884 	.word	0x08009884
 800173c:	0800989c 	.word	0x0800989c
 8001740:	20000a44 	.word	0x20000a44
 8001744:	080098b0 	.word	0x080098b0
 8001748:	2000063c 	.word	0x2000063c
 800174c:	20000b78 	.word	0x20000b78
 8001750:	20000604 	.word	0x20000604
 8001754:	20000608 	.word	0x20000608
 8001758:	080098b8 	.word	0x080098b8
 800175c:	20000000 	.word	0x20000000
 8001760:	20000b74 	.word	0x20000b74
 8001764:	cccccccd 	.word	0xcccccccd
 8001768:	080098c8 	.word	0x080098c8

0800176c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b094      	sub	sp, #80	@ 0x50
 8001770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001772:	f107 0320 	add.w	r3, r7, #32
 8001776:	2230      	movs	r2, #48	@ 0x30
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f004 fb40 	bl	8005e00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001780:	f107 030c 	add.w	r3, r7, #12
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001790:	2300      	movs	r3, #0
 8001792:	60bb      	str	r3, [r7, #8]
 8001794:	4b28      	ldr	r3, [pc, #160]	@ (8001838 <SystemClock_Config+0xcc>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	4a27      	ldr	r2, [pc, #156]	@ (8001838 <SystemClock_Config+0xcc>)
 800179a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800179e:	6413      	str	r3, [r2, #64]	@ 0x40
 80017a0:	4b25      	ldr	r3, [pc, #148]	@ (8001838 <SystemClock_Config+0xcc>)
 80017a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ac:	2300      	movs	r3, #0
 80017ae:	607b      	str	r3, [r7, #4]
 80017b0:	4b22      	ldr	r3, [pc, #136]	@ (800183c <SystemClock_Config+0xd0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a21      	ldr	r2, [pc, #132]	@ (800183c <SystemClock_Config+0xd0>)
 80017b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b1f      	ldr	r3, [pc, #124]	@ (800183c <SystemClock_Config+0xd0>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017c8:	2302      	movs	r3, #2
 80017ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017cc:	2301      	movs	r3, #1
 80017ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017d0:	2310      	movs	r3, #16
 80017d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d4:	2302      	movs	r3, #2
 80017d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017d8:	2300      	movs	r3, #0
 80017da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80017dc:	2310      	movs	r3, #16
 80017de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80017e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017e6:	2304      	movs	r3, #4
 80017e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017ea:	2304      	movs	r3, #4
 80017ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ee:	f107 0320 	add.w	r3, r7, #32
 80017f2:	4618      	mov	r0, r3
 80017f4:	f001 f89c 	bl	8002930 <HAL_RCC_OscConfig>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80017fe:	f000 fa45 	bl	8001c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001802:	230f      	movs	r3, #15
 8001804:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001806:	2302      	movs	r3, #2
 8001808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800180e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001812:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001814:	2300      	movs	r3, #0
 8001816:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	2102      	movs	r1, #2
 800181e:	4618      	mov	r0, r3
 8001820:	f001 fafe 	bl	8002e20 <HAL_RCC_ClockConfig>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800182a:	f000 fa2f 	bl	8001c8c <Error_Handler>
  }
}
 800182e:	bf00      	nop
 8001830:	3750      	adds	r7, #80	@ 0x50
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800
 800183c:	40007000 	.word	0x40007000

08001840 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	463b      	mov	r3, r7
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800185c:	4b1d      	ldr	r3, [pc, #116]	@ (80018d4 <MX_TIM3_Init+0x94>)
 800185e:	4a1e      	ldr	r2, [pc, #120]	@ (80018d8 <MX_TIM3_Init+0x98>)
 8001860:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001862:	4b1c      	ldr	r3, [pc, #112]	@ (80018d4 <MX_TIM3_Init+0x94>)
 8001864:	2253      	movs	r2, #83	@ 0x53
 8001866:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001868:	4b1a      	ldr	r3, [pc, #104]	@ (80018d4 <MX_TIM3_Init+0x94>)
 800186a:	2200      	movs	r2, #0
 800186c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 800186e:	4b19      	ldr	r3, [pc, #100]	@ (80018d4 <MX_TIM3_Init+0x94>)
 8001870:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001874:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001876:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <MX_TIM3_Init+0x94>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800187c:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <MX_TIM3_Init+0x94>)
 800187e:	2280      	movs	r2, #128	@ 0x80
 8001880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001882:	4814      	ldr	r0, [pc, #80]	@ (80018d4 <MX_TIM3_Init+0x94>)
 8001884:	f001 fcec 	bl	8003260 <HAL_TIM_Base_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800188e:	f000 f9fd 	bl	8001c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001892:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001896:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001898:	f107 0308 	add.w	r3, r7, #8
 800189c:	4619      	mov	r1, r3
 800189e:	480d      	ldr	r0, [pc, #52]	@ (80018d4 <MX_TIM3_Init+0x94>)
 80018a0:	f001 fe80 	bl	80035a4 <HAL_TIM_ConfigClockSource>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80018aa:	f000 f9ef 	bl	8001c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018ae:	2300      	movs	r3, #0
 80018b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018b6:	463b      	mov	r3, r7
 80018b8:	4619      	mov	r1, r3
 80018ba:	4806      	ldr	r0, [pc, #24]	@ (80018d4 <MX_TIM3_Init+0x94>)
 80018bc:	f002 f882 	bl	80039c4 <HAL_TIMEx_MasterConfigSynchronization>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80018c6:	f000 f9e1 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018ca:	bf00      	nop
 80018cc:	3718      	adds	r7, #24
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000a44 	.word	0x20000a44
 80018d8:	40000400 	.word	0x40000400

080018dc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018e0:	4b11      	ldr	r3, [pc, #68]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 80018e2:	4a12      	ldr	r2, [pc, #72]	@ (800192c <MX_USART1_UART_Init+0x50>)
 80018e4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018e6:	4b10      	ldr	r3, [pc, #64]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 80018e8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80018ec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001900:	4b09      	ldr	r3, [pc, #36]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 8001902:	220c      	movs	r2, #12
 8001904:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001906:	4b08      	ldr	r3, [pc, #32]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 8001908:	2200      	movs	r2, #0
 800190a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800190c:	4b06      	ldr	r3, [pc, #24]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 800190e:	2200      	movs	r2, #0
 8001910:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001912:	4805      	ldr	r0, [pc, #20]	@ (8001928 <MX_USART1_UART_Init+0x4c>)
 8001914:	f002 f8d8 	bl	8003ac8 <HAL_UART_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800191e:	f000 f9b5 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000a8c 	.word	0x20000a8c
 800192c:	40011000 	.word	0x40011000

08001930 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001934:	4b11      	ldr	r3, [pc, #68]	@ (800197c <MX_USART2_UART_Init+0x4c>)
 8001936:	4a12      	ldr	r2, [pc, #72]	@ (8001980 <MX_USART2_UART_Init+0x50>)
 8001938:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800193a:	4b10      	ldr	r3, [pc, #64]	@ (800197c <MX_USART2_UART_Init+0x4c>)
 800193c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001940:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001942:	4b0e      	ldr	r3, [pc, #56]	@ (800197c <MX_USART2_UART_Init+0x4c>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001948:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <MX_USART2_UART_Init+0x4c>)
 800194a:	2200      	movs	r2, #0
 800194c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800194e:	4b0b      	ldr	r3, [pc, #44]	@ (800197c <MX_USART2_UART_Init+0x4c>)
 8001950:	2200      	movs	r2, #0
 8001952:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001954:	4b09      	ldr	r3, [pc, #36]	@ (800197c <MX_USART2_UART_Init+0x4c>)
 8001956:	220c      	movs	r2, #12
 8001958:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195a:	4b08      	ldr	r3, [pc, #32]	@ (800197c <MX_USART2_UART_Init+0x4c>)
 800195c:	2200      	movs	r2, #0
 800195e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001960:	4b06      	ldr	r3, [pc, #24]	@ (800197c <MX_USART2_UART_Init+0x4c>)
 8001962:	2200      	movs	r2, #0
 8001964:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001966:	4805      	ldr	r0, [pc, #20]	@ (800197c <MX_USART2_UART_Init+0x4c>)
 8001968:	f002 f8ae 	bl	8003ac8 <HAL_UART_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001972:	f000 f98b 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	20000ad4 	.word	0x20000ad4
 8001980:	40004400 	.word	0x40004400

08001984 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001988:	4b11      	ldr	r3, [pc, #68]	@ (80019d0 <MX_USART6_UART_Init+0x4c>)
 800198a:	4a12      	ldr	r2, [pc, #72]	@ (80019d4 <MX_USART6_UART_Init+0x50>)
 800198c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 800198e:	4b10      	ldr	r3, [pc, #64]	@ (80019d0 <MX_USART6_UART_Init+0x4c>)
 8001990:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001994:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001996:	4b0e      	ldr	r3, [pc, #56]	@ (80019d0 <MX_USART6_UART_Init+0x4c>)
 8001998:	2200      	movs	r2, #0
 800199a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800199c:	4b0c      	ldr	r3, [pc, #48]	@ (80019d0 <MX_USART6_UART_Init+0x4c>)
 800199e:	2200      	movs	r2, #0
 80019a0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80019a2:	4b0b      	ldr	r3, [pc, #44]	@ (80019d0 <MX_USART6_UART_Init+0x4c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80019a8:	4b09      	ldr	r3, [pc, #36]	@ (80019d0 <MX_USART6_UART_Init+0x4c>)
 80019aa:	220c      	movs	r2, #12
 80019ac:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ae:	4b08      	ldr	r3, [pc, #32]	@ (80019d0 <MX_USART6_UART_Init+0x4c>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b4:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <MX_USART6_UART_Init+0x4c>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80019ba:	4805      	ldr	r0, [pc, #20]	@ (80019d0 <MX_USART6_UART_Init+0x4c>)
 80019bc:	f002 f884 	bl	8003ac8 <HAL_UART_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80019c6:	f000 f961 	bl	8001c8c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	20000b1c 	.word	0x20000b1c
 80019d4:	40011400 	.word	0x40011400

080019d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	@ 0x28
 80019dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019de:	f107 0314 	add.w	r3, r7, #20
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
 80019ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
 80019f2:	4b2d      	ldr	r3, [pc, #180]	@ (8001aa8 <MX_GPIO_Init+0xd0>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f6:	4a2c      	ldr	r2, [pc, #176]	@ (8001aa8 <MX_GPIO_Init+0xd0>)
 80019f8:	f043 0304 	orr.w	r3, r3, #4
 80019fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fe:	4b2a      	ldr	r3, [pc, #168]	@ (8001aa8 <MX_GPIO_Init+0xd0>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	613b      	str	r3, [r7, #16]
 8001a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	60fb      	str	r3, [r7, #12]
 8001a0e:	4b26      	ldr	r3, [pc, #152]	@ (8001aa8 <MX_GPIO_Init+0xd0>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a12:	4a25      	ldr	r2, [pc, #148]	@ (8001aa8 <MX_GPIO_Init+0xd0>)
 8001a14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a1a:	4b23      	ldr	r3, [pc, #140]	@ (8001aa8 <MX_GPIO_Init+0xd0>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60bb      	str	r3, [r7, #8]
 8001a2a:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa8 <MX_GPIO_Init+0xd0>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8001aa8 <MX_GPIO_Init+0xd0>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a36:	4b1c      	ldr	r3, [pc, #112]	@ (8001aa8 <MX_GPIO_Init+0xd0>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
 8001a40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b18      	ldr	r3, [pc, #96]	@ (8001aa8 <MX_GPIO_Init+0xd0>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4a:	4a17      	ldr	r2, [pc, #92]	@ (8001aa8 <MX_GPIO_Init+0xd0>)
 8001a4c:	f043 0302 	orr.w	r3, r3, #2
 8001a50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a52:	4b15      	ldr	r3, [pc, #84]	@ (8001aa8 <MX_GPIO_Init+0xd0>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2120      	movs	r1, #32
 8001a62:	4812      	ldr	r0, [pc, #72]	@ (8001aac <MX_GPIO_Init+0xd4>)
 8001a64:	f000 ff4a 	bl	80028fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a6e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a78:	f107 0314 	add.w	r3, r7, #20
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	480c      	ldr	r0, [pc, #48]	@ (8001ab0 <MX_GPIO_Init+0xd8>)
 8001a80:	f000 fdb8 	bl	80025f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a84:	2320      	movs	r3, #32
 8001a86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4804      	ldr	r0, [pc, #16]	@ (8001aac <MX_GPIO_Init+0xd4>)
 8001a9c:	f000 fdaa 	bl	80025f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001aa0:	bf00      	nop
 8001aa2:	3728      	adds	r7, #40	@ 0x28
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40020000 	.word	0x40020000
 8001ab0:	40020800 	.word	0x40020800

08001ab4 <MX_GPIO_LED_ON>:

/* USER CODE BEGIN 4 */
void MX_GPIO_LED_ON(int pin)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_SET);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4803      	ldr	r0, [pc, #12]	@ (8001ad4 <MX_GPIO_LED_ON+0x20>)
 8001ac6:	f000 ff19 	bl	80028fc <HAL_GPIO_WritePin>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40020000 	.word	0x40020000

08001ad8 <MX_GPIO_LED_OFF>:
void MX_GPIO_LED_OFF(int pin)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LD2_GPIO_Port, pin, GPIO_PIN_RESET);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	b29b      	uxth	r3, r3
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4803      	ldr	r0, [pc, #12]	@ (8001af8 <MX_GPIO_LED_OFF+0x20>)
 8001aea:	f000 ff07 	bl	80028fc <HAL_GPIO_WritePin>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40020000 	.word	0x40020000

08001afc <esp_event>:
void esp_event(char * recvBuf)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b09c      	sub	sp, #112	@ 0x70
 8001b00:	af02      	add	r7, sp, #8
 8001b02:	6078      	str	r0, [r7, #4]
  int i=0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	667b      	str	r3, [r7, #100]	@ 0x64
  char * pToken;
  char * pArray[ARR_CNT]={0};
 8001b08:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	601a      	str	r2, [r3, #0]
 8001b10:	605a      	str	r2, [r3, #4]
 8001b12:	609a      	str	r2, [r3, #8]
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	611a      	str	r2, [r3, #16]
  char sendBuf[MAX_UART_COMMAND_LEN]={0};
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	2240      	movs	r2, #64	@ 0x40
 8001b1e:	2100      	movs	r1, #0
 8001b20:	4618      	mov	r0, r3
 8001b22:	f004 f96d 	bl	8005e00 <memset>

  strBuff[strlen(recvBuf)-1] = '\0';	//'\n' cut
 8001b26:	6878      	ldr	r0, [r7, #4]
 8001b28:	f7fe fbba 	bl	80002a0 <strlen>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	4a39      	ldr	r2, [pc, #228]	@ (8001c18 <esp_event+0x11c>)
 8001b32:	2100      	movs	r1, #0
 8001b34:	54d1      	strb	r1, [r2, r3]
  printf("\r\nDebug recv : %s\r\n",recvBuf);
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	4838      	ldr	r0, [pc, #224]	@ (8001c1c <esp_event+0x120>)
 8001b3a:	f003 ffef 	bl	8005b1c <iprintf>

  pToken = strtok(recvBuf,"[@]");
 8001b3e:	4938      	ldr	r1, [pc, #224]	@ (8001c20 <esp_event+0x124>)
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f004 f985 	bl	8005e50 <strtok>
 8001b46:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8001b48:	e011      	b.n	8001b6e <esp_event+0x72>
  {
    pArray[i] = pToken;
 8001b4a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	3368      	adds	r3, #104	@ 0x68
 8001b50:	443b      	add	r3, r7
 8001b52:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001b54:	f843 2c1c 	str.w	r2, [r3, #-28]
    if(++i >= ARR_CNT)
 8001b58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8001b5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	dc08      	bgt.n	8001b76 <esp_event+0x7a>
      break;
    pToken = strtok(NULL,"[@]");
 8001b64:	492e      	ldr	r1, [pc, #184]	@ (8001c20 <esp_event+0x124>)
 8001b66:	2000      	movs	r0, #0
 8001b68:	f004 f972 	bl	8005e50 <strtok>
 8001b6c:	6638      	str	r0, [r7, #96]	@ 0x60
  while(pToken != NULL)
 8001b6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1ea      	bne.n	8001b4a <esp_event+0x4e>
 8001b74:	e000      	b.n	8001b78 <esp_event+0x7c>
      break;
 8001b76:	bf00      	nop
  }

  if(!strcmp(pArray[1],"LED"))
 8001b78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001b7a:	492a      	ldr	r1, [pc, #168]	@ (8001c24 <esp_event+0x128>)
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fb2f 	bl	80001e0 <strcmp>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d12c      	bne.n	8001be2 <esp_event+0xe6>
  {
  	if(!strcmp(pArray[2],"ON"))
 8001b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b8a:	4927      	ldr	r1, [pc, #156]	@ (8001c28 <esp_event+0x12c>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fb27 	bl	80001e0 <strcmp>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d103      	bne.n	8001ba0 <esp_event+0xa4>
  	{
  		MX_GPIO_LED_ON(LD2_Pin);
 8001b98:	2020      	movs	r0, #32
 8001b9a:	f7ff ff8b 	bl	8001ab4 <MX_GPIO_LED_ON>
 8001b9e:	e00a      	b.n	8001bb6 <esp_event+0xba>
  	}
	else if(!strcmp(pArray[2],"OFF"))
 8001ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ba2:	4922      	ldr	r1, [pc, #136]	@ (8001c2c <esp_event+0x130>)
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fb1b 	bl	80001e0 <strcmp>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d102      	bne.n	8001bb6 <esp_event+0xba>
	{
		MX_GPIO_LED_OFF(LD2_Pin);
 8001bb0:	2020      	movs	r0, #32
 8001bb2:	f7ff ff91 	bl	8001ad8 <MX_GPIO_LED_OFF>
	}
	sprintf(sendBuf,"[%s]%s@%s\n",pArray[0],pArray[1],pArray[2]);
 8001bb6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bb8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bbc:	f107 000c 	add.w	r0, r7, #12
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	491a      	ldr	r1, [pc, #104]	@ (8001c30 <esp_event+0x134>)
 8001bc6:	f004 f821 	bl	8005c0c <siprintf>
      return;
  }
  else
      return;

  esp_send_data(sendBuf);
 8001bca:	f107 030c 	add.w	r3, r7, #12
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff fc64 	bl	800149c <esp_send_data>
  printf("Debug send : %s\r\n",sendBuf);
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	4619      	mov	r1, r3
 8001bda:	4816      	ldr	r0, [pc, #88]	@ (8001c34 <esp_event+0x138>)
 8001bdc:	f003 ff9e 	bl	8005b1c <iprintf>
 8001be0:	e017      	b.n	8001c12 <esp_event+0x116>
  else if(!strncmp(pArray[1]," New conn",8))
 8001be2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001be4:	2208      	movs	r2, #8
 8001be6:	4914      	ldr	r1, [pc, #80]	@ (8001c38 <esp_event+0x13c>)
 8001be8:	4618      	mov	r0, r3
 8001bea:	f004 f91e 	bl	8005e2a <strncmp>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00b      	beq.n	8001c0c <esp_event+0x110>
  else if(!strncmp(pArray[1]," Already log",8))
 8001bf4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001bf6:	2208      	movs	r2, #8
 8001bf8:	4910      	ldr	r1, [pc, #64]	@ (8001c3c <esp_event+0x140>)
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f004 f915 	bl	8005e2a <strncmp>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d104      	bne.n	8001c10 <esp_event+0x114>
	  esp_client_conn();
 8001c06:	f7ff fb21 	bl	800124c <esp_client_conn>
      return;
 8001c0a:	e002      	b.n	8001c12 <esp_event+0x116>
     return;
 8001c0c:	bf00      	nop
 8001c0e:	e000      	b.n	8001c12 <esp_event+0x116>
      return;
 8001c10:	bf00      	nop
}
 8001c12:	3768      	adds	r7, #104	@ 0x68
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	20000b78 	.word	0x20000b78
 8001c1c:	080098e0 	.word	0x080098e0
 8001c20:	080098f4 	.word	0x080098f4
 8001c24:	080098f8 	.word	0x080098f8
 8001c28:	080098fc 	.word	0x080098fc
 8001c2c:	08009900 	.word	0x08009900
 8001c30:	08009904 	.word	0x08009904
 8001c34:	0800992c 	.word	0x0800992c
 8001c38:	08009910 	.word	0x08009910
 8001c3c:	0800991c 	.word	0x0800991c

08001c40 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)		//1ms 마다 호출
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
	static int tim3Cnt = 0;
	tim3Cnt++;
 8001c48:	4b0d      	ldr	r3, [pc, #52]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	4a0c      	ldr	r2, [pc, #48]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c50:	6013      	str	r3, [r2, #0]
	if(tim3Cnt >= 1000) //1ms * 1000 = 1Sec
 8001c52:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c5a:	db0a      	blt.n	8001c72 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		tim3Flag1Sec = 1;
 8001c5c:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]
		tim3Sec++;
 8001c62:	4b09      	ldr	r3, [pc, #36]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	3301      	adds	r3, #1
 8001c68:	4a07      	ldr	r2, [pc, #28]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001c6a:	6013      	str	r3, [r2, #0]
		tim3Cnt = 0;
 8001c6c:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
	}
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000bb8 	.word	0x20000bb8
 8001c84:	20000000 	.word	0x20000000
 8001c88:	20000b74 	.word	0x20000b74

08001c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c90:	b672      	cpsid	i
}
 8001c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <Error_Handler+0x8>

08001c98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	4b10      	ldr	r3, [pc, #64]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	4a0f      	ldr	r2, [pc, #60]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	4b09      	ldr	r3, [pc, #36]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc2:	4a08      	ldr	r2, [pc, #32]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cca:	4b06      	ldr	r3, [pc, #24]	@ (8001ce4 <HAL_MspInit+0x4c>)
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001cd6:	2007      	movs	r0, #7
 8001cd8:	f000 fbb8 	bl	800244c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40023800 	.word	0x40023800

08001ce8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b084      	sub	sp, #16
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a0e      	ldr	r2, [pc, #56]	@ (8001d30 <HAL_TIM_Base_MspInit+0x48>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d115      	bne.n	8001d26 <HAL_TIM_Base_MspInit+0x3e>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001d34 <HAL_TIM_Base_MspInit+0x4c>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	4a0c      	ldr	r2, [pc, #48]	@ (8001d34 <HAL_TIM_Base_MspInit+0x4c>)
 8001d04:	f043 0302 	orr.w	r3, r3, #2
 8001d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d34 <HAL_TIM_Base_MspInit+0x4c>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d16:	2200      	movs	r2, #0
 8001d18:	2100      	movs	r1, #0
 8001d1a:	201d      	movs	r0, #29
 8001d1c:	f000 fba1 	bl	8002462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d20:	201d      	movs	r0, #29
 8001d22:	f000 fbba 	bl	800249a <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40000400 	.word	0x40000400
 8001d34:	40023800 	.word	0x40023800

08001d38 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b08e      	sub	sp, #56	@ 0x38
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d44:	2200      	movs	r2, #0
 8001d46:	601a      	str	r2, [r3, #0]
 8001d48:	605a      	str	r2, [r3, #4]
 8001d4a:	609a      	str	r2, [r3, #8]
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a57      	ldr	r2, [pc, #348]	@ (8001eb4 <HAL_UART_MspInit+0x17c>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d135      	bne.n	8001dc6 <HAL_UART_MspInit+0x8e>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	623b      	str	r3, [r7, #32]
 8001d5e:	4b56      	ldr	r3, [pc, #344]	@ (8001eb8 <HAL_UART_MspInit+0x180>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d62:	4a55      	ldr	r2, [pc, #340]	@ (8001eb8 <HAL_UART_MspInit+0x180>)
 8001d64:	f043 0310 	orr.w	r3, r3, #16
 8001d68:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d6a:	4b53      	ldr	r3, [pc, #332]	@ (8001eb8 <HAL_UART_MspInit+0x180>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6e:	f003 0310 	and.w	r3, r3, #16
 8001d72:	623b      	str	r3, [r7, #32]
 8001d74:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	4b4f      	ldr	r3, [pc, #316]	@ (8001eb8 <HAL_UART_MspInit+0x180>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	4a4e      	ldr	r2, [pc, #312]	@ (8001eb8 <HAL_UART_MspInit+0x180>)
 8001d80:	f043 0301 	orr.w	r3, r3, #1
 8001d84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d86:	4b4c      	ldr	r3, [pc, #304]	@ (8001eb8 <HAL_UART_MspInit+0x180>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	f003 0301 	and.w	r3, r3, #1
 8001d8e:	61fb      	str	r3, [r7, #28]
 8001d90:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d92:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001d96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da0:	2303      	movs	r3, #3
 8001da2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001da4:	2307      	movs	r3, #7
 8001da6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001dac:	4619      	mov	r1, r3
 8001dae:	4843      	ldr	r0, [pc, #268]	@ (8001ebc <HAL_UART_MspInit+0x184>)
 8001db0:	f000 fc20 	bl	80025f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001db4:	2200      	movs	r2, #0
 8001db6:	2100      	movs	r1, #0
 8001db8:	2025      	movs	r0, #37	@ 0x25
 8001dba:	f000 fb52 	bl	8002462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dbe:	2025      	movs	r0, #37	@ 0x25
 8001dc0:	f000 fb6b 	bl	800249a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8001dc4:	e072      	b.n	8001eac <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a3d      	ldr	r2, [pc, #244]	@ (8001ec0 <HAL_UART_MspInit+0x188>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d134      	bne.n	8001e3a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	61bb      	str	r3, [r7, #24]
 8001dd4:	4b38      	ldr	r3, [pc, #224]	@ (8001eb8 <HAL_UART_MspInit+0x180>)
 8001dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd8:	4a37      	ldr	r2, [pc, #220]	@ (8001eb8 <HAL_UART_MspInit+0x180>)
 8001dda:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de0:	4b35      	ldr	r3, [pc, #212]	@ (8001eb8 <HAL_UART_MspInit+0x180>)
 8001de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de8:	61bb      	str	r3, [r7, #24]
 8001dea:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dec:	2300      	movs	r3, #0
 8001dee:	617b      	str	r3, [r7, #20]
 8001df0:	4b31      	ldr	r3, [pc, #196]	@ (8001eb8 <HAL_UART_MspInit+0x180>)
 8001df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df4:	4a30      	ldr	r2, [pc, #192]	@ (8001eb8 <HAL_UART_MspInit+0x180>)
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8001eb8 <HAL_UART_MspInit+0x180>)
 8001dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e08:	230c      	movs	r3, #12
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e14:	2303      	movs	r3, #3
 8001e16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e18:	2307      	movs	r3, #7
 8001e1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e20:	4619      	mov	r1, r3
 8001e22:	4826      	ldr	r0, [pc, #152]	@ (8001ebc <HAL_UART_MspInit+0x184>)
 8001e24:	f000 fbe6 	bl	80025f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e28:	2200      	movs	r2, #0
 8001e2a:	2100      	movs	r1, #0
 8001e2c:	2026      	movs	r0, #38	@ 0x26
 8001e2e:	f000 fb18 	bl	8002462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001e32:	2026      	movs	r0, #38	@ 0x26
 8001e34:	f000 fb31 	bl	800249a <HAL_NVIC_EnableIRQ>
}
 8001e38:	e038      	b.n	8001eac <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a21      	ldr	r2, [pc, #132]	@ (8001ec4 <HAL_UART_MspInit+0x18c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d133      	bne.n	8001eac <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001e44:	2300      	movs	r3, #0
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	4b1b      	ldr	r3, [pc, #108]	@ (8001eb8 <HAL_UART_MspInit+0x180>)
 8001e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8001eb8 <HAL_UART_MspInit+0x180>)
 8001e4e:	f043 0320 	orr.w	r3, r3, #32
 8001e52:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e54:	4b18      	ldr	r3, [pc, #96]	@ (8001eb8 <HAL_UART_MspInit+0x180>)
 8001e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e58:	f003 0320 	and.w	r3, r3, #32
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	4b14      	ldr	r3, [pc, #80]	@ (8001eb8 <HAL_UART_MspInit+0x180>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e68:	4a13      	ldr	r2, [pc, #76]	@ (8001eb8 <HAL_UART_MspInit+0x180>)
 8001e6a:	f043 0304 	orr.w	r3, r3, #4
 8001e6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e70:	4b11      	ldr	r3, [pc, #68]	@ (8001eb8 <HAL_UART_MspInit+0x180>)
 8001e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e7c:	23c0      	movs	r3, #192	@ 0xc0
 8001e7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e80:	2302      	movs	r3, #2
 8001e82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e84:	2300      	movs	r3, #0
 8001e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001e8c:	2308      	movs	r3, #8
 8001e8e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e94:	4619      	mov	r1, r3
 8001e96:	480c      	ldr	r0, [pc, #48]	@ (8001ec8 <HAL_UART_MspInit+0x190>)
 8001e98:	f000 fbac 	bl	80025f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	2047      	movs	r0, #71	@ 0x47
 8001ea2:	f000 fade 	bl	8002462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001ea6:	2047      	movs	r0, #71	@ 0x47
 8001ea8:	f000 faf7 	bl	800249a <HAL_NVIC_EnableIRQ>
}
 8001eac:	bf00      	nop
 8001eae:	3738      	adds	r7, #56	@ 0x38
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40011000 	.word	0x40011000
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40020000 	.word	0x40020000
 8001ec0:	40004400 	.word	0x40004400
 8001ec4:	40011400 	.word	0x40011400
 8001ec8:	40020800 	.word	0x40020800

08001ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ed0:	bf00      	nop
 8001ed2:	e7fd      	b.n	8001ed0 <NMI_Handler+0x4>

08001ed4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <HardFault_Handler+0x4>

08001edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <MemManage_Handler+0x4>

08001ee4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ee8:	bf00      	nop
 8001eea:	e7fd      	b.n	8001ee8 <BusFault_Handler+0x4>

08001eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ef0:	bf00      	nop
 8001ef2:	e7fd      	b.n	8001ef0 <UsageFault_Handler+0x4>

08001ef4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr

08001f02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f1e:	b580      	push	{r7, lr}
 8001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f22:	f000 f97f 	bl	8002224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f26:	bf00      	nop
 8001f28:	bd80      	pop	{r7, pc}
	...

08001f2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001f30:	4802      	ldr	r0, [pc, #8]	@ (8001f3c <TIM3_IRQHandler+0x10>)
 8001f32:	f001 fa47 	bl	80033c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000a44 	.word	0x20000a44

08001f40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f44:	4802      	ldr	r0, [pc, #8]	@ (8001f50 <USART1_IRQHandler+0x10>)
 8001f46:	f001 ff57 	bl	8003df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000a8c 	.word	0x20000a8c

08001f54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001f58:	4802      	ldr	r0, [pc, #8]	@ (8001f64 <USART2_IRQHandler+0x10>)
 8001f5a:	f001 ff4d 	bl	8003df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000ad4 	.word	0x20000ad4

08001f68 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001f6c:	4802      	ldr	r0, [pc, #8]	@ (8001f78 <USART6_IRQHandler+0x10>)
 8001f6e:	f001 ff43 	bl	8003df8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000b1c 	.word	0x20000b1c

08001f7c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return 1;
 8001f80:	2301      	movs	r3, #1
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <_kill>:

int _kill(int pid, int sig)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b082      	sub	sp, #8
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f96:	f004 f817 	bl	8005fc8 <__errno>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2216      	movs	r2, #22
 8001f9e:	601a      	str	r2, [r3, #0]
  return -1;
 8001fa0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3708      	adds	r7, #8
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <_exit>:

void _exit (int status)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	f7ff ffe7 	bl	8001f8c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fbe:	bf00      	nop
 8001fc0:	e7fd      	b.n	8001fbe <_exit+0x12>

08001fc2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	e00a      	b.n	8001fea <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fd4:	f3af 8000 	nop.w
 8001fd8:	4601      	mov	r1, r0
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	60ba      	str	r2, [r7, #8]
 8001fe0:	b2ca      	uxtb	r2, r1
 8001fe2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	617b      	str	r3, [r7, #20]
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	dbf0      	blt.n	8001fd4 <_read+0x12>
  }

  return len;
 8001ff2:	687b      	ldr	r3, [r7, #4]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	60b9      	str	r1, [r7, #8]
 8002006:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
 800200c:	e009      	b.n	8002022 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	60ba      	str	r2, [r7, #8]
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fa82 	bl	8001520 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	3301      	adds	r3, #1
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	697a      	ldr	r2, [r7, #20]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	429a      	cmp	r2, r3
 8002028:	dbf1      	blt.n	800200e <_write+0x12>
  }
  return len;
 800202a:	687b      	ldr	r3, [r7, #4]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <_close>:

int _close(int file)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800203c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002040:	4618      	mov	r0, r3
 8002042:	370c      	adds	r7, #12
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800205c:	605a      	str	r2, [r3, #4]
  return 0;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <_isatty>:

int _isatty(int file)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002074:	2301      	movs	r3, #1
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002082:	b480      	push	{r7}
 8002084:	b085      	sub	sp, #20
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a4:	4a14      	ldr	r2, [pc, #80]	@ (80020f8 <_sbrk+0x5c>)
 80020a6:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <_sbrk+0x60>)
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b0:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <_sbrk+0x64>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b8:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <_sbrk+0x64>)
 80020ba:	4a12      	ldr	r2, [pc, #72]	@ (8002104 <_sbrk+0x68>)
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020be:	4b10      	ldr	r3, [pc, #64]	@ (8002100 <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d207      	bcs.n	80020dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020cc:	f003 ff7c 	bl	8005fc8 <__errno>
 80020d0:	4603      	mov	r3, r0
 80020d2:	220c      	movs	r2, #12
 80020d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
 80020da:	e009      	b.n	80020f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020dc:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e2:	4b07      	ldr	r3, [pc, #28]	@ (8002100 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	4a05      	ldr	r2, [pc, #20]	@ (8002100 <_sbrk+0x64>)
 80020ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20020000 	.word	0x20020000
 80020fc:	00000400 	.word	0x00000400
 8002100:	20000bbc 	.word	0x20000bbc
 8002104:	20000d10 	.word	0x20000d10

08002108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <SystemInit+0x20>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002112:	4a05      	ldr	r2, [pc, #20]	@ (8002128 <SystemInit+0x20>)
 8002114:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002118:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800212c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002164 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002130:	f7ff ffea 	bl	8002108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002134:	480c      	ldr	r0, [pc, #48]	@ (8002168 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002136:	490d      	ldr	r1, [pc, #52]	@ (800216c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002138:	4a0d      	ldr	r2, [pc, #52]	@ (8002170 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800213a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800213c:	e002      	b.n	8002144 <LoopCopyDataInit>

0800213e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800213e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002142:	3304      	adds	r3, #4

08002144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002148:	d3f9      	bcc.n	800213e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800214a:	4a0a      	ldr	r2, [pc, #40]	@ (8002174 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800214c:	4c0a      	ldr	r4, [pc, #40]	@ (8002178 <LoopFillZerobss+0x22>)
  movs r3, #0
 800214e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002150:	e001      	b.n	8002156 <LoopFillZerobss>

08002152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002154:	3204      	adds	r2, #4

08002156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002158:	d3fb      	bcc.n	8002152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800215a:	f003 ff3b 	bl	8005fd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800215e:	f7ff fa5f 	bl	8001620 <main>
  bx  lr    
 8002162:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002164:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800216c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002170:	08009dec 	.word	0x08009dec
  ldr r2, =_sbss
 8002174:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002178:	20000d10 	.word	0x20000d10

0800217c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800217c:	e7fe      	b.n	800217c <ADC_IRQHandler>
	...

08002180 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002184:	4b0e      	ldr	r3, [pc, #56]	@ (80021c0 <HAL_Init+0x40>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a0d      	ldr	r2, [pc, #52]	@ (80021c0 <HAL_Init+0x40>)
 800218a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800218e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002190:	4b0b      	ldr	r3, [pc, #44]	@ (80021c0 <HAL_Init+0x40>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	4a0a      	ldr	r2, [pc, #40]	@ (80021c0 <HAL_Init+0x40>)
 8002196:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800219a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800219c:	4b08      	ldr	r3, [pc, #32]	@ (80021c0 <HAL_Init+0x40>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a07      	ldr	r2, [pc, #28]	@ (80021c0 <HAL_Init+0x40>)
 80021a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a8:	2003      	movs	r0, #3
 80021aa:	f000 f94f 	bl	800244c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021ae:	2000      	movs	r0, #0
 80021b0:	f000 f808 	bl	80021c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021b4:	f7ff fd70 	bl	8001c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021b8:	2300      	movs	r3, #0
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40023c00 	.word	0x40023c00

080021c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021cc:	4b12      	ldr	r3, [pc, #72]	@ (8002218 <HAL_InitTick+0x54>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b12      	ldr	r3, [pc, #72]	@ (800221c <HAL_InitTick+0x58>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	4619      	mov	r1, r3
 80021d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021da:	fbb3 f3f1 	udiv	r3, r3, r1
 80021de:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e2:	4618      	mov	r0, r3
 80021e4:	f000 f967 	bl	80024b6 <HAL_SYSTICK_Config>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e00e      	b.n	8002210 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b0f      	cmp	r3, #15
 80021f6:	d80a      	bhi.n	800220e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021f8:	2200      	movs	r2, #0
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002200:	f000 f92f 	bl	8002462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002204:	4a06      	ldr	r2, [pc, #24]	@ (8002220 <HAL_InitTick+0x5c>)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800220a:	2300      	movs	r3, #0
 800220c:	e000      	b.n	8002210 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
}
 8002210:	4618      	mov	r0, r3
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20000004 	.word	0x20000004
 800221c:	2000000c 	.word	0x2000000c
 8002220:	20000008 	.word	0x20000008

08002224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002228:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <HAL_IncTick+0x20>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	461a      	mov	r2, r3
 800222e:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <HAL_IncTick+0x24>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4413      	add	r3, r2
 8002234:	4a04      	ldr	r2, [pc, #16]	@ (8002248 <HAL_IncTick+0x24>)
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	2000000c 	.word	0x2000000c
 8002248:	20000bc0 	.word	0x20000bc0

0800224c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return uwTick;
 8002250:	4b03      	ldr	r3, [pc, #12]	@ (8002260 <HAL_GetTick+0x14>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000bc0 	.word	0x20000bc0

08002264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800226c:	f7ff ffee 	bl	800224c <HAL_GetTick>
 8002270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800227c:	d005      	beq.n	800228a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800227e:	4b0a      	ldr	r3, [pc, #40]	@ (80022a8 <HAL_Delay+0x44>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	4413      	add	r3, r2
 8002288:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800228a:	bf00      	nop
 800228c:	f7ff ffde 	bl	800224c <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	429a      	cmp	r2, r3
 800229a:	d8f7      	bhi.n	800228c <HAL_Delay+0x28>
  {
  }
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	2000000c 	.word	0x2000000c

080022ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022bc:	4b0c      	ldr	r3, [pc, #48]	@ (80022f0 <__NVIC_SetPriorityGrouping+0x44>)
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022c8:	4013      	ands	r3, r2
 80022ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022de:	4a04      	ldr	r2, [pc, #16]	@ (80022f0 <__NVIC_SetPriorityGrouping+0x44>)
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	60d3      	str	r3, [r2, #12]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022f8:	4b04      	ldr	r3, [pc, #16]	@ (800230c <__NVIC_GetPriorityGrouping+0x18>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	0a1b      	lsrs	r3, r3, #8
 80022fe:	f003 0307 	and.w	r3, r3, #7
}
 8002302:	4618      	mov	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	e000ed00 	.word	0xe000ed00

08002310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800231a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800231e:	2b00      	cmp	r3, #0
 8002320:	db0b      	blt.n	800233a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	f003 021f 	and.w	r2, r3, #31
 8002328:	4907      	ldr	r1, [pc, #28]	@ (8002348 <__NVIC_EnableIRQ+0x38>)
 800232a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232e:	095b      	lsrs	r3, r3, #5
 8002330:	2001      	movs	r0, #1
 8002332:	fa00 f202 	lsl.w	r2, r0, r2
 8002336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000e100 	.word	0xe000e100

0800234c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	6039      	str	r1, [r7, #0]
 8002356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	2b00      	cmp	r3, #0
 800235e:	db0a      	blt.n	8002376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	b2da      	uxtb	r2, r3
 8002364:	490c      	ldr	r1, [pc, #48]	@ (8002398 <__NVIC_SetPriority+0x4c>)
 8002366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800236a:	0112      	lsls	r2, r2, #4
 800236c:	b2d2      	uxtb	r2, r2
 800236e:	440b      	add	r3, r1
 8002370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002374:	e00a      	b.n	800238c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	b2da      	uxtb	r2, r3
 800237a:	4908      	ldr	r1, [pc, #32]	@ (800239c <__NVIC_SetPriority+0x50>)
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	3b04      	subs	r3, #4
 8002384:	0112      	lsls	r2, r2, #4
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	440b      	add	r3, r1
 800238a:	761a      	strb	r2, [r3, #24]
}
 800238c:	bf00      	nop
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	e000e100 	.word	0xe000e100
 800239c:	e000ed00 	.word	0xe000ed00

080023a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b089      	sub	sp, #36	@ 0x24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	60f8      	str	r0, [r7, #12]
 80023a8:	60b9      	str	r1, [r7, #8]
 80023aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b4:	69fb      	ldr	r3, [r7, #28]
 80023b6:	f1c3 0307 	rsb	r3, r3, #7
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	bf28      	it	cs
 80023be:	2304      	movcs	r3, #4
 80023c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3304      	adds	r3, #4
 80023c6:	2b06      	cmp	r3, #6
 80023c8:	d902      	bls.n	80023d0 <NVIC_EncodePriority+0x30>
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	3b03      	subs	r3, #3
 80023ce:	e000      	b.n	80023d2 <NVIC_EncodePriority+0x32>
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	fa02 f303 	lsl.w	r3, r2, r3
 80023de:	43da      	mvns	r2, r3
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	401a      	ands	r2, r3
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e8:	f04f 31ff 	mov.w	r1, #4294967295
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa01 f303 	lsl.w	r3, r1, r3
 80023f2:	43d9      	mvns	r1, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	4313      	orrs	r3, r2
         );
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3724      	adds	r7, #36	@ 0x24
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
	...

08002408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3b01      	subs	r3, #1
 8002414:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002418:	d301      	bcc.n	800241e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800241a:	2301      	movs	r3, #1
 800241c:	e00f      	b.n	800243e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800241e:	4a0a      	ldr	r2, [pc, #40]	@ (8002448 <SysTick_Config+0x40>)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	3b01      	subs	r3, #1
 8002424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002426:	210f      	movs	r1, #15
 8002428:	f04f 30ff 	mov.w	r0, #4294967295
 800242c:	f7ff ff8e 	bl	800234c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002430:	4b05      	ldr	r3, [pc, #20]	@ (8002448 <SysTick_Config+0x40>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002436:	4b04      	ldr	r3, [pc, #16]	@ (8002448 <SysTick_Config+0x40>)
 8002438:	2207      	movs	r2, #7
 800243a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3708      	adds	r7, #8
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	e000e010 	.word	0xe000e010

0800244c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7ff ff29 	bl	80022ac <__NVIC_SetPriorityGrouping>
}
 800245a:	bf00      	nop
 800245c:	3708      	adds	r7, #8
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002462:	b580      	push	{r7, lr}
 8002464:	b086      	sub	sp, #24
 8002466:	af00      	add	r7, sp, #0
 8002468:	4603      	mov	r3, r0
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002470:	2300      	movs	r3, #0
 8002472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002474:	f7ff ff3e 	bl	80022f4 <__NVIC_GetPriorityGrouping>
 8002478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	68b9      	ldr	r1, [r7, #8]
 800247e:	6978      	ldr	r0, [r7, #20]
 8002480:	f7ff ff8e 	bl	80023a0 <NVIC_EncodePriority>
 8002484:	4602      	mov	r2, r0
 8002486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ff5d 	bl	800234c <__NVIC_SetPriority>
}
 8002492:	bf00      	nop
 8002494:	3718      	adds	r7, #24
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b082      	sub	sp, #8
 800249e:	af00      	add	r7, sp, #0
 80024a0:	4603      	mov	r3, r0
 80024a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7ff ff31 	bl	8002310 <__NVIC_EnableIRQ>
}
 80024ae:	bf00      	nop
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b082      	sub	sp, #8
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff ffa2 	bl	8002408 <SysTick_Config>
 80024c4:	4603      	mov	r3, r0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3708      	adds	r7, #8
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b084      	sub	sp, #16
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024dc:	f7ff feb6 	bl	800224c <HAL_GetTick>
 80024e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d008      	beq.n	8002500 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2280      	movs	r2, #128	@ 0x80
 80024f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e052      	b.n	80025a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f022 0216 	bic.w	r2, r2, #22
 800250e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695a      	ldr	r2, [r3, #20]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800251e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002524:	2b00      	cmp	r3, #0
 8002526:	d103      	bne.n	8002530 <HAL_DMA_Abort+0x62>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800252c:	2b00      	cmp	r3, #0
 800252e:	d007      	beq.n	8002540 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0208 	bic.w	r2, r2, #8
 800253e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f022 0201 	bic.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002550:	e013      	b.n	800257a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002552:	f7ff fe7b 	bl	800224c <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b05      	cmp	r3, #5
 800255e:	d90c      	bls.n	800257a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2220      	movs	r2, #32
 8002564:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2203      	movs	r2, #3
 800256a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e015      	b.n	80025a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1e4      	bne.n	8002552 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800258c:	223f      	movs	r2, #63	@ 0x3f
 800258e:	409a      	lsls	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}

080025ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025ae:	b480      	push	{r7}
 80025b0:	b083      	sub	sp, #12
 80025b2:	af00      	add	r7, sp, #0
 80025b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d004      	beq.n	80025cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2280      	movs	r2, #128	@ 0x80
 80025c6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e00c      	b.n	80025e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2205      	movs	r2, #5
 80025d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f022 0201 	bic.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
	...

080025f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b089      	sub	sp, #36	@ 0x24
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002606:	2300      	movs	r3, #0
 8002608:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
 800260e:	e159      	b.n	80028c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002610:	2201      	movs	r2, #1
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	429a      	cmp	r2, r3
 800262a:	f040 8148 	bne.w	80028be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 0303 	and.w	r3, r3, #3
 8002636:	2b01      	cmp	r3, #1
 8002638:	d005      	beq.n	8002646 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002642:	2b02      	cmp	r3, #2
 8002644:	d130      	bne.n	80026a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	2203      	movs	r2, #3
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43db      	mvns	r3, r3
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	4013      	ands	r3, r2
 800265c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	68da      	ldr	r2, [r3, #12]
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800267c:	2201      	movs	r2, #1
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	f003 0201 	and.w	r2, r3, #1
 8002696:	69fb      	ldr	r3, [r7, #28]
 8002698:	fa02 f303 	lsl.w	r3, r2, r3
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	4313      	orrs	r3, r2
 80026a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d017      	beq.n	80026e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	2203      	movs	r2, #3
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4313      	orrs	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d123      	bne.n	8002738 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	08da      	lsrs	r2, r3, #3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3208      	adds	r2, #8
 80026f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	220f      	movs	r2, #15
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	f003 0307 	and.w	r3, r3, #7
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	08da      	lsrs	r2, r3, #3
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	3208      	adds	r2, #8
 8002732:	69b9      	ldr	r1, [r7, #24]
 8002734:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	2203      	movs	r2, #3
 8002744:	fa02 f303 	lsl.w	r3, r2, r3
 8002748:	43db      	mvns	r3, r3
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4013      	ands	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 0203 	and.w	r2, r3, #3
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002774:	2b00      	cmp	r3, #0
 8002776:	f000 80a2 	beq.w	80028be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	60fb      	str	r3, [r7, #12]
 800277e:	4b57      	ldr	r3, [pc, #348]	@ (80028dc <HAL_GPIO_Init+0x2e8>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002782:	4a56      	ldr	r2, [pc, #344]	@ (80028dc <HAL_GPIO_Init+0x2e8>)
 8002784:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002788:	6453      	str	r3, [r2, #68]	@ 0x44
 800278a:	4b54      	ldr	r3, [pc, #336]	@ (80028dc <HAL_GPIO_Init+0x2e8>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002796:	4a52      	ldr	r2, [pc, #328]	@ (80028e0 <HAL_GPIO_Init+0x2ec>)
 8002798:	69fb      	ldr	r3, [r7, #28]
 800279a:	089b      	lsrs	r3, r3, #2
 800279c:	3302      	adds	r3, #2
 800279e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	220f      	movs	r2, #15
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43db      	mvns	r3, r3
 80027b4:	69ba      	ldr	r2, [r7, #24]
 80027b6:	4013      	ands	r3, r2
 80027b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a49      	ldr	r2, [pc, #292]	@ (80028e4 <HAL_GPIO_Init+0x2f0>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d019      	beq.n	80027f6 <HAL_GPIO_Init+0x202>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a48      	ldr	r2, [pc, #288]	@ (80028e8 <HAL_GPIO_Init+0x2f4>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d013      	beq.n	80027f2 <HAL_GPIO_Init+0x1fe>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a47      	ldr	r2, [pc, #284]	@ (80028ec <HAL_GPIO_Init+0x2f8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d00d      	beq.n	80027ee <HAL_GPIO_Init+0x1fa>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a46      	ldr	r2, [pc, #280]	@ (80028f0 <HAL_GPIO_Init+0x2fc>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d007      	beq.n	80027ea <HAL_GPIO_Init+0x1f6>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a45      	ldr	r2, [pc, #276]	@ (80028f4 <HAL_GPIO_Init+0x300>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d101      	bne.n	80027e6 <HAL_GPIO_Init+0x1f2>
 80027e2:	2304      	movs	r3, #4
 80027e4:	e008      	b.n	80027f8 <HAL_GPIO_Init+0x204>
 80027e6:	2307      	movs	r3, #7
 80027e8:	e006      	b.n	80027f8 <HAL_GPIO_Init+0x204>
 80027ea:	2303      	movs	r3, #3
 80027ec:	e004      	b.n	80027f8 <HAL_GPIO_Init+0x204>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e002      	b.n	80027f8 <HAL_GPIO_Init+0x204>
 80027f2:	2301      	movs	r3, #1
 80027f4:	e000      	b.n	80027f8 <HAL_GPIO_Init+0x204>
 80027f6:	2300      	movs	r3, #0
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	f002 0203 	and.w	r2, r2, #3
 80027fe:	0092      	lsls	r2, r2, #2
 8002800:	4093      	lsls	r3, r2
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002808:	4935      	ldr	r1, [pc, #212]	@ (80028e0 <HAL_GPIO_Init+0x2ec>)
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	089b      	lsrs	r3, r3, #2
 800280e:	3302      	adds	r3, #2
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002816:	4b38      	ldr	r3, [pc, #224]	@ (80028f8 <HAL_GPIO_Init+0x304>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d003      	beq.n	800283a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	4313      	orrs	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800283a:	4a2f      	ldr	r2, [pc, #188]	@ (80028f8 <HAL_GPIO_Init+0x304>)
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002840:	4b2d      	ldr	r3, [pc, #180]	@ (80028f8 <HAL_GPIO_Init+0x304>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	43db      	mvns	r3, r3
 800284a:	69ba      	ldr	r2, [r7, #24]
 800284c:	4013      	ands	r3, r2
 800284e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800285c:	69ba      	ldr	r2, [r7, #24]
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002864:	4a24      	ldr	r2, [pc, #144]	@ (80028f8 <HAL_GPIO_Init+0x304>)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800286a:	4b23      	ldr	r3, [pc, #140]	@ (80028f8 <HAL_GPIO_Init+0x304>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	43db      	mvns	r3, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4013      	ands	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002886:	69ba      	ldr	r2, [r7, #24]
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	4313      	orrs	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800288e:	4a1a      	ldr	r2, [pc, #104]	@ (80028f8 <HAL_GPIO_Init+0x304>)
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002894:	4b18      	ldr	r3, [pc, #96]	@ (80028f8 <HAL_GPIO_Init+0x304>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028b8:	4a0f      	ldr	r2, [pc, #60]	@ (80028f8 <HAL_GPIO_Init+0x304>)
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3301      	adds	r3, #1
 80028c2:	61fb      	str	r3, [r7, #28]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	2b0f      	cmp	r3, #15
 80028c8:	f67f aea2 	bls.w	8002610 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028cc:	bf00      	nop
 80028ce:	bf00      	nop
 80028d0:	3724      	adds	r7, #36	@ 0x24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40013800 	.word	0x40013800
 80028e4:	40020000 	.word	0x40020000
 80028e8:	40020400 	.word	0x40020400
 80028ec:	40020800 	.word	0x40020800
 80028f0:	40020c00 	.word	0x40020c00
 80028f4:	40021000 	.word	0x40021000
 80028f8:	40013c00 	.word	0x40013c00

080028fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028fc:	b480      	push	{r7}
 80028fe:	b083      	sub	sp, #12
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	460b      	mov	r3, r1
 8002906:	807b      	strh	r3, [r7, #2]
 8002908:	4613      	mov	r3, r2
 800290a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800290c:	787b      	ldrb	r3, [r7, #1]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002912:	887a      	ldrh	r2, [r7, #2]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002918:	e003      	b.n	8002922 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800291a:	887b      	ldrh	r3, [r7, #2]
 800291c:	041a      	lsls	r2, r3, #16
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	619a      	str	r2, [r3, #24]
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
	...

08002930 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d101      	bne.n	8002942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e267      	b.n	8002e12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d075      	beq.n	8002a3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800294e:	4b88      	ldr	r3, [pc, #544]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b04      	cmp	r3, #4
 8002958:	d00c      	beq.n	8002974 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800295a:	4b85      	ldr	r3, [pc, #532]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002962:	2b08      	cmp	r3, #8
 8002964:	d112      	bne.n	800298c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002966:	4b82      	ldr	r3, [pc, #520]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800296e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002972:	d10b      	bne.n	800298c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002974:	4b7e      	ldr	r3, [pc, #504]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d05b      	beq.n	8002a38 <HAL_RCC_OscConfig+0x108>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d157      	bne.n	8002a38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e242      	b.n	8002e12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002994:	d106      	bne.n	80029a4 <HAL_RCC_OscConfig+0x74>
 8002996:	4b76      	ldr	r3, [pc, #472]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a75      	ldr	r2, [pc, #468]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 800299c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029a0:	6013      	str	r3, [r2, #0]
 80029a2:	e01d      	b.n	80029e0 <HAL_RCC_OscConfig+0xb0>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029ac:	d10c      	bne.n	80029c8 <HAL_RCC_OscConfig+0x98>
 80029ae:	4b70      	ldr	r3, [pc, #448]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a6f      	ldr	r2, [pc, #444]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 80029b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029b8:	6013      	str	r3, [r2, #0]
 80029ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a6c      	ldr	r2, [pc, #432]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 80029c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029c4:	6013      	str	r3, [r2, #0]
 80029c6:	e00b      	b.n	80029e0 <HAL_RCC_OscConfig+0xb0>
 80029c8:	4b69      	ldr	r3, [pc, #420]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a68      	ldr	r2, [pc, #416]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 80029ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029d2:	6013      	str	r3, [r2, #0]
 80029d4:	4b66      	ldr	r3, [pc, #408]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a65      	ldr	r2, [pc, #404]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 80029da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d013      	beq.n	8002a10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7ff fc30 	bl	800224c <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f0:	f7ff fc2c 	bl	800224c <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b64      	cmp	r3, #100	@ 0x64
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e207      	b.n	8002e12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a02:	4b5b      	ldr	r3, [pc, #364]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0xc0>
 8002a0e:	e014      	b.n	8002a3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a10:	f7ff fc1c 	bl	800224c <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a18:	f7ff fc18 	bl	800224c <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b64      	cmp	r3, #100	@ 0x64
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e1f3      	b.n	8002e12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2a:	4b51      	ldr	r3, [pc, #324]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d1f0      	bne.n	8002a18 <HAL_RCC_OscConfig+0xe8>
 8002a36:	e000      	b.n	8002a3a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d063      	beq.n	8002b0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a46:	4b4a      	ldr	r3, [pc, #296]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 030c 	and.w	r3, r3, #12
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00b      	beq.n	8002a6a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a52:	4b47      	ldr	r3, [pc, #284]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002a5a:	2b08      	cmp	r3, #8
 8002a5c:	d11c      	bne.n	8002a98 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a5e:	4b44      	ldr	r3, [pc, #272]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d116      	bne.n	8002a98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a6a:	4b41      	ldr	r3, [pc, #260]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d005      	beq.n	8002a82 <HAL_RCC_OscConfig+0x152>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d001      	beq.n	8002a82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e1c7      	b.n	8002e12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a82:	4b3b      	ldr	r3, [pc, #236]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4937      	ldr	r1, [pc, #220]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a96:	e03a      	b.n	8002b0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d020      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aa0:	4b34      	ldr	r3, [pc, #208]	@ (8002b74 <HAL_RCC_OscConfig+0x244>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa6:	f7ff fbd1 	bl	800224c <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aae:	f7ff fbcd 	bl	800224c <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e1a8      	b.n	8002e12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f0      	beq.n	8002aae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002acc:	4b28      	ldr	r3, [pc, #160]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	691b      	ldr	r3, [r3, #16]
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4925      	ldr	r1, [pc, #148]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	600b      	str	r3, [r1, #0]
 8002ae0:	e015      	b.n	8002b0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ae2:	4b24      	ldr	r3, [pc, #144]	@ (8002b74 <HAL_RCC_OscConfig+0x244>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae8:	f7ff fbb0 	bl	800224c <HAL_GetTick>
 8002aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002af0:	f7ff fbac 	bl	800224c <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e187      	b.n	8002e12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b02:	4b1b      	ldr	r3, [pc, #108]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0308 	and.w	r3, r3, #8
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d036      	beq.n	8002b88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d016      	beq.n	8002b50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b22:	4b15      	ldr	r3, [pc, #84]	@ (8002b78 <HAL_RCC_OscConfig+0x248>)
 8002b24:	2201      	movs	r2, #1
 8002b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b28:	f7ff fb90 	bl	800224c <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b30:	f7ff fb8c 	bl	800224c <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e167      	b.n	8002e12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b42:	4b0b      	ldr	r3, [pc, #44]	@ (8002b70 <HAL_RCC_OscConfig+0x240>)
 8002b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0f0      	beq.n	8002b30 <HAL_RCC_OscConfig+0x200>
 8002b4e:	e01b      	b.n	8002b88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b50:	4b09      	ldr	r3, [pc, #36]	@ (8002b78 <HAL_RCC_OscConfig+0x248>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b56:	f7ff fb79 	bl	800224c <HAL_GetTick>
 8002b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b5c:	e00e      	b.n	8002b7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b5e:	f7ff fb75 	bl	800224c <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d907      	bls.n	8002b7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e150      	b.n	8002e12 <HAL_RCC_OscConfig+0x4e2>
 8002b70:	40023800 	.word	0x40023800
 8002b74:	42470000 	.word	0x42470000
 8002b78:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b7c:	4b88      	ldr	r3, [pc, #544]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002b7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1ea      	bne.n	8002b5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0304 	and.w	r3, r3, #4
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 8097 	beq.w	8002cc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b96:	2300      	movs	r3, #0
 8002b98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b9a:	4b81      	ldr	r3, [pc, #516]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10f      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	60bb      	str	r3, [r7, #8]
 8002baa:	4b7d      	ldr	r3, [pc, #500]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	4a7c      	ldr	r2, [pc, #496]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bb6:	4b7a      	ldr	r3, [pc, #488]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bbe:	60bb      	str	r3, [r7, #8]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bc6:	4b77      	ldr	r3, [pc, #476]	@ (8002da4 <HAL_RCC_OscConfig+0x474>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d118      	bne.n	8002c04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bd2:	4b74      	ldr	r3, [pc, #464]	@ (8002da4 <HAL_RCC_OscConfig+0x474>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a73      	ldr	r2, [pc, #460]	@ (8002da4 <HAL_RCC_OscConfig+0x474>)
 8002bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bde:	f7ff fb35 	bl	800224c <HAL_GetTick>
 8002be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002be4:	e008      	b.n	8002bf8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be6:	f7ff fb31 	bl	800224c <HAL_GetTick>
 8002bea:	4602      	mov	r2, r0
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	2b02      	cmp	r3, #2
 8002bf2:	d901      	bls.n	8002bf8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e10c      	b.n	8002e12 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8002da4 <HAL_RCC_OscConfig+0x474>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d0f0      	beq.n	8002be6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d106      	bne.n	8002c1a <HAL_RCC_OscConfig+0x2ea>
 8002c0c:	4b64      	ldr	r3, [pc, #400]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c10:	4a63      	ldr	r2, [pc, #396]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c18:	e01c      	b.n	8002c54 <HAL_RCC_OscConfig+0x324>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b05      	cmp	r3, #5
 8002c20:	d10c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x30c>
 8002c22:	4b5f      	ldr	r3, [pc, #380]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c26:	4a5e      	ldr	r2, [pc, #376]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002c28:	f043 0304 	orr.w	r3, r3, #4
 8002c2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c2e:	4b5c      	ldr	r3, [pc, #368]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c32:	4a5b      	ldr	r2, [pc, #364]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002c34:	f043 0301 	orr.w	r3, r3, #1
 8002c38:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c3a:	e00b      	b.n	8002c54 <HAL_RCC_OscConfig+0x324>
 8002c3c:	4b58      	ldr	r3, [pc, #352]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c40:	4a57      	ldr	r2, [pc, #348]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002c42:	f023 0301 	bic.w	r3, r3, #1
 8002c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c48:	4b55      	ldr	r3, [pc, #340]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c4c:	4a54      	ldr	r2, [pc, #336]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002c4e:	f023 0304 	bic.w	r3, r3, #4
 8002c52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d015      	beq.n	8002c88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5c:	f7ff faf6 	bl	800224c <HAL_GetTick>
 8002c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c62:	e00a      	b.n	8002c7a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c64:	f7ff faf2 	bl	800224c <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d901      	bls.n	8002c7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c76:	2303      	movs	r3, #3
 8002c78:	e0cb      	b.n	8002e12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7a:	4b49      	ldr	r3, [pc, #292]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0ee      	beq.n	8002c64 <HAL_RCC_OscConfig+0x334>
 8002c86:	e014      	b.n	8002cb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c88:	f7ff fae0 	bl	800224c <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c90:	f7ff fadc 	bl	800224c <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e0b5      	b.n	8002e12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca6:	4b3e      	ldr	r3, [pc, #248]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1ee      	bne.n	8002c90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002cb2:	7dfb      	ldrb	r3, [r7, #23]
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d105      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cb8:	4b39      	ldr	r3, [pc, #228]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbc:	4a38      	ldr	r2, [pc, #224]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002cbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 80a1 	beq.w	8002e10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cce:	4b34      	ldr	r3, [pc, #208]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f003 030c 	and.w	r3, r3, #12
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d05c      	beq.n	8002d94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d141      	bne.n	8002d66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce2:	4b31      	ldr	r3, [pc, #196]	@ (8002da8 <HAL_RCC_OscConfig+0x478>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ce8:	f7ff fab0 	bl	800224c <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cf0:	f7ff faac 	bl	800224c <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e087      	b.n	8002e12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d02:	4b27      	ldr	r3, [pc, #156]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69da      	ldr	r2, [r3, #28]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a1b      	ldr	r3, [r3, #32]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d1c:	019b      	lsls	r3, r3, #6
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d24:	085b      	lsrs	r3, r3, #1
 8002d26:	3b01      	subs	r3, #1
 8002d28:	041b      	lsls	r3, r3, #16
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d30:	061b      	lsls	r3, r3, #24
 8002d32:	491b      	ldr	r1, [pc, #108]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d38:	4b1b      	ldr	r3, [pc, #108]	@ (8002da8 <HAL_RCC_OscConfig+0x478>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3e:	f7ff fa85 	bl	800224c <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d46:	f7ff fa81 	bl	800224c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e05c      	b.n	8002e12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d58:	4b11      	ldr	r3, [pc, #68]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x416>
 8002d64:	e054      	b.n	8002e10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d66:	4b10      	ldr	r3, [pc, #64]	@ (8002da8 <HAL_RCC_OscConfig+0x478>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7ff fa6e 	bl	800224c <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d74:	f7ff fa6a 	bl	800224c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e045      	b.n	8002e12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d86:	4b06      	ldr	r3, [pc, #24]	@ (8002da0 <HAL_RCC_OscConfig+0x470>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0x444>
 8002d92:	e03d      	b.n	8002e10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d107      	bne.n	8002dac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e038      	b.n	8002e12 <HAL_RCC_OscConfig+0x4e2>
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40007000 	.word	0x40007000
 8002da8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dac:	4b1b      	ldr	r3, [pc, #108]	@ (8002e1c <HAL_RCC_OscConfig+0x4ec>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d028      	beq.n	8002e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d121      	bne.n	8002e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d11a      	bne.n	8002e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ddc:	4013      	ands	r3, r2
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002de2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d111      	bne.n	8002e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df2:	085b      	lsrs	r3, r3, #1
 8002df4:	3b01      	subs	r3, #1
 8002df6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d107      	bne.n	8002e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e000      	b.n	8002e12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e10:	2300      	movs	r3, #0
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3718      	adds	r7, #24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40023800 	.word	0x40023800

08002e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
 8002e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0cc      	b.n	8002fce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e34:	4b68      	ldr	r3, [pc, #416]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0307 	and.w	r3, r3, #7
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d90c      	bls.n	8002e5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e42:	4b65      	ldr	r3, [pc, #404]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b63      	ldr	r3, [pc, #396]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0307 	and.w	r3, r3, #7
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d001      	beq.n	8002e5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e0b8      	b.n	8002fce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d020      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0304 	and.w	r3, r3, #4
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d005      	beq.n	8002e80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e74:	4b59      	ldr	r3, [pc, #356]	@ (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	4a58      	ldr	r2, [pc, #352]	@ (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002e7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002e7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0308 	and.w	r3, r3, #8
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d005      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e8c:	4b53      	ldr	r3, [pc, #332]	@ (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	4a52      	ldr	r2, [pc, #328]	@ (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002e92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002e96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e98:	4b50      	ldr	r3, [pc, #320]	@ (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	494d      	ldr	r1, [pc, #308]	@ (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0301 	and.w	r3, r3, #1
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d044      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d107      	bne.n	8002ece <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ebe:	4b47      	ldr	r3, [pc, #284]	@ (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d119      	bne.n	8002efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e07f      	b.n	8002fce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d003      	beq.n	8002ede <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d107      	bne.n	8002eee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ede:	4b3f      	ldr	r3, [pc, #252]	@ (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	e06f      	b.n	8002fce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eee:	4b3b      	ldr	r3, [pc, #236]	@ (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e067      	b.n	8002fce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002efe:	4b37      	ldr	r3, [pc, #220]	@ (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f023 0203 	bic.w	r2, r3, #3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	4934      	ldr	r1, [pc, #208]	@ (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f10:	f7ff f99c 	bl	800224c <HAL_GetTick>
 8002f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f16:	e00a      	b.n	8002f2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f18:	f7ff f998 	bl	800224c <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e04f      	b.n	8002fce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002f30:	689b      	ldr	r3, [r3, #8]
 8002f32:	f003 020c 	and.w	r2, r3, #12
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d1eb      	bne.n	8002f18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f40:	4b25      	ldr	r3, [pc, #148]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0307 	and.w	r3, r3, #7
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d20c      	bcs.n	8002f68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4e:	4b22      	ldr	r3, [pc, #136]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f56:	4b20      	ldr	r3, [pc, #128]	@ (8002fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e032      	b.n	8002fce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0304 	and.w	r3, r3, #4
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f74:	4b19      	ldr	r3, [pc, #100]	@ (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	4916      	ldr	r1, [pc, #88]	@ (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f92:	4b12      	ldr	r3, [pc, #72]	@ (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	490e      	ldr	r1, [pc, #56]	@ (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fa6:	f000 f821 	bl	8002fec <HAL_RCC_GetSysClockFreq>
 8002faa:	4602      	mov	r2, r0
 8002fac:	4b0b      	ldr	r3, [pc, #44]	@ (8002fdc <HAL_RCC_ClockConfig+0x1bc>)
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	091b      	lsrs	r3, r3, #4
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	490a      	ldr	r1, [pc, #40]	@ (8002fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8002fb8:	5ccb      	ldrb	r3, [r1, r3]
 8002fba:	fa22 f303 	lsr.w	r3, r2, r3
 8002fbe:	4a09      	ldr	r2, [pc, #36]	@ (8002fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002fc2:	4b09      	ldr	r3, [pc, #36]	@ (8002fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff f8fc 	bl	80021c4 <HAL_InitTick>

  return HAL_OK;
 8002fcc:	2300      	movs	r3, #0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40023c00 	.word	0x40023c00
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	08009940 	.word	0x08009940
 8002fe4:	20000004 	.word	0x20000004
 8002fe8:	20000008 	.word	0x20000008

08002fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff0:	b094      	sub	sp, #80	@ 0x50
 8002ff2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003004:	4b79      	ldr	r3, [pc, #484]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f003 030c 	and.w	r3, r3, #12
 800300c:	2b08      	cmp	r3, #8
 800300e:	d00d      	beq.n	800302c <HAL_RCC_GetSysClockFreq+0x40>
 8003010:	2b08      	cmp	r3, #8
 8003012:	f200 80e1 	bhi.w	80031d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003016:	2b00      	cmp	r3, #0
 8003018:	d002      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0x34>
 800301a:	2b04      	cmp	r3, #4
 800301c:	d003      	beq.n	8003026 <HAL_RCC_GetSysClockFreq+0x3a>
 800301e:	e0db      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003020:	4b73      	ldr	r3, [pc, #460]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003022:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003024:	e0db      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003026:	4b73      	ldr	r3, [pc, #460]	@ (80031f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003028:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800302a:	e0d8      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800302c:	4b6f      	ldr	r3, [pc, #444]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x200>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003034:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003036:	4b6d      	ldr	r3, [pc, #436]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d063      	beq.n	800310a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003042:	4b6a      	ldr	r3, [pc, #424]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x200>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	099b      	lsrs	r3, r3, #6
 8003048:	2200      	movs	r2, #0
 800304a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800304c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800304e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003054:	633b      	str	r3, [r7, #48]	@ 0x30
 8003056:	2300      	movs	r3, #0
 8003058:	637b      	str	r3, [r7, #52]	@ 0x34
 800305a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800305e:	4622      	mov	r2, r4
 8003060:	462b      	mov	r3, r5
 8003062:	f04f 0000 	mov.w	r0, #0
 8003066:	f04f 0100 	mov.w	r1, #0
 800306a:	0159      	lsls	r1, r3, #5
 800306c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003070:	0150      	lsls	r0, r2, #5
 8003072:	4602      	mov	r2, r0
 8003074:	460b      	mov	r3, r1
 8003076:	4621      	mov	r1, r4
 8003078:	1a51      	subs	r1, r2, r1
 800307a:	6139      	str	r1, [r7, #16]
 800307c:	4629      	mov	r1, r5
 800307e:	eb63 0301 	sbc.w	r3, r3, r1
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	f04f 0300 	mov.w	r3, #0
 800308c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003090:	4659      	mov	r1, fp
 8003092:	018b      	lsls	r3, r1, #6
 8003094:	4651      	mov	r1, sl
 8003096:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800309a:	4651      	mov	r1, sl
 800309c:	018a      	lsls	r2, r1, #6
 800309e:	4651      	mov	r1, sl
 80030a0:	ebb2 0801 	subs.w	r8, r2, r1
 80030a4:	4659      	mov	r1, fp
 80030a6:	eb63 0901 	sbc.w	r9, r3, r1
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030be:	4690      	mov	r8, r2
 80030c0:	4699      	mov	r9, r3
 80030c2:	4623      	mov	r3, r4
 80030c4:	eb18 0303 	adds.w	r3, r8, r3
 80030c8:	60bb      	str	r3, [r7, #8]
 80030ca:	462b      	mov	r3, r5
 80030cc:	eb49 0303 	adc.w	r3, r9, r3
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	f04f 0200 	mov.w	r2, #0
 80030d6:	f04f 0300 	mov.w	r3, #0
 80030da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030de:	4629      	mov	r1, r5
 80030e0:	024b      	lsls	r3, r1, #9
 80030e2:	4621      	mov	r1, r4
 80030e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030e8:	4621      	mov	r1, r4
 80030ea:	024a      	lsls	r2, r1, #9
 80030ec:	4610      	mov	r0, r2
 80030ee:	4619      	mov	r1, r3
 80030f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030f2:	2200      	movs	r2, #0
 80030f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80030fc:	f7fd fddc 	bl	8000cb8 <__aeabi_uldivmod>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4613      	mov	r3, r2
 8003106:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003108:	e058      	b.n	80031bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800310a:	4b38      	ldr	r3, [pc, #224]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x200>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	099b      	lsrs	r3, r3, #6
 8003110:	2200      	movs	r2, #0
 8003112:	4618      	mov	r0, r3
 8003114:	4611      	mov	r1, r2
 8003116:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800311a:	623b      	str	r3, [r7, #32]
 800311c:	2300      	movs	r3, #0
 800311e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003120:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003124:	4642      	mov	r2, r8
 8003126:	464b      	mov	r3, r9
 8003128:	f04f 0000 	mov.w	r0, #0
 800312c:	f04f 0100 	mov.w	r1, #0
 8003130:	0159      	lsls	r1, r3, #5
 8003132:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003136:	0150      	lsls	r0, r2, #5
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4641      	mov	r1, r8
 800313e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003142:	4649      	mov	r1, r9
 8003144:	eb63 0b01 	sbc.w	fp, r3, r1
 8003148:	f04f 0200 	mov.w	r2, #0
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003154:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003158:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800315c:	ebb2 040a 	subs.w	r4, r2, sl
 8003160:	eb63 050b 	sbc.w	r5, r3, fp
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	00eb      	lsls	r3, r5, #3
 800316e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003172:	00e2      	lsls	r2, r4, #3
 8003174:	4614      	mov	r4, r2
 8003176:	461d      	mov	r5, r3
 8003178:	4643      	mov	r3, r8
 800317a:	18e3      	adds	r3, r4, r3
 800317c:	603b      	str	r3, [r7, #0]
 800317e:	464b      	mov	r3, r9
 8003180:	eb45 0303 	adc.w	r3, r5, r3
 8003184:	607b      	str	r3, [r7, #4]
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003192:	4629      	mov	r1, r5
 8003194:	028b      	lsls	r3, r1, #10
 8003196:	4621      	mov	r1, r4
 8003198:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800319c:	4621      	mov	r1, r4
 800319e:	028a      	lsls	r2, r1, #10
 80031a0:	4610      	mov	r0, r2
 80031a2:	4619      	mov	r1, r3
 80031a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031a6:	2200      	movs	r2, #0
 80031a8:	61bb      	str	r3, [r7, #24]
 80031aa:	61fa      	str	r2, [r7, #28]
 80031ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031b0:	f7fd fd82 	bl	8000cb8 <__aeabi_uldivmod>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4613      	mov	r3, r2
 80031ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80031bc:	4b0b      	ldr	r3, [pc, #44]	@ (80031ec <HAL_RCC_GetSysClockFreq+0x200>)
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	0c1b      	lsrs	r3, r3, #16
 80031c2:	f003 0303 	and.w	r3, r3, #3
 80031c6:	3301      	adds	r3, #1
 80031c8:	005b      	lsls	r3, r3, #1
 80031ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80031cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80031ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031d6:	e002      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031d8:	4b05      	ldr	r3, [pc, #20]	@ (80031f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80031da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3750      	adds	r7, #80	@ 0x50
 80031e4:	46bd      	mov	sp, r7
 80031e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800
 80031f0:	00f42400 	.word	0x00f42400
 80031f4:	007a1200 	.word	0x007a1200

080031f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031fc:	4b03      	ldr	r3, [pc, #12]	@ (800320c <HAL_RCC_GetHCLKFreq+0x14>)
 80031fe:	681b      	ldr	r3, [r3, #0]
}
 8003200:	4618      	mov	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20000004 	.word	0x20000004

08003210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003214:	f7ff fff0 	bl	80031f8 <HAL_RCC_GetHCLKFreq>
 8003218:	4602      	mov	r2, r0
 800321a:	4b05      	ldr	r3, [pc, #20]	@ (8003230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	0a9b      	lsrs	r3, r3, #10
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	4903      	ldr	r1, [pc, #12]	@ (8003234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003226:	5ccb      	ldrb	r3, [r1, r3]
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800322c:	4618      	mov	r0, r3
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40023800 	.word	0x40023800
 8003234:	08009950 	.word	0x08009950

08003238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800323c:	f7ff ffdc 	bl	80031f8 <HAL_RCC_GetHCLKFreq>
 8003240:	4602      	mov	r2, r0
 8003242:	4b05      	ldr	r3, [pc, #20]	@ (8003258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	0b5b      	lsrs	r3, r3, #13
 8003248:	f003 0307 	and.w	r3, r3, #7
 800324c:	4903      	ldr	r1, [pc, #12]	@ (800325c <HAL_RCC_GetPCLK2Freq+0x24>)
 800324e:	5ccb      	ldrb	r3, [r1, r3]
 8003250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003254:	4618      	mov	r0, r3
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40023800 	.word	0x40023800
 800325c:	08009950 	.word	0x08009950

08003260 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b082      	sub	sp, #8
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e041      	b.n	80032f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003278:	b2db      	uxtb	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fe fd2e 	bl	8001ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2202      	movs	r2, #2
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3304      	adds	r3, #4
 800329c:	4619      	mov	r1, r3
 800329e:	4610      	mov	r0, r2
 80032a0:	f000 fa70 	bl	8003784 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3708      	adds	r7, #8
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
	...

08003300 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b01      	cmp	r3, #1
 8003312:	d001      	beq.n	8003318 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e044      	b.n	80033a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68da      	ldr	r2, [r3, #12]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0201 	orr.w	r2, r2, #1
 800332e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a1e      	ldr	r2, [pc, #120]	@ (80033b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d018      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x6c>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003342:	d013      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x6c>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a1a      	ldr	r2, [pc, #104]	@ (80033b4 <HAL_TIM_Base_Start_IT+0xb4>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d00e      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x6c>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a19      	ldr	r2, [pc, #100]	@ (80033b8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d009      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x6c>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a17      	ldr	r2, [pc, #92]	@ (80033bc <HAL_TIM_Base_Start_IT+0xbc>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d004      	beq.n	800336c <HAL_TIM_Base_Start_IT+0x6c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a16      	ldr	r2, [pc, #88]	@ (80033c0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d111      	bne.n	8003390 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2b06      	cmp	r3, #6
 800337c:	d010      	beq.n	80033a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0201 	orr.w	r2, r2, #1
 800338c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800338e:	e007      	b.n	80033a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f042 0201 	orr.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3714      	adds	r7, #20
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	40010000 	.word	0x40010000
 80033b4:	40000400 	.word	0x40000400
 80033b8:	40000800 	.word	0x40000800
 80033bc:	40000c00 	.word	0x40000c00
 80033c0:	40014000 	.word	0x40014000

080033c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	691b      	ldr	r3, [r3, #16]
 80033da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f003 0302 	and.w	r3, r3, #2
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d020      	beq.n	8003428 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01b      	beq.n	8003428 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f06f 0202 	mvn.w	r2, #2
 80033f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	699b      	ldr	r3, [r3, #24]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f000 f999 	bl	8003746 <HAL_TIM_IC_CaptureCallback>
 8003414:	e005      	b.n	8003422 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f98b 	bl	8003732 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f000 f99c 	bl	800375a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f003 0304 	and.w	r3, r3, #4
 800342e:	2b00      	cmp	r3, #0
 8003430:	d020      	beq.n	8003474 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01b      	beq.n	8003474 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0204 	mvn.w	r2, #4
 8003444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2202      	movs	r2, #2
 800344a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 f973 	bl	8003746 <HAL_TIM_IC_CaptureCallback>
 8003460:	e005      	b.n	800346e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 f965 	bl	8003732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 f976 	bl	800375a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d020      	beq.n	80034c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f003 0308 	and.w	r3, r3, #8
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01b      	beq.n	80034c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0208 	mvn.w	r2, #8
 8003490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2204      	movs	r2, #4
 8003496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f94d 	bl	8003746 <HAL_TIM_IC_CaptureCallback>
 80034ac:	e005      	b.n	80034ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f93f 	bl	8003732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 f950 	bl	800375a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d020      	beq.n	800350c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01b      	beq.n	800350c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0210 	mvn.w	r2, #16
 80034dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2208      	movs	r2, #8
 80034e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f927 	bl	8003746 <HAL_TIM_IC_CaptureCallback>
 80034f8:	e005      	b.n	8003506 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f919 	bl	8003732 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 f92a 	bl	800375a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f003 0301 	and.w	r3, r3, #1
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00c      	beq.n	8003530 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	2b00      	cmp	r3, #0
 800351e:	d007      	beq.n	8003530 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0201 	mvn.w	r2, #1
 8003528:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fe fb88 	bl	8001c40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00c      	beq.n	8003554 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003540:	2b00      	cmp	r3, #0
 8003542:	d007      	beq.n	8003554 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800354c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 fab0 	bl	8003ab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00c      	beq.n	8003578 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003564:	2b00      	cmp	r3, #0
 8003566:	d007      	beq.n	8003578 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f8fb 	bl	800376e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00c      	beq.n	800359c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	f003 0320 	and.w	r3, r3, #32
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f06f 0220 	mvn.w	r2, #32
 8003594:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f000 fa82 	bl	8003aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800359c:	bf00      	nop
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035ae:	2300      	movs	r3, #0
 80035b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_TIM_ConfigClockSource+0x1c>
 80035bc:	2302      	movs	r3, #2
 80035be:	e0b4      	b.n	800372a <HAL_TIM_ConfigClockSource+0x186>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80035de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035f8:	d03e      	beq.n	8003678 <HAL_TIM_ConfigClockSource+0xd4>
 80035fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035fe:	f200 8087 	bhi.w	8003710 <HAL_TIM_ConfigClockSource+0x16c>
 8003602:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003606:	f000 8086 	beq.w	8003716 <HAL_TIM_ConfigClockSource+0x172>
 800360a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800360e:	d87f      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x16c>
 8003610:	2b70      	cmp	r3, #112	@ 0x70
 8003612:	d01a      	beq.n	800364a <HAL_TIM_ConfigClockSource+0xa6>
 8003614:	2b70      	cmp	r3, #112	@ 0x70
 8003616:	d87b      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x16c>
 8003618:	2b60      	cmp	r3, #96	@ 0x60
 800361a:	d050      	beq.n	80036be <HAL_TIM_ConfigClockSource+0x11a>
 800361c:	2b60      	cmp	r3, #96	@ 0x60
 800361e:	d877      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x16c>
 8003620:	2b50      	cmp	r3, #80	@ 0x50
 8003622:	d03c      	beq.n	800369e <HAL_TIM_ConfigClockSource+0xfa>
 8003624:	2b50      	cmp	r3, #80	@ 0x50
 8003626:	d873      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x16c>
 8003628:	2b40      	cmp	r3, #64	@ 0x40
 800362a:	d058      	beq.n	80036de <HAL_TIM_ConfigClockSource+0x13a>
 800362c:	2b40      	cmp	r3, #64	@ 0x40
 800362e:	d86f      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x16c>
 8003630:	2b30      	cmp	r3, #48	@ 0x30
 8003632:	d064      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x15a>
 8003634:	2b30      	cmp	r3, #48	@ 0x30
 8003636:	d86b      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x16c>
 8003638:	2b20      	cmp	r3, #32
 800363a:	d060      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x15a>
 800363c:	2b20      	cmp	r3, #32
 800363e:	d867      	bhi.n	8003710 <HAL_TIM_ConfigClockSource+0x16c>
 8003640:	2b00      	cmp	r3, #0
 8003642:	d05c      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x15a>
 8003644:	2b10      	cmp	r3, #16
 8003646:	d05a      	beq.n	80036fe <HAL_TIM_ConfigClockSource+0x15a>
 8003648:	e062      	b.n	8003710 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800365a:	f000 f993 	bl	8003984 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800366c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	609a      	str	r2, [r3, #8]
      break;
 8003676:	e04f      	b.n	8003718 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003688:	f000 f97c 	bl	8003984 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689a      	ldr	r2, [r3, #8]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800369a:	609a      	str	r2, [r3, #8]
      break;
 800369c:	e03c      	b.n	8003718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036aa:	461a      	mov	r2, r3
 80036ac:	f000 f8f0 	bl	8003890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2150      	movs	r1, #80	@ 0x50
 80036b6:	4618      	mov	r0, r3
 80036b8:	f000 f949 	bl	800394e <TIM_ITRx_SetConfig>
      break;
 80036bc:	e02c      	b.n	8003718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ca:	461a      	mov	r2, r3
 80036cc:	f000 f90f 	bl	80038ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2160      	movs	r1, #96	@ 0x60
 80036d6:	4618      	mov	r0, r3
 80036d8:	f000 f939 	bl	800394e <TIM_ITRx_SetConfig>
      break;
 80036dc:	e01c      	b.n	8003718 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ea:	461a      	mov	r2, r3
 80036ec:	f000 f8d0 	bl	8003890 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2140      	movs	r1, #64	@ 0x40
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f929 	bl	800394e <TIM_ITRx_SetConfig>
      break;
 80036fc:	e00c      	b.n	8003718 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4619      	mov	r1, r3
 8003708:	4610      	mov	r0, r2
 800370a:	f000 f920 	bl	800394e <TIM_ITRx_SetConfig>
      break;
 800370e:	e003      	b.n	8003718 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	73fb      	strb	r3, [r7, #15]
      break;
 8003714:	e000      	b.n	8003718 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003716:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003728:	7bfb      	ldrb	r3, [r7, #15]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003732:	b480      	push	{r7}
 8003734:	b083      	sub	sp, #12
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800373a:	bf00      	nop
 800373c:	370c      	adds	r7, #12
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003746:	b480      	push	{r7}
 8003748:	b083      	sub	sp, #12
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800374e:	bf00      	nop
 8003750:	370c      	adds	r7, #12
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr

0800375a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800375a:	b480      	push	{r7}
 800375c:	b083      	sub	sp, #12
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003762:	bf00      	nop
 8003764:	370c      	adds	r7, #12
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr

0800376e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800376e:	b480      	push	{r7}
 8003770:	b083      	sub	sp, #12
 8003772:	af00      	add	r7, sp, #0
 8003774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003776:	bf00      	nop
 8003778:	370c      	adds	r7, #12
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
	...

08003784 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	4a37      	ldr	r2, [pc, #220]	@ (8003874 <TIM_Base_SetConfig+0xf0>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d00f      	beq.n	80037bc <TIM_Base_SetConfig+0x38>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037a2:	d00b      	beq.n	80037bc <TIM_Base_SetConfig+0x38>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a34      	ldr	r2, [pc, #208]	@ (8003878 <TIM_Base_SetConfig+0xf4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d007      	beq.n	80037bc <TIM_Base_SetConfig+0x38>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	4a33      	ldr	r2, [pc, #204]	@ (800387c <TIM_Base_SetConfig+0xf8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d003      	beq.n	80037bc <TIM_Base_SetConfig+0x38>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	4a32      	ldr	r2, [pc, #200]	@ (8003880 <TIM_Base_SetConfig+0xfc>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d108      	bne.n	80037ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a28      	ldr	r2, [pc, #160]	@ (8003874 <TIM_Base_SetConfig+0xf0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d01b      	beq.n	800380e <TIM_Base_SetConfig+0x8a>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037dc:	d017      	beq.n	800380e <TIM_Base_SetConfig+0x8a>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4a25      	ldr	r2, [pc, #148]	@ (8003878 <TIM_Base_SetConfig+0xf4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d013      	beq.n	800380e <TIM_Base_SetConfig+0x8a>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	4a24      	ldr	r2, [pc, #144]	@ (800387c <TIM_Base_SetConfig+0xf8>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d00f      	beq.n	800380e <TIM_Base_SetConfig+0x8a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a23      	ldr	r2, [pc, #140]	@ (8003880 <TIM_Base_SetConfig+0xfc>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d00b      	beq.n	800380e <TIM_Base_SetConfig+0x8a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a22      	ldr	r2, [pc, #136]	@ (8003884 <TIM_Base_SetConfig+0x100>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d007      	beq.n	800380e <TIM_Base_SetConfig+0x8a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a21      	ldr	r2, [pc, #132]	@ (8003888 <TIM_Base_SetConfig+0x104>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d003      	beq.n	800380e <TIM_Base_SetConfig+0x8a>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a20      	ldr	r2, [pc, #128]	@ (800388c <TIM_Base_SetConfig+0x108>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d108      	bne.n	8003820 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003814:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	68db      	ldr	r3, [r3, #12]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	4313      	orrs	r3, r2
 800381e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	4313      	orrs	r3, r2
 800382c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	689a      	ldr	r2, [r3, #8]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a0c      	ldr	r2, [pc, #48]	@ (8003874 <TIM_Base_SetConfig+0xf0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d103      	bne.n	800384e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	691a      	ldr	r2, [r3, #16]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f043 0204 	orr.w	r2, r3, #4
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2201      	movs	r2, #1
 800385e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	601a      	str	r2, [r3, #0]
}
 8003866:	bf00      	nop
 8003868:	3714      	adds	r7, #20
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	40010000 	.word	0x40010000
 8003878:	40000400 	.word	0x40000400
 800387c:	40000800 	.word	0x40000800
 8003880:	40000c00 	.word	0x40000c00
 8003884:	40014000 	.word	0x40014000
 8003888:	40014400 	.word	0x40014400
 800388c:	40014800 	.word	0x40014800

08003890 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003890:	b480      	push	{r7}
 8003892:	b087      	sub	sp, #28
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	f023 0201 	bic.w	r2, r3, #1
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f023 030a 	bic.w	r3, r3, #10
 80038cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038ce:	697a      	ldr	r2, [r7, #20]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4313      	orrs	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	621a      	str	r2, [r3, #32]
}
 80038e2:	bf00      	nop
 80038e4:	371c      	adds	r7, #28
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr

080038ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b087      	sub	sp, #28
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	60f8      	str	r0, [r7, #12]
 80038f6:	60b9      	str	r1, [r7, #8]
 80038f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	f023 0210 	bic.w	r2, r3, #16
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	699b      	ldr	r3, [r3, #24]
 8003910:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003918:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	031b      	lsls	r3, r3, #12
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4313      	orrs	r3, r2
 8003922:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800392a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	4313      	orrs	r3, r2
 8003934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	621a      	str	r2, [r3, #32]
}
 8003942:	bf00      	nop
 8003944:	371c      	adds	r7, #28
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr

0800394e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800394e:	b480      	push	{r7}
 8003950:	b085      	sub	sp, #20
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
 8003956:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003964:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4313      	orrs	r3, r2
 800396c:	f043 0307 	orr.w	r3, r3, #7
 8003970:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	609a      	str	r2, [r3, #8]
}
 8003978:	bf00      	nop
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003984:	b480      	push	{r7}
 8003986:	b087      	sub	sp, #28
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800399e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	021a      	lsls	r2, r3, #8
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	609a      	str	r2, [r3, #8]
}
 80039b8:	bf00      	nop
 80039ba:	371c      	adds	r7, #28
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d101      	bne.n	80039dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039d8:	2302      	movs	r3, #2
 80039da:	e050      	b.n	8003a7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68fa      	ldr	r2, [r7, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d018      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a28:	d013      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a18      	ldr	r2, [pc, #96]	@ (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d00e      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a16      	ldr	r2, [pc, #88]	@ (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d009      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a15      	ldr	r2, [pc, #84]	@ (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d004      	beq.n	8003a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a13      	ldr	r2, [pc, #76]	@ (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d10c      	bne.n	8003a6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	40010000 	.word	0x40010000
 8003a90:	40000400 	.word	0x40000400
 8003a94:	40000800 	.word	0x40000800
 8003a98:	40000c00 	.word	0x40000c00
 8003a9c:	40014000 	.word	0x40014000

08003aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e042      	b.n	8003b60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d106      	bne.n	8003af4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7fe f922 	bl	8001d38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2224      	movs	r2, #36	@ 0x24
 8003af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 fe6b 	bl	80047e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003b20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695a      	ldr	r2, [r3, #20]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003b30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68da      	ldr	r2, [r3, #12]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003b5e:	2300      	movs	r3, #0
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3708      	adds	r7, #8
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}

08003b68 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b08a      	sub	sp, #40	@ 0x28
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	603b      	str	r3, [r7, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	d175      	bne.n	8003c74 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_UART_Transmit+0x2c>
 8003b8e:	88fb      	ldrh	r3, [r7, #6]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e06e      	b.n	8003c76 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2221      	movs	r2, #33	@ 0x21
 8003ba2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ba6:	f7fe fb51 	bl	800224c <HAL_GetTick>
 8003baa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	88fa      	ldrh	r2, [r7, #6]
 8003bb0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	88fa      	ldrh	r2, [r7, #6]
 8003bb6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bc0:	d108      	bne.n	8003bd4 <HAL_UART_Transmit+0x6c>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d104      	bne.n	8003bd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	61bb      	str	r3, [r7, #24]
 8003bd2:	e003      	b.n	8003bdc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003bdc:	e02e      	b.n	8003c3c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2200      	movs	r2, #0
 8003be6:	2180      	movs	r1, #128	@ 0x80
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 fbcf 	bl	800438c <UART_WaitOnFlagUntilTimeout>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d005      	beq.n	8003c00 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e03a      	b.n	8003c76 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d10b      	bne.n	8003c1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	3302      	adds	r3, #2
 8003c1a:	61bb      	str	r3, [r7, #24]
 8003c1c:	e007      	b.n	8003c2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c1e:	69fb      	ldr	r3, [r7, #28]
 8003c20:	781a      	ldrb	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1cb      	bne.n	8003bde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	9300      	str	r3, [sp, #0]
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	2140      	movs	r1, #64	@ 0x40
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f000 fb9b 	bl	800438c <UART_WaitOnFlagUntilTimeout>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003c64:	2303      	movs	r3, #3
 8003c66:	e006      	b.n	8003c76 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2220      	movs	r2, #32
 8003c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003c70:	2300      	movs	r3, #0
 8003c72:	e000      	b.n	8003c76 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003c74:	2302      	movs	r3, #2
  }
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3720      	adds	r7, #32
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b08a      	sub	sp, #40	@ 0x28
 8003c82:	af02      	add	r7, sp, #8
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	603b      	str	r3, [r7, #0]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	f040 8081 	bne.w	8003da2 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <HAL_UART_Receive+0x2e>
 8003ca6:	88fb      	ldrh	r3, [r7, #6]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d101      	bne.n	8003cb0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e079      	b.n	8003da4 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2222      	movs	r2, #34	@ 0x22
 8003cba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cc4:	f7fe fac2 	bl	800224c <HAL_GetTick>
 8003cc8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	88fa      	ldrh	r2, [r7, #6]
 8003cce:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	88fa      	ldrh	r2, [r7, #6]
 8003cd4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003cde:	d108      	bne.n	8003cf2 <HAL_UART_Receive+0x74>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d104      	bne.n	8003cf2 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	61bb      	str	r3, [r7, #24]
 8003cf0:	e003      	b.n	8003cfa <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003cfa:	e047      	b.n	8003d8c <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	2200      	movs	r2, #0
 8003d04:	2120      	movs	r1, #32
 8003d06:	68f8      	ldr	r0, [r7, #12]
 8003d08:	f000 fb40 	bl	800438c <UART_WaitOnFlagUntilTimeout>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d005      	beq.n	8003d1e <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2220      	movs	r2, #32
 8003d16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e042      	b.n	8003da4 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d10c      	bne.n	8003d3e <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d30:	b29a      	uxth	r2, r3
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	3302      	adds	r3, #2
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	e01f      	b.n	8003d7e <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d46:	d007      	beq.n	8003d58 <HAL_UART_Receive+0xda>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10a      	bne.n	8003d66 <HAL_UART_Receive+0xe8>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d106      	bne.n	8003d66 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	69fb      	ldr	r3, [r7, #28]
 8003d62:	701a      	strb	r2, [r3, #0]
 8003d64:	e008      	b.n	8003d78 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d82:	b29b      	uxth	r3, r3
 8003d84:	3b01      	subs	r3, #1
 8003d86:	b29a      	uxth	r2, r3
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1b2      	bne.n	8003cfc <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e000      	b.n	8003da4 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003da2:	2302      	movs	r3, #2
  }
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3720      	adds	r7, #32
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	4613      	mov	r3, r2
 8003db8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d112      	bne.n	8003dec <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d002      	beq.n	8003dd2 <HAL_UART_Receive_IT+0x26>
 8003dcc:	88fb      	ldrh	r3, [r7, #6]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e00b      	b.n	8003dee <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ddc:	88fb      	ldrh	r3, [r7, #6]
 8003dde:	461a      	mov	r2, r3
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 fb2b 	bl	800443e <UART_Start_Receive_IT>
 8003de8:	4603      	mov	r3, r0
 8003dea:	e000      	b.n	8003dee <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003dec:	2302      	movs	r3, #2
  }
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3710      	adds	r7, #16
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
	...

08003df8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b0ba      	sub	sp, #232	@ 0xe8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	695b      	ldr	r3, [r3, #20]
 8003e1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e2e:	f003 030f 	and.w	r3, r3, #15
 8003e32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10f      	bne.n	8003e5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d009      	beq.n	8003e5e <HAL_UART_IRQHandler+0x66>
 8003e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e4e:	f003 0320 	and.w	r3, r3, #32
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d003      	beq.n	8003e5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 fc07 	bl	800466a <UART_Receive_IT>
      return;
 8003e5c:	e273      	b.n	8004346 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	f000 80de 	beq.w	8004024 <HAL_UART_IRQHandler+0x22c>
 8003e68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d106      	bne.n	8003e82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 80d1 	beq.w	8004024 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e86:	f003 0301 	and.w	r3, r3, #1
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00b      	beq.n	8003ea6 <HAL_UART_IRQHandler+0xae>
 8003e8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d005      	beq.n	8003ea6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9e:	f043 0201 	orr.w	r2, r3, #1
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eaa:	f003 0304 	and.w	r3, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d00b      	beq.n	8003eca <HAL_UART_IRQHandler+0xd2>
 8003eb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eb6:	f003 0301 	and.w	r3, r3, #1
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d005      	beq.n	8003eca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec2:	f043 0202 	orr.w	r2, r3, #2
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <HAL_UART_IRQHandler+0xf6>
 8003ed6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d005      	beq.n	8003eee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee6:	f043 0204 	orr.w	r2, r3, #4
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003eee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d011      	beq.n	8003f1e <HAL_UART_IRQHandler+0x126>
 8003efa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003efe:	f003 0320 	and.w	r3, r3, #32
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d105      	bne.n	8003f12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d005      	beq.n	8003f1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f16:	f043 0208 	orr.w	r2, r3, #8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 820a 	beq.w	800433c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f2c:	f003 0320 	and.w	r3, r3, #32
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <HAL_UART_IRQHandler+0x14e>
 8003f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fb92 	bl	800466a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f50:	2b40      	cmp	r3, #64	@ 0x40
 8003f52:	bf0c      	ite	eq
 8003f54:	2301      	moveq	r3, #1
 8003f56:	2300      	movne	r3, #0
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d103      	bne.n	8003f72 <HAL_UART_IRQHandler+0x17a>
 8003f6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d04f      	beq.n	8004012 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fa9d 	bl	80044b2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f82:	2b40      	cmp	r3, #64	@ 0x40
 8003f84:	d141      	bne.n	800400a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3314      	adds	r3, #20
 8003f8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f94:	e853 3f00 	ldrex	r3, [r3]
 8003f98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003f9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fa0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fa4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3314      	adds	r3, #20
 8003fae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003fb2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003fb6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003fbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003fc2:	e841 2300 	strex	r3, r2, [r1]
 8003fc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1d9      	bne.n	8003f86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d013      	beq.n	8004002 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fde:	4a8a      	ldr	r2, [pc, #552]	@ (8004208 <HAL_UART_IRQHandler+0x410>)
 8003fe0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fe fae1 	bl	80025ae <HAL_DMA_Abort_IT>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d016      	beq.n	8004020 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004000:	e00e      	b.n	8004020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f9ac 	bl	8004360 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004008:	e00a      	b.n	8004020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f9a8 	bl	8004360 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004010:	e006      	b.n	8004020 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f9a4 	bl	8004360 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800401e:	e18d      	b.n	800433c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004020:	bf00      	nop
    return;
 8004022:	e18b      	b.n	800433c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004028:	2b01      	cmp	r3, #1
 800402a:	f040 8167 	bne.w	80042fc <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800402e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	2b00      	cmp	r3, #0
 8004038:	f000 8160 	beq.w	80042fc <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800403c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004040:	f003 0310 	and.w	r3, r3, #16
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 8159 	beq.w	80042fc <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800404a:	2300      	movs	r3, #0
 800404c:	60bb      	str	r3, [r7, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	60bb      	str	r3, [r7, #8]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	60bb      	str	r3, [r7, #8]
 800405e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800406a:	2b40      	cmp	r3, #64	@ 0x40
 800406c:	f040 80ce 	bne.w	800420c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800407c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80a9 	beq.w	80041d8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800408a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800408e:	429a      	cmp	r2, r3
 8004090:	f080 80a2 	bcs.w	80041d8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800409a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040a6:	f000 8088 	beq.w	80041ba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	330c      	adds	r3, #12
 80040b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040b8:	e853 3f00 	ldrex	r3, [r3]
 80040bc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80040c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	330c      	adds	r3, #12
 80040d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80040d6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80040e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80040e6:	e841 2300 	strex	r3, r2, [r1]
 80040ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80040ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1d9      	bne.n	80040aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	3314      	adds	r3, #20
 80040fc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040fe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004100:	e853 3f00 	ldrex	r3, [r3]
 8004104:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004106:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004108:	f023 0301 	bic.w	r3, r3, #1
 800410c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3314      	adds	r3, #20
 8004116:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800411a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800411e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004122:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004126:	e841 2300 	strex	r3, r2, [r1]
 800412a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800412c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1e1      	bne.n	80040f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3314      	adds	r3, #20
 8004138:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800413c:	e853 3f00 	ldrex	r3, [r3]
 8004140:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004142:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004144:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004148:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	3314      	adds	r3, #20
 8004152:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004156:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004158:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800415c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800415e:	e841 2300 	strex	r3, r2, [r1]
 8004162:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004164:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004166:	2b00      	cmp	r3, #0
 8004168:	d1e3      	bne.n	8004132 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2220      	movs	r2, #32
 800416e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	330c      	adds	r3, #12
 800417e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004180:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004182:	e853 3f00 	ldrex	r3, [r3]
 8004186:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004188:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800418a:	f023 0310 	bic.w	r3, r3, #16
 800418e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	330c      	adds	r3, #12
 8004198:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800419c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800419e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041a4:	e841 2300 	strex	r3, r2, [r1]
 80041a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1e3      	bne.n	8004178 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b4:	4618      	mov	r0, r3
 80041b6:	f7fe f98a 	bl	80024ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2202      	movs	r2, #2
 80041be:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	4619      	mov	r1, r3
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f8cf 	bl	8004374 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80041d6:	e0b3      	b.n	8004340 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041e0:	429a      	cmp	r2, r3
 80041e2:	f040 80ad 	bne.w	8004340 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041f0:	f040 80a6 	bne.w	8004340 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2202      	movs	r2, #2
 80041f8:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041fe:	4619      	mov	r1, r3
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 f8b7 	bl	8004374 <HAL_UARTEx_RxEventCallback>
      return;
 8004206:	e09b      	b.n	8004340 <HAL_UART_IRQHandler+0x548>
 8004208:	08004579 	.word	0x08004579
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004214:	b29b      	uxth	r3, r3
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004220:	b29b      	uxth	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 808e 	beq.w	8004344 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004228:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8089 	beq.w	8004344 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	330c      	adds	r3, #12
 8004238:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800423c:	e853 3f00 	ldrex	r3, [r3]
 8004240:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004244:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004248:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	330c      	adds	r3, #12
 8004252:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004256:	647a      	str	r2, [r7, #68]	@ 0x44
 8004258:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800425c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004264:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e3      	bne.n	8004232 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	3314      	adds	r3, #20
 8004270:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	e853 3f00 	ldrex	r3, [r3]
 8004278:	623b      	str	r3, [r7, #32]
   return(result);
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	f023 0301 	bic.w	r3, r3, #1
 8004280:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	3314      	adds	r3, #20
 800428a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800428e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004290:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004292:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004294:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800429c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1e3      	bne.n	800426a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2220      	movs	r2, #32
 80042a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	330c      	adds	r3, #12
 80042b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	60fb      	str	r3, [r7, #12]
   return(result);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f023 0310 	bic.w	r3, r3, #16
 80042c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	330c      	adds	r3, #12
 80042d0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80042d4:	61fa      	str	r2, [r7, #28]
 80042d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	69b9      	ldr	r1, [r7, #24]
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	617b      	str	r3, [r7, #20]
   return(result);
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e3      	bne.n	80042b0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042f2:	4619      	mov	r1, r3
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f000 f83d 	bl	8004374 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042fa:	e023      	b.n	8004344 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004300:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004304:	2b00      	cmp	r3, #0
 8004306:	d009      	beq.n	800431c <HAL_UART_IRQHandler+0x524>
 8004308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800430c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f940 	bl	800459a <UART_Transmit_IT>
    return;
 800431a:	e014      	b.n	8004346 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800431c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00e      	beq.n	8004346 <HAL_UART_IRQHandler+0x54e>
 8004328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800432c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004334:	6878      	ldr	r0, [r7, #4]
 8004336:	f000 f980 	bl	800463a <UART_EndTransmit_IT>
    return;
 800433a:	e004      	b.n	8004346 <HAL_UART_IRQHandler+0x54e>
    return;
 800433c:	bf00      	nop
 800433e:	e002      	b.n	8004346 <HAL_UART_IRQHandler+0x54e>
      return;
 8004340:	bf00      	nop
 8004342:	e000      	b.n	8004346 <HAL_UART_IRQHandler+0x54e>
      return;
 8004344:	bf00      	nop
  }
}
 8004346:	37e8      	adds	r7, #232	@ 0xe8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004368:	bf00      	nop
 800436a:	370c      	adds	r7, #12
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr

08004374 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004374:	b480      	push	{r7}
 8004376:	b083      	sub	sp, #12
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	460b      	mov	r3, r1
 800437e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr

0800438c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b086      	sub	sp, #24
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	4613      	mov	r3, r2
 800439a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800439c:	e03b      	b.n	8004416 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d037      	beq.n	8004416 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043a6:	f7fd ff51 	bl	800224c <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	6a3a      	ldr	r2, [r7, #32]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d302      	bcc.n	80043bc <UART_WaitOnFlagUntilTimeout+0x30>
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d101      	bne.n	80043c0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e03a      	b.n	8004436 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d023      	beq.n	8004416 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2b80      	cmp	r3, #128	@ 0x80
 80043d2:	d020      	beq.n	8004416 <UART_WaitOnFlagUntilTimeout+0x8a>
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b40      	cmp	r3, #64	@ 0x40
 80043d8:	d01d      	beq.n	8004416 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0308 	and.w	r3, r3, #8
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d116      	bne.n	8004416 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	617b      	str	r3, [r7, #20]
 80043fc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 f857 	bl	80044b2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2208      	movs	r2, #8
 8004408:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e00f      	b.n	8004436 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	4013      	ands	r3, r2
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	429a      	cmp	r2, r3
 8004424:	bf0c      	ite	eq
 8004426:	2301      	moveq	r3, #1
 8004428:	2300      	movne	r3, #0
 800442a:	b2db      	uxtb	r3, r3
 800442c:	461a      	mov	r2, r3
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	429a      	cmp	r2, r3
 8004432:	d0b4      	beq.n	800439e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}

0800443e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800443e:	b480      	push	{r7}
 8004440:	b085      	sub	sp, #20
 8004442:	af00      	add	r7, sp, #0
 8004444:	60f8      	str	r0, [r7, #12]
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	4613      	mov	r3, r2
 800444a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	68ba      	ldr	r2, [r7, #8]
 8004450:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	88fa      	ldrh	r2, [r7, #6]
 8004456:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	88fa      	ldrh	r2, [r7, #6]
 800445c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2222      	movs	r2, #34	@ 0x22
 8004468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d007      	beq.n	8004484 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	68da      	ldr	r2, [r3, #12]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004482:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695a      	ldr	r2, [r3, #20]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f042 0201 	orr.w	r2, r2, #1
 8004492:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	68da      	ldr	r2, [r3, #12]
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0220 	orr.w	r2, r2, #32
 80044a2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr

080044b2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b095      	sub	sp, #84	@ 0x54
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	330c      	adds	r3, #12
 80044c0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044c4:	e853 3f00 	ldrex	r3, [r3]
 80044c8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80044d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	330c      	adds	r3, #12
 80044d8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044da:	643a      	str	r2, [r7, #64]	@ 0x40
 80044dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80044e0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044e2:	e841 2300 	strex	r3, r2, [r1]
 80044e6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80044e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1e5      	bne.n	80044ba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	3314      	adds	r3, #20
 80044f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	e853 3f00 	ldrex	r3, [r3]
 80044fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	f023 0301 	bic.w	r3, r3, #1
 8004504:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	3314      	adds	r3, #20
 800450c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800450e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004510:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004512:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004514:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004516:	e841 2300 	strex	r3, r2, [r1]
 800451a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800451c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1e5      	bne.n	80044ee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004526:	2b01      	cmp	r3, #1
 8004528:	d119      	bne.n	800455e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	330c      	adds	r3, #12
 8004530:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	e853 3f00 	ldrex	r3, [r3]
 8004538:	60bb      	str	r3, [r7, #8]
   return(result);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f023 0310 	bic.w	r3, r3, #16
 8004540:	647b      	str	r3, [r7, #68]	@ 0x44
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	330c      	adds	r3, #12
 8004548:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800454a:	61ba      	str	r2, [r7, #24]
 800454c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454e:	6979      	ldr	r1, [r7, #20]
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	e841 2300 	strex	r3, r2, [r1]
 8004556:	613b      	str	r3, [r7, #16]
   return(result);
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1e5      	bne.n	800452a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800456c:	bf00      	nop
 800456e:	3754      	adds	r7, #84	@ 0x54
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004584:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	2200      	movs	r2, #0
 800458a:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f7ff fee7 	bl	8004360 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004592:	bf00      	nop
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800459a:	b480      	push	{r7}
 800459c:	b085      	sub	sp, #20
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b21      	cmp	r3, #33	@ 0x21
 80045ac:	d13e      	bne.n	800462c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045b6:	d114      	bne.n	80045e2 <UART_Transmit_IT+0x48>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d110      	bne.n	80045e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6a1b      	ldr	r3, [r3, #32]
 80045c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	881b      	ldrh	r3, [r3, #0]
 80045ca:	461a      	mov	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a1b      	ldr	r3, [r3, #32]
 80045da:	1c9a      	adds	r2, r3, #2
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	621a      	str	r2, [r3, #32]
 80045e0:	e008      	b.n	80045f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	1c59      	adds	r1, r3, #1
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6211      	str	r1, [r2, #32]
 80045ec:	781a      	ldrb	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	3b01      	subs	r3, #1
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	4619      	mov	r1, r3
 8004602:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10f      	bne.n	8004628 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68da      	ldr	r2, [r3, #12]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004616:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68da      	ldr	r2, [r3, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004626:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004628:	2300      	movs	r3, #0
 800462a:	e000      	b.n	800462e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800462c:	2302      	movs	r3, #2
  }
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr

0800463a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b082      	sub	sp, #8
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68da      	ldr	r2, [r3, #12]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004650:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f7ff fe76 	bl	800434c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b08c      	sub	sp, #48	@ 0x30
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004672:	2300      	movs	r3, #0
 8004674:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004676:	2300      	movs	r3, #0
 8004678:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b22      	cmp	r3, #34	@ 0x22
 8004684:	f040 80aa 	bne.w	80047dc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004690:	d115      	bne.n	80046be <UART_Receive_IT+0x54>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d111      	bne.n	80046be <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b6:	1c9a      	adds	r2, r3, #2
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80046bc:	e024      	b.n	8004708 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046cc:	d007      	beq.n	80046de <UART_Receive_IT+0x74>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d10a      	bne.n	80046ec <UART_Receive_IT+0x82>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d106      	bne.n	80046ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	e008      	b.n	80046fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29b      	uxth	r3, r3
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	4619      	mov	r1, r3
 8004716:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004718:	2b00      	cmp	r3, #0
 800471a:	d15d      	bne.n	80047d8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68da      	ldr	r2, [r3, #12]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 0220 	bic.w	r2, r2, #32
 800472a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68da      	ldr	r2, [r3, #12]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800473a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695a      	ldr	r2, [r3, #20]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800475e:	2b01      	cmp	r3, #1
 8004760:	d135      	bne.n	80047ce <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	330c      	adds	r3, #12
 800476e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	613b      	str	r3, [r7, #16]
   return(result);
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	f023 0310 	bic.w	r3, r3, #16
 800477e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	330c      	adds	r3, #12
 8004786:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004788:	623a      	str	r2, [r7, #32]
 800478a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	69f9      	ldr	r1, [r7, #28]
 800478e:	6a3a      	ldr	r2, [r7, #32]
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	61bb      	str	r3, [r7, #24]
   return(result);
 8004796:	69bb      	ldr	r3, [r7, #24]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e5      	bne.n	8004768 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0310 	and.w	r3, r3, #16
 80047a6:	2b10      	cmp	r3, #16
 80047a8:	d10a      	bne.n	80047c0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047aa:	2300      	movs	r3, #0
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047c4:	4619      	mov	r1, r3
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7ff fdd4 	bl	8004374 <HAL_UARTEx_RxEventCallback>
 80047cc:	e002      	b.n	80047d4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fc fdf2 	bl	80013b8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	e002      	b.n	80047de <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80047d8:	2300      	movs	r3, #0
 80047da:	e000      	b.n	80047de <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80047dc:	2302      	movs	r3, #2
  }
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3730      	adds	r7, #48	@ 0x30
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047ec:	b0c0      	sub	sp, #256	@ 0x100
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004804:	68d9      	ldr	r1, [r3, #12]
 8004806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	ea40 0301 	orr.w	r3, r0, r1
 8004810:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004816:	689a      	ldr	r2, [r3, #8]
 8004818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	431a      	orrs	r2, r3
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	431a      	orrs	r2, r3
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	4313      	orrs	r3, r2
 8004830:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004834:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004840:	f021 010c 	bic.w	r1, r1, #12
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800484e:	430b      	orrs	r3, r1
 8004850:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800485e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004862:	6999      	ldr	r1, [r3, #24]
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	ea40 0301 	orr.w	r3, r0, r1
 800486e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	4b8f      	ldr	r3, [pc, #572]	@ (8004ab4 <UART_SetConfig+0x2cc>)
 8004878:	429a      	cmp	r2, r3
 800487a:	d005      	beq.n	8004888 <UART_SetConfig+0xa0>
 800487c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	4b8d      	ldr	r3, [pc, #564]	@ (8004ab8 <UART_SetConfig+0x2d0>)
 8004884:	429a      	cmp	r2, r3
 8004886:	d104      	bne.n	8004892 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004888:	f7fe fcd6 	bl	8003238 <HAL_RCC_GetPCLK2Freq>
 800488c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004890:	e003      	b.n	800489a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004892:	f7fe fcbd 	bl	8003210 <HAL_RCC_GetPCLK1Freq>
 8004896:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800489a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800489e:	69db      	ldr	r3, [r3, #28]
 80048a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80048a4:	f040 810c 	bne.w	8004ac0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ac:	2200      	movs	r2, #0
 80048ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80048b2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80048b6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80048ba:	4622      	mov	r2, r4
 80048bc:	462b      	mov	r3, r5
 80048be:	1891      	adds	r1, r2, r2
 80048c0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80048c2:	415b      	adcs	r3, r3
 80048c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80048c6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80048ca:	4621      	mov	r1, r4
 80048cc:	eb12 0801 	adds.w	r8, r2, r1
 80048d0:	4629      	mov	r1, r5
 80048d2:	eb43 0901 	adc.w	r9, r3, r1
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048ea:	4690      	mov	r8, r2
 80048ec:	4699      	mov	r9, r3
 80048ee:	4623      	mov	r3, r4
 80048f0:	eb18 0303 	adds.w	r3, r8, r3
 80048f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80048f8:	462b      	mov	r3, r5
 80048fa:	eb49 0303 	adc.w	r3, r9, r3
 80048fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004902:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800490e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004912:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004916:	460b      	mov	r3, r1
 8004918:	18db      	adds	r3, r3, r3
 800491a:	653b      	str	r3, [r7, #80]	@ 0x50
 800491c:	4613      	mov	r3, r2
 800491e:	eb42 0303 	adc.w	r3, r2, r3
 8004922:	657b      	str	r3, [r7, #84]	@ 0x54
 8004924:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004928:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800492c:	f7fc f9c4 	bl	8000cb8 <__aeabi_uldivmod>
 8004930:	4602      	mov	r2, r0
 8004932:	460b      	mov	r3, r1
 8004934:	4b61      	ldr	r3, [pc, #388]	@ (8004abc <UART_SetConfig+0x2d4>)
 8004936:	fba3 2302 	umull	r2, r3, r3, r2
 800493a:	095b      	lsrs	r3, r3, #5
 800493c:	011c      	lsls	r4, r3, #4
 800493e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004942:	2200      	movs	r2, #0
 8004944:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004948:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800494c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004950:	4642      	mov	r2, r8
 8004952:	464b      	mov	r3, r9
 8004954:	1891      	adds	r1, r2, r2
 8004956:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004958:	415b      	adcs	r3, r3
 800495a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800495c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004960:	4641      	mov	r1, r8
 8004962:	eb12 0a01 	adds.w	sl, r2, r1
 8004966:	4649      	mov	r1, r9
 8004968:	eb43 0b01 	adc.w	fp, r3, r1
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	f04f 0300 	mov.w	r3, #0
 8004974:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004978:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800497c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004980:	4692      	mov	sl, r2
 8004982:	469b      	mov	fp, r3
 8004984:	4643      	mov	r3, r8
 8004986:	eb1a 0303 	adds.w	r3, sl, r3
 800498a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800498e:	464b      	mov	r3, r9
 8004990:	eb4b 0303 	adc.w	r3, fp, r3
 8004994:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049a4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80049a8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80049ac:	460b      	mov	r3, r1
 80049ae:	18db      	adds	r3, r3, r3
 80049b0:	643b      	str	r3, [r7, #64]	@ 0x40
 80049b2:	4613      	mov	r3, r2
 80049b4:	eb42 0303 	adc.w	r3, r2, r3
 80049b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80049ba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80049be:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80049c2:	f7fc f979 	bl	8000cb8 <__aeabi_uldivmod>
 80049c6:	4602      	mov	r2, r0
 80049c8:	460b      	mov	r3, r1
 80049ca:	4611      	mov	r1, r2
 80049cc:	4b3b      	ldr	r3, [pc, #236]	@ (8004abc <UART_SetConfig+0x2d4>)
 80049ce:	fba3 2301 	umull	r2, r3, r3, r1
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	2264      	movs	r2, #100	@ 0x64
 80049d6:	fb02 f303 	mul.w	r3, r2, r3
 80049da:	1acb      	subs	r3, r1, r3
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80049e2:	4b36      	ldr	r3, [pc, #216]	@ (8004abc <UART_SetConfig+0x2d4>)
 80049e4:	fba3 2302 	umull	r2, r3, r3, r2
 80049e8:	095b      	lsrs	r3, r3, #5
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80049f0:	441c      	add	r4, r3
 80049f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049f6:	2200      	movs	r2, #0
 80049f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80049fc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004a00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004a04:	4642      	mov	r2, r8
 8004a06:	464b      	mov	r3, r9
 8004a08:	1891      	adds	r1, r2, r2
 8004a0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a0c:	415b      	adcs	r3, r3
 8004a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a14:	4641      	mov	r1, r8
 8004a16:	1851      	adds	r1, r2, r1
 8004a18:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a1a:	4649      	mov	r1, r9
 8004a1c:	414b      	adcs	r3, r1
 8004a1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a2c:	4659      	mov	r1, fp
 8004a2e:	00cb      	lsls	r3, r1, #3
 8004a30:	4651      	mov	r1, sl
 8004a32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a36:	4651      	mov	r1, sl
 8004a38:	00ca      	lsls	r2, r1, #3
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4603      	mov	r3, r0
 8004a40:	4642      	mov	r2, r8
 8004a42:	189b      	adds	r3, r3, r2
 8004a44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004a48:	464b      	mov	r3, r9
 8004a4a:	460a      	mov	r2, r1
 8004a4c:	eb42 0303 	adc.w	r3, r2, r3
 8004a50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004a60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004a64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004a68:	460b      	mov	r3, r1
 8004a6a:	18db      	adds	r3, r3, r3
 8004a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a6e:	4613      	mov	r3, r2
 8004a70:	eb42 0303 	adc.w	r3, r2, r3
 8004a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004a7e:	f7fc f91b 	bl	8000cb8 <__aeabi_uldivmod>
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	4b0d      	ldr	r3, [pc, #52]	@ (8004abc <UART_SetConfig+0x2d4>)
 8004a88:	fba3 1302 	umull	r1, r3, r3, r2
 8004a8c:	095b      	lsrs	r3, r3, #5
 8004a8e:	2164      	movs	r1, #100	@ 0x64
 8004a90:	fb01 f303 	mul.w	r3, r1, r3
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	3332      	adds	r3, #50	@ 0x32
 8004a9a:	4a08      	ldr	r2, [pc, #32]	@ (8004abc <UART_SetConfig+0x2d4>)
 8004a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa0:	095b      	lsrs	r3, r3, #5
 8004aa2:	f003 0207 	and.w	r2, r3, #7
 8004aa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4422      	add	r2, r4
 8004aae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ab0:	e106      	b.n	8004cc0 <UART_SetConfig+0x4d8>
 8004ab2:	bf00      	nop
 8004ab4:	40011000 	.word	0x40011000
 8004ab8:	40011400 	.word	0x40011400
 8004abc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ac0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004aca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004ace:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004ad2:	4642      	mov	r2, r8
 8004ad4:	464b      	mov	r3, r9
 8004ad6:	1891      	adds	r1, r2, r2
 8004ad8:	6239      	str	r1, [r7, #32]
 8004ada:	415b      	adcs	r3, r3
 8004adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ade:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ae2:	4641      	mov	r1, r8
 8004ae4:	1854      	adds	r4, r2, r1
 8004ae6:	4649      	mov	r1, r9
 8004ae8:	eb43 0501 	adc.w	r5, r3, r1
 8004aec:	f04f 0200 	mov.w	r2, #0
 8004af0:	f04f 0300 	mov.w	r3, #0
 8004af4:	00eb      	lsls	r3, r5, #3
 8004af6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004afa:	00e2      	lsls	r2, r4, #3
 8004afc:	4614      	mov	r4, r2
 8004afe:	461d      	mov	r5, r3
 8004b00:	4643      	mov	r3, r8
 8004b02:	18e3      	adds	r3, r4, r3
 8004b04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b08:	464b      	mov	r3, r9
 8004b0a:	eb45 0303 	adc.w	r3, r5, r3
 8004b0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b22:	f04f 0200 	mov.w	r2, #0
 8004b26:	f04f 0300 	mov.w	r3, #0
 8004b2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b2e:	4629      	mov	r1, r5
 8004b30:	008b      	lsls	r3, r1, #2
 8004b32:	4621      	mov	r1, r4
 8004b34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b38:	4621      	mov	r1, r4
 8004b3a:	008a      	lsls	r2, r1, #2
 8004b3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004b40:	f7fc f8ba 	bl	8000cb8 <__aeabi_uldivmod>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4b60      	ldr	r3, [pc, #384]	@ (8004ccc <UART_SetConfig+0x4e4>)
 8004b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	011c      	lsls	r4, r3, #4
 8004b52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004b5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004b60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004b64:	4642      	mov	r2, r8
 8004b66:	464b      	mov	r3, r9
 8004b68:	1891      	adds	r1, r2, r2
 8004b6a:	61b9      	str	r1, [r7, #24]
 8004b6c:	415b      	adcs	r3, r3
 8004b6e:	61fb      	str	r3, [r7, #28]
 8004b70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b74:	4641      	mov	r1, r8
 8004b76:	1851      	adds	r1, r2, r1
 8004b78:	6139      	str	r1, [r7, #16]
 8004b7a:	4649      	mov	r1, r9
 8004b7c:	414b      	adcs	r3, r1
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	f04f 0200 	mov.w	r2, #0
 8004b84:	f04f 0300 	mov.w	r3, #0
 8004b88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b8c:	4659      	mov	r1, fp
 8004b8e:	00cb      	lsls	r3, r1, #3
 8004b90:	4651      	mov	r1, sl
 8004b92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b96:	4651      	mov	r1, sl
 8004b98:	00ca      	lsls	r2, r1, #3
 8004b9a:	4610      	mov	r0, r2
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4642      	mov	r2, r8
 8004ba2:	189b      	adds	r3, r3, r2
 8004ba4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ba8:	464b      	mov	r3, r9
 8004baa:	460a      	mov	r2, r1
 8004bac:	eb42 0303 	adc.w	r3, r2, r3
 8004bb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004bbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004bc0:	f04f 0200 	mov.w	r2, #0
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004bcc:	4649      	mov	r1, r9
 8004bce:	008b      	lsls	r3, r1, #2
 8004bd0:	4641      	mov	r1, r8
 8004bd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bd6:	4641      	mov	r1, r8
 8004bd8:	008a      	lsls	r2, r1, #2
 8004bda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004bde:	f7fc f86b 	bl	8000cb8 <__aeabi_uldivmod>
 8004be2:	4602      	mov	r2, r0
 8004be4:	460b      	mov	r3, r1
 8004be6:	4611      	mov	r1, r2
 8004be8:	4b38      	ldr	r3, [pc, #224]	@ (8004ccc <UART_SetConfig+0x4e4>)
 8004bea:	fba3 2301 	umull	r2, r3, r3, r1
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	2264      	movs	r2, #100	@ 0x64
 8004bf2:	fb02 f303 	mul.w	r3, r2, r3
 8004bf6:	1acb      	subs	r3, r1, r3
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	3332      	adds	r3, #50	@ 0x32
 8004bfc:	4a33      	ldr	r2, [pc, #204]	@ (8004ccc <UART_SetConfig+0x4e4>)
 8004bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004c02:	095b      	lsrs	r3, r3, #5
 8004c04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c08:	441c      	add	r4, r3
 8004c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c0e:	2200      	movs	r2, #0
 8004c10:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c12:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c18:	4642      	mov	r2, r8
 8004c1a:	464b      	mov	r3, r9
 8004c1c:	1891      	adds	r1, r2, r2
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	415b      	adcs	r3, r3
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c28:	4641      	mov	r1, r8
 8004c2a:	1851      	adds	r1, r2, r1
 8004c2c:	6039      	str	r1, [r7, #0]
 8004c2e:	4649      	mov	r1, r9
 8004c30:	414b      	adcs	r3, r1
 8004c32:	607b      	str	r3, [r7, #4]
 8004c34:	f04f 0200 	mov.w	r2, #0
 8004c38:	f04f 0300 	mov.w	r3, #0
 8004c3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c40:	4659      	mov	r1, fp
 8004c42:	00cb      	lsls	r3, r1, #3
 8004c44:	4651      	mov	r1, sl
 8004c46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c4a:	4651      	mov	r1, sl
 8004c4c:	00ca      	lsls	r2, r1, #3
 8004c4e:	4610      	mov	r0, r2
 8004c50:	4619      	mov	r1, r3
 8004c52:	4603      	mov	r3, r0
 8004c54:	4642      	mov	r2, r8
 8004c56:	189b      	adds	r3, r3, r2
 8004c58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	460a      	mov	r2, r1
 8004c5e:	eb42 0303 	adc.w	r3, r2, r3
 8004c62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8004c6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004c70:	f04f 0200 	mov.w	r2, #0
 8004c74:	f04f 0300 	mov.w	r3, #0
 8004c78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004c7c:	4649      	mov	r1, r9
 8004c7e:	008b      	lsls	r3, r1, #2
 8004c80:	4641      	mov	r1, r8
 8004c82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c86:	4641      	mov	r1, r8
 8004c88:	008a      	lsls	r2, r1, #2
 8004c8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004c8e:	f7fc f813 	bl	8000cb8 <__aeabi_uldivmod>
 8004c92:	4602      	mov	r2, r0
 8004c94:	460b      	mov	r3, r1
 8004c96:	4b0d      	ldr	r3, [pc, #52]	@ (8004ccc <UART_SetConfig+0x4e4>)
 8004c98:	fba3 1302 	umull	r1, r3, r3, r2
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	2164      	movs	r1, #100	@ 0x64
 8004ca0:	fb01 f303 	mul.w	r3, r1, r3
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	3332      	adds	r3, #50	@ 0x32
 8004caa:	4a08      	ldr	r2, [pc, #32]	@ (8004ccc <UART_SetConfig+0x4e4>)
 8004cac:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb0:	095b      	lsrs	r3, r3, #5
 8004cb2:	f003 020f 	and.w	r2, r3, #15
 8004cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4422      	add	r2, r4
 8004cbe:	609a      	str	r2, [r3, #8]
}
 8004cc0:	bf00      	nop
 8004cc2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ccc:	51eb851f 	.word	0x51eb851f

08004cd0 <__cvt>:
 8004cd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004cd4:	ec57 6b10 	vmov	r6, r7, d0
 8004cd8:	2f00      	cmp	r7, #0
 8004cda:	460c      	mov	r4, r1
 8004cdc:	4619      	mov	r1, r3
 8004cde:	463b      	mov	r3, r7
 8004ce0:	bfbb      	ittet	lt
 8004ce2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004ce6:	461f      	movlt	r7, r3
 8004ce8:	2300      	movge	r3, #0
 8004cea:	232d      	movlt	r3, #45	@ 0x2d
 8004cec:	700b      	strb	r3, [r1, #0]
 8004cee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004cf0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004cf4:	4691      	mov	r9, r2
 8004cf6:	f023 0820 	bic.w	r8, r3, #32
 8004cfa:	bfbc      	itt	lt
 8004cfc:	4632      	movlt	r2, r6
 8004cfe:	4616      	movlt	r6, r2
 8004d00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d04:	d005      	beq.n	8004d12 <__cvt+0x42>
 8004d06:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004d0a:	d100      	bne.n	8004d0e <__cvt+0x3e>
 8004d0c:	3401      	adds	r4, #1
 8004d0e:	2102      	movs	r1, #2
 8004d10:	e000      	b.n	8004d14 <__cvt+0x44>
 8004d12:	2103      	movs	r1, #3
 8004d14:	ab03      	add	r3, sp, #12
 8004d16:	9301      	str	r3, [sp, #4]
 8004d18:	ab02      	add	r3, sp, #8
 8004d1a:	9300      	str	r3, [sp, #0]
 8004d1c:	ec47 6b10 	vmov	d0, r6, r7
 8004d20:	4653      	mov	r3, sl
 8004d22:	4622      	mov	r2, r4
 8004d24:	f001 fa40 	bl	80061a8 <_dtoa_r>
 8004d28:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004d2c:	4605      	mov	r5, r0
 8004d2e:	d119      	bne.n	8004d64 <__cvt+0x94>
 8004d30:	f019 0f01 	tst.w	r9, #1
 8004d34:	d00e      	beq.n	8004d54 <__cvt+0x84>
 8004d36:	eb00 0904 	add.w	r9, r0, r4
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	4630      	mov	r0, r6
 8004d40:	4639      	mov	r1, r7
 8004d42:	f7fb fed9 	bl	8000af8 <__aeabi_dcmpeq>
 8004d46:	b108      	cbz	r0, 8004d4c <__cvt+0x7c>
 8004d48:	f8cd 900c 	str.w	r9, [sp, #12]
 8004d4c:	2230      	movs	r2, #48	@ 0x30
 8004d4e:	9b03      	ldr	r3, [sp, #12]
 8004d50:	454b      	cmp	r3, r9
 8004d52:	d31e      	bcc.n	8004d92 <__cvt+0xc2>
 8004d54:	9b03      	ldr	r3, [sp, #12]
 8004d56:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004d58:	1b5b      	subs	r3, r3, r5
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	b004      	add	sp, #16
 8004d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d64:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d68:	eb00 0904 	add.w	r9, r0, r4
 8004d6c:	d1e5      	bne.n	8004d3a <__cvt+0x6a>
 8004d6e:	7803      	ldrb	r3, [r0, #0]
 8004d70:	2b30      	cmp	r3, #48	@ 0x30
 8004d72:	d10a      	bne.n	8004d8a <__cvt+0xba>
 8004d74:	2200      	movs	r2, #0
 8004d76:	2300      	movs	r3, #0
 8004d78:	4630      	mov	r0, r6
 8004d7a:	4639      	mov	r1, r7
 8004d7c:	f7fb febc 	bl	8000af8 <__aeabi_dcmpeq>
 8004d80:	b918      	cbnz	r0, 8004d8a <__cvt+0xba>
 8004d82:	f1c4 0401 	rsb	r4, r4, #1
 8004d86:	f8ca 4000 	str.w	r4, [sl]
 8004d8a:	f8da 3000 	ldr.w	r3, [sl]
 8004d8e:	4499      	add	r9, r3
 8004d90:	e7d3      	b.n	8004d3a <__cvt+0x6a>
 8004d92:	1c59      	adds	r1, r3, #1
 8004d94:	9103      	str	r1, [sp, #12]
 8004d96:	701a      	strb	r2, [r3, #0]
 8004d98:	e7d9      	b.n	8004d4e <__cvt+0x7e>

08004d9a <__exponent>:
 8004d9a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d9c:	2900      	cmp	r1, #0
 8004d9e:	bfba      	itte	lt
 8004da0:	4249      	neglt	r1, r1
 8004da2:	232d      	movlt	r3, #45	@ 0x2d
 8004da4:	232b      	movge	r3, #43	@ 0x2b
 8004da6:	2909      	cmp	r1, #9
 8004da8:	7002      	strb	r2, [r0, #0]
 8004daa:	7043      	strb	r3, [r0, #1]
 8004dac:	dd29      	ble.n	8004e02 <__exponent+0x68>
 8004dae:	f10d 0307 	add.w	r3, sp, #7
 8004db2:	461d      	mov	r5, r3
 8004db4:	270a      	movs	r7, #10
 8004db6:	461a      	mov	r2, r3
 8004db8:	fbb1 f6f7 	udiv	r6, r1, r7
 8004dbc:	fb07 1416 	mls	r4, r7, r6, r1
 8004dc0:	3430      	adds	r4, #48	@ 0x30
 8004dc2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	2c63      	cmp	r4, #99	@ 0x63
 8004dca:	f103 33ff 	add.w	r3, r3, #4294967295
 8004dce:	4631      	mov	r1, r6
 8004dd0:	dcf1      	bgt.n	8004db6 <__exponent+0x1c>
 8004dd2:	3130      	adds	r1, #48	@ 0x30
 8004dd4:	1e94      	subs	r4, r2, #2
 8004dd6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004dda:	1c41      	adds	r1, r0, #1
 8004ddc:	4623      	mov	r3, r4
 8004dde:	42ab      	cmp	r3, r5
 8004de0:	d30a      	bcc.n	8004df8 <__exponent+0x5e>
 8004de2:	f10d 0309 	add.w	r3, sp, #9
 8004de6:	1a9b      	subs	r3, r3, r2
 8004de8:	42ac      	cmp	r4, r5
 8004dea:	bf88      	it	hi
 8004dec:	2300      	movhi	r3, #0
 8004dee:	3302      	adds	r3, #2
 8004df0:	4403      	add	r3, r0
 8004df2:	1a18      	subs	r0, r3, r0
 8004df4:	b003      	add	sp, #12
 8004df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004df8:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004dfc:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004e00:	e7ed      	b.n	8004dde <__exponent+0x44>
 8004e02:	2330      	movs	r3, #48	@ 0x30
 8004e04:	3130      	adds	r1, #48	@ 0x30
 8004e06:	7083      	strb	r3, [r0, #2]
 8004e08:	70c1      	strb	r1, [r0, #3]
 8004e0a:	1d03      	adds	r3, r0, #4
 8004e0c:	e7f1      	b.n	8004df2 <__exponent+0x58>
	...

08004e10 <_printf_float>:
 8004e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e14:	b08d      	sub	sp, #52	@ 0x34
 8004e16:	460c      	mov	r4, r1
 8004e18:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004e1c:	4616      	mov	r6, r2
 8004e1e:	461f      	mov	r7, r3
 8004e20:	4605      	mov	r5, r0
 8004e22:	f001 f887 	bl	8005f34 <_localeconv_r>
 8004e26:	6803      	ldr	r3, [r0, #0]
 8004e28:	9304      	str	r3, [sp, #16]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f7fb fa38 	bl	80002a0 <strlen>
 8004e30:	2300      	movs	r3, #0
 8004e32:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e34:	f8d8 3000 	ldr.w	r3, [r8]
 8004e38:	9005      	str	r0, [sp, #20]
 8004e3a:	3307      	adds	r3, #7
 8004e3c:	f023 0307 	bic.w	r3, r3, #7
 8004e40:	f103 0208 	add.w	r2, r3, #8
 8004e44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004e48:	f8d4 b000 	ldr.w	fp, [r4]
 8004e4c:	f8c8 2000 	str.w	r2, [r8]
 8004e50:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e54:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004e58:	9307      	str	r3, [sp, #28]
 8004e5a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004e5e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004e62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e66:	4b9c      	ldr	r3, [pc, #624]	@ (80050d8 <_printf_float+0x2c8>)
 8004e68:	f04f 32ff 	mov.w	r2, #4294967295
 8004e6c:	f7fb fe76 	bl	8000b5c <__aeabi_dcmpun>
 8004e70:	bb70      	cbnz	r0, 8004ed0 <_printf_float+0xc0>
 8004e72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004e76:	4b98      	ldr	r3, [pc, #608]	@ (80050d8 <_printf_float+0x2c8>)
 8004e78:	f04f 32ff 	mov.w	r2, #4294967295
 8004e7c:	f7fb fe50 	bl	8000b20 <__aeabi_dcmple>
 8004e80:	bb30      	cbnz	r0, 8004ed0 <_printf_float+0xc0>
 8004e82:	2200      	movs	r2, #0
 8004e84:	2300      	movs	r3, #0
 8004e86:	4640      	mov	r0, r8
 8004e88:	4649      	mov	r1, r9
 8004e8a:	f7fb fe3f 	bl	8000b0c <__aeabi_dcmplt>
 8004e8e:	b110      	cbz	r0, 8004e96 <_printf_float+0x86>
 8004e90:	232d      	movs	r3, #45	@ 0x2d
 8004e92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e96:	4a91      	ldr	r2, [pc, #580]	@ (80050dc <_printf_float+0x2cc>)
 8004e98:	4b91      	ldr	r3, [pc, #580]	@ (80050e0 <_printf_float+0x2d0>)
 8004e9a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004e9e:	bf8c      	ite	hi
 8004ea0:	4690      	movhi	r8, r2
 8004ea2:	4698      	movls	r8, r3
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	6123      	str	r3, [r4, #16]
 8004ea8:	f02b 0304 	bic.w	r3, fp, #4
 8004eac:	6023      	str	r3, [r4, #0]
 8004eae:	f04f 0900 	mov.w	r9, #0
 8004eb2:	9700      	str	r7, [sp, #0]
 8004eb4:	4633      	mov	r3, r6
 8004eb6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004eb8:	4621      	mov	r1, r4
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f000 f9d2 	bl	8005264 <_printf_common>
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	f040 808d 	bne.w	8004fe0 <_printf_float+0x1d0>
 8004ec6:	f04f 30ff 	mov.w	r0, #4294967295
 8004eca:	b00d      	add	sp, #52	@ 0x34
 8004ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	464b      	mov	r3, r9
 8004ed4:	4640      	mov	r0, r8
 8004ed6:	4649      	mov	r1, r9
 8004ed8:	f7fb fe40 	bl	8000b5c <__aeabi_dcmpun>
 8004edc:	b140      	cbz	r0, 8004ef0 <_printf_float+0xe0>
 8004ede:	464b      	mov	r3, r9
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	bfbc      	itt	lt
 8004ee4:	232d      	movlt	r3, #45	@ 0x2d
 8004ee6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004eea:	4a7e      	ldr	r2, [pc, #504]	@ (80050e4 <_printf_float+0x2d4>)
 8004eec:	4b7e      	ldr	r3, [pc, #504]	@ (80050e8 <_printf_float+0x2d8>)
 8004eee:	e7d4      	b.n	8004e9a <_printf_float+0x8a>
 8004ef0:	6863      	ldr	r3, [r4, #4]
 8004ef2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004ef6:	9206      	str	r2, [sp, #24]
 8004ef8:	1c5a      	adds	r2, r3, #1
 8004efa:	d13b      	bne.n	8004f74 <_printf_float+0x164>
 8004efc:	2306      	movs	r3, #6
 8004efe:	6063      	str	r3, [r4, #4]
 8004f00:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004f04:	2300      	movs	r3, #0
 8004f06:	6022      	str	r2, [r4, #0]
 8004f08:	9303      	str	r3, [sp, #12]
 8004f0a:	ab0a      	add	r3, sp, #40	@ 0x28
 8004f0c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004f10:	ab09      	add	r3, sp, #36	@ 0x24
 8004f12:	9300      	str	r3, [sp, #0]
 8004f14:	6861      	ldr	r1, [r4, #4]
 8004f16:	ec49 8b10 	vmov	d0, r8, r9
 8004f1a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f7ff fed6 	bl	8004cd0 <__cvt>
 8004f24:	9b06      	ldr	r3, [sp, #24]
 8004f26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004f28:	2b47      	cmp	r3, #71	@ 0x47
 8004f2a:	4680      	mov	r8, r0
 8004f2c:	d129      	bne.n	8004f82 <_printf_float+0x172>
 8004f2e:	1cc8      	adds	r0, r1, #3
 8004f30:	db02      	blt.n	8004f38 <_printf_float+0x128>
 8004f32:	6863      	ldr	r3, [r4, #4]
 8004f34:	4299      	cmp	r1, r3
 8004f36:	dd41      	ble.n	8004fbc <_printf_float+0x1ac>
 8004f38:	f1aa 0a02 	sub.w	sl, sl, #2
 8004f3c:	fa5f fa8a 	uxtb.w	sl, sl
 8004f40:	3901      	subs	r1, #1
 8004f42:	4652      	mov	r2, sl
 8004f44:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004f48:	9109      	str	r1, [sp, #36]	@ 0x24
 8004f4a:	f7ff ff26 	bl	8004d9a <__exponent>
 8004f4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004f50:	1813      	adds	r3, r2, r0
 8004f52:	2a01      	cmp	r2, #1
 8004f54:	4681      	mov	r9, r0
 8004f56:	6123      	str	r3, [r4, #16]
 8004f58:	dc02      	bgt.n	8004f60 <_printf_float+0x150>
 8004f5a:	6822      	ldr	r2, [r4, #0]
 8004f5c:	07d2      	lsls	r2, r2, #31
 8004f5e:	d501      	bpl.n	8004f64 <_printf_float+0x154>
 8004f60:	3301      	adds	r3, #1
 8004f62:	6123      	str	r3, [r4, #16]
 8004f64:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d0a2      	beq.n	8004eb2 <_printf_float+0xa2>
 8004f6c:	232d      	movs	r3, #45	@ 0x2d
 8004f6e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f72:	e79e      	b.n	8004eb2 <_printf_float+0xa2>
 8004f74:	9a06      	ldr	r2, [sp, #24]
 8004f76:	2a47      	cmp	r2, #71	@ 0x47
 8004f78:	d1c2      	bne.n	8004f00 <_printf_float+0xf0>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1c0      	bne.n	8004f00 <_printf_float+0xf0>
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e7bd      	b.n	8004efe <_printf_float+0xee>
 8004f82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004f86:	d9db      	bls.n	8004f40 <_printf_float+0x130>
 8004f88:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004f8c:	d118      	bne.n	8004fc0 <_printf_float+0x1b0>
 8004f8e:	2900      	cmp	r1, #0
 8004f90:	6863      	ldr	r3, [r4, #4]
 8004f92:	dd0b      	ble.n	8004fac <_printf_float+0x19c>
 8004f94:	6121      	str	r1, [r4, #16]
 8004f96:	b913      	cbnz	r3, 8004f9e <_printf_float+0x18e>
 8004f98:	6822      	ldr	r2, [r4, #0]
 8004f9a:	07d0      	lsls	r0, r2, #31
 8004f9c:	d502      	bpl.n	8004fa4 <_printf_float+0x194>
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	440b      	add	r3, r1
 8004fa2:	6123      	str	r3, [r4, #16]
 8004fa4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004fa6:	f04f 0900 	mov.w	r9, #0
 8004faa:	e7db      	b.n	8004f64 <_printf_float+0x154>
 8004fac:	b913      	cbnz	r3, 8004fb4 <_printf_float+0x1a4>
 8004fae:	6822      	ldr	r2, [r4, #0]
 8004fb0:	07d2      	lsls	r2, r2, #31
 8004fb2:	d501      	bpl.n	8004fb8 <_printf_float+0x1a8>
 8004fb4:	3302      	adds	r3, #2
 8004fb6:	e7f4      	b.n	8004fa2 <_printf_float+0x192>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e7f2      	b.n	8004fa2 <_printf_float+0x192>
 8004fbc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004fc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004fc2:	4299      	cmp	r1, r3
 8004fc4:	db05      	blt.n	8004fd2 <_printf_float+0x1c2>
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	6121      	str	r1, [r4, #16]
 8004fca:	07d8      	lsls	r0, r3, #31
 8004fcc:	d5ea      	bpl.n	8004fa4 <_printf_float+0x194>
 8004fce:	1c4b      	adds	r3, r1, #1
 8004fd0:	e7e7      	b.n	8004fa2 <_printf_float+0x192>
 8004fd2:	2900      	cmp	r1, #0
 8004fd4:	bfd4      	ite	le
 8004fd6:	f1c1 0202 	rsble	r2, r1, #2
 8004fda:	2201      	movgt	r2, #1
 8004fdc:	4413      	add	r3, r2
 8004fde:	e7e0      	b.n	8004fa2 <_printf_float+0x192>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	055a      	lsls	r2, r3, #21
 8004fe4:	d407      	bmi.n	8004ff6 <_printf_float+0x1e6>
 8004fe6:	6923      	ldr	r3, [r4, #16]
 8004fe8:	4642      	mov	r2, r8
 8004fea:	4631      	mov	r1, r6
 8004fec:	4628      	mov	r0, r5
 8004fee:	47b8      	blx	r7
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	d12b      	bne.n	800504c <_printf_float+0x23c>
 8004ff4:	e767      	b.n	8004ec6 <_printf_float+0xb6>
 8004ff6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ffa:	f240 80dd 	bls.w	80051b8 <_printf_float+0x3a8>
 8004ffe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005002:	2200      	movs	r2, #0
 8005004:	2300      	movs	r3, #0
 8005006:	f7fb fd77 	bl	8000af8 <__aeabi_dcmpeq>
 800500a:	2800      	cmp	r0, #0
 800500c:	d033      	beq.n	8005076 <_printf_float+0x266>
 800500e:	4a37      	ldr	r2, [pc, #220]	@ (80050ec <_printf_float+0x2dc>)
 8005010:	2301      	movs	r3, #1
 8005012:	4631      	mov	r1, r6
 8005014:	4628      	mov	r0, r5
 8005016:	47b8      	blx	r7
 8005018:	3001      	adds	r0, #1
 800501a:	f43f af54 	beq.w	8004ec6 <_printf_float+0xb6>
 800501e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005022:	4543      	cmp	r3, r8
 8005024:	db02      	blt.n	800502c <_printf_float+0x21c>
 8005026:	6823      	ldr	r3, [r4, #0]
 8005028:	07d8      	lsls	r0, r3, #31
 800502a:	d50f      	bpl.n	800504c <_printf_float+0x23c>
 800502c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005030:	4631      	mov	r1, r6
 8005032:	4628      	mov	r0, r5
 8005034:	47b8      	blx	r7
 8005036:	3001      	adds	r0, #1
 8005038:	f43f af45 	beq.w	8004ec6 <_printf_float+0xb6>
 800503c:	f04f 0900 	mov.w	r9, #0
 8005040:	f108 38ff 	add.w	r8, r8, #4294967295
 8005044:	f104 0a1a 	add.w	sl, r4, #26
 8005048:	45c8      	cmp	r8, r9
 800504a:	dc09      	bgt.n	8005060 <_printf_float+0x250>
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	079b      	lsls	r3, r3, #30
 8005050:	f100 8103 	bmi.w	800525a <_printf_float+0x44a>
 8005054:	68e0      	ldr	r0, [r4, #12]
 8005056:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005058:	4298      	cmp	r0, r3
 800505a:	bfb8      	it	lt
 800505c:	4618      	movlt	r0, r3
 800505e:	e734      	b.n	8004eca <_printf_float+0xba>
 8005060:	2301      	movs	r3, #1
 8005062:	4652      	mov	r2, sl
 8005064:	4631      	mov	r1, r6
 8005066:	4628      	mov	r0, r5
 8005068:	47b8      	blx	r7
 800506a:	3001      	adds	r0, #1
 800506c:	f43f af2b 	beq.w	8004ec6 <_printf_float+0xb6>
 8005070:	f109 0901 	add.w	r9, r9, #1
 8005074:	e7e8      	b.n	8005048 <_printf_float+0x238>
 8005076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005078:	2b00      	cmp	r3, #0
 800507a:	dc39      	bgt.n	80050f0 <_printf_float+0x2e0>
 800507c:	4a1b      	ldr	r2, [pc, #108]	@ (80050ec <_printf_float+0x2dc>)
 800507e:	2301      	movs	r3, #1
 8005080:	4631      	mov	r1, r6
 8005082:	4628      	mov	r0, r5
 8005084:	47b8      	blx	r7
 8005086:	3001      	adds	r0, #1
 8005088:	f43f af1d 	beq.w	8004ec6 <_printf_float+0xb6>
 800508c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005090:	ea59 0303 	orrs.w	r3, r9, r3
 8005094:	d102      	bne.n	800509c <_printf_float+0x28c>
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	07d9      	lsls	r1, r3, #31
 800509a:	d5d7      	bpl.n	800504c <_printf_float+0x23c>
 800509c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050a0:	4631      	mov	r1, r6
 80050a2:	4628      	mov	r0, r5
 80050a4:	47b8      	blx	r7
 80050a6:	3001      	adds	r0, #1
 80050a8:	f43f af0d 	beq.w	8004ec6 <_printf_float+0xb6>
 80050ac:	f04f 0a00 	mov.w	sl, #0
 80050b0:	f104 0b1a 	add.w	fp, r4, #26
 80050b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050b6:	425b      	negs	r3, r3
 80050b8:	4553      	cmp	r3, sl
 80050ba:	dc01      	bgt.n	80050c0 <_printf_float+0x2b0>
 80050bc:	464b      	mov	r3, r9
 80050be:	e793      	b.n	8004fe8 <_printf_float+0x1d8>
 80050c0:	2301      	movs	r3, #1
 80050c2:	465a      	mov	r2, fp
 80050c4:	4631      	mov	r1, r6
 80050c6:	4628      	mov	r0, r5
 80050c8:	47b8      	blx	r7
 80050ca:	3001      	adds	r0, #1
 80050cc:	f43f aefb 	beq.w	8004ec6 <_printf_float+0xb6>
 80050d0:	f10a 0a01 	add.w	sl, sl, #1
 80050d4:	e7ee      	b.n	80050b4 <_printf_float+0x2a4>
 80050d6:	bf00      	nop
 80050d8:	7fefffff 	.word	0x7fefffff
 80050dc:	0800995c 	.word	0x0800995c
 80050e0:	08009958 	.word	0x08009958
 80050e4:	08009964 	.word	0x08009964
 80050e8:	08009960 	.word	0x08009960
 80050ec:	08009968 	.word	0x08009968
 80050f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80050f2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80050f6:	4553      	cmp	r3, sl
 80050f8:	bfa8      	it	ge
 80050fa:	4653      	movge	r3, sl
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	4699      	mov	r9, r3
 8005100:	dc36      	bgt.n	8005170 <_printf_float+0x360>
 8005102:	f04f 0b00 	mov.w	fp, #0
 8005106:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800510a:	f104 021a 	add.w	r2, r4, #26
 800510e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005110:	9306      	str	r3, [sp, #24]
 8005112:	eba3 0309 	sub.w	r3, r3, r9
 8005116:	455b      	cmp	r3, fp
 8005118:	dc31      	bgt.n	800517e <_printf_float+0x36e>
 800511a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800511c:	459a      	cmp	sl, r3
 800511e:	dc3a      	bgt.n	8005196 <_printf_float+0x386>
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	07da      	lsls	r2, r3, #31
 8005124:	d437      	bmi.n	8005196 <_printf_float+0x386>
 8005126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005128:	ebaa 0903 	sub.w	r9, sl, r3
 800512c:	9b06      	ldr	r3, [sp, #24]
 800512e:	ebaa 0303 	sub.w	r3, sl, r3
 8005132:	4599      	cmp	r9, r3
 8005134:	bfa8      	it	ge
 8005136:	4699      	movge	r9, r3
 8005138:	f1b9 0f00 	cmp.w	r9, #0
 800513c:	dc33      	bgt.n	80051a6 <_printf_float+0x396>
 800513e:	f04f 0800 	mov.w	r8, #0
 8005142:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005146:	f104 0b1a 	add.w	fp, r4, #26
 800514a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800514c:	ebaa 0303 	sub.w	r3, sl, r3
 8005150:	eba3 0309 	sub.w	r3, r3, r9
 8005154:	4543      	cmp	r3, r8
 8005156:	f77f af79 	ble.w	800504c <_printf_float+0x23c>
 800515a:	2301      	movs	r3, #1
 800515c:	465a      	mov	r2, fp
 800515e:	4631      	mov	r1, r6
 8005160:	4628      	mov	r0, r5
 8005162:	47b8      	blx	r7
 8005164:	3001      	adds	r0, #1
 8005166:	f43f aeae 	beq.w	8004ec6 <_printf_float+0xb6>
 800516a:	f108 0801 	add.w	r8, r8, #1
 800516e:	e7ec      	b.n	800514a <_printf_float+0x33a>
 8005170:	4642      	mov	r2, r8
 8005172:	4631      	mov	r1, r6
 8005174:	4628      	mov	r0, r5
 8005176:	47b8      	blx	r7
 8005178:	3001      	adds	r0, #1
 800517a:	d1c2      	bne.n	8005102 <_printf_float+0x2f2>
 800517c:	e6a3      	b.n	8004ec6 <_printf_float+0xb6>
 800517e:	2301      	movs	r3, #1
 8005180:	4631      	mov	r1, r6
 8005182:	4628      	mov	r0, r5
 8005184:	9206      	str	r2, [sp, #24]
 8005186:	47b8      	blx	r7
 8005188:	3001      	adds	r0, #1
 800518a:	f43f ae9c 	beq.w	8004ec6 <_printf_float+0xb6>
 800518e:	9a06      	ldr	r2, [sp, #24]
 8005190:	f10b 0b01 	add.w	fp, fp, #1
 8005194:	e7bb      	b.n	800510e <_printf_float+0x2fe>
 8005196:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800519a:	4631      	mov	r1, r6
 800519c:	4628      	mov	r0, r5
 800519e:	47b8      	blx	r7
 80051a0:	3001      	adds	r0, #1
 80051a2:	d1c0      	bne.n	8005126 <_printf_float+0x316>
 80051a4:	e68f      	b.n	8004ec6 <_printf_float+0xb6>
 80051a6:	9a06      	ldr	r2, [sp, #24]
 80051a8:	464b      	mov	r3, r9
 80051aa:	4442      	add	r2, r8
 80051ac:	4631      	mov	r1, r6
 80051ae:	4628      	mov	r0, r5
 80051b0:	47b8      	blx	r7
 80051b2:	3001      	adds	r0, #1
 80051b4:	d1c3      	bne.n	800513e <_printf_float+0x32e>
 80051b6:	e686      	b.n	8004ec6 <_printf_float+0xb6>
 80051b8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80051bc:	f1ba 0f01 	cmp.w	sl, #1
 80051c0:	dc01      	bgt.n	80051c6 <_printf_float+0x3b6>
 80051c2:	07db      	lsls	r3, r3, #31
 80051c4:	d536      	bpl.n	8005234 <_printf_float+0x424>
 80051c6:	2301      	movs	r3, #1
 80051c8:	4642      	mov	r2, r8
 80051ca:	4631      	mov	r1, r6
 80051cc:	4628      	mov	r0, r5
 80051ce:	47b8      	blx	r7
 80051d0:	3001      	adds	r0, #1
 80051d2:	f43f ae78 	beq.w	8004ec6 <_printf_float+0xb6>
 80051d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051da:	4631      	mov	r1, r6
 80051dc:	4628      	mov	r0, r5
 80051de:	47b8      	blx	r7
 80051e0:	3001      	adds	r0, #1
 80051e2:	f43f ae70 	beq.w	8004ec6 <_printf_float+0xb6>
 80051e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80051ea:	2200      	movs	r2, #0
 80051ec:	2300      	movs	r3, #0
 80051ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051f2:	f7fb fc81 	bl	8000af8 <__aeabi_dcmpeq>
 80051f6:	b9c0      	cbnz	r0, 800522a <_printf_float+0x41a>
 80051f8:	4653      	mov	r3, sl
 80051fa:	f108 0201 	add.w	r2, r8, #1
 80051fe:	4631      	mov	r1, r6
 8005200:	4628      	mov	r0, r5
 8005202:	47b8      	blx	r7
 8005204:	3001      	adds	r0, #1
 8005206:	d10c      	bne.n	8005222 <_printf_float+0x412>
 8005208:	e65d      	b.n	8004ec6 <_printf_float+0xb6>
 800520a:	2301      	movs	r3, #1
 800520c:	465a      	mov	r2, fp
 800520e:	4631      	mov	r1, r6
 8005210:	4628      	mov	r0, r5
 8005212:	47b8      	blx	r7
 8005214:	3001      	adds	r0, #1
 8005216:	f43f ae56 	beq.w	8004ec6 <_printf_float+0xb6>
 800521a:	f108 0801 	add.w	r8, r8, #1
 800521e:	45d0      	cmp	r8, sl
 8005220:	dbf3      	blt.n	800520a <_printf_float+0x3fa>
 8005222:	464b      	mov	r3, r9
 8005224:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005228:	e6df      	b.n	8004fea <_printf_float+0x1da>
 800522a:	f04f 0800 	mov.w	r8, #0
 800522e:	f104 0b1a 	add.w	fp, r4, #26
 8005232:	e7f4      	b.n	800521e <_printf_float+0x40e>
 8005234:	2301      	movs	r3, #1
 8005236:	4642      	mov	r2, r8
 8005238:	e7e1      	b.n	80051fe <_printf_float+0x3ee>
 800523a:	2301      	movs	r3, #1
 800523c:	464a      	mov	r2, r9
 800523e:	4631      	mov	r1, r6
 8005240:	4628      	mov	r0, r5
 8005242:	47b8      	blx	r7
 8005244:	3001      	adds	r0, #1
 8005246:	f43f ae3e 	beq.w	8004ec6 <_printf_float+0xb6>
 800524a:	f108 0801 	add.w	r8, r8, #1
 800524e:	68e3      	ldr	r3, [r4, #12]
 8005250:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005252:	1a5b      	subs	r3, r3, r1
 8005254:	4543      	cmp	r3, r8
 8005256:	dcf0      	bgt.n	800523a <_printf_float+0x42a>
 8005258:	e6fc      	b.n	8005054 <_printf_float+0x244>
 800525a:	f04f 0800 	mov.w	r8, #0
 800525e:	f104 0919 	add.w	r9, r4, #25
 8005262:	e7f4      	b.n	800524e <_printf_float+0x43e>

08005264 <_printf_common>:
 8005264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005268:	4616      	mov	r6, r2
 800526a:	4698      	mov	r8, r3
 800526c:	688a      	ldr	r2, [r1, #8]
 800526e:	690b      	ldr	r3, [r1, #16]
 8005270:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005274:	4293      	cmp	r3, r2
 8005276:	bfb8      	it	lt
 8005278:	4613      	movlt	r3, r2
 800527a:	6033      	str	r3, [r6, #0]
 800527c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005280:	4607      	mov	r7, r0
 8005282:	460c      	mov	r4, r1
 8005284:	b10a      	cbz	r2, 800528a <_printf_common+0x26>
 8005286:	3301      	adds	r3, #1
 8005288:	6033      	str	r3, [r6, #0]
 800528a:	6823      	ldr	r3, [r4, #0]
 800528c:	0699      	lsls	r1, r3, #26
 800528e:	bf42      	ittt	mi
 8005290:	6833      	ldrmi	r3, [r6, #0]
 8005292:	3302      	addmi	r3, #2
 8005294:	6033      	strmi	r3, [r6, #0]
 8005296:	6825      	ldr	r5, [r4, #0]
 8005298:	f015 0506 	ands.w	r5, r5, #6
 800529c:	d106      	bne.n	80052ac <_printf_common+0x48>
 800529e:	f104 0a19 	add.w	sl, r4, #25
 80052a2:	68e3      	ldr	r3, [r4, #12]
 80052a4:	6832      	ldr	r2, [r6, #0]
 80052a6:	1a9b      	subs	r3, r3, r2
 80052a8:	42ab      	cmp	r3, r5
 80052aa:	dc26      	bgt.n	80052fa <_printf_common+0x96>
 80052ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80052b0:	6822      	ldr	r2, [r4, #0]
 80052b2:	3b00      	subs	r3, #0
 80052b4:	bf18      	it	ne
 80052b6:	2301      	movne	r3, #1
 80052b8:	0692      	lsls	r2, r2, #26
 80052ba:	d42b      	bmi.n	8005314 <_printf_common+0xb0>
 80052bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80052c0:	4641      	mov	r1, r8
 80052c2:	4638      	mov	r0, r7
 80052c4:	47c8      	blx	r9
 80052c6:	3001      	adds	r0, #1
 80052c8:	d01e      	beq.n	8005308 <_printf_common+0xa4>
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	6922      	ldr	r2, [r4, #16]
 80052ce:	f003 0306 	and.w	r3, r3, #6
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	bf02      	ittt	eq
 80052d6:	68e5      	ldreq	r5, [r4, #12]
 80052d8:	6833      	ldreq	r3, [r6, #0]
 80052da:	1aed      	subeq	r5, r5, r3
 80052dc:	68a3      	ldr	r3, [r4, #8]
 80052de:	bf0c      	ite	eq
 80052e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052e4:	2500      	movne	r5, #0
 80052e6:	4293      	cmp	r3, r2
 80052e8:	bfc4      	itt	gt
 80052ea:	1a9b      	subgt	r3, r3, r2
 80052ec:	18ed      	addgt	r5, r5, r3
 80052ee:	2600      	movs	r6, #0
 80052f0:	341a      	adds	r4, #26
 80052f2:	42b5      	cmp	r5, r6
 80052f4:	d11a      	bne.n	800532c <_printf_common+0xc8>
 80052f6:	2000      	movs	r0, #0
 80052f8:	e008      	b.n	800530c <_printf_common+0xa8>
 80052fa:	2301      	movs	r3, #1
 80052fc:	4652      	mov	r2, sl
 80052fe:	4641      	mov	r1, r8
 8005300:	4638      	mov	r0, r7
 8005302:	47c8      	blx	r9
 8005304:	3001      	adds	r0, #1
 8005306:	d103      	bne.n	8005310 <_printf_common+0xac>
 8005308:	f04f 30ff 	mov.w	r0, #4294967295
 800530c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005310:	3501      	adds	r5, #1
 8005312:	e7c6      	b.n	80052a2 <_printf_common+0x3e>
 8005314:	18e1      	adds	r1, r4, r3
 8005316:	1c5a      	adds	r2, r3, #1
 8005318:	2030      	movs	r0, #48	@ 0x30
 800531a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800531e:	4422      	add	r2, r4
 8005320:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005324:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005328:	3302      	adds	r3, #2
 800532a:	e7c7      	b.n	80052bc <_printf_common+0x58>
 800532c:	2301      	movs	r3, #1
 800532e:	4622      	mov	r2, r4
 8005330:	4641      	mov	r1, r8
 8005332:	4638      	mov	r0, r7
 8005334:	47c8      	blx	r9
 8005336:	3001      	adds	r0, #1
 8005338:	d0e6      	beq.n	8005308 <_printf_common+0xa4>
 800533a:	3601      	adds	r6, #1
 800533c:	e7d9      	b.n	80052f2 <_printf_common+0x8e>
	...

08005340 <_printf_i>:
 8005340:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005344:	7e0f      	ldrb	r7, [r1, #24]
 8005346:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005348:	2f78      	cmp	r7, #120	@ 0x78
 800534a:	4691      	mov	r9, r2
 800534c:	4680      	mov	r8, r0
 800534e:	460c      	mov	r4, r1
 8005350:	469a      	mov	sl, r3
 8005352:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005356:	d807      	bhi.n	8005368 <_printf_i+0x28>
 8005358:	2f62      	cmp	r7, #98	@ 0x62
 800535a:	d80a      	bhi.n	8005372 <_printf_i+0x32>
 800535c:	2f00      	cmp	r7, #0
 800535e:	f000 80d1 	beq.w	8005504 <_printf_i+0x1c4>
 8005362:	2f58      	cmp	r7, #88	@ 0x58
 8005364:	f000 80b8 	beq.w	80054d8 <_printf_i+0x198>
 8005368:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800536c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005370:	e03a      	b.n	80053e8 <_printf_i+0xa8>
 8005372:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005376:	2b15      	cmp	r3, #21
 8005378:	d8f6      	bhi.n	8005368 <_printf_i+0x28>
 800537a:	a101      	add	r1, pc, #4	@ (adr r1, 8005380 <_printf_i+0x40>)
 800537c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005380:	080053d9 	.word	0x080053d9
 8005384:	080053ed 	.word	0x080053ed
 8005388:	08005369 	.word	0x08005369
 800538c:	08005369 	.word	0x08005369
 8005390:	08005369 	.word	0x08005369
 8005394:	08005369 	.word	0x08005369
 8005398:	080053ed 	.word	0x080053ed
 800539c:	08005369 	.word	0x08005369
 80053a0:	08005369 	.word	0x08005369
 80053a4:	08005369 	.word	0x08005369
 80053a8:	08005369 	.word	0x08005369
 80053ac:	080054eb 	.word	0x080054eb
 80053b0:	08005417 	.word	0x08005417
 80053b4:	080054a5 	.word	0x080054a5
 80053b8:	08005369 	.word	0x08005369
 80053bc:	08005369 	.word	0x08005369
 80053c0:	0800550d 	.word	0x0800550d
 80053c4:	08005369 	.word	0x08005369
 80053c8:	08005417 	.word	0x08005417
 80053cc:	08005369 	.word	0x08005369
 80053d0:	08005369 	.word	0x08005369
 80053d4:	080054ad 	.word	0x080054ad
 80053d8:	6833      	ldr	r3, [r6, #0]
 80053da:	1d1a      	adds	r2, r3, #4
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6032      	str	r2, [r6, #0]
 80053e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80053e8:	2301      	movs	r3, #1
 80053ea:	e09c      	b.n	8005526 <_printf_i+0x1e6>
 80053ec:	6833      	ldr	r3, [r6, #0]
 80053ee:	6820      	ldr	r0, [r4, #0]
 80053f0:	1d19      	adds	r1, r3, #4
 80053f2:	6031      	str	r1, [r6, #0]
 80053f4:	0606      	lsls	r6, r0, #24
 80053f6:	d501      	bpl.n	80053fc <_printf_i+0xbc>
 80053f8:	681d      	ldr	r5, [r3, #0]
 80053fa:	e003      	b.n	8005404 <_printf_i+0xc4>
 80053fc:	0645      	lsls	r5, r0, #25
 80053fe:	d5fb      	bpl.n	80053f8 <_printf_i+0xb8>
 8005400:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005404:	2d00      	cmp	r5, #0
 8005406:	da03      	bge.n	8005410 <_printf_i+0xd0>
 8005408:	232d      	movs	r3, #45	@ 0x2d
 800540a:	426d      	negs	r5, r5
 800540c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005410:	4858      	ldr	r0, [pc, #352]	@ (8005574 <_printf_i+0x234>)
 8005412:	230a      	movs	r3, #10
 8005414:	e011      	b.n	800543a <_printf_i+0xfa>
 8005416:	6821      	ldr	r1, [r4, #0]
 8005418:	6833      	ldr	r3, [r6, #0]
 800541a:	0608      	lsls	r0, r1, #24
 800541c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005420:	d402      	bmi.n	8005428 <_printf_i+0xe8>
 8005422:	0649      	lsls	r1, r1, #25
 8005424:	bf48      	it	mi
 8005426:	b2ad      	uxthmi	r5, r5
 8005428:	2f6f      	cmp	r7, #111	@ 0x6f
 800542a:	4852      	ldr	r0, [pc, #328]	@ (8005574 <_printf_i+0x234>)
 800542c:	6033      	str	r3, [r6, #0]
 800542e:	bf14      	ite	ne
 8005430:	230a      	movne	r3, #10
 8005432:	2308      	moveq	r3, #8
 8005434:	2100      	movs	r1, #0
 8005436:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800543a:	6866      	ldr	r6, [r4, #4]
 800543c:	60a6      	str	r6, [r4, #8]
 800543e:	2e00      	cmp	r6, #0
 8005440:	db05      	blt.n	800544e <_printf_i+0x10e>
 8005442:	6821      	ldr	r1, [r4, #0]
 8005444:	432e      	orrs	r6, r5
 8005446:	f021 0104 	bic.w	r1, r1, #4
 800544a:	6021      	str	r1, [r4, #0]
 800544c:	d04b      	beq.n	80054e6 <_printf_i+0x1a6>
 800544e:	4616      	mov	r6, r2
 8005450:	fbb5 f1f3 	udiv	r1, r5, r3
 8005454:	fb03 5711 	mls	r7, r3, r1, r5
 8005458:	5dc7      	ldrb	r7, [r0, r7]
 800545a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800545e:	462f      	mov	r7, r5
 8005460:	42bb      	cmp	r3, r7
 8005462:	460d      	mov	r5, r1
 8005464:	d9f4      	bls.n	8005450 <_printf_i+0x110>
 8005466:	2b08      	cmp	r3, #8
 8005468:	d10b      	bne.n	8005482 <_printf_i+0x142>
 800546a:	6823      	ldr	r3, [r4, #0]
 800546c:	07df      	lsls	r7, r3, #31
 800546e:	d508      	bpl.n	8005482 <_printf_i+0x142>
 8005470:	6923      	ldr	r3, [r4, #16]
 8005472:	6861      	ldr	r1, [r4, #4]
 8005474:	4299      	cmp	r1, r3
 8005476:	bfde      	ittt	le
 8005478:	2330      	movle	r3, #48	@ 0x30
 800547a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800547e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005482:	1b92      	subs	r2, r2, r6
 8005484:	6122      	str	r2, [r4, #16]
 8005486:	f8cd a000 	str.w	sl, [sp]
 800548a:	464b      	mov	r3, r9
 800548c:	aa03      	add	r2, sp, #12
 800548e:	4621      	mov	r1, r4
 8005490:	4640      	mov	r0, r8
 8005492:	f7ff fee7 	bl	8005264 <_printf_common>
 8005496:	3001      	adds	r0, #1
 8005498:	d14a      	bne.n	8005530 <_printf_i+0x1f0>
 800549a:	f04f 30ff 	mov.w	r0, #4294967295
 800549e:	b004      	add	sp, #16
 80054a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	f043 0320 	orr.w	r3, r3, #32
 80054aa:	6023      	str	r3, [r4, #0]
 80054ac:	4832      	ldr	r0, [pc, #200]	@ (8005578 <_printf_i+0x238>)
 80054ae:	2778      	movs	r7, #120	@ 0x78
 80054b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	6831      	ldr	r1, [r6, #0]
 80054b8:	061f      	lsls	r7, r3, #24
 80054ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80054be:	d402      	bmi.n	80054c6 <_printf_i+0x186>
 80054c0:	065f      	lsls	r7, r3, #25
 80054c2:	bf48      	it	mi
 80054c4:	b2ad      	uxthmi	r5, r5
 80054c6:	6031      	str	r1, [r6, #0]
 80054c8:	07d9      	lsls	r1, r3, #31
 80054ca:	bf44      	itt	mi
 80054cc:	f043 0320 	orrmi.w	r3, r3, #32
 80054d0:	6023      	strmi	r3, [r4, #0]
 80054d2:	b11d      	cbz	r5, 80054dc <_printf_i+0x19c>
 80054d4:	2310      	movs	r3, #16
 80054d6:	e7ad      	b.n	8005434 <_printf_i+0xf4>
 80054d8:	4826      	ldr	r0, [pc, #152]	@ (8005574 <_printf_i+0x234>)
 80054da:	e7e9      	b.n	80054b0 <_printf_i+0x170>
 80054dc:	6823      	ldr	r3, [r4, #0]
 80054de:	f023 0320 	bic.w	r3, r3, #32
 80054e2:	6023      	str	r3, [r4, #0]
 80054e4:	e7f6      	b.n	80054d4 <_printf_i+0x194>
 80054e6:	4616      	mov	r6, r2
 80054e8:	e7bd      	b.n	8005466 <_printf_i+0x126>
 80054ea:	6833      	ldr	r3, [r6, #0]
 80054ec:	6825      	ldr	r5, [r4, #0]
 80054ee:	6961      	ldr	r1, [r4, #20]
 80054f0:	1d18      	adds	r0, r3, #4
 80054f2:	6030      	str	r0, [r6, #0]
 80054f4:	062e      	lsls	r6, r5, #24
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	d501      	bpl.n	80054fe <_printf_i+0x1be>
 80054fa:	6019      	str	r1, [r3, #0]
 80054fc:	e002      	b.n	8005504 <_printf_i+0x1c4>
 80054fe:	0668      	lsls	r0, r5, #25
 8005500:	d5fb      	bpl.n	80054fa <_printf_i+0x1ba>
 8005502:	8019      	strh	r1, [r3, #0]
 8005504:	2300      	movs	r3, #0
 8005506:	6123      	str	r3, [r4, #16]
 8005508:	4616      	mov	r6, r2
 800550a:	e7bc      	b.n	8005486 <_printf_i+0x146>
 800550c:	6833      	ldr	r3, [r6, #0]
 800550e:	1d1a      	adds	r2, r3, #4
 8005510:	6032      	str	r2, [r6, #0]
 8005512:	681e      	ldr	r6, [r3, #0]
 8005514:	6862      	ldr	r2, [r4, #4]
 8005516:	2100      	movs	r1, #0
 8005518:	4630      	mov	r0, r6
 800551a:	f7fa fe71 	bl	8000200 <memchr>
 800551e:	b108      	cbz	r0, 8005524 <_printf_i+0x1e4>
 8005520:	1b80      	subs	r0, r0, r6
 8005522:	6060      	str	r0, [r4, #4]
 8005524:	6863      	ldr	r3, [r4, #4]
 8005526:	6123      	str	r3, [r4, #16]
 8005528:	2300      	movs	r3, #0
 800552a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800552e:	e7aa      	b.n	8005486 <_printf_i+0x146>
 8005530:	6923      	ldr	r3, [r4, #16]
 8005532:	4632      	mov	r2, r6
 8005534:	4649      	mov	r1, r9
 8005536:	4640      	mov	r0, r8
 8005538:	47d0      	blx	sl
 800553a:	3001      	adds	r0, #1
 800553c:	d0ad      	beq.n	800549a <_printf_i+0x15a>
 800553e:	6823      	ldr	r3, [r4, #0]
 8005540:	079b      	lsls	r3, r3, #30
 8005542:	d413      	bmi.n	800556c <_printf_i+0x22c>
 8005544:	68e0      	ldr	r0, [r4, #12]
 8005546:	9b03      	ldr	r3, [sp, #12]
 8005548:	4298      	cmp	r0, r3
 800554a:	bfb8      	it	lt
 800554c:	4618      	movlt	r0, r3
 800554e:	e7a6      	b.n	800549e <_printf_i+0x15e>
 8005550:	2301      	movs	r3, #1
 8005552:	4632      	mov	r2, r6
 8005554:	4649      	mov	r1, r9
 8005556:	4640      	mov	r0, r8
 8005558:	47d0      	blx	sl
 800555a:	3001      	adds	r0, #1
 800555c:	d09d      	beq.n	800549a <_printf_i+0x15a>
 800555e:	3501      	adds	r5, #1
 8005560:	68e3      	ldr	r3, [r4, #12]
 8005562:	9903      	ldr	r1, [sp, #12]
 8005564:	1a5b      	subs	r3, r3, r1
 8005566:	42ab      	cmp	r3, r5
 8005568:	dcf2      	bgt.n	8005550 <_printf_i+0x210>
 800556a:	e7eb      	b.n	8005544 <_printf_i+0x204>
 800556c:	2500      	movs	r5, #0
 800556e:	f104 0619 	add.w	r6, r4, #25
 8005572:	e7f5      	b.n	8005560 <_printf_i+0x220>
 8005574:	0800996a 	.word	0x0800996a
 8005578:	0800997b 	.word	0x0800997b

0800557c <_scanf_float>:
 800557c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005580:	b087      	sub	sp, #28
 8005582:	4691      	mov	r9, r2
 8005584:	9303      	str	r3, [sp, #12]
 8005586:	688b      	ldr	r3, [r1, #8]
 8005588:	1e5a      	subs	r2, r3, #1
 800558a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800558e:	bf81      	itttt	hi
 8005590:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005594:	eb03 0b05 	addhi.w	fp, r3, r5
 8005598:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800559c:	608b      	strhi	r3, [r1, #8]
 800559e:	680b      	ldr	r3, [r1, #0]
 80055a0:	460a      	mov	r2, r1
 80055a2:	f04f 0500 	mov.w	r5, #0
 80055a6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80055aa:	f842 3b1c 	str.w	r3, [r2], #28
 80055ae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80055b2:	4680      	mov	r8, r0
 80055b4:	460c      	mov	r4, r1
 80055b6:	bf98      	it	ls
 80055b8:	f04f 0b00 	movls.w	fp, #0
 80055bc:	9201      	str	r2, [sp, #4]
 80055be:	4616      	mov	r6, r2
 80055c0:	46aa      	mov	sl, r5
 80055c2:	462f      	mov	r7, r5
 80055c4:	9502      	str	r5, [sp, #8]
 80055c6:	68a2      	ldr	r2, [r4, #8]
 80055c8:	b15a      	cbz	r2, 80055e2 <_scanf_float+0x66>
 80055ca:	f8d9 3000 	ldr.w	r3, [r9]
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b4e      	cmp	r3, #78	@ 0x4e
 80055d2:	d863      	bhi.n	800569c <_scanf_float+0x120>
 80055d4:	2b40      	cmp	r3, #64	@ 0x40
 80055d6:	d83b      	bhi.n	8005650 <_scanf_float+0xd4>
 80055d8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80055dc:	b2c8      	uxtb	r0, r1
 80055de:	280e      	cmp	r0, #14
 80055e0:	d939      	bls.n	8005656 <_scanf_float+0xda>
 80055e2:	b11f      	cbz	r7, 80055ec <_scanf_float+0x70>
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055ea:	6023      	str	r3, [r4, #0]
 80055ec:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055f0:	f1ba 0f01 	cmp.w	sl, #1
 80055f4:	f200 8114 	bhi.w	8005820 <_scanf_float+0x2a4>
 80055f8:	9b01      	ldr	r3, [sp, #4]
 80055fa:	429e      	cmp	r6, r3
 80055fc:	f200 8105 	bhi.w	800580a <_scanf_float+0x28e>
 8005600:	2001      	movs	r0, #1
 8005602:	b007      	add	sp, #28
 8005604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005608:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800560c:	2a0d      	cmp	r2, #13
 800560e:	d8e8      	bhi.n	80055e2 <_scanf_float+0x66>
 8005610:	a101      	add	r1, pc, #4	@ (adr r1, 8005618 <_scanf_float+0x9c>)
 8005612:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005616:	bf00      	nop
 8005618:	08005761 	.word	0x08005761
 800561c:	080055e3 	.word	0x080055e3
 8005620:	080055e3 	.word	0x080055e3
 8005624:	080055e3 	.word	0x080055e3
 8005628:	080057bd 	.word	0x080057bd
 800562c:	08005797 	.word	0x08005797
 8005630:	080055e3 	.word	0x080055e3
 8005634:	080055e3 	.word	0x080055e3
 8005638:	0800576f 	.word	0x0800576f
 800563c:	080055e3 	.word	0x080055e3
 8005640:	080055e3 	.word	0x080055e3
 8005644:	080055e3 	.word	0x080055e3
 8005648:	080055e3 	.word	0x080055e3
 800564c:	0800572b 	.word	0x0800572b
 8005650:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005654:	e7da      	b.n	800560c <_scanf_float+0x90>
 8005656:	290e      	cmp	r1, #14
 8005658:	d8c3      	bhi.n	80055e2 <_scanf_float+0x66>
 800565a:	a001      	add	r0, pc, #4	@ (adr r0, 8005660 <_scanf_float+0xe4>)
 800565c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005660:	0800571b 	.word	0x0800571b
 8005664:	080055e3 	.word	0x080055e3
 8005668:	0800571b 	.word	0x0800571b
 800566c:	080057ab 	.word	0x080057ab
 8005670:	080055e3 	.word	0x080055e3
 8005674:	080056bd 	.word	0x080056bd
 8005678:	08005701 	.word	0x08005701
 800567c:	08005701 	.word	0x08005701
 8005680:	08005701 	.word	0x08005701
 8005684:	08005701 	.word	0x08005701
 8005688:	08005701 	.word	0x08005701
 800568c:	08005701 	.word	0x08005701
 8005690:	08005701 	.word	0x08005701
 8005694:	08005701 	.word	0x08005701
 8005698:	08005701 	.word	0x08005701
 800569c:	2b6e      	cmp	r3, #110	@ 0x6e
 800569e:	d809      	bhi.n	80056b4 <_scanf_float+0x138>
 80056a0:	2b60      	cmp	r3, #96	@ 0x60
 80056a2:	d8b1      	bhi.n	8005608 <_scanf_float+0x8c>
 80056a4:	2b54      	cmp	r3, #84	@ 0x54
 80056a6:	d07b      	beq.n	80057a0 <_scanf_float+0x224>
 80056a8:	2b59      	cmp	r3, #89	@ 0x59
 80056aa:	d19a      	bne.n	80055e2 <_scanf_float+0x66>
 80056ac:	2d07      	cmp	r5, #7
 80056ae:	d198      	bne.n	80055e2 <_scanf_float+0x66>
 80056b0:	2508      	movs	r5, #8
 80056b2:	e02f      	b.n	8005714 <_scanf_float+0x198>
 80056b4:	2b74      	cmp	r3, #116	@ 0x74
 80056b6:	d073      	beq.n	80057a0 <_scanf_float+0x224>
 80056b8:	2b79      	cmp	r3, #121	@ 0x79
 80056ba:	e7f6      	b.n	80056aa <_scanf_float+0x12e>
 80056bc:	6821      	ldr	r1, [r4, #0]
 80056be:	05c8      	lsls	r0, r1, #23
 80056c0:	d51e      	bpl.n	8005700 <_scanf_float+0x184>
 80056c2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80056c6:	6021      	str	r1, [r4, #0]
 80056c8:	3701      	adds	r7, #1
 80056ca:	f1bb 0f00 	cmp.w	fp, #0
 80056ce:	d003      	beq.n	80056d8 <_scanf_float+0x15c>
 80056d0:	3201      	adds	r2, #1
 80056d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80056d6:	60a2      	str	r2, [r4, #8]
 80056d8:	68a3      	ldr	r3, [r4, #8]
 80056da:	3b01      	subs	r3, #1
 80056dc:	60a3      	str	r3, [r4, #8]
 80056de:	6923      	ldr	r3, [r4, #16]
 80056e0:	3301      	adds	r3, #1
 80056e2:	6123      	str	r3, [r4, #16]
 80056e4:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	f8c9 3004 	str.w	r3, [r9, #4]
 80056f0:	f340 8082 	ble.w	80057f8 <_scanf_float+0x27c>
 80056f4:	f8d9 3000 	ldr.w	r3, [r9]
 80056f8:	3301      	adds	r3, #1
 80056fa:	f8c9 3000 	str.w	r3, [r9]
 80056fe:	e762      	b.n	80055c6 <_scanf_float+0x4a>
 8005700:	eb1a 0105 	adds.w	r1, sl, r5
 8005704:	f47f af6d 	bne.w	80055e2 <_scanf_float+0x66>
 8005708:	6822      	ldr	r2, [r4, #0]
 800570a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800570e:	6022      	str	r2, [r4, #0]
 8005710:	460d      	mov	r5, r1
 8005712:	468a      	mov	sl, r1
 8005714:	f806 3b01 	strb.w	r3, [r6], #1
 8005718:	e7de      	b.n	80056d8 <_scanf_float+0x15c>
 800571a:	6822      	ldr	r2, [r4, #0]
 800571c:	0610      	lsls	r0, r2, #24
 800571e:	f57f af60 	bpl.w	80055e2 <_scanf_float+0x66>
 8005722:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005726:	6022      	str	r2, [r4, #0]
 8005728:	e7f4      	b.n	8005714 <_scanf_float+0x198>
 800572a:	f1ba 0f00 	cmp.w	sl, #0
 800572e:	d10c      	bne.n	800574a <_scanf_float+0x1ce>
 8005730:	b977      	cbnz	r7, 8005750 <_scanf_float+0x1d4>
 8005732:	6822      	ldr	r2, [r4, #0]
 8005734:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005738:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800573c:	d108      	bne.n	8005750 <_scanf_float+0x1d4>
 800573e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005742:	6022      	str	r2, [r4, #0]
 8005744:	f04f 0a01 	mov.w	sl, #1
 8005748:	e7e4      	b.n	8005714 <_scanf_float+0x198>
 800574a:	f1ba 0f02 	cmp.w	sl, #2
 800574e:	d050      	beq.n	80057f2 <_scanf_float+0x276>
 8005750:	2d01      	cmp	r5, #1
 8005752:	d002      	beq.n	800575a <_scanf_float+0x1de>
 8005754:	2d04      	cmp	r5, #4
 8005756:	f47f af44 	bne.w	80055e2 <_scanf_float+0x66>
 800575a:	3501      	adds	r5, #1
 800575c:	b2ed      	uxtb	r5, r5
 800575e:	e7d9      	b.n	8005714 <_scanf_float+0x198>
 8005760:	f1ba 0f01 	cmp.w	sl, #1
 8005764:	f47f af3d 	bne.w	80055e2 <_scanf_float+0x66>
 8005768:	f04f 0a02 	mov.w	sl, #2
 800576c:	e7d2      	b.n	8005714 <_scanf_float+0x198>
 800576e:	b975      	cbnz	r5, 800578e <_scanf_float+0x212>
 8005770:	2f00      	cmp	r7, #0
 8005772:	f47f af37 	bne.w	80055e4 <_scanf_float+0x68>
 8005776:	6822      	ldr	r2, [r4, #0]
 8005778:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800577c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005780:	f040 8103 	bne.w	800598a <_scanf_float+0x40e>
 8005784:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005788:	6022      	str	r2, [r4, #0]
 800578a:	2501      	movs	r5, #1
 800578c:	e7c2      	b.n	8005714 <_scanf_float+0x198>
 800578e:	2d03      	cmp	r5, #3
 8005790:	d0e3      	beq.n	800575a <_scanf_float+0x1de>
 8005792:	2d05      	cmp	r5, #5
 8005794:	e7df      	b.n	8005756 <_scanf_float+0x1da>
 8005796:	2d02      	cmp	r5, #2
 8005798:	f47f af23 	bne.w	80055e2 <_scanf_float+0x66>
 800579c:	2503      	movs	r5, #3
 800579e:	e7b9      	b.n	8005714 <_scanf_float+0x198>
 80057a0:	2d06      	cmp	r5, #6
 80057a2:	f47f af1e 	bne.w	80055e2 <_scanf_float+0x66>
 80057a6:	2507      	movs	r5, #7
 80057a8:	e7b4      	b.n	8005714 <_scanf_float+0x198>
 80057aa:	6822      	ldr	r2, [r4, #0]
 80057ac:	0591      	lsls	r1, r2, #22
 80057ae:	f57f af18 	bpl.w	80055e2 <_scanf_float+0x66>
 80057b2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80057b6:	6022      	str	r2, [r4, #0]
 80057b8:	9702      	str	r7, [sp, #8]
 80057ba:	e7ab      	b.n	8005714 <_scanf_float+0x198>
 80057bc:	6822      	ldr	r2, [r4, #0]
 80057be:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80057c2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80057c6:	d005      	beq.n	80057d4 <_scanf_float+0x258>
 80057c8:	0550      	lsls	r0, r2, #21
 80057ca:	f57f af0a 	bpl.w	80055e2 <_scanf_float+0x66>
 80057ce:	2f00      	cmp	r7, #0
 80057d0:	f000 80db 	beq.w	800598a <_scanf_float+0x40e>
 80057d4:	0591      	lsls	r1, r2, #22
 80057d6:	bf58      	it	pl
 80057d8:	9902      	ldrpl	r1, [sp, #8]
 80057da:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80057de:	bf58      	it	pl
 80057e0:	1a79      	subpl	r1, r7, r1
 80057e2:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80057e6:	bf58      	it	pl
 80057e8:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80057ec:	6022      	str	r2, [r4, #0]
 80057ee:	2700      	movs	r7, #0
 80057f0:	e790      	b.n	8005714 <_scanf_float+0x198>
 80057f2:	f04f 0a03 	mov.w	sl, #3
 80057f6:	e78d      	b.n	8005714 <_scanf_float+0x198>
 80057f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80057fc:	4649      	mov	r1, r9
 80057fe:	4640      	mov	r0, r8
 8005800:	4798      	blx	r3
 8005802:	2800      	cmp	r0, #0
 8005804:	f43f aedf 	beq.w	80055c6 <_scanf_float+0x4a>
 8005808:	e6eb      	b.n	80055e2 <_scanf_float+0x66>
 800580a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800580e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005812:	464a      	mov	r2, r9
 8005814:	4640      	mov	r0, r8
 8005816:	4798      	blx	r3
 8005818:	6923      	ldr	r3, [r4, #16]
 800581a:	3b01      	subs	r3, #1
 800581c:	6123      	str	r3, [r4, #16]
 800581e:	e6eb      	b.n	80055f8 <_scanf_float+0x7c>
 8005820:	1e6b      	subs	r3, r5, #1
 8005822:	2b06      	cmp	r3, #6
 8005824:	d824      	bhi.n	8005870 <_scanf_float+0x2f4>
 8005826:	2d02      	cmp	r5, #2
 8005828:	d836      	bhi.n	8005898 <_scanf_float+0x31c>
 800582a:	9b01      	ldr	r3, [sp, #4]
 800582c:	429e      	cmp	r6, r3
 800582e:	f67f aee7 	bls.w	8005600 <_scanf_float+0x84>
 8005832:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005836:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800583a:	464a      	mov	r2, r9
 800583c:	4640      	mov	r0, r8
 800583e:	4798      	blx	r3
 8005840:	6923      	ldr	r3, [r4, #16]
 8005842:	3b01      	subs	r3, #1
 8005844:	6123      	str	r3, [r4, #16]
 8005846:	e7f0      	b.n	800582a <_scanf_float+0x2ae>
 8005848:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800584c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005850:	464a      	mov	r2, r9
 8005852:	4640      	mov	r0, r8
 8005854:	4798      	blx	r3
 8005856:	6923      	ldr	r3, [r4, #16]
 8005858:	3b01      	subs	r3, #1
 800585a:	6123      	str	r3, [r4, #16]
 800585c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005860:	fa5f fa8a 	uxtb.w	sl, sl
 8005864:	f1ba 0f02 	cmp.w	sl, #2
 8005868:	d1ee      	bne.n	8005848 <_scanf_float+0x2cc>
 800586a:	3d03      	subs	r5, #3
 800586c:	b2ed      	uxtb	r5, r5
 800586e:	1b76      	subs	r6, r6, r5
 8005870:	6823      	ldr	r3, [r4, #0]
 8005872:	05da      	lsls	r2, r3, #23
 8005874:	d530      	bpl.n	80058d8 <_scanf_float+0x35c>
 8005876:	055b      	lsls	r3, r3, #21
 8005878:	d511      	bpl.n	800589e <_scanf_float+0x322>
 800587a:	9b01      	ldr	r3, [sp, #4]
 800587c:	429e      	cmp	r6, r3
 800587e:	f67f aebf 	bls.w	8005600 <_scanf_float+0x84>
 8005882:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005886:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800588a:	464a      	mov	r2, r9
 800588c:	4640      	mov	r0, r8
 800588e:	4798      	blx	r3
 8005890:	6923      	ldr	r3, [r4, #16]
 8005892:	3b01      	subs	r3, #1
 8005894:	6123      	str	r3, [r4, #16]
 8005896:	e7f0      	b.n	800587a <_scanf_float+0x2fe>
 8005898:	46aa      	mov	sl, r5
 800589a:	46b3      	mov	fp, r6
 800589c:	e7de      	b.n	800585c <_scanf_float+0x2e0>
 800589e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80058a2:	6923      	ldr	r3, [r4, #16]
 80058a4:	2965      	cmp	r1, #101	@ 0x65
 80058a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80058aa:	f106 35ff 	add.w	r5, r6, #4294967295
 80058ae:	6123      	str	r3, [r4, #16]
 80058b0:	d00c      	beq.n	80058cc <_scanf_float+0x350>
 80058b2:	2945      	cmp	r1, #69	@ 0x45
 80058b4:	d00a      	beq.n	80058cc <_scanf_float+0x350>
 80058b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058ba:	464a      	mov	r2, r9
 80058bc:	4640      	mov	r0, r8
 80058be:	4798      	blx	r3
 80058c0:	6923      	ldr	r3, [r4, #16]
 80058c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	1eb5      	subs	r5, r6, #2
 80058ca:	6123      	str	r3, [r4, #16]
 80058cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058d0:	464a      	mov	r2, r9
 80058d2:	4640      	mov	r0, r8
 80058d4:	4798      	blx	r3
 80058d6:	462e      	mov	r6, r5
 80058d8:	6822      	ldr	r2, [r4, #0]
 80058da:	f012 0210 	ands.w	r2, r2, #16
 80058de:	d001      	beq.n	80058e4 <_scanf_float+0x368>
 80058e0:	2000      	movs	r0, #0
 80058e2:	e68e      	b.n	8005602 <_scanf_float+0x86>
 80058e4:	7032      	strb	r2, [r6, #0]
 80058e6:	6823      	ldr	r3, [r4, #0]
 80058e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80058ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058f0:	d125      	bne.n	800593e <_scanf_float+0x3c2>
 80058f2:	9b02      	ldr	r3, [sp, #8]
 80058f4:	429f      	cmp	r7, r3
 80058f6:	d00a      	beq.n	800590e <_scanf_float+0x392>
 80058f8:	1bda      	subs	r2, r3, r7
 80058fa:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80058fe:	429e      	cmp	r6, r3
 8005900:	bf28      	it	cs
 8005902:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005906:	4922      	ldr	r1, [pc, #136]	@ (8005990 <_scanf_float+0x414>)
 8005908:	4630      	mov	r0, r6
 800590a:	f000 f97f 	bl	8005c0c <siprintf>
 800590e:	9901      	ldr	r1, [sp, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	4640      	mov	r0, r8
 8005914:	f002 fdc4 	bl	80084a0 <_strtod_r>
 8005918:	9b03      	ldr	r3, [sp, #12]
 800591a:	6821      	ldr	r1, [r4, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f011 0f02 	tst.w	r1, #2
 8005922:	ec57 6b10 	vmov	r6, r7, d0
 8005926:	f103 0204 	add.w	r2, r3, #4
 800592a:	d015      	beq.n	8005958 <_scanf_float+0x3dc>
 800592c:	9903      	ldr	r1, [sp, #12]
 800592e:	600a      	str	r2, [r1, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	e9c3 6700 	strd	r6, r7, [r3]
 8005936:	68e3      	ldr	r3, [r4, #12]
 8005938:	3301      	adds	r3, #1
 800593a:	60e3      	str	r3, [r4, #12]
 800593c:	e7d0      	b.n	80058e0 <_scanf_float+0x364>
 800593e:	9b04      	ldr	r3, [sp, #16]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d0e4      	beq.n	800590e <_scanf_float+0x392>
 8005944:	9905      	ldr	r1, [sp, #20]
 8005946:	230a      	movs	r3, #10
 8005948:	3101      	adds	r1, #1
 800594a:	4640      	mov	r0, r8
 800594c:	f002 fe28 	bl	80085a0 <_strtol_r>
 8005950:	9b04      	ldr	r3, [sp, #16]
 8005952:	9e05      	ldr	r6, [sp, #20]
 8005954:	1ac2      	subs	r2, r0, r3
 8005956:	e7d0      	b.n	80058fa <_scanf_float+0x37e>
 8005958:	f011 0f04 	tst.w	r1, #4
 800595c:	9903      	ldr	r1, [sp, #12]
 800595e:	600a      	str	r2, [r1, #0]
 8005960:	d1e6      	bne.n	8005930 <_scanf_float+0x3b4>
 8005962:	681d      	ldr	r5, [r3, #0]
 8005964:	4632      	mov	r2, r6
 8005966:	463b      	mov	r3, r7
 8005968:	4630      	mov	r0, r6
 800596a:	4639      	mov	r1, r7
 800596c:	f7fb f8f6 	bl	8000b5c <__aeabi_dcmpun>
 8005970:	b128      	cbz	r0, 800597e <_scanf_float+0x402>
 8005972:	4808      	ldr	r0, [pc, #32]	@ (8005994 <_scanf_float+0x418>)
 8005974:	f000 fb6c 	bl	8006050 <nanf>
 8005978:	ed85 0a00 	vstr	s0, [r5]
 800597c:	e7db      	b.n	8005936 <_scanf_float+0x3ba>
 800597e:	4630      	mov	r0, r6
 8005980:	4639      	mov	r1, r7
 8005982:	f7fb f949 	bl	8000c18 <__aeabi_d2f>
 8005986:	6028      	str	r0, [r5, #0]
 8005988:	e7d5      	b.n	8005936 <_scanf_float+0x3ba>
 800598a:	2700      	movs	r7, #0
 800598c:	e62e      	b.n	80055ec <_scanf_float+0x70>
 800598e:	bf00      	nop
 8005990:	0800998c 	.word	0x0800998c
 8005994:	08009a3d 	.word	0x08009a3d

08005998 <std>:
 8005998:	2300      	movs	r3, #0
 800599a:	b510      	push	{r4, lr}
 800599c:	4604      	mov	r4, r0
 800599e:	e9c0 3300 	strd	r3, r3, [r0]
 80059a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80059a6:	6083      	str	r3, [r0, #8]
 80059a8:	8181      	strh	r1, [r0, #12]
 80059aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80059ac:	81c2      	strh	r2, [r0, #14]
 80059ae:	6183      	str	r3, [r0, #24]
 80059b0:	4619      	mov	r1, r3
 80059b2:	2208      	movs	r2, #8
 80059b4:	305c      	adds	r0, #92	@ 0x5c
 80059b6:	f000 fa23 	bl	8005e00 <memset>
 80059ba:	4b0d      	ldr	r3, [pc, #52]	@ (80059f0 <std+0x58>)
 80059bc:	6263      	str	r3, [r4, #36]	@ 0x24
 80059be:	4b0d      	ldr	r3, [pc, #52]	@ (80059f4 <std+0x5c>)
 80059c0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80059c2:	4b0d      	ldr	r3, [pc, #52]	@ (80059f8 <std+0x60>)
 80059c4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80059c6:	4b0d      	ldr	r3, [pc, #52]	@ (80059fc <std+0x64>)
 80059c8:	6323      	str	r3, [r4, #48]	@ 0x30
 80059ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005a00 <std+0x68>)
 80059cc:	6224      	str	r4, [r4, #32]
 80059ce:	429c      	cmp	r4, r3
 80059d0:	d006      	beq.n	80059e0 <std+0x48>
 80059d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80059d6:	4294      	cmp	r4, r2
 80059d8:	d002      	beq.n	80059e0 <std+0x48>
 80059da:	33d0      	adds	r3, #208	@ 0xd0
 80059dc:	429c      	cmp	r4, r3
 80059de:	d105      	bne.n	80059ec <std+0x54>
 80059e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80059e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059e8:	f000 bb18 	b.w	800601c <__retarget_lock_init_recursive>
 80059ec:	bd10      	pop	{r4, pc}
 80059ee:	bf00      	nop
 80059f0:	08005c51 	.word	0x08005c51
 80059f4:	08005c73 	.word	0x08005c73
 80059f8:	08005cab 	.word	0x08005cab
 80059fc:	08005ccf 	.word	0x08005ccf
 8005a00:	20000bc4 	.word	0x20000bc4

08005a04 <stdio_exit_handler>:
 8005a04:	4a02      	ldr	r2, [pc, #8]	@ (8005a10 <stdio_exit_handler+0xc>)
 8005a06:	4903      	ldr	r1, [pc, #12]	@ (8005a14 <stdio_exit_handler+0x10>)
 8005a08:	4803      	ldr	r0, [pc, #12]	@ (8005a18 <stdio_exit_handler+0x14>)
 8005a0a:	f000 b869 	b.w	8005ae0 <_fwalk_sglue>
 8005a0e:	bf00      	nop
 8005a10:	20000010 	.word	0x20000010
 8005a14:	08008be1 	.word	0x08008be1
 8005a18:	20000020 	.word	0x20000020

08005a1c <cleanup_stdio>:
 8005a1c:	6841      	ldr	r1, [r0, #4]
 8005a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005a50 <cleanup_stdio+0x34>)
 8005a20:	4299      	cmp	r1, r3
 8005a22:	b510      	push	{r4, lr}
 8005a24:	4604      	mov	r4, r0
 8005a26:	d001      	beq.n	8005a2c <cleanup_stdio+0x10>
 8005a28:	f003 f8da 	bl	8008be0 <_fflush_r>
 8005a2c:	68a1      	ldr	r1, [r4, #8]
 8005a2e:	4b09      	ldr	r3, [pc, #36]	@ (8005a54 <cleanup_stdio+0x38>)
 8005a30:	4299      	cmp	r1, r3
 8005a32:	d002      	beq.n	8005a3a <cleanup_stdio+0x1e>
 8005a34:	4620      	mov	r0, r4
 8005a36:	f003 f8d3 	bl	8008be0 <_fflush_r>
 8005a3a:	68e1      	ldr	r1, [r4, #12]
 8005a3c:	4b06      	ldr	r3, [pc, #24]	@ (8005a58 <cleanup_stdio+0x3c>)
 8005a3e:	4299      	cmp	r1, r3
 8005a40:	d004      	beq.n	8005a4c <cleanup_stdio+0x30>
 8005a42:	4620      	mov	r0, r4
 8005a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a48:	f003 b8ca 	b.w	8008be0 <_fflush_r>
 8005a4c:	bd10      	pop	{r4, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000bc4 	.word	0x20000bc4
 8005a54:	20000c2c 	.word	0x20000c2c
 8005a58:	20000c94 	.word	0x20000c94

08005a5c <global_stdio_init.part.0>:
 8005a5c:	b510      	push	{r4, lr}
 8005a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005a8c <global_stdio_init.part.0+0x30>)
 8005a60:	4c0b      	ldr	r4, [pc, #44]	@ (8005a90 <global_stdio_init.part.0+0x34>)
 8005a62:	4a0c      	ldr	r2, [pc, #48]	@ (8005a94 <global_stdio_init.part.0+0x38>)
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	4620      	mov	r0, r4
 8005a68:	2200      	movs	r2, #0
 8005a6a:	2104      	movs	r1, #4
 8005a6c:	f7ff ff94 	bl	8005998 <std>
 8005a70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005a74:	2201      	movs	r2, #1
 8005a76:	2109      	movs	r1, #9
 8005a78:	f7ff ff8e 	bl	8005998 <std>
 8005a7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005a80:	2202      	movs	r2, #2
 8005a82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a86:	2112      	movs	r1, #18
 8005a88:	f7ff bf86 	b.w	8005998 <std>
 8005a8c:	20000cfc 	.word	0x20000cfc
 8005a90:	20000bc4 	.word	0x20000bc4
 8005a94:	08005a05 	.word	0x08005a05

08005a98 <__sfp_lock_acquire>:
 8005a98:	4801      	ldr	r0, [pc, #4]	@ (8005aa0 <__sfp_lock_acquire+0x8>)
 8005a9a:	f000 bac0 	b.w	800601e <__retarget_lock_acquire_recursive>
 8005a9e:	bf00      	nop
 8005aa0:	20000d05 	.word	0x20000d05

08005aa4 <__sfp_lock_release>:
 8005aa4:	4801      	ldr	r0, [pc, #4]	@ (8005aac <__sfp_lock_release+0x8>)
 8005aa6:	f000 babb 	b.w	8006020 <__retarget_lock_release_recursive>
 8005aaa:	bf00      	nop
 8005aac:	20000d05 	.word	0x20000d05

08005ab0 <__sinit>:
 8005ab0:	b510      	push	{r4, lr}
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	f7ff fff0 	bl	8005a98 <__sfp_lock_acquire>
 8005ab8:	6a23      	ldr	r3, [r4, #32]
 8005aba:	b11b      	cbz	r3, 8005ac4 <__sinit+0x14>
 8005abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ac0:	f7ff bff0 	b.w	8005aa4 <__sfp_lock_release>
 8005ac4:	4b04      	ldr	r3, [pc, #16]	@ (8005ad8 <__sinit+0x28>)
 8005ac6:	6223      	str	r3, [r4, #32]
 8005ac8:	4b04      	ldr	r3, [pc, #16]	@ (8005adc <__sinit+0x2c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1f5      	bne.n	8005abc <__sinit+0xc>
 8005ad0:	f7ff ffc4 	bl	8005a5c <global_stdio_init.part.0>
 8005ad4:	e7f2      	b.n	8005abc <__sinit+0xc>
 8005ad6:	bf00      	nop
 8005ad8:	08005a1d 	.word	0x08005a1d
 8005adc:	20000cfc 	.word	0x20000cfc

08005ae0 <_fwalk_sglue>:
 8005ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ae4:	4607      	mov	r7, r0
 8005ae6:	4688      	mov	r8, r1
 8005ae8:	4614      	mov	r4, r2
 8005aea:	2600      	movs	r6, #0
 8005aec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005af0:	f1b9 0901 	subs.w	r9, r9, #1
 8005af4:	d505      	bpl.n	8005b02 <_fwalk_sglue+0x22>
 8005af6:	6824      	ldr	r4, [r4, #0]
 8005af8:	2c00      	cmp	r4, #0
 8005afa:	d1f7      	bne.n	8005aec <_fwalk_sglue+0xc>
 8005afc:	4630      	mov	r0, r6
 8005afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b02:	89ab      	ldrh	r3, [r5, #12]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	d907      	bls.n	8005b18 <_fwalk_sglue+0x38>
 8005b08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	d003      	beq.n	8005b18 <_fwalk_sglue+0x38>
 8005b10:	4629      	mov	r1, r5
 8005b12:	4638      	mov	r0, r7
 8005b14:	47c0      	blx	r8
 8005b16:	4306      	orrs	r6, r0
 8005b18:	3568      	adds	r5, #104	@ 0x68
 8005b1a:	e7e9      	b.n	8005af0 <_fwalk_sglue+0x10>

08005b1c <iprintf>:
 8005b1c:	b40f      	push	{r0, r1, r2, r3}
 8005b1e:	b507      	push	{r0, r1, r2, lr}
 8005b20:	4906      	ldr	r1, [pc, #24]	@ (8005b3c <iprintf+0x20>)
 8005b22:	ab04      	add	r3, sp, #16
 8005b24:	6808      	ldr	r0, [r1, #0]
 8005b26:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b2a:	6881      	ldr	r1, [r0, #8]
 8005b2c:	9301      	str	r3, [sp, #4]
 8005b2e:	f002 febb 	bl	80088a8 <_vfiprintf_r>
 8005b32:	b003      	add	sp, #12
 8005b34:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b38:	b004      	add	sp, #16
 8005b3a:	4770      	bx	lr
 8005b3c:	2000001c 	.word	0x2000001c

08005b40 <putchar>:
 8005b40:	4b02      	ldr	r3, [pc, #8]	@ (8005b4c <putchar+0xc>)
 8005b42:	4601      	mov	r1, r0
 8005b44:	6818      	ldr	r0, [r3, #0]
 8005b46:	6882      	ldr	r2, [r0, #8]
 8005b48:	f003 b8e6 	b.w	8008d18 <_putc_r>
 8005b4c:	2000001c 	.word	0x2000001c

08005b50 <_puts_r>:
 8005b50:	6a03      	ldr	r3, [r0, #32]
 8005b52:	b570      	push	{r4, r5, r6, lr}
 8005b54:	6884      	ldr	r4, [r0, #8]
 8005b56:	4605      	mov	r5, r0
 8005b58:	460e      	mov	r6, r1
 8005b5a:	b90b      	cbnz	r3, 8005b60 <_puts_r+0x10>
 8005b5c:	f7ff ffa8 	bl	8005ab0 <__sinit>
 8005b60:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b62:	07db      	lsls	r3, r3, #31
 8005b64:	d405      	bmi.n	8005b72 <_puts_r+0x22>
 8005b66:	89a3      	ldrh	r3, [r4, #12]
 8005b68:	0598      	lsls	r0, r3, #22
 8005b6a:	d402      	bmi.n	8005b72 <_puts_r+0x22>
 8005b6c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b6e:	f000 fa56 	bl	800601e <__retarget_lock_acquire_recursive>
 8005b72:	89a3      	ldrh	r3, [r4, #12]
 8005b74:	0719      	lsls	r1, r3, #28
 8005b76:	d502      	bpl.n	8005b7e <_puts_r+0x2e>
 8005b78:	6923      	ldr	r3, [r4, #16]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d135      	bne.n	8005bea <_puts_r+0x9a>
 8005b7e:	4621      	mov	r1, r4
 8005b80:	4628      	mov	r0, r5
 8005b82:	f000 f8e7 	bl	8005d54 <__swsetup_r>
 8005b86:	b380      	cbz	r0, 8005bea <_puts_r+0x9a>
 8005b88:	f04f 35ff 	mov.w	r5, #4294967295
 8005b8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005b8e:	07da      	lsls	r2, r3, #31
 8005b90:	d405      	bmi.n	8005b9e <_puts_r+0x4e>
 8005b92:	89a3      	ldrh	r3, [r4, #12]
 8005b94:	059b      	lsls	r3, r3, #22
 8005b96:	d402      	bmi.n	8005b9e <_puts_r+0x4e>
 8005b98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005b9a:	f000 fa41 	bl	8006020 <__retarget_lock_release_recursive>
 8005b9e:	4628      	mov	r0, r5
 8005ba0:	bd70      	pop	{r4, r5, r6, pc}
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	da04      	bge.n	8005bb0 <_puts_r+0x60>
 8005ba6:	69a2      	ldr	r2, [r4, #24]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	dc17      	bgt.n	8005bdc <_puts_r+0x8c>
 8005bac:	290a      	cmp	r1, #10
 8005bae:	d015      	beq.n	8005bdc <_puts_r+0x8c>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	6022      	str	r2, [r4, #0]
 8005bb6:	7019      	strb	r1, [r3, #0]
 8005bb8:	68a3      	ldr	r3, [r4, #8]
 8005bba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	60a3      	str	r3, [r4, #8]
 8005bc2:	2900      	cmp	r1, #0
 8005bc4:	d1ed      	bne.n	8005ba2 <_puts_r+0x52>
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	da11      	bge.n	8005bee <_puts_r+0x9e>
 8005bca:	4622      	mov	r2, r4
 8005bcc:	210a      	movs	r1, #10
 8005bce:	4628      	mov	r0, r5
 8005bd0:	f000 f881 	bl	8005cd6 <__swbuf_r>
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d0d7      	beq.n	8005b88 <_puts_r+0x38>
 8005bd8:	250a      	movs	r5, #10
 8005bda:	e7d7      	b.n	8005b8c <_puts_r+0x3c>
 8005bdc:	4622      	mov	r2, r4
 8005bde:	4628      	mov	r0, r5
 8005be0:	f000 f879 	bl	8005cd6 <__swbuf_r>
 8005be4:	3001      	adds	r0, #1
 8005be6:	d1e7      	bne.n	8005bb8 <_puts_r+0x68>
 8005be8:	e7ce      	b.n	8005b88 <_puts_r+0x38>
 8005bea:	3e01      	subs	r6, #1
 8005bec:	e7e4      	b.n	8005bb8 <_puts_r+0x68>
 8005bee:	6823      	ldr	r3, [r4, #0]
 8005bf0:	1c5a      	adds	r2, r3, #1
 8005bf2:	6022      	str	r2, [r4, #0]
 8005bf4:	220a      	movs	r2, #10
 8005bf6:	701a      	strb	r2, [r3, #0]
 8005bf8:	e7ee      	b.n	8005bd8 <_puts_r+0x88>
	...

08005bfc <puts>:
 8005bfc:	4b02      	ldr	r3, [pc, #8]	@ (8005c08 <puts+0xc>)
 8005bfe:	4601      	mov	r1, r0
 8005c00:	6818      	ldr	r0, [r3, #0]
 8005c02:	f7ff bfa5 	b.w	8005b50 <_puts_r>
 8005c06:	bf00      	nop
 8005c08:	2000001c 	.word	0x2000001c

08005c0c <siprintf>:
 8005c0c:	b40e      	push	{r1, r2, r3}
 8005c0e:	b510      	push	{r4, lr}
 8005c10:	b09d      	sub	sp, #116	@ 0x74
 8005c12:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005c14:	9002      	str	r0, [sp, #8]
 8005c16:	9006      	str	r0, [sp, #24]
 8005c18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005c1c:	480a      	ldr	r0, [pc, #40]	@ (8005c48 <siprintf+0x3c>)
 8005c1e:	9107      	str	r1, [sp, #28]
 8005c20:	9104      	str	r1, [sp, #16]
 8005c22:	490a      	ldr	r1, [pc, #40]	@ (8005c4c <siprintf+0x40>)
 8005c24:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c28:	9105      	str	r1, [sp, #20]
 8005c2a:	2400      	movs	r4, #0
 8005c2c:	a902      	add	r1, sp, #8
 8005c2e:	6800      	ldr	r0, [r0, #0]
 8005c30:	9301      	str	r3, [sp, #4]
 8005c32:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005c34:	f002 fd12 	bl	800865c <_svfiprintf_r>
 8005c38:	9b02      	ldr	r3, [sp, #8]
 8005c3a:	701c      	strb	r4, [r3, #0]
 8005c3c:	b01d      	add	sp, #116	@ 0x74
 8005c3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c42:	b003      	add	sp, #12
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	2000001c 	.word	0x2000001c
 8005c4c:	ffff0208 	.word	0xffff0208

08005c50 <__sread>:
 8005c50:	b510      	push	{r4, lr}
 8005c52:	460c      	mov	r4, r1
 8005c54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c58:	f000 f992 	bl	8005f80 <_read_r>
 8005c5c:	2800      	cmp	r0, #0
 8005c5e:	bfab      	itete	ge
 8005c60:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005c62:	89a3      	ldrhlt	r3, [r4, #12]
 8005c64:	181b      	addge	r3, r3, r0
 8005c66:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005c6a:	bfac      	ite	ge
 8005c6c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005c6e:	81a3      	strhlt	r3, [r4, #12]
 8005c70:	bd10      	pop	{r4, pc}

08005c72 <__swrite>:
 8005c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c76:	461f      	mov	r7, r3
 8005c78:	898b      	ldrh	r3, [r1, #12]
 8005c7a:	05db      	lsls	r3, r3, #23
 8005c7c:	4605      	mov	r5, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	4616      	mov	r6, r2
 8005c82:	d505      	bpl.n	8005c90 <__swrite+0x1e>
 8005c84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c88:	2302      	movs	r3, #2
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f000 f966 	bl	8005f5c <_lseek_r>
 8005c90:	89a3      	ldrh	r3, [r4, #12]
 8005c92:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c96:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c9a:	81a3      	strh	r3, [r4, #12]
 8005c9c:	4632      	mov	r2, r6
 8005c9e:	463b      	mov	r3, r7
 8005ca0:	4628      	mov	r0, r5
 8005ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca6:	f000 b97d 	b.w	8005fa4 <_write_r>

08005caa <__sseek>:
 8005caa:	b510      	push	{r4, lr}
 8005cac:	460c      	mov	r4, r1
 8005cae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cb2:	f000 f953 	bl	8005f5c <_lseek_r>
 8005cb6:	1c43      	adds	r3, r0, #1
 8005cb8:	89a3      	ldrh	r3, [r4, #12]
 8005cba:	bf15      	itete	ne
 8005cbc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005cbe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005cc2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005cc6:	81a3      	strheq	r3, [r4, #12]
 8005cc8:	bf18      	it	ne
 8005cca:	81a3      	strhne	r3, [r4, #12]
 8005ccc:	bd10      	pop	{r4, pc}

08005cce <__sclose>:
 8005cce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cd2:	f000 b933 	b.w	8005f3c <_close_r>

08005cd6 <__swbuf_r>:
 8005cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd8:	460e      	mov	r6, r1
 8005cda:	4614      	mov	r4, r2
 8005cdc:	4605      	mov	r5, r0
 8005cde:	b118      	cbz	r0, 8005ce8 <__swbuf_r+0x12>
 8005ce0:	6a03      	ldr	r3, [r0, #32]
 8005ce2:	b90b      	cbnz	r3, 8005ce8 <__swbuf_r+0x12>
 8005ce4:	f7ff fee4 	bl	8005ab0 <__sinit>
 8005ce8:	69a3      	ldr	r3, [r4, #24]
 8005cea:	60a3      	str	r3, [r4, #8]
 8005cec:	89a3      	ldrh	r3, [r4, #12]
 8005cee:	071a      	lsls	r2, r3, #28
 8005cf0:	d501      	bpl.n	8005cf6 <__swbuf_r+0x20>
 8005cf2:	6923      	ldr	r3, [r4, #16]
 8005cf4:	b943      	cbnz	r3, 8005d08 <__swbuf_r+0x32>
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	f000 f82b 	bl	8005d54 <__swsetup_r>
 8005cfe:	b118      	cbz	r0, 8005d08 <__swbuf_r+0x32>
 8005d00:	f04f 37ff 	mov.w	r7, #4294967295
 8005d04:	4638      	mov	r0, r7
 8005d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	6922      	ldr	r2, [r4, #16]
 8005d0c:	1a98      	subs	r0, r3, r2
 8005d0e:	6963      	ldr	r3, [r4, #20]
 8005d10:	b2f6      	uxtb	r6, r6
 8005d12:	4283      	cmp	r3, r0
 8005d14:	4637      	mov	r7, r6
 8005d16:	dc05      	bgt.n	8005d24 <__swbuf_r+0x4e>
 8005d18:	4621      	mov	r1, r4
 8005d1a:	4628      	mov	r0, r5
 8005d1c:	f002 ff60 	bl	8008be0 <_fflush_r>
 8005d20:	2800      	cmp	r0, #0
 8005d22:	d1ed      	bne.n	8005d00 <__swbuf_r+0x2a>
 8005d24:	68a3      	ldr	r3, [r4, #8]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	60a3      	str	r3, [r4, #8]
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	6022      	str	r2, [r4, #0]
 8005d30:	701e      	strb	r6, [r3, #0]
 8005d32:	6962      	ldr	r2, [r4, #20]
 8005d34:	1c43      	adds	r3, r0, #1
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d004      	beq.n	8005d44 <__swbuf_r+0x6e>
 8005d3a:	89a3      	ldrh	r3, [r4, #12]
 8005d3c:	07db      	lsls	r3, r3, #31
 8005d3e:	d5e1      	bpl.n	8005d04 <__swbuf_r+0x2e>
 8005d40:	2e0a      	cmp	r6, #10
 8005d42:	d1df      	bne.n	8005d04 <__swbuf_r+0x2e>
 8005d44:	4621      	mov	r1, r4
 8005d46:	4628      	mov	r0, r5
 8005d48:	f002 ff4a 	bl	8008be0 <_fflush_r>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d0d9      	beq.n	8005d04 <__swbuf_r+0x2e>
 8005d50:	e7d6      	b.n	8005d00 <__swbuf_r+0x2a>
	...

08005d54 <__swsetup_r>:
 8005d54:	b538      	push	{r3, r4, r5, lr}
 8005d56:	4b29      	ldr	r3, [pc, #164]	@ (8005dfc <__swsetup_r+0xa8>)
 8005d58:	4605      	mov	r5, r0
 8005d5a:	6818      	ldr	r0, [r3, #0]
 8005d5c:	460c      	mov	r4, r1
 8005d5e:	b118      	cbz	r0, 8005d68 <__swsetup_r+0x14>
 8005d60:	6a03      	ldr	r3, [r0, #32]
 8005d62:	b90b      	cbnz	r3, 8005d68 <__swsetup_r+0x14>
 8005d64:	f7ff fea4 	bl	8005ab0 <__sinit>
 8005d68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d6c:	0719      	lsls	r1, r3, #28
 8005d6e:	d422      	bmi.n	8005db6 <__swsetup_r+0x62>
 8005d70:	06da      	lsls	r2, r3, #27
 8005d72:	d407      	bmi.n	8005d84 <__swsetup_r+0x30>
 8005d74:	2209      	movs	r2, #9
 8005d76:	602a      	str	r2, [r5, #0]
 8005d78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d7c:	81a3      	strh	r3, [r4, #12]
 8005d7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d82:	e033      	b.n	8005dec <__swsetup_r+0x98>
 8005d84:	0758      	lsls	r0, r3, #29
 8005d86:	d512      	bpl.n	8005dae <__swsetup_r+0x5a>
 8005d88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d8a:	b141      	cbz	r1, 8005d9e <__swsetup_r+0x4a>
 8005d8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d90:	4299      	cmp	r1, r3
 8005d92:	d002      	beq.n	8005d9a <__swsetup_r+0x46>
 8005d94:	4628      	mov	r0, r5
 8005d96:	f000 ffd7 	bl	8006d48 <_free_r>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d9e:	89a3      	ldrh	r3, [r4, #12]
 8005da0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005da4:	81a3      	strh	r3, [r4, #12]
 8005da6:	2300      	movs	r3, #0
 8005da8:	6063      	str	r3, [r4, #4]
 8005daa:	6923      	ldr	r3, [r4, #16]
 8005dac:	6023      	str	r3, [r4, #0]
 8005dae:	89a3      	ldrh	r3, [r4, #12]
 8005db0:	f043 0308 	orr.w	r3, r3, #8
 8005db4:	81a3      	strh	r3, [r4, #12]
 8005db6:	6923      	ldr	r3, [r4, #16]
 8005db8:	b94b      	cbnz	r3, 8005dce <__swsetup_r+0x7a>
 8005dba:	89a3      	ldrh	r3, [r4, #12]
 8005dbc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005dc0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005dc4:	d003      	beq.n	8005dce <__swsetup_r+0x7a>
 8005dc6:	4621      	mov	r1, r4
 8005dc8:	4628      	mov	r0, r5
 8005dca:	f002 ff69 	bl	8008ca0 <__smakebuf_r>
 8005dce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dd2:	f013 0201 	ands.w	r2, r3, #1
 8005dd6:	d00a      	beq.n	8005dee <__swsetup_r+0x9a>
 8005dd8:	2200      	movs	r2, #0
 8005dda:	60a2      	str	r2, [r4, #8]
 8005ddc:	6962      	ldr	r2, [r4, #20]
 8005dde:	4252      	negs	r2, r2
 8005de0:	61a2      	str	r2, [r4, #24]
 8005de2:	6922      	ldr	r2, [r4, #16]
 8005de4:	b942      	cbnz	r2, 8005df8 <__swsetup_r+0xa4>
 8005de6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005dea:	d1c5      	bne.n	8005d78 <__swsetup_r+0x24>
 8005dec:	bd38      	pop	{r3, r4, r5, pc}
 8005dee:	0799      	lsls	r1, r3, #30
 8005df0:	bf58      	it	pl
 8005df2:	6962      	ldrpl	r2, [r4, #20]
 8005df4:	60a2      	str	r2, [r4, #8]
 8005df6:	e7f4      	b.n	8005de2 <__swsetup_r+0x8e>
 8005df8:	2000      	movs	r0, #0
 8005dfa:	e7f7      	b.n	8005dec <__swsetup_r+0x98>
 8005dfc:	2000001c 	.word	0x2000001c

08005e00 <memset>:
 8005e00:	4402      	add	r2, r0
 8005e02:	4603      	mov	r3, r0
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d100      	bne.n	8005e0a <memset+0xa>
 8005e08:	4770      	bx	lr
 8005e0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005e0e:	e7f9      	b.n	8005e04 <memset+0x4>

08005e10 <strchr>:
 8005e10:	b2c9      	uxtb	r1, r1
 8005e12:	4603      	mov	r3, r0
 8005e14:	4618      	mov	r0, r3
 8005e16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e1a:	b112      	cbz	r2, 8005e22 <strchr+0x12>
 8005e1c:	428a      	cmp	r2, r1
 8005e1e:	d1f9      	bne.n	8005e14 <strchr+0x4>
 8005e20:	4770      	bx	lr
 8005e22:	2900      	cmp	r1, #0
 8005e24:	bf18      	it	ne
 8005e26:	2000      	movne	r0, #0
 8005e28:	4770      	bx	lr

08005e2a <strncmp>:
 8005e2a:	b510      	push	{r4, lr}
 8005e2c:	b16a      	cbz	r2, 8005e4a <strncmp+0x20>
 8005e2e:	3901      	subs	r1, #1
 8005e30:	1884      	adds	r4, r0, r2
 8005e32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e36:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d103      	bne.n	8005e46 <strncmp+0x1c>
 8005e3e:	42a0      	cmp	r0, r4
 8005e40:	d001      	beq.n	8005e46 <strncmp+0x1c>
 8005e42:	2a00      	cmp	r2, #0
 8005e44:	d1f5      	bne.n	8005e32 <strncmp+0x8>
 8005e46:	1ad0      	subs	r0, r2, r3
 8005e48:	bd10      	pop	{r4, pc}
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	e7fc      	b.n	8005e48 <strncmp+0x1e>
	...

08005e50 <strtok>:
 8005e50:	4b16      	ldr	r3, [pc, #88]	@ (8005eac <strtok+0x5c>)
 8005e52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e56:	681f      	ldr	r7, [r3, #0]
 8005e58:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8005e5a:	4605      	mov	r5, r0
 8005e5c:	460e      	mov	r6, r1
 8005e5e:	b9ec      	cbnz	r4, 8005e9c <strtok+0x4c>
 8005e60:	2050      	movs	r0, #80	@ 0x50
 8005e62:	f000 ffbb 	bl	8006ddc <malloc>
 8005e66:	4602      	mov	r2, r0
 8005e68:	6478      	str	r0, [r7, #68]	@ 0x44
 8005e6a:	b920      	cbnz	r0, 8005e76 <strtok+0x26>
 8005e6c:	4b10      	ldr	r3, [pc, #64]	@ (8005eb0 <strtok+0x60>)
 8005e6e:	4811      	ldr	r0, [pc, #68]	@ (8005eb4 <strtok+0x64>)
 8005e70:	215b      	movs	r1, #91	@ 0x5b
 8005e72:	f000 f8f3 	bl	800605c <__assert_func>
 8005e76:	e9c0 4400 	strd	r4, r4, [r0]
 8005e7a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005e7e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005e82:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8005e86:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8005e8a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8005e8e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8005e92:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8005e96:	6184      	str	r4, [r0, #24]
 8005e98:	7704      	strb	r4, [r0, #28]
 8005e9a:	6244      	str	r4, [r0, #36]	@ 0x24
 8005e9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea8:	f000 b806 	b.w	8005eb8 <__strtok_r>
 8005eac:	2000001c 	.word	0x2000001c
 8005eb0:	08009991 	.word	0x08009991
 8005eb4:	080099a8 	.word	0x080099a8

08005eb8 <__strtok_r>:
 8005eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005eba:	4604      	mov	r4, r0
 8005ebc:	b908      	cbnz	r0, 8005ec2 <__strtok_r+0xa>
 8005ebe:	6814      	ldr	r4, [r2, #0]
 8005ec0:	b144      	cbz	r4, 8005ed4 <__strtok_r+0x1c>
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005ec8:	460f      	mov	r7, r1
 8005eca:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005ece:	b91e      	cbnz	r6, 8005ed8 <__strtok_r+0x20>
 8005ed0:	b965      	cbnz	r5, 8005eec <__strtok_r+0x34>
 8005ed2:	6015      	str	r5, [r2, #0]
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	e005      	b.n	8005ee4 <__strtok_r+0x2c>
 8005ed8:	42b5      	cmp	r5, r6
 8005eda:	d1f6      	bne.n	8005eca <__strtok_r+0x12>
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1f0      	bne.n	8005ec2 <__strtok_r+0xa>
 8005ee0:	6014      	str	r4, [r2, #0]
 8005ee2:	7003      	strb	r3, [r0, #0]
 8005ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ee6:	461c      	mov	r4, r3
 8005ee8:	e00c      	b.n	8005f04 <__strtok_r+0x4c>
 8005eea:	b91d      	cbnz	r5, 8005ef4 <__strtok_r+0x3c>
 8005eec:	4627      	mov	r7, r4
 8005eee:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005ef2:	460e      	mov	r6, r1
 8005ef4:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005ef8:	42ab      	cmp	r3, r5
 8005efa:	d1f6      	bne.n	8005eea <__strtok_r+0x32>
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0f2      	beq.n	8005ee6 <__strtok_r+0x2e>
 8005f00:	2300      	movs	r3, #0
 8005f02:	703b      	strb	r3, [r7, #0]
 8005f04:	6014      	str	r4, [r2, #0]
 8005f06:	e7ed      	b.n	8005ee4 <__strtok_r+0x2c>

08005f08 <strstr>:
 8005f08:	780a      	ldrb	r2, [r1, #0]
 8005f0a:	b570      	push	{r4, r5, r6, lr}
 8005f0c:	b96a      	cbnz	r2, 8005f2a <strstr+0x22>
 8005f0e:	bd70      	pop	{r4, r5, r6, pc}
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d109      	bne.n	8005f28 <strstr+0x20>
 8005f14:	460c      	mov	r4, r1
 8005f16:	4605      	mov	r5, r0
 8005f18:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d0f6      	beq.n	8005f0e <strstr+0x6>
 8005f20:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8005f24:	429e      	cmp	r6, r3
 8005f26:	d0f7      	beq.n	8005f18 <strstr+0x10>
 8005f28:	3001      	adds	r0, #1
 8005f2a:	7803      	ldrb	r3, [r0, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d1ef      	bne.n	8005f10 <strstr+0x8>
 8005f30:	4618      	mov	r0, r3
 8005f32:	e7ec      	b.n	8005f0e <strstr+0x6>

08005f34 <_localeconv_r>:
 8005f34:	4800      	ldr	r0, [pc, #0]	@ (8005f38 <_localeconv_r+0x4>)
 8005f36:	4770      	bx	lr
 8005f38:	2000015c 	.word	0x2000015c

08005f3c <_close_r>:
 8005f3c:	b538      	push	{r3, r4, r5, lr}
 8005f3e:	4d06      	ldr	r5, [pc, #24]	@ (8005f58 <_close_r+0x1c>)
 8005f40:	2300      	movs	r3, #0
 8005f42:	4604      	mov	r4, r0
 8005f44:	4608      	mov	r0, r1
 8005f46:	602b      	str	r3, [r5, #0]
 8005f48:	f7fc f874 	bl	8002034 <_close>
 8005f4c:	1c43      	adds	r3, r0, #1
 8005f4e:	d102      	bne.n	8005f56 <_close_r+0x1a>
 8005f50:	682b      	ldr	r3, [r5, #0]
 8005f52:	b103      	cbz	r3, 8005f56 <_close_r+0x1a>
 8005f54:	6023      	str	r3, [r4, #0]
 8005f56:	bd38      	pop	{r3, r4, r5, pc}
 8005f58:	20000d00 	.word	0x20000d00

08005f5c <_lseek_r>:
 8005f5c:	b538      	push	{r3, r4, r5, lr}
 8005f5e:	4d07      	ldr	r5, [pc, #28]	@ (8005f7c <_lseek_r+0x20>)
 8005f60:	4604      	mov	r4, r0
 8005f62:	4608      	mov	r0, r1
 8005f64:	4611      	mov	r1, r2
 8005f66:	2200      	movs	r2, #0
 8005f68:	602a      	str	r2, [r5, #0]
 8005f6a:	461a      	mov	r2, r3
 8005f6c:	f7fc f889 	bl	8002082 <_lseek>
 8005f70:	1c43      	adds	r3, r0, #1
 8005f72:	d102      	bne.n	8005f7a <_lseek_r+0x1e>
 8005f74:	682b      	ldr	r3, [r5, #0]
 8005f76:	b103      	cbz	r3, 8005f7a <_lseek_r+0x1e>
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	bd38      	pop	{r3, r4, r5, pc}
 8005f7c:	20000d00 	.word	0x20000d00

08005f80 <_read_r>:
 8005f80:	b538      	push	{r3, r4, r5, lr}
 8005f82:	4d07      	ldr	r5, [pc, #28]	@ (8005fa0 <_read_r+0x20>)
 8005f84:	4604      	mov	r4, r0
 8005f86:	4608      	mov	r0, r1
 8005f88:	4611      	mov	r1, r2
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	602a      	str	r2, [r5, #0]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	f7fc f817 	bl	8001fc2 <_read>
 8005f94:	1c43      	adds	r3, r0, #1
 8005f96:	d102      	bne.n	8005f9e <_read_r+0x1e>
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	b103      	cbz	r3, 8005f9e <_read_r+0x1e>
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	bd38      	pop	{r3, r4, r5, pc}
 8005fa0:	20000d00 	.word	0x20000d00

08005fa4 <_write_r>:
 8005fa4:	b538      	push	{r3, r4, r5, lr}
 8005fa6:	4d07      	ldr	r5, [pc, #28]	@ (8005fc4 <_write_r+0x20>)
 8005fa8:	4604      	mov	r4, r0
 8005faa:	4608      	mov	r0, r1
 8005fac:	4611      	mov	r1, r2
 8005fae:	2200      	movs	r2, #0
 8005fb0:	602a      	str	r2, [r5, #0]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f7fc f822 	bl	8001ffc <_write>
 8005fb8:	1c43      	adds	r3, r0, #1
 8005fba:	d102      	bne.n	8005fc2 <_write_r+0x1e>
 8005fbc:	682b      	ldr	r3, [r5, #0]
 8005fbe:	b103      	cbz	r3, 8005fc2 <_write_r+0x1e>
 8005fc0:	6023      	str	r3, [r4, #0]
 8005fc2:	bd38      	pop	{r3, r4, r5, pc}
 8005fc4:	20000d00 	.word	0x20000d00

08005fc8 <__errno>:
 8005fc8:	4b01      	ldr	r3, [pc, #4]	@ (8005fd0 <__errno+0x8>)
 8005fca:	6818      	ldr	r0, [r3, #0]
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	2000001c 	.word	0x2000001c

08005fd4 <__libc_init_array>:
 8005fd4:	b570      	push	{r4, r5, r6, lr}
 8005fd6:	4d0d      	ldr	r5, [pc, #52]	@ (800600c <__libc_init_array+0x38>)
 8005fd8:	4c0d      	ldr	r4, [pc, #52]	@ (8006010 <__libc_init_array+0x3c>)
 8005fda:	1b64      	subs	r4, r4, r5
 8005fdc:	10a4      	asrs	r4, r4, #2
 8005fde:	2600      	movs	r6, #0
 8005fe0:	42a6      	cmp	r6, r4
 8005fe2:	d109      	bne.n	8005ff8 <__libc_init_array+0x24>
 8005fe4:	4d0b      	ldr	r5, [pc, #44]	@ (8006014 <__libc_init_array+0x40>)
 8005fe6:	4c0c      	ldr	r4, [pc, #48]	@ (8006018 <__libc_init_array+0x44>)
 8005fe8:	f003 fb0a 	bl	8009600 <_init>
 8005fec:	1b64      	subs	r4, r4, r5
 8005fee:	10a4      	asrs	r4, r4, #2
 8005ff0:	2600      	movs	r6, #0
 8005ff2:	42a6      	cmp	r6, r4
 8005ff4:	d105      	bne.n	8006002 <__libc_init_array+0x2e>
 8005ff6:	bd70      	pop	{r4, r5, r6, pc}
 8005ff8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ffc:	4798      	blx	r3
 8005ffe:	3601      	adds	r6, #1
 8006000:	e7ee      	b.n	8005fe0 <__libc_init_array+0xc>
 8006002:	f855 3b04 	ldr.w	r3, [r5], #4
 8006006:	4798      	blx	r3
 8006008:	3601      	adds	r6, #1
 800600a:	e7f2      	b.n	8005ff2 <__libc_init_array+0x1e>
 800600c:	08009de4 	.word	0x08009de4
 8006010:	08009de4 	.word	0x08009de4
 8006014:	08009de4 	.word	0x08009de4
 8006018:	08009de8 	.word	0x08009de8

0800601c <__retarget_lock_init_recursive>:
 800601c:	4770      	bx	lr

0800601e <__retarget_lock_acquire_recursive>:
 800601e:	4770      	bx	lr

08006020 <__retarget_lock_release_recursive>:
 8006020:	4770      	bx	lr

08006022 <strcpy>:
 8006022:	4603      	mov	r3, r0
 8006024:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006028:	f803 2b01 	strb.w	r2, [r3], #1
 800602c:	2a00      	cmp	r2, #0
 800602e:	d1f9      	bne.n	8006024 <strcpy+0x2>
 8006030:	4770      	bx	lr

08006032 <memcpy>:
 8006032:	440a      	add	r2, r1
 8006034:	4291      	cmp	r1, r2
 8006036:	f100 33ff 	add.w	r3, r0, #4294967295
 800603a:	d100      	bne.n	800603e <memcpy+0xc>
 800603c:	4770      	bx	lr
 800603e:	b510      	push	{r4, lr}
 8006040:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006044:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006048:	4291      	cmp	r1, r2
 800604a:	d1f9      	bne.n	8006040 <memcpy+0xe>
 800604c:	bd10      	pop	{r4, pc}
	...

08006050 <nanf>:
 8006050:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006058 <nanf+0x8>
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	7fc00000 	.word	0x7fc00000

0800605c <__assert_func>:
 800605c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800605e:	4614      	mov	r4, r2
 8006060:	461a      	mov	r2, r3
 8006062:	4b09      	ldr	r3, [pc, #36]	@ (8006088 <__assert_func+0x2c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4605      	mov	r5, r0
 8006068:	68d8      	ldr	r0, [r3, #12]
 800606a:	b14c      	cbz	r4, 8006080 <__assert_func+0x24>
 800606c:	4b07      	ldr	r3, [pc, #28]	@ (800608c <__assert_func+0x30>)
 800606e:	9100      	str	r1, [sp, #0]
 8006070:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006074:	4906      	ldr	r1, [pc, #24]	@ (8006090 <__assert_func+0x34>)
 8006076:	462b      	mov	r3, r5
 8006078:	f002 fdda 	bl	8008c30 <fiprintf>
 800607c:	f002 fed4 	bl	8008e28 <abort>
 8006080:	4b04      	ldr	r3, [pc, #16]	@ (8006094 <__assert_func+0x38>)
 8006082:	461c      	mov	r4, r3
 8006084:	e7f3      	b.n	800606e <__assert_func+0x12>
 8006086:	bf00      	nop
 8006088:	2000001c 	.word	0x2000001c
 800608c:	08009a02 	.word	0x08009a02
 8006090:	08009a0f 	.word	0x08009a0f
 8006094:	08009a3d 	.word	0x08009a3d

08006098 <quorem>:
 8006098:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609c:	6903      	ldr	r3, [r0, #16]
 800609e:	690c      	ldr	r4, [r1, #16]
 80060a0:	42a3      	cmp	r3, r4
 80060a2:	4607      	mov	r7, r0
 80060a4:	db7e      	blt.n	80061a4 <quorem+0x10c>
 80060a6:	3c01      	subs	r4, #1
 80060a8:	f101 0814 	add.w	r8, r1, #20
 80060ac:	00a3      	lsls	r3, r4, #2
 80060ae:	f100 0514 	add.w	r5, r0, #20
 80060b2:	9300      	str	r3, [sp, #0]
 80060b4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060b8:	9301      	str	r3, [sp, #4]
 80060ba:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80060be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060c2:	3301      	adds	r3, #1
 80060c4:	429a      	cmp	r2, r3
 80060c6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80060ca:	fbb2 f6f3 	udiv	r6, r2, r3
 80060ce:	d32e      	bcc.n	800612e <quorem+0x96>
 80060d0:	f04f 0a00 	mov.w	sl, #0
 80060d4:	46c4      	mov	ip, r8
 80060d6:	46ae      	mov	lr, r5
 80060d8:	46d3      	mov	fp, sl
 80060da:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060de:	b298      	uxth	r0, r3
 80060e0:	fb06 a000 	mla	r0, r6, r0, sl
 80060e4:	0c02      	lsrs	r2, r0, #16
 80060e6:	0c1b      	lsrs	r3, r3, #16
 80060e8:	fb06 2303 	mla	r3, r6, r3, r2
 80060ec:	f8de 2000 	ldr.w	r2, [lr]
 80060f0:	b280      	uxth	r0, r0
 80060f2:	b292      	uxth	r2, r2
 80060f4:	1a12      	subs	r2, r2, r0
 80060f6:	445a      	add	r2, fp
 80060f8:	f8de 0000 	ldr.w	r0, [lr]
 80060fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006100:	b29b      	uxth	r3, r3
 8006102:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006106:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800610a:	b292      	uxth	r2, r2
 800610c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006110:	45e1      	cmp	r9, ip
 8006112:	f84e 2b04 	str.w	r2, [lr], #4
 8006116:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800611a:	d2de      	bcs.n	80060da <quorem+0x42>
 800611c:	9b00      	ldr	r3, [sp, #0]
 800611e:	58eb      	ldr	r3, [r5, r3]
 8006120:	b92b      	cbnz	r3, 800612e <quorem+0x96>
 8006122:	9b01      	ldr	r3, [sp, #4]
 8006124:	3b04      	subs	r3, #4
 8006126:	429d      	cmp	r5, r3
 8006128:	461a      	mov	r2, r3
 800612a:	d32f      	bcc.n	800618c <quorem+0xf4>
 800612c:	613c      	str	r4, [r7, #16]
 800612e:	4638      	mov	r0, r7
 8006130:	f001 f9c6 	bl	80074c0 <__mcmp>
 8006134:	2800      	cmp	r0, #0
 8006136:	db25      	blt.n	8006184 <quorem+0xec>
 8006138:	4629      	mov	r1, r5
 800613a:	2000      	movs	r0, #0
 800613c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006140:	f8d1 c000 	ldr.w	ip, [r1]
 8006144:	fa1f fe82 	uxth.w	lr, r2
 8006148:	fa1f f38c 	uxth.w	r3, ip
 800614c:	eba3 030e 	sub.w	r3, r3, lr
 8006150:	4403      	add	r3, r0
 8006152:	0c12      	lsrs	r2, r2, #16
 8006154:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006158:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800615c:	b29b      	uxth	r3, r3
 800615e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006162:	45c1      	cmp	r9, r8
 8006164:	f841 3b04 	str.w	r3, [r1], #4
 8006168:	ea4f 4022 	mov.w	r0, r2, asr #16
 800616c:	d2e6      	bcs.n	800613c <quorem+0xa4>
 800616e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006172:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006176:	b922      	cbnz	r2, 8006182 <quorem+0xea>
 8006178:	3b04      	subs	r3, #4
 800617a:	429d      	cmp	r5, r3
 800617c:	461a      	mov	r2, r3
 800617e:	d30b      	bcc.n	8006198 <quorem+0x100>
 8006180:	613c      	str	r4, [r7, #16]
 8006182:	3601      	adds	r6, #1
 8006184:	4630      	mov	r0, r6
 8006186:	b003      	add	sp, #12
 8006188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800618c:	6812      	ldr	r2, [r2, #0]
 800618e:	3b04      	subs	r3, #4
 8006190:	2a00      	cmp	r2, #0
 8006192:	d1cb      	bne.n	800612c <quorem+0x94>
 8006194:	3c01      	subs	r4, #1
 8006196:	e7c6      	b.n	8006126 <quorem+0x8e>
 8006198:	6812      	ldr	r2, [r2, #0]
 800619a:	3b04      	subs	r3, #4
 800619c:	2a00      	cmp	r2, #0
 800619e:	d1ef      	bne.n	8006180 <quorem+0xe8>
 80061a0:	3c01      	subs	r4, #1
 80061a2:	e7ea      	b.n	800617a <quorem+0xe2>
 80061a4:	2000      	movs	r0, #0
 80061a6:	e7ee      	b.n	8006186 <quorem+0xee>

080061a8 <_dtoa_r>:
 80061a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061ac:	69c7      	ldr	r7, [r0, #28]
 80061ae:	b097      	sub	sp, #92	@ 0x5c
 80061b0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80061b4:	ec55 4b10 	vmov	r4, r5, d0
 80061b8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80061ba:	9107      	str	r1, [sp, #28]
 80061bc:	4681      	mov	r9, r0
 80061be:	920c      	str	r2, [sp, #48]	@ 0x30
 80061c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80061c2:	b97f      	cbnz	r7, 80061e4 <_dtoa_r+0x3c>
 80061c4:	2010      	movs	r0, #16
 80061c6:	f000 fe09 	bl	8006ddc <malloc>
 80061ca:	4602      	mov	r2, r0
 80061cc:	f8c9 001c 	str.w	r0, [r9, #28]
 80061d0:	b920      	cbnz	r0, 80061dc <_dtoa_r+0x34>
 80061d2:	4ba9      	ldr	r3, [pc, #676]	@ (8006478 <_dtoa_r+0x2d0>)
 80061d4:	21ef      	movs	r1, #239	@ 0xef
 80061d6:	48a9      	ldr	r0, [pc, #676]	@ (800647c <_dtoa_r+0x2d4>)
 80061d8:	f7ff ff40 	bl	800605c <__assert_func>
 80061dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80061e0:	6007      	str	r7, [r0, #0]
 80061e2:	60c7      	str	r7, [r0, #12]
 80061e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80061e8:	6819      	ldr	r1, [r3, #0]
 80061ea:	b159      	cbz	r1, 8006204 <_dtoa_r+0x5c>
 80061ec:	685a      	ldr	r2, [r3, #4]
 80061ee:	604a      	str	r2, [r1, #4]
 80061f0:	2301      	movs	r3, #1
 80061f2:	4093      	lsls	r3, r2
 80061f4:	608b      	str	r3, [r1, #8]
 80061f6:	4648      	mov	r0, r9
 80061f8:	f000 fee6 	bl	8006fc8 <_Bfree>
 80061fc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006200:	2200      	movs	r2, #0
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	1e2b      	subs	r3, r5, #0
 8006206:	bfb9      	ittee	lt
 8006208:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800620c:	9305      	strlt	r3, [sp, #20]
 800620e:	2300      	movge	r3, #0
 8006210:	6033      	strge	r3, [r6, #0]
 8006212:	9f05      	ldr	r7, [sp, #20]
 8006214:	4b9a      	ldr	r3, [pc, #616]	@ (8006480 <_dtoa_r+0x2d8>)
 8006216:	bfbc      	itt	lt
 8006218:	2201      	movlt	r2, #1
 800621a:	6032      	strlt	r2, [r6, #0]
 800621c:	43bb      	bics	r3, r7
 800621e:	d112      	bne.n	8006246 <_dtoa_r+0x9e>
 8006220:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006222:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006226:	6013      	str	r3, [r2, #0]
 8006228:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800622c:	4323      	orrs	r3, r4
 800622e:	f000 855a 	beq.w	8006ce6 <_dtoa_r+0xb3e>
 8006232:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006234:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006494 <_dtoa_r+0x2ec>
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 855c 	beq.w	8006cf6 <_dtoa_r+0xb4e>
 800623e:	f10a 0303 	add.w	r3, sl, #3
 8006242:	f000 bd56 	b.w	8006cf2 <_dtoa_r+0xb4a>
 8006246:	ed9d 7b04 	vldr	d7, [sp, #16]
 800624a:	2200      	movs	r2, #0
 800624c:	ec51 0b17 	vmov	r0, r1, d7
 8006250:	2300      	movs	r3, #0
 8006252:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006256:	f7fa fc4f 	bl	8000af8 <__aeabi_dcmpeq>
 800625a:	4680      	mov	r8, r0
 800625c:	b158      	cbz	r0, 8006276 <_dtoa_r+0xce>
 800625e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006260:	2301      	movs	r3, #1
 8006262:	6013      	str	r3, [r2, #0]
 8006264:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006266:	b113      	cbz	r3, 800626e <_dtoa_r+0xc6>
 8006268:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800626a:	4b86      	ldr	r3, [pc, #536]	@ (8006484 <_dtoa_r+0x2dc>)
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006498 <_dtoa_r+0x2f0>
 8006272:	f000 bd40 	b.w	8006cf6 <_dtoa_r+0xb4e>
 8006276:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800627a:	aa14      	add	r2, sp, #80	@ 0x50
 800627c:	a915      	add	r1, sp, #84	@ 0x54
 800627e:	4648      	mov	r0, r9
 8006280:	f001 fa3e 	bl	8007700 <__d2b>
 8006284:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006288:	9002      	str	r0, [sp, #8]
 800628a:	2e00      	cmp	r6, #0
 800628c:	d078      	beq.n	8006380 <_dtoa_r+0x1d8>
 800628e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006290:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006298:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800629c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80062a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80062a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80062a8:	4619      	mov	r1, r3
 80062aa:	2200      	movs	r2, #0
 80062ac:	4b76      	ldr	r3, [pc, #472]	@ (8006488 <_dtoa_r+0x2e0>)
 80062ae:	f7fa f803 	bl	80002b8 <__aeabi_dsub>
 80062b2:	a36b      	add	r3, pc, #428	@ (adr r3, 8006460 <_dtoa_r+0x2b8>)
 80062b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b8:	f7fa f9b6 	bl	8000628 <__aeabi_dmul>
 80062bc:	a36a      	add	r3, pc, #424	@ (adr r3, 8006468 <_dtoa_r+0x2c0>)
 80062be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c2:	f7f9 fffb 	bl	80002bc <__adddf3>
 80062c6:	4604      	mov	r4, r0
 80062c8:	4630      	mov	r0, r6
 80062ca:	460d      	mov	r5, r1
 80062cc:	f7fa f942 	bl	8000554 <__aeabi_i2d>
 80062d0:	a367      	add	r3, pc, #412	@ (adr r3, 8006470 <_dtoa_r+0x2c8>)
 80062d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d6:	f7fa f9a7 	bl	8000628 <__aeabi_dmul>
 80062da:	4602      	mov	r2, r0
 80062dc:	460b      	mov	r3, r1
 80062de:	4620      	mov	r0, r4
 80062e0:	4629      	mov	r1, r5
 80062e2:	f7f9 ffeb 	bl	80002bc <__adddf3>
 80062e6:	4604      	mov	r4, r0
 80062e8:	460d      	mov	r5, r1
 80062ea:	f7fa fc4d 	bl	8000b88 <__aeabi_d2iz>
 80062ee:	2200      	movs	r2, #0
 80062f0:	4607      	mov	r7, r0
 80062f2:	2300      	movs	r3, #0
 80062f4:	4620      	mov	r0, r4
 80062f6:	4629      	mov	r1, r5
 80062f8:	f7fa fc08 	bl	8000b0c <__aeabi_dcmplt>
 80062fc:	b140      	cbz	r0, 8006310 <_dtoa_r+0x168>
 80062fe:	4638      	mov	r0, r7
 8006300:	f7fa f928 	bl	8000554 <__aeabi_i2d>
 8006304:	4622      	mov	r2, r4
 8006306:	462b      	mov	r3, r5
 8006308:	f7fa fbf6 	bl	8000af8 <__aeabi_dcmpeq>
 800630c:	b900      	cbnz	r0, 8006310 <_dtoa_r+0x168>
 800630e:	3f01      	subs	r7, #1
 8006310:	2f16      	cmp	r7, #22
 8006312:	d852      	bhi.n	80063ba <_dtoa_r+0x212>
 8006314:	4b5d      	ldr	r3, [pc, #372]	@ (800648c <_dtoa_r+0x2e4>)
 8006316:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800631a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800631e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006322:	f7fa fbf3 	bl	8000b0c <__aeabi_dcmplt>
 8006326:	2800      	cmp	r0, #0
 8006328:	d049      	beq.n	80063be <_dtoa_r+0x216>
 800632a:	3f01      	subs	r7, #1
 800632c:	2300      	movs	r3, #0
 800632e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006330:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006332:	1b9b      	subs	r3, r3, r6
 8006334:	1e5a      	subs	r2, r3, #1
 8006336:	bf45      	ittet	mi
 8006338:	f1c3 0301 	rsbmi	r3, r3, #1
 800633c:	9300      	strmi	r3, [sp, #0]
 800633e:	2300      	movpl	r3, #0
 8006340:	2300      	movmi	r3, #0
 8006342:	9206      	str	r2, [sp, #24]
 8006344:	bf54      	ite	pl
 8006346:	9300      	strpl	r3, [sp, #0]
 8006348:	9306      	strmi	r3, [sp, #24]
 800634a:	2f00      	cmp	r7, #0
 800634c:	db39      	blt.n	80063c2 <_dtoa_r+0x21a>
 800634e:	9b06      	ldr	r3, [sp, #24]
 8006350:	970d      	str	r7, [sp, #52]	@ 0x34
 8006352:	443b      	add	r3, r7
 8006354:	9306      	str	r3, [sp, #24]
 8006356:	2300      	movs	r3, #0
 8006358:	9308      	str	r3, [sp, #32]
 800635a:	9b07      	ldr	r3, [sp, #28]
 800635c:	2b09      	cmp	r3, #9
 800635e:	d863      	bhi.n	8006428 <_dtoa_r+0x280>
 8006360:	2b05      	cmp	r3, #5
 8006362:	bfc4      	itt	gt
 8006364:	3b04      	subgt	r3, #4
 8006366:	9307      	strgt	r3, [sp, #28]
 8006368:	9b07      	ldr	r3, [sp, #28]
 800636a:	f1a3 0302 	sub.w	r3, r3, #2
 800636e:	bfcc      	ite	gt
 8006370:	2400      	movgt	r4, #0
 8006372:	2401      	movle	r4, #1
 8006374:	2b03      	cmp	r3, #3
 8006376:	d863      	bhi.n	8006440 <_dtoa_r+0x298>
 8006378:	e8df f003 	tbb	[pc, r3]
 800637c:	2b375452 	.word	0x2b375452
 8006380:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006384:	441e      	add	r6, r3
 8006386:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800638a:	2b20      	cmp	r3, #32
 800638c:	bfc1      	itttt	gt
 800638e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006392:	409f      	lslgt	r7, r3
 8006394:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006398:	fa24 f303 	lsrgt.w	r3, r4, r3
 800639c:	bfd6      	itet	le
 800639e:	f1c3 0320 	rsble	r3, r3, #32
 80063a2:	ea47 0003 	orrgt.w	r0, r7, r3
 80063a6:	fa04 f003 	lslle.w	r0, r4, r3
 80063aa:	f7fa f8c3 	bl	8000534 <__aeabi_ui2d>
 80063ae:	2201      	movs	r2, #1
 80063b0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80063b4:	3e01      	subs	r6, #1
 80063b6:	9212      	str	r2, [sp, #72]	@ 0x48
 80063b8:	e776      	b.n	80062a8 <_dtoa_r+0x100>
 80063ba:	2301      	movs	r3, #1
 80063bc:	e7b7      	b.n	800632e <_dtoa_r+0x186>
 80063be:	9010      	str	r0, [sp, #64]	@ 0x40
 80063c0:	e7b6      	b.n	8006330 <_dtoa_r+0x188>
 80063c2:	9b00      	ldr	r3, [sp, #0]
 80063c4:	1bdb      	subs	r3, r3, r7
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	427b      	negs	r3, r7
 80063ca:	9308      	str	r3, [sp, #32]
 80063cc:	2300      	movs	r3, #0
 80063ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80063d0:	e7c3      	b.n	800635a <_dtoa_r+0x1b2>
 80063d2:	2301      	movs	r3, #1
 80063d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80063d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80063d8:	eb07 0b03 	add.w	fp, r7, r3
 80063dc:	f10b 0301 	add.w	r3, fp, #1
 80063e0:	2b01      	cmp	r3, #1
 80063e2:	9303      	str	r3, [sp, #12]
 80063e4:	bfb8      	it	lt
 80063e6:	2301      	movlt	r3, #1
 80063e8:	e006      	b.n	80063f8 <_dtoa_r+0x250>
 80063ea:	2301      	movs	r3, #1
 80063ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80063ee:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	dd28      	ble.n	8006446 <_dtoa_r+0x29e>
 80063f4:	469b      	mov	fp, r3
 80063f6:	9303      	str	r3, [sp, #12]
 80063f8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80063fc:	2100      	movs	r1, #0
 80063fe:	2204      	movs	r2, #4
 8006400:	f102 0514 	add.w	r5, r2, #20
 8006404:	429d      	cmp	r5, r3
 8006406:	d926      	bls.n	8006456 <_dtoa_r+0x2ae>
 8006408:	6041      	str	r1, [r0, #4]
 800640a:	4648      	mov	r0, r9
 800640c:	f000 fd9c 	bl	8006f48 <_Balloc>
 8006410:	4682      	mov	sl, r0
 8006412:	2800      	cmp	r0, #0
 8006414:	d142      	bne.n	800649c <_dtoa_r+0x2f4>
 8006416:	4b1e      	ldr	r3, [pc, #120]	@ (8006490 <_dtoa_r+0x2e8>)
 8006418:	4602      	mov	r2, r0
 800641a:	f240 11af 	movw	r1, #431	@ 0x1af
 800641e:	e6da      	b.n	80061d6 <_dtoa_r+0x2e>
 8006420:	2300      	movs	r3, #0
 8006422:	e7e3      	b.n	80063ec <_dtoa_r+0x244>
 8006424:	2300      	movs	r3, #0
 8006426:	e7d5      	b.n	80063d4 <_dtoa_r+0x22c>
 8006428:	2401      	movs	r4, #1
 800642a:	2300      	movs	r3, #0
 800642c:	9307      	str	r3, [sp, #28]
 800642e:	9409      	str	r4, [sp, #36]	@ 0x24
 8006430:	f04f 3bff 	mov.w	fp, #4294967295
 8006434:	2200      	movs	r2, #0
 8006436:	f8cd b00c 	str.w	fp, [sp, #12]
 800643a:	2312      	movs	r3, #18
 800643c:	920c      	str	r2, [sp, #48]	@ 0x30
 800643e:	e7db      	b.n	80063f8 <_dtoa_r+0x250>
 8006440:	2301      	movs	r3, #1
 8006442:	9309      	str	r3, [sp, #36]	@ 0x24
 8006444:	e7f4      	b.n	8006430 <_dtoa_r+0x288>
 8006446:	f04f 0b01 	mov.w	fp, #1
 800644a:	f8cd b00c 	str.w	fp, [sp, #12]
 800644e:	465b      	mov	r3, fp
 8006450:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006454:	e7d0      	b.n	80063f8 <_dtoa_r+0x250>
 8006456:	3101      	adds	r1, #1
 8006458:	0052      	lsls	r2, r2, #1
 800645a:	e7d1      	b.n	8006400 <_dtoa_r+0x258>
 800645c:	f3af 8000 	nop.w
 8006460:	636f4361 	.word	0x636f4361
 8006464:	3fd287a7 	.word	0x3fd287a7
 8006468:	8b60c8b3 	.word	0x8b60c8b3
 800646c:	3fc68a28 	.word	0x3fc68a28
 8006470:	509f79fb 	.word	0x509f79fb
 8006474:	3fd34413 	.word	0x3fd34413
 8006478:	08009991 	.word	0x08009991
 800647c:	08009a4b 	.word	0x08009a4b
 8006480:	7ff00000 	.word	0x7ff00000
 8006484:	08009969 	.word	0x08009969
 8006488:	3ff80000 	.word	0x3ff80000
 800648c:	08009bc0 	.word	0x08009bc0
 8006490:	08009aa3 	.word	0x08009aa3
 8006494:	08009a47 	.word	0x08009a47
 8006498:	08009968 	.word	0x08009968
 800649c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80064a0:	6018      	str	r0, [r3, #0]
 80064a2:	9b03      	ldr	r3, [sp, #12]
 80064a4:	2b0e      	cmp	r3, #14
 80064a6:	f200 80a1 	bhi.w	80065ec <_dtoa_r+0x444>
 80064aa:	2c00      	cmp	r4, #0
 80064ac:	f000 809e 	beq.w	80065ec <_dtoa_r+0x444>
 80064b0:	2f00      	cmp	r7, #0
 80064b2:	dd33      	ble.n	800651c <_dtoa_r+0x374>
 80064b4:	4b9c      	ldr	r3, [pc, #624]	@ (8006728 <_dtoa_r+0x580>)
 80064b6:	f007 020f 	and.w	r2, r7, #15
 80064ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064be:	ed93 7b00 	vldr	d7, [r3]
 80064c2:	05f8      	lsls	r0, r7, #23
 80064c4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80064c8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80064cc:	d516      	bpl.n	80064fc <_dtoa_r+0x354>
 80064ce:	4b97      	ldr	r3, [pc, #604]	@ (800672c <_dtoa_r+0x584>)
 80064d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80064d4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064d8:	f7fa f9d0 	bl	800087c <__aeabi_ddiv>
 80064dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064e0:	f004 040f 	and.w	r4, r4, #15
 80064e4:	2603      	movs	r6, #3
 80064e6:	4d91      	ldr	r5, [pc, #580]	@ (800672c <_dtoa_r+0x584>)
 80064e8:	b954      	cbnz	r4, 8006500 <_dtoa_r+0x358>
 80064ea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80064ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80064f2:	f7fa f9c3 	bl	800087c <__aeabi_ddiv>
 80064f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80064fa:	e028      	b.n	800654e <_dtoa_r+0x3a6>
 80064fc:	2602      	movs	r6, #2
 80064fe:	e7f2      	b.n	80064e6 <_dtoa_r+0x33e>
 8006500:	07e1      	lsls	r1, r4, #31
 8006502:	d508      	bpl.n	8006516 <_dtoa_r+0x36e>
 8006504:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006508:	e9d5 2300 	ldrd	r2, r3, [r5]
 800650c:	f7fa f88c 	bl	8000628 <__aeabi_dmul>
 8006510:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006514:	3601      	adds	r6, #1
 8006516:	1064      	asrs	r4, r4, #1
 8006518:	3508      	adds	r5, #8
 800651a:	e7e5      	b.n	80064e8 <_dtoa_r+0x340>
 800651c:	f000 80af 	beq.w	800667e <_dtoa_r+0x4d6>
 8006520:	427c      	negs	r4, r7
 8006522:	4b81      	ldr	r3, [pc, #516]	@ (8006728 <_dtoa_r+0x580>)
 8006524:	4d81      	ldr	r5, [pc, #516]	@ (800672c <_dtoa_r+0x584>)
 8006526:	f004 020f 	and.w	r2, r4, #15
 800652a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800652e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006532:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006536:	f7fa f877 	bl	8000628 <__aeabi_dmul>
 800653a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800653e:	1124      	asrs	r4, r4, #4
 8006540:	2300      	movs	r3, #0
 8006542:	2602      	movs	r6, #2
 8006544:	2c00      	cmp	r4, #0
 8006546:	f040 808f 	bne.w	8006668 <_dtoa_r+0x4c0>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1d3      	bne.n	80064f6 <_dtoa_r+0x34e>
 800654e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006550:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 8094 	beq.w	8006682 <_dtoa_r+0x4da>
 800655a:	4b75      	ldr	r3, [pc, #468]	@ (8006730 <_dtoa_r+0x588>)
 800655c:	2200      	movs	r2, #0
 800655e:	4620      	mov	r0, r4
 8006560:	4629      	mov	r1, r5
 8006562:	f7fa fad3 	bl	8000b0c <__aeabi_dcmplt>
 8006566:	2800      	cmp	r0, #0
 8006568:	f000 808b 	beq.w	8006682 <_dtoa_r+0x4da>
 800656c:	9b03      	ldr	r3, [sp, #12]
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 8087 	beq.w	8006682 <_dtoa_r+0x4da>
 8006574:	f1bb 0f00 	cmp.w	fp, #0
 8006578:	dd34      	ble.n	80065e4 <_dtoa_r+0x43c>
 800657a:	4620      	mov	r0, r4
 800657c:	4b6d      	ldr	r3, [pc, #436]	@ (8006734 <_dtoa_r+0x58c>)
 800657e:	2200      	movs	r2, #0
 8006580:	4629      	mov	r1, r5
 8006582:	f7fa f851 	bl	8000628 <__aeabi_dmul>
 8006586:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800658a:	f107 38ff 	add.w	r8, r7, #4294967295
 800658e:	3601      	adds	r6, #1
 8006590:	465c      	mov	r4, fp
 8006592:	4630      	mov	r0, r6
 8006594:	f7f9 ffde 	bl	8000554 <__aeabi_i2d>
 8006598:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800659c:	f7fa f844 	bl	8000628 <__aeabi_dmul>
 80065a0:	4b65      	ldr	r3, [pc, #404]	@ (8006738 <_dtoa_r+0x590>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	f7f9 fe8a 	bl	80002bc <__adddf3>
 80065a8:	4605      	mov	r5, r0
 80065aa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80065ae:	2c00      	cmp	r4, #0
 80065b0:	d16a      	bne.n	8006688 <_dtoa_r+0x4e0>
 80065b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065b6:	4b61      	ldr	r3, [pc, #388]	@ (800673c <_dtoa_r+0x594>)
 80065b8:	2200      	movs	r2, #0
 80065ba:	f7f9 fe7d 	bl	80002b8 <__aeabi_dsub>
 80065be:	4602      	mov	r2, r0
 80065c0:	460b      	mov	r3, r1
 80065c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80065c6:	462a      	mov	r2, r5
 80065c8:	4633      	mov	r3, r6
 80065ca:	f7fa fabd 	bl	8000b48 <__aeabi_dcmpgt>
 80065ce:	2800      	cmp	r0, #0
 80065d0:	f040 8298 	bne.w	8006b04 <_dtoa_r+0x95c>
 80065d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80065d8:	462a      	mov	r2, r5
 80065da:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80065de:	f7fa fa95 	bl	8000b0c <__aeabi_dcmplt>
 80065e2:	bb38      	cbnz	r0, 8006634 <_dtoa_r+0x48c>
 80065e4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80065e8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80065ec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	f2c0 8157 	blt.w	80068a2 <_dtoa_r+0x6fa>
 80065f4:	2f0e      	cmp	r7, #14
 80065f6:	f300 8154 	bgt.w	80068a2 <_dtoa_r+0x6fa>
 80065fa:	4b4b      	ldr	r3, [pc, #300]	@ (8006728 <_dtoa_r+0x580>)
 80065fc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006600:	ed93 7b00 	vldr	d7, [r3]
 8006604:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006606:	2b00      	cmp	r3, #0
 8006608:	ed8d 7b00 	vstr	d7, [sp]
 800660c:	f280 80e5 	bge.w	80067da <_dtoa_r+0x632>
 8006610:	9b03      	ldr	r3, [sp, #12]
 8006612:	2b00      	cmp	r3, #0
 8006614:	f300 80e1 	bgt.w	80067da <_dtoa_r+0x632>
 8006618:	d10c      	bne.n	8006634 <_dtoa_r+0x48c>
 800661a:	4b48      	ldr	r3, [pc, #288]	@ (800673c <_dtoa_r+0x594>)
 800661c:	2200      	movs	r2, #0
 800661e:	ec51 0b17 	vmov	r0, r1, d7
 8006622:	f7fa f801 	bl	8000628 <__aeabi_dmul>
 8006626:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800662a:	f7fa fa83 	bl	8000b34 <__aeabi_dcmpge>
 800662e:	2800      	cmp	r0, #0
 8006630:	f000 8266 	beq.w	8006b00 <_dtoa_r+0x958>
 8006634:	2400      	movs	r4, #0
 8006636:	4625      	mov	r5, r4
 8006638:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800663a:	4656      	mov	r6, sl
 800663c:	ea6f 0803 	mvn.w	r8, r3
 8006640:	2700      	movs	r7, #0
 8006642:	4621      	mov	r1, r4
 8006644:	4648      	mov	r0, r9
 8006646:	f000 fcbf 	bl	8006fc8 <_Bfree>
 800664a:	2d00      	cmp	r5, #0
 800664c:	f000 80bd 	beq.w	80067ca <_dtoa_r+0x622>
 8006650:	b12f      	cbz	r7, 800665e <_dtoa_r+0x4b6>
 8006652:	42af      	cmp	r7, r5
 8006654:	d003      	beq.n	800665e <_dtoa_r+0x4b6>
 8006656:	4639      	mov	r1, r7
 8006658:	4648      	mov	r0, r9
 800665a:	f000 fcb5 	bl	8006fc8 <_Bfree>
 800665e:	4629      	mov	r1, r5
 8006660:	4648      	mov	r0, r9
 8006662:	f000 fcb1 	bl	8006fc8 <_Bfree>
 8006666:	e0b0      	b.n	80067ca <_dtoa_r+0x622>
 8006668:	07e2      	lsls	r2, r4, #31
 800666a:	d505      	bpl.n	8006678 <_dtoa_r+0x4d0>
 800666c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006670:	f7f9 ffda 	bl	8000628 <__aeabi_dmul>
 8006674:	3601      	adds	r6, #1
 8006676:	2301      	movs	r3, #1
 8006678:	1064      	asrs	r4, r4, #1
 800667a:	3508      	adds	r5, #8
 800667c:	e762      	b.n	8006544 <_dtoa_r+0x39c>
 800667e:	2602      	movs	r6, #2
 8006680:	e765      	b.n	800654e <_dtoa_r+0x3a6>
 8006682:	9c03      	ldr	r4, [sp, #12]
 8006684:	46b8      	mov	r8, r7
 8006686:	e784      	b.n	8006592 <_dtoa_r+0x3ea>
 8006688:	4b27      	ldr	r3, [pc, #156]	@ (8006728 <_dtoa_r+0x580>)
 800668a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800668c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006690:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006694:	4454      	add	r4, sl
 8006696:	2900      	cmp	r1, #0
 8006698:	d054      	beq.n	8006744 <_dtoa_r+0x59c>
 800669a:	4929      	ldr	r1, [pc, #164]	@ (8006740 <_dtoa_r+0x598>)
 800669c:	2000      	movs	r0, #0
 800669e:	f7fa f8ed 	bl	800087c <__aeabi_ddiv>
 80066a2:	4633      	mov	r3, r6
 80066a4:	462a      	mov	r2, r5
 80066a6:	f7f9 fe07 	bl	80002b8 <__aeabi_dsub>
 80066aa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80066ae:	4656      	mov	r6, sl
 80066b0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066b4:	f7fa fa68 	bl	8000b88 <__aeabi_d2iz>
 80066b8:	4605      	mov	r5, r0
 80066ba:	f7f9 ff4b 	bl	8000554 <__aeabi_i2d>
 80066be:	4602      	mov	r2, r0
 80066c0:	460b      	mov	r3, r1
 80066c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80066c6:	f7f9 fdf7 	bl	80002b8 <__aeabi_dsub>
 80066ca:	3530      	adds	r5, #48	@ 0x30
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066d4:	f806 5b01 	strb.w	r5, [r6], #1
 80066d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80066dc:	f7fa fa16 	bl	8000b0c <__aeabi_dcmplt>
 80066e0:	2800      	cmp	r0, #0
 80066e2:	d172      	bne.n	80067ca <_dtoa_r+0x622>
 80066e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066e8:	4911      	ldr	r1, [pc, #68]	@ (8006730 <_dtoa_r+0x588>)
 80066ea:	2000      	movs	r0, #0
 80066ec:	f7f9 fde4 	bl	80002b8 <__aeabi_dsub>
 80066f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80066f4:	f7fa fa0a 	bl	8000b0c <__aeabi_dcmplt>
 80066f8:	2800      	cmp	r0, #0
 80066fa:	f040 80b4 	bne.w	8006866 <_dtoa_r+0x6be>
 80066fe:	42a6      	cmp	r6, r4
 8006700:	f43f af70 	beq.w	80065e4 <_dtoa_r+0x43c>
 8006704:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006708:	4b0a      	ldr	r3, [pc, #40]	@ (8006734 <_dtoa_r+0x58c>)
 800670a:	2200      	movs	r2, #0
 800670c:	f7f9 ff8c 	bl	8000628 <__aeabi_dmul>
 8006710:	4b08      	ldr	r3, [pc, #32]	@ (8006734 <_dtoa_r+0x58c>)
 8006712:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006716:	2200      	movs	r2, #0
 8006718:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800671c:	f7f9 ff84 	bl	8000628 <__aeabi_dmul>
 8006720:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006724:	e7c4      	b.n	80066b0 <_dtoa_r+0x508>
 8006726:	bf00      	nop
 8006728:	08009bc0 	.word	0x08009bc0
 800672c:	08009b98 	.word	0x08009b98
 8006730:	3ff00000 	.word	0x3ff00000
 8006734:	40240000 	.word	0x40240000
 8006738:	401c0000 	.word	0x401c0000
 800673c:	40140000 	.word	0x40140000
 8006740:	3fe00000 	.word	0x3fe00000
 8006744:	4631      	mov	r1, r6
 8006746:	4628      	mov	r0, r5
 8006748:	f7f9 ff6e 	bl	8000628 <__aeabi_dmul>
 800674c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006750:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006752:	4656      	mov	r6, sl
 8006754:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006758:	f7fa fa16 	bl	8000b88 <__aeabi_d2iz>
 800675c:	4605      	mov	r5, r0
 800675e:	f7f9 fef9 	bl	8000554 <__aeabi_i2d>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800676a:	f7f9 fda5 	bl	80002b8 <__aeabi_dsub>
 800676e:	3530      	adds	r5, #48	@ 0x30
 8006770:	f806 5b01 	strb.w	r5, [r6], #1
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	42a6      	cmp	r6, r4
 800677a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800677e:	f04f 0200 	mov.w	r2, #0
 8006782:	d124      	bne.n	80067ce <_dtoa_r+0x626>
 8006784:	4baf      	ldr	r3, [pc, #700]	@ (8006a44 <_dtoa_r+0x89c>)
 8006786:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800678a:	f7f9 fd97 	bl	80002bc <__adddf3>
 800678e:	4602      	mov	r2, r0
 8006790:	460b      	mov	r3, r1
 8006792:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006796:	f7fa f9d7 	bl	8000b48 <__aeabi_dcmpgt>
 800679a:	2800      	cmp	r0, #0
 800679c:	d163      	bne.n	8006866 <_dtoa_r+0x6be>
 800679e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80067a2:	49a8      	ldr	r1, [pc, #672]	@ (8006a44 <_dtoa_r+0x89c>)
 80067a4:	2000      	movs	r0, #0
 80067a6:	f7f9 fd87 	bl	80002b8 <__aeabi_dsub>
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067b2:	f7fa f9ab 	bl	8000b0c <__aeabi_dcmplt>
 80067b6:	2800      	cmp	r0, #0
 80067b8:	f43f af14 	beq.w	80065e4 <_dtoa_r+0x43c>
 80067bc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80067be:	1e73      	subs	r3, r6, #1
 80067c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80067c2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80067c6:	2b30      	cmp	r3, #48	@ 0x30
 80067c8:	d0f8      	beq.n	80067bc <_dtoa_r+0x614>
 80067ca:	4647      	mov	r7, r8
 80067cc:	e03b      	b.n	8006846 <_dtoa_r+0x69e>
 80067ce:	4b9e      	ldr	r3, [pc, #632]	@ (8006a48 <_dtoa_r+0x8a0>)
 80067d0:	f7f9 ff2a 	bl	8000628 <__aeabi_dmul>
 80067d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067d8:	e7bc      	b.n	8006754 <_dtoa_r+0x5ac>
 80067da:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80067de:	4656      	mov	r6, sl
 80067e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067e4:	4620      	mov	r0, r4
 80067e6:	4629      	mov	r1, r5
 80067e8:	f7fa f848 	bl	800087c <__aeabi_ddiv>
 80067ec:	f7fa f9cc 	bl	8000b88 <__aeabi_d2iz>
 80067f0:	4680      	mov	r8, r0
 80067f2:	f7f9 feaf 	bl	8000554 <__aeabi_i2d>
 80067f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067fa:	f7f9 ff15 	bl	8000628 <__aeabi_dmul>
 80067fe:	4602      	mov	r2, r0
 8006800:	460b      	mov	r3, r1
 8006802:	4620      	mov	r0, r4
 8006804:	4629      	mov	r1, r5
 8006806:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800680a:	f7f9 fd55 	bl	80002b8 <__aeabi_dsub>
 800680e:	f806 4b01 	strb.w	r4, [r6], #1
 8006812:	9d03      	ldr	r5, [sp, #12]
 8006814:	eba6 040a 	sub.w	r4, r6, sl
 8006818:	42a5      	cmp	r5, r4
 800681a:	4602      	mov	r2, r0
 800681c:	460b      	mov	r3, r1
 800681e:	d133      	bne.n	8006888 <_dtoa_r+0x6e0>
 8006820:	f7f9 fd4c 	bl	80002bc <__adddf3>
 8006824:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006828:	4604      	mov	r4, r0
 800682a:	460d      	mov	r5, r1
 800682c:	f7fa f98c 	bl	8000b48 <__aeabi_dcmpgt>
 8006830:	b9c0      	cbnz	r0, 8006864 <_dtoa_r+0x6bc>
 8006832:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006836:	4620      	mov	r0, r4
 8006838:	4629      	mov	r1, r5
 800683a:	f7fa f95d 	bl	8000af8 <__aeabi_dcmpeq>
 800683e:	b110      	cbz	r0, 8006846 <_dtoa_r+0x69e>
 8006840:	f018 0f01 	tst.w	r8, #1
 8006844:	d10e      	bne.n	8006864 <_dtoa_r+0x6bc>
 8006846:	9902      	ldr	r1, [sp, #8]
 8006848:	4648      	mov	r0, r9
 800684a:	f000 fbbd 	bl	8006fc8 <_Bfree>
 800684e:	2300      	movs	r3, #0
 8006850:	7033      	strb	r3, [r6, #0]
 8006852:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006854:	3701      	adds	r7, #1
 8006856:	601f      	str	r7, [r3, #0]
 8006858:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800685a:	2b00      	cmp	r3, #0
 800685c:	f000 824b 	beq.w	8006cf6 <_dtoa_r+0xb4e>
 8006860:	601e      	str	r6, [r3, #0]
 8006862:	e248      	b.n	8006cf6 <_dtoa_r+0xb4e>
 8006864:	46b8      	mov	r8, r7
 8006866:	4633      	mov	r3, r6
 8006868:	461e      	mov	r6, r3
 800686a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800686e:	2a39      	cmp	r2, #57	@ 0x39
 8006870:	d106      	bne.n	8006880 <_dtoa_r+0x6d8>
 8006872:	459a      	cmp	sl, r3
 8006874:	d1f8      	bne.n	8006868 <_dtoa_r+0x6c0>
 8006876:	2230      	movs	r2, #48	@ 0x30
 8006878:	f108 0801 	add.w	r8, r8, #1
 800687c:	f88a 2000 	strb.w	r2, [sl]
 8006880:	781a      	ldrb	r2, [r3, #0]
 8006882:	3201      	adds	r2, #1
 8006884:	701a      	strb	r2, [r3, #0]
 8006886:	e7a0      	b.n	80067ca <_dtoa_r+0x622>
 8006888:	4b6f      	ldr	r3, [pc, #444]	@ (8006a48 <_dtoa_r+0x8a0>)
 800688a:	2200      	movs	r2, #0
 800688c:	f7f9 fecc 	bl	8000628 <__aeabi_dmul>
 8006890:	2200      	movs	r2, #0
 8006892:	2300      	movs	r3, #0
 8006894:	4604      	mov	r4, r0
 8006896:	460d      	mov	r5, r1
 8006898:	f7fa f92e 	bl	8000af8 <__aeabi_dcmpeq>
 800689c:	2800      	cmp	r0, #0
 800689e:	d09f      	beq.n	80067e0 <_dtoa_r+0x638>
 80068a0:	e7d1      	b.n	8006846 <_dtoa_r+0x69e>
 80068a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80068a4:	2a00      	cmp	r2, #0
 80068a6:	f000 80ea 	beq.w	8006a7e <_dtoa_r+0x8d6>
 80068aa:	9a07      	ldr	r2, [sp, #28]
 80068ac:	2a01      	cmp	r2, #1
 80068ae:	f300 80cd 	bgt.w	8006a4c <_dtoa_r+0x8a4>
 80068b2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80068b4:	2a00      	cmp	r2, #0
 80068b6:	f000 80c1 	beq.w	8006a3c <_dtoa_r+0x894>
 80068ba:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80068be:	9c08      	ldr	r4, [sp, #32]
 80068c0:	9e00      	ldr	r6, [sp, #0]
 80068c2:	9a00      	ldr	r2, [sp, #0]
 80068c4:	441a      	add	r2, r3
 80068c6:	9200      	str	r2, [sp, #0]
 80068c8:	9a06      	ldr	r2, [sp, #24]
 80068ca:	2101      	movs	r1, #1
 80068cc:	441a      	add	r2, r3
 80068ce:	4648      	mov	r0, r9
 80068d0:	9206      	str	r2, [sp, #24]
 80068d2:	f000 fc77 	bl	80071c4 <__i2b>
 80068d6:	4605      	mov	r5, r0
 80068d8:	b166      	cbz	r6, 80068f4 <_dtoa_r+0x74c>
 80068da:	9b06      	ldr	r3, [sp, #24]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	dd09      	ble.n	80068f4 <_dtoa_r+0x74c>
 80068e0:	42b3      	cmp	r3, r6
 80068e2:	9a00      	ldr	r2, [sp, #0]
 80068e4:	bfa8      	it	ge
 80068e6:	4633      	movge	r3, r6
 80068e8:	1ad2      	subs	r2, r2, r3
 80068ea:	9200      	str	r2, [sp, #0]
 80068ec:	9a06      	ldr	r2, [sp, #24]
 80068ee:	1af6      	subs	r6, r6, r3
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	9306      	str	r3, [sp, #24]
 80068f4:	9b08      	ldr	r3, [sp, #32]
 80068f6:	b30b      	cbz	r3, 800693c <_dtoa_r+0x794>
 80068f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 80c6 	beq.w	8006a8c <_dtoa_r+0x8e4>
 8006900:	2c00      	cmp	r4, #0
 8006902:	f000 80c0 	beq.w	8006a86 <_dtoa_r+0x8de>
 8006906:	4629      	mov	r1, r5
 8006908:	4622      	mov	r2, r4
 800690a:	4648      	mov	r0, r9
 800690c:	f000 fd12 	bl	8007334 <__pow5mult>
 8006910:	9a02      	ldr	r2, [sp, #8]
 8006912:	4601      	mov	r1, r0
 8006914:	4605      	mov	r5, r0
 8006916:	4648      	mov	r0, r9
 8006918:	f000 fc6a 	bl	80071f0 <__multiply>
 800691c:	9902      	ldr	r1, [sp, #8]
 800691e:	4680      	mov	r8, r0
 8006920:	4648      	mov	r0, r9
 8006922:	f000 fb51 	bl	8006fc8 <_Bfree>
 8006926:	9b08      	ldr	r3, [sp, #32]
 8006928:	1b1b      	subs	r3, r3, r4
 800692a:	9308      	str	r3, [sp, #32]
 800692c:	f000 80b1 	beq.w	8006a92 <_dtoa_r+0x8ea>
 8006930:	9a08      	ldr	r2, [sp, #32]
 8006932:	4641      	mov	r1, r8
 8006934:	4648      	mov	r0, r9
 8006936:	f000 fcfd 	bl	8007334 <__pow5mult>
 800693a:	9002      	str	r0, [sp, #8]
 800693c:	2101      	movs	r1, #1
 800693e:	4648      	mov	r0, r9
 8006940:	f000 fc40 	bl	80071c4 <__i2b>
 8006944:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006946:	4604      	mov	r4, r0
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 81d8 	beq.w	8006cfe <_dtoa_r+0xb56>
 800694e:	461a      	mov	r2, r3
 8006950:	4601      	mov	r1, r0
 8006952:	4648      	mov	r0, r9
 8006954:	f000 fcee 	bl	8007334 <__pow5mult>
 8006958:	9b07      	ldr	r3, [sp, #28]
 800695a:	2b01      	cmp	r3, #1
 800695c:	4604      	mov	r4, r0
 800695e:	f300 809f 	bgt.w	8006aa0 <_dtoa_r+0x8f8>
 8006962:	9b04      	ldr	r3, [sp, #16]
 8006964:	2b00      	cmp	r3, #0
 8006966:	f040 8097 	bne.w	8006a98 <_dtoa_r+0x8f0>
 800696a:	9b05      	ldr	r3, [sp, #20]
 800696c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006970:	2b00      	cmp	r3, #0
 8006972:	f040 8093 	bne.w	8006a9c <_dtoa_r+0x8f4>
 8006976:	9b05      	ldr	r3, [sp, #20]
 8006978:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800697c:	0d1b      	lsrs	r3, r3, #20
 800697e:	051b      	lsls	r3, r3, #20
 8006980:	b133      	cbz	r3, 8006990 <_dtoa_r+0x7e8>
 8006982:	9b00      	ldr	r3, [sp, #0]
 8006984:	3301      	adds	r3, #1
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	9b06      	ldr	r3, [sp, #24]
 800698a:	3301      	adds	r3, #1
 800698c:	9306      	str	r3, [sp, #24]
 800698e:	2301      	movs	r3, #1
 8006990:	9308      	str	r3, [sp, #32]
 8006992:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 81b8 	beq.w	8006d0a <_dtoa_r+0xb62>
 800699a:	6923      	ldr	r3, [r4, #16]
 800699c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80069a0:	6918      	ldr	r0, [r3, #16]
 80069a2:	f000 fbc3 	bl	800712c <__hi0bits>
 80069a6:	f1c0 0020 	rsb	r0, r0, #32
 80069aa:	9b06      	ldr	r3, [sp, #24]
 80069ac:	4418      	add	r0, r3
 80069ae:	f010 001f 	ands.w	r0, r0, #31
 80069b2:	f000 8082 	beq.w	8006aba <_dtoa_r+0x912>
 80069b6:	f1c0 0320 	rsb	r3, r0, #32
 80069ba:	2b04      	cmp	r3, #4
 80069bc:	dd73      	ble.n	8006aa6 <_dtoa_r+0x8fe>
 80069be:	9b00      	ldr	r3, [sp, #0]
 80069c0:	f1c0 001c 	rsb	r0, r0, #28
 80069c4:	4403      	add	r3, r0
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	9b06      	ldr	r3, [sp, #24]
 80069ca:	4403      	add	r3, r0
 80069cc:	4406      	add	r6, r0
 80069ce:	9306      	str	r3, [sp, #24]
 80069d0:	9b00      	ldr	r3, [sp, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	dd05      	ble.n	80069e2 <_dtoa_r+0x83a>
 80069d6:	9902      	ldr	r1, [sp, #8]
 80069d8:	461a      	mov	r2, r3
 80069da:	4648      	mov	r0, r9
 80069dc:	f000 fd04 	bl	80073e8 <__lshift>
 80069e0:	9002      	str	r0, [sp, #8]
 80069e2:	9b06      	ldr	r3, [sp, #24]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	dd05      	ble.n	80069f4 <_dtoa_r+0x84c>
 80069e8:	4621      	mov	r1, r4
 80069ea:	461a      	mov	r2, r3
 80069ec:	4648      	mov	r0, r9
 80069ee:	f000 fcfb 	bl	80073e8 <__lshift>
 80069f2:	4604      	mov	r4, r0
 80069f4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d061      	beq.n	8006abe <_dtoa_r+0x916>
 80069fa:	9802      	ldr	r0, [sp, #8]
 80069fc:	4621      	mov	r1, r4
 80069fe:	f000 fd5f 	bl	80074c0 <__mcmp>
 8006a02:	2800      	cmp	r0, #0
 8006a04:	da5b      	bge.n	8006abe <_dtoa_r+0x916>
 8006a06:	2300      	movs	r3, #0
 8006a08:	9902      	ldr	r1, [sp, #8]
 8006a0a:	220a      	movs	r2, #10
 8006a0c:	4648      	mov	r0, r9
 8006a0e:	f000 fafd 	bl	800700c <__multadd>
 8006a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a14:	9002      	str	r0, [sp, #8]
 8006a16:	f107 38ff 	add.w	r8, r7, #4294967295
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	f000 8177 	beq.w	8006d0e <_dtoa_r+0xb66>
 8006a20:	4629      	mov	r1, r5
 8006a22:	2300      	movs	r3, #0
 8006a24:	220a      	movs	r2, #10
 8006a26:	4648      	mov	r0, r9
 8006a28:	f000 faf0 	bl	800700c <__multadd>
 8006a2c:	f1bb 0f00 	cmp.w	fp, #0
 8006a30:	4605      	mov	r5, r0
 8006a32:	dc6f      	bgt.n	8006b14 <_dtoa_r+0x96c>
 8006a34:	9b07      	ldr	r3, [sp, #28]
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	dc49      	bgt.n	8006ace <_dtoa_r+0x926>
 8006a3a:	e06b      	b.n	8006b14 <_dtoa_r+0x96c>
 8006a3c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a3e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006a42:	e73c      	b.n	80068be <_dtoa_r+0x716>
 8006a44:	3fe00000 	.word	0x3fe00000
 8006a48:	40240000 	.word	0x40240000
 8006a4c:	9b03      	ldr	r3, [sp, #12]
 8006a4e:	1e5c      	subs	r4, r3, #1
 8006a50:	9b08      	ldr	r3, [sp, #32]
 8006a52:	42a3      	cmp	r3, r4
 8006a54:	db09      	blt.n	8006a6a <_dtoa_r+0x8c2>
 8006a56:	1b1c      	subs	r4, r3, r4
 8006a58:	9b03      	ldr	r3, [sp, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f6bf af30 	bge.w	80068c0 <_dtoa_r+0x718>
 8006a60:	9b00      	ldr	r3, [sp, #0]
 8006a62:	9a03      	ldr	r2, [sp, #12]
 8006a64:	1a9e      	subs	r6, r3, r2
 8006a66:	2300      	movs	r3, #0
 8006a68:	e72b      	b.n	80068c2 <_dtoa_r+0x71a>
 8006a6a:	9b08      	ldr	r3, [sp, #32]
 8006a6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006a6e:	9408      	str	r4, [sp, #32]
 8006a70:	1ae3      	subs	r3, r4, r3
 8006a72:	441a      	add	r2, r3
 8006a74:	9e00      	ldr	r6, [sp, #0]
 8006a76:	9b03      	ldr	r3, [sp, #12]
 8006a78:	920d      	str	r2, [sp, #52]	@ 0x34
 8006a7a:	2400      	movs	r4, #0
 8006a7c:	e721      	b.n	80068c2 <_dtoa_r+0x71a>
 8006a7e:	9c08      	ldr	r4, [sp, #32]
 8006a80:	9e00      	ldr	r6, [sp, #0]
 8006a82:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006a84:	e728      	b.n	80068d8 <_dtoa_r+0x730>
 8006a86:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006a8a:	e751      	b.n	8006930 <_dtoa_r+0x788>
 8006a8c:	9a08      	ldr	r2, [sp, #32]
 8006a8e:	9902      	ldr	r1, [sp, #8]
 8006a90:	e750      	b.n	8006934 <_dtoa_r+0x78c>
 8006a92:	f8cd 8008 	str.w	r8, [sp, #8]
 8006a96:	e751      	b.n	800693c <_dtoa_r+0x794>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	e779      	b.n	8006990 <_dtoa_r+0x7e8>
 8006a9c:	9b04      	ldr	r3, [sp, #16]
 8006a9e:	e777      	b.n	8006990 <_dtoa_r+0x7e8>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	9308      	str	r3, [sp, #32]
 8006aa4:	e779      	b.n	800699a <_dtoa_r+0x7f2>
 8006aa6:	d093      	beq.n	80069d0 <_dtoa_r+0x828>
 8006aa8:	9a00      	ldr	r2, [sp, #0]
 8006aaa:	331c      	adds	r3, #28
 8006aac:	441a      	add	r2, r3
 8006aae:	9200      	str	r2, [sp, #0]
 8006ab0:	9a06      	ldr	r2, [sp, #24]
 8006ab2:	441a      	add	r2, r3
 8006ab4:	441e      	add	r6, r3
 8006ab6:	9206      	str	r2, [sp, #24]
 8006ab8:	e78a      	b.n	80069d0 <_dtoa_r+0x828>
 8006aba:	4603      	mov	r3, r0
 8006abc:	e7f4      	b.n	8006aa8 <_dtoa_r+0x900>
 8006abe:	9b03      	ldr	r3, [sp, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	46b8      	mov	r8, r7
 8006ac4:	dc20      	bgt.n	8006b08 <_dtoa_r+0x960>
 8006ac6:	469b      	mov	fp, r3
 8006ac8:	9b07      	ldr	r3, [sp, #28]
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	dd1e      	ble.n	8006b0c <_dtoa_r+0x964>
 8006ace:	f1bb 0f00 	cmp.w	fp, #0
 8006ad2:	f47f adb1 	bne.w	8006638 <_dtoa_r+0x490>
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	465b      	mov	r3, fp
 8006ada:	2205      	movs	r2, #5
 8006adc:	4648      	mov	r0, r9
 8006ade:	f000 fa95 	bl	800700c <__multadd>
 8006ae2:	4601      	mov	r1, r0
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	9802      	ldr	r0, [sp, #8]
 8006ae8:	f000 fcea 	bl	80074c0 <__mcmp>
 8006aec:	2800      	cmp	r0, #0
 8006aee:	f77f ada3 	ble.w	8006638 <_dtoa_r+0x490>
 8006af2:	4656      	mov	r6, sl
 8006af4:	2331      	movs	r3, #49	@ 0x31
 8006af6:	f806 3b01 	strb.w	r3, [r6], #1
 8006afa:	f108 0801 	add.w	r8, r8, #1
 8006afe:	e59f      	b.n	8006640 <_dtoa_r+0x498>
 8006b00:	9c03      	ldr	r4, [sp, #12]
 8006b02:	46b8      	mov	r8, r7
 8006b04:	4625      	mov	r5, r4
 8006b06:	e7f4      	b.n	8006af2 <_dtoa_r+0x94a>
 8006b08:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 8101 	beq.w	8006d16 <_dtoa_r+0xb6e>
 8006b14:	2e00      	cmp	r6, #0
 8006b16:	dd05      	ble.n	8006b24 <_dtoa_r+0x97c>
 8006b18:	4629      	mov	r1, r5
 8006b1a:	4632      	mov	r2, r6
 8006b1c:	4648      	mov	r0, r9
 8006b1e:	f000 fc63 	bl	80073e8 <__lshift>
 8006b22:	4605      	mov	r5, r0
 8006b24:	9b08      	ldr	r3, [sp, #32]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d05c      	beq.n	8006be4 <_dtoa_r+0xa3c>
 8006b2a:	6869      	ldr	r1, [r5, #4]
 8006b2c:	4648      	mov	r0, r9
 8006b2e:	f000 fa0b 	bl	8006f48 <_Balloc>
 8006b32:	4606      	mov	r6, r0
 8006b34:	b928      	cbnz	r0, 8006b42 <_dtoa_r+0x99a>
 8006b36:	4b82      	ldr	r3, [pc, #520]	@ (8006d40 <_dtoa_r+0xb98>)
 8006b38:	4602      	mov	r2, r0
 8006b3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006b3e:	f7ff bb4a 	b.w	80061d6 <_dtoa_r+0x2e>
 8006b42:	692a      	ldr	r2, [r5, #16]
 8006b44:	3202      	adds	r2, #2
 8006b46:	0092      	lsls	r2, r2, #2
 8006b48:	f105 010c 	add.w	r1, r5, #12
 8006b4c:	300c      	adds	r0, #12
 8006b4e:	f7ff fa70 	bl	8006032 <memcpy>
 8006b52:	2201      	movs	r2, #1
 8006b54:	4631      	mov	r1, r6
 8006b56:	4648      	mov	r0, r9
 8006b58:	f000 fc46 	bl	80073e8 <__lshift>
 8006b5c:	f10a 0301 	add.w	r3, sl, #1
 8006b60:	9300      	str	r3, [sp, #0]
 8006b62:	eb0a 030b 	add.w	r3, sl, fp
 8006b66:	9308      	str	r3, [sp, #32]
 8006b68:	9b04      	ldr	r3, [sp, #16]
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	462f      	mov	r7, r5
 8006b70:	9306      	str	r3, [sp, #24]
 8006b72:	4605      	mov	r5, r0
 8006b74:	9b00      	ldr	r3, [sp, #0]
 8006b76:	9802      	ldr	r0, [sp, #8]
 8006b78:	4621      	mov	r1, r4
 8006b7a:	f103 3bff 	add.w	fp, r3, #4294967295
 8006b7e:	f7ff fa8b 	bl	8006098 <quorem>
 8006b82:	4603      	mov	r3, r0
 8006b84:	3330      	adds	r3, #48	@ 0x30
 8006b86:	9003      	str	r0, [sp, #12]
 8006b88:	4639      	mov	r1, r7
 8006b8a:	9802      	ldr	r0, [sp, #8]
 8006b8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b8e:	f000 fc97 	bl	80074c0 <__mcmp>
 8006b92:	462a      	mov	r2, r5
 8006b94:	9004      	str	r0, [sp, #16]
 8006b96:	4621      	mov	r1, r4
 8006b98:	4648      	mov	r0, r9
 8006b9a:	f000 fcad 	bl	80074f8 <__mdiff>
 8006b9e:	68c2      	ldr	r2, [r0, #12]
 8006ba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	bb02      	cbnz	r2, 8006be8 <_dtoa_r+0xa40>
 8006ba6:	4601      	mov	r1, r0
 8006ba8:	9802      	ldr	r0, [sp, #8]
 8006baa:	f000 fc89 	bl	80074c0 <__mcmp>
 8006bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	4631      	mov	r1, r6
 8006bb4:	4648      	mov	r0, r9
 8006bb6:	920c      	str	r2, [sp, #48]	@ 0x30
 8006bb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006bba:	f000 fa05 	bl	8006fc8 <_Bfree>
 8006bbe:	9b07      	ldr	r3, [sp, #28]
 8006bc0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006bc2:	9e00      	ldr	r6, [sp, #0]
 8006bc4:	ea42 0103 	orr.w	r1, r2, r3
 8006bc8:	9b06      	ldr	r3, [sp, #24]
 8006bca:	4319      	orrs	r1, r3
 8006bcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bce:	d10d      	bne.n	8006bec <_dtoa_r+0xa44>
 8006bd0:	2b39      	cmp	r3, #57	@ 0x39
 8006bd2:	d027      	beq.n	8006c24 <_dtoa_r+0xa7c>
 8006bd4:	9a04      	ldr	r2, [sp, #16]
 8006bd6:	2a00      	cmp	r2, #0
 8006bd8:	dd01      	ble.n	8006bde <_dtoa_r+0xa36>
 8006bda:	9b03      	ldr	r3, [sp, #12]
 8006bdc:	3331      	adds	r3, #49	@ 0x31
 8006bde:	f88b 3000 	strb.w	r3, [fp]
 8006be2:	e52e      	b.n	8006642 <_dtoa_r+0x49a>
 8006be4:	4628      	mov	r0, r5
 8006be6:	e7b9      	b.n	8006b5c <_dtoa_r+0x9b4>
 8006be8:	2201      	movs	r2, #1
 8006bea:	e7e2      	b.n	8006bb2 <_dtoa_r+0xa0a>
 8006bec:	9904      	ldr	r1, [sp, #16]
 8006bee:	2900      	cmp	r1, #0
 8006bf0:	db04      	blt.n	8006bfc <_dtoa_r+0xa54>
 8006bf2:	9807      	ldr	r0, [sp, #28]
 8006bf4:	4301      	orrs	r1, r0
 8006bf6:	9806      	ldr	r0, [sp, #24]
 8006bf8:	4301      	orrs	r1, r0
 8006bfa:	d120      	bne.n	8006c3e <_dtoa_r+0xa96>
 8006bfc:	2a00      	cmp	r2, #0
 8006bfe:	ddee      	ble.n	8006bde <_dtoa_r+0xa36>
 8006c00:	9902      	ldr	r1, [sp, #8]
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	2201      	movs	r2, #1
 8006c06:	4648      	mov	r0, r9
 8006c08:	f000 fbee 	bl	80073e8 <__lshift>
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	9002      	str	r0, [sp, #8]
 8006c10:	f000 fc56 	bl	80074c0 <__mcmp>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	9b00      	ldr	r3, [sp, #0]
 8006c18:	dc02      	bgt.n	8006c20 <_dtoa_r+0xa78>
 8006c1a:	d1e0      	bne.n	8006bde <_dtoa_r+0xa36>
 8006c1c:	07da      	lsls	r2, r3, #31
 8006c1e:	d5de      	bpl.n	8006bde <_dtoa_r+0xa36>
 8006c20:	2b39      	cmp	r3, #57	@ 0x39
 8006c22:	d1da      	bne.n	8006bda <_dtoa_r+0xa32>
 8006c24:	2339      	movs	r3, #57	@ 0x39
 8006c26:	f88b 3000 	strb.w	r3, [fp]
 8006c2a:	4633      	mov	r3, r6
 8006c2c:	461e      	mov	r6, r3
 8006c2e:	3b01      	subs	r3, #1
 8006c30:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006c34:	2a39      	cmp	r2, #57	@ 0x39
 8006c36:	d04e      	beq.n	8006cd6 <_dtoa_r+0xb2e>
 8006c38:	3201      	adds	r2, #1
 8006c3a:	701a      	strb	r2, [r3, #0]
 8006c3c:	e501      	b.n	8006642 <_dtoa_r+0x49a>
 8006c3e:	2a00      	cmp	r2, #0
 8006c40:	dd03      	ble.n	8006c4a <_dtoa_r+0xaa2>
 8006c42:	2b39      	cmp	r3, #57	@ 0x39
 8006c44:	d0ee      	beq.n	8006c24 <_dtoa_r+0xa7c>
 8006c46:	3301      	adds	r3, #1
 8006c48:	e7c9      	b.n	8006bde <_dtoa_r+0xa36>
 8006c4a:	9a00      	ldr	r2, [sp, #0]
 8006c4c:	9908      	ldr	r1, [sp, #32]
 8006c4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006c52:	428a      	cmp	r2, r1
 8006c54:	d028      	beq.n	8006ca8 <_dtoa_r+0xb00>
 8006c56:	9902      	ldr	r1, [sp, #8]
 8006c58:	2300      	movs	r3, #0
 8006c5a:	220a      	movs	r2, #10
 8006c5c:	4648      	mov	r0, r9
 8006c5e:	f000 f9d5 	bl	800700c <__multadd>
 8006c62:	42af      	cmp	r7, r5
 8006c64:	9002      	str	r0, [sp, #8]
 8006c66:	f04f 0300 	mov.w	r3, #0
 8006c6a:	f04f 020a 	mov.w	r2, #10
 8006c6e:	4639      	mov	r1, r7
 8006c70:	4648      	mov	r0, r9
 8006c72:	d107      	bne.n	8006c84 <_dtoa_r+0xadc>
 8006c74:	f000 f9ca 	bl	800700c <__multadd>
 8006c78:	4607      	mov	r7, r0
 8006c7a:	4605      	mov	r5, r0
 8006c7c:	9b00      	ldr	r3, [sp, #0]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	e777      	b.n	8006b74 <_dtoa_r+0x9cc>
 8006c84:	f000 f9c2 	bl	800700c <__multadd>
 8006c88:	4629      	mov	r1, r5
 8006c8a:	4607      	mov	r7, r0
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	220a      	movs	r2, #10
 8006c90:	4648      	mov	r0, r9
 8006c92:	f000 f9bb 	bl	800700c <__multadd>
 8006c96:	4605      	mov	r5, r0
 8006c98:	e7f0      	b.n	8006c7c <_dtoa_r+0xad4>
 8006c9a:	f1bb 0f00 	cmp.w	fp, #0
 8006c9e:	bfcc      	ite	gt
 8006ca0:	465e      	movgt	r6, fp
 8006ca2:	2601      	movle	r6, #1
 8006ca4:	4456      	add	r6, sl
 8006ca6:	2700      	movs	r7, #0
 8006ca8:	9902      	ldr	r1, [sp, #8]
 8006caa:	9300      	str	r3, [sp, #0]
 8006cac:	2201      	movs	r2, #1
 8006cae:	4648      	mov	r0, r9
 8006cb0:	f000 fb9a 	bl	80073e8 <__lshift>
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	9002      	str	r0, [sp, #8]
 8006cb8:	f000 fc02 	bl	80074c0 <__mcmp>
 8006cbc:	2800      	cmp	r0, #0
 8006cbe:	dcb4      	bgt.n	8006c2a <_dtoa_r+0xa82>
 8006cc0:	d102      	bne.n	8006cc8 <_dtoa_r+0xb20>
 8006cc2:	9b00      	ldr	r3, [sp, #0]
 8006cc4:	07db      	lsls	r3, r3, #31
 8006cc6:	d4b0      	bmi.n	8006c2a <_dtoa_r+0xa82>
 8006cc8:	4633      	mov	r3, r6
 8006cca:	461e      	mov	r6, r3
 8006ccc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cd0:	2a30      	cmp	r2, #48	@ 0x30
 8006cd2:	d0fa      	beq.n	8006cca <_dtoa_r+0xb22>
 8006cd4:	e4b5      	b.n	8006642 <_dtoa_r+0x49a>
 8006cd6:	459a      	cmp	sl, r3
 8006cd8:	d1a8      	bne.n	8006c2c <_dtoa_r+0xa84>
 8006cda:	2331      	movs	r3, #49	@ 0x31
 8006cdc:	f108 0801 	add.w	r8, r8, #1
 8006ce0:	f88a 3000 	strb.w	r3, [sl]
 8006ce4:	e4ad      	b.n	8006642 <_dtoa_r+0x49a>
 8006ce6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006ce8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8006d44 <_dtoa_r+0xb9c>
 8006cec:	b11b      	cbz	r3, 8006cf6 <_dtoa_r+0xb4e>
 8006cee:	f10a 0308 	add.w	r3, sl, #8
 8006cf2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006cf4:	6013      	str	r3, [r2, #0]
 8006cf6:	4650      	mov	r0, sl
 8006cf8:	b017      	add	sp, #92	@ 0x5c
 8006cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cfe:	9b07      	ldr	r3, [sp, #28]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	f77f ae2e 	ble.w	8006962 <_dtoa_r+0x7ba>
 8006d06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d08:	9308      	str	r3, [sp, #32]
 8006d0a:	2001      	movs	r0, #1
 8006d0c:	e64d      	b.n	80069aa <_dtoa_r+0x802>
 8006d0e:	f1bb 0f00 	cmp.w	fp, #0
 8006d12:	f77f aed9 	ble.w	8006ac8 <_dtoa_r+0x920>
 8006d16:	4656      	mov	r6, sl
 8006d18:	9802      	ldr	r0, [sp, #8]
 8006d1a:	4621      	mov	r1, r4
 8006d1c:	f7ff f9bc 	bl	8006098 <quorem>
 8006d20:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8006d24:	f806 3b01 	strb.w	r3, [r6], #1
 8006d28:	eba6 020a 	sub.w	r2, r6, sl
 8006d2c:	4593      	cmp	fp, r2
 8006d2e:	ddb4      	ble.n	8006c9a <_dtoa_r+0xaf2>
 8006d30:	9902      	ldr	r1, [sp, #8]
 8006d32:	2300      	movs	r3, #0
 8006d34:	220a      	movs	r2, #10
 8006d36:	4648      	mov	r0, r9
 8006d38:	f000 f968 	bl	800700c <__multadd>
 8006d3c:	9002      	str	r0, [sp, #8]
 8006d3e:	e7eb      	b.n	8006d18 <_dtoa_r+0xb70>
 8006d40:	08009aa3 	.word	0x08009aa3
 8006d44:	08009a3e 	.word	0x08009a3e

08006d48 <_free_r>:
 8006d48:	b538      	push	{r3, r4, r5, lr}
 8006d4a:	4605      	mov	r5, r0
 8006d4c:	2900      	cmp	r1, #0
 8006d4e:	d041      	beq.n	8006dd4 <_free_r+0x8c>
 8006d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d54:	1f0c      	subs	r4, r1, #4
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	bfb8      	it	lt
 8006d5a:	18e4      	addlt	r4, r4, r3
 8006d5c:	f000 f8e8 	bl	8006f30 <__malloc_lock>
 8006d60:	4a1d      	ldr	r2, [pc, #116]	@ (8006dd8 <_free_r+0x90>)
 8006d62:	6813      	ldr	r3, [r2, #0]
 8006d64:	b933      	cbnz	r3, 8006d74 <_free_r+0x2c>
 8006d66:	6063      	str	r3, [r4, #4]
 8006d68:	6014      	str	r4, [r2, #0]
 8006d6a:	4628      	mov	r0, r5
 8006d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006d70:	f000 b8e4 	b.w	8006f3c <__malloc_unlock>
 8006d74:	42a3      	cmp	r3, r4
 8006d76:	d908      	bls.n	8006d8a <_free_r+0x42>
 8006d78:	6820      	ldr	r0, [r4, #0]
 8006d7a:	1821      	adds	r1, r4, r0
 8006d7c:	428b      	cmp	r3, r1
 8006d7e:	bf01      	itttt	eq
 8006d80:	6819      	ldreq	r1, [r3, #0]
 8006d82:	685b      	ldreq	r3, [r3, #4]
 8006d84:	1809      	addeq	r1, r1, r0
 8006d86:	6021      	streq	r1, [r4, #0]
 8006d88:	e7ed      	b.n	8006d66 <_free_r+0x1e>
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	b10b      	cbz	r3, 8006d94 <_free_r+0x4c>
 8006d90:	42a3      	cmp	r3, r4
 8006d92:	d9fa      	bls.n	8006d8a <_free_r+0x42>
 8006d94:	6811      	ldr	r1, [r2, #0]
 8006d96:	1850      	adds	r0, r2, r1
 8006d98:	42a0      	cmp	r0, r4
 8006d9a:	d10b      	bne.n	8006db4 <_free_r+0x6c>
 8006d9c:	6820      	ldr	r0, [r4, #0]
 8006d9e:	4401      	add	r1, r0
 8006da0:	1850      	adds	r0, r2, r1
 8006da2:	4283      	cmp	r3, r0
 8006da4:	6011      	str	r1, [r2, #0]
 8006da6:	d1e0      	bne.n	8006d6a <_free_r+0x22>
 8006da8:	6818      	ldr	r0, [r3, #0]
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	6053      	str	r3, [r2, #4]
 8006dae:	4408      	add	r0, r1
 8006db0:	6010      	str	r0, [r2, #0]
 8006db2:	e7da      	b.n	8006d6a <_free_r+0x22>
 8006db4:	d902      	bls.n	8006dbc <_free_r+0x74>
 8006db6:	230c      	movs	r3, #12
 8006db8:	602b      	str	r3, [r5, #0]
 8006dba:	e7d6      	b.n	8006d6a <_free_r+0x22>
 8006dbc:	6820      	ldr	r0, [r4, #0]
 8006dbe:	1821      	adds	r1, r4, r0
 8006dc0:	428b      	cmp	r3, r1
 8006dc2:	bf04      	itt	eq
 8006dc4:	6819      	ldreq	r1, [r3, #0]
 8006dc6:	685b      	ldreq	r3, [r3, #4]
 8006dc8:	6063      	str	r3, [r4, #4]
 8006dca:	bf04      	itt	eq
 8006dcc:	1809      	addeq	r1, r1, r0
 8006dce:	6021      	streq	r1, [r4, #0]
 8006dd0:	6054      	str	r4, [r2, #4]
 8006dd2:	e7ca      	b.n	8006d6a <_free_r+0x22>
 8006dd4:	bd38      	pop	{r3, r4, r5, pc}
 8006dd6:	bf00      	nop
 8006dd8:	20000d0c 	.word	0x20000d0c

08006ddc <malloc>:
 8006ddc:	4b02      	ldr	r3, [pc, #8]	@ (8006de8 <malloc+0xc>)
 8006dde:	4601      	mov	r1, r0
 8006de0:	6818      	ldr	r0, [r3, #0]
 8006de2:	f000 b825 	b.w	8006e30 <_malloc_r>
 8006de6:	bf00      	nop
 8006de8:	2000001c 	.word	0x2000001c

08006dec <sbrk_aligned>:
 8006dec:	b570      	push	{r4, r5, r6, lr}
 8006dee:	4e0f      	ldr	r6, [pc, #60]	@ (8006e2c <sbrk_aligned+0x40>)
 8006df0:	460c      	mov	r4, r1
 8006df2:	6831      	ldr	r1, [r6, #0]
 8006df4:	4605      	mov	r5, r0
 8006df6:	b911      	cbnz	r1, 8006dfe <sbrk_aligned+0x12>
 8006df8:	f001 fffe 	bl	8008df8 <_sbrk_r>
 8006dfc:	6030      	str	r0, [r6, #0]
 8006dfe:	4621      	mov	r1, r4
 8006e00:	4628      	mov	r0, r5
 8006e02:	f001 fff9 	bl	8008df8 <_sbrk_r>
 8006e06:	1c43      	adds	r3, r0, #1
 8006e08:	d103      	bne.n	8006e12 <sbrk_aligned+0x26>
 8006e0a:	f04f 34ff 	mov.w	r4, #4294967295
 8006e0e:	4620      	mov	r0, r4
 8006e10:	bd70      	pop	{r4, r5, r6, pc}
 8006e12:	1cc4      	adds	r4, r0, #3
 8006e14:	f024 0403 	bic.w	r4, r4, #3
 8006e18:	42a0      	cmp	r0, r4
 8006e1a:	d0f8      	beq.n	8006e0e <sbrk_aligned+0x22>
 8006e1c:	1a21      	subs	r1, r4, r0
 8006e1e:	4628      	mov	r0, r5
 8006e20:	f001 ffea 	bl	8008df8 <_sbrk_r>
 8006e24:	3001      	adds	r0, #1
 8006e26:	d1f2      	bne.n	8006e0e <sbrk_aligned+0x22>
 8006e28:	e7ef      	b.n	8006e0a <sbrk_aligned+0x1e>
 8006e2a:	bf00      	nop
 8006e2c:	20000d08 	.word	0x20000d08

08006e30 <_malloc_r>:
 8006e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e34:	1ccd      	adds	r5, r1, #3
 8006e36:	f025 0503 	bic.w	r5, r5, #3
 8006e3a:	3508      	adds	r5, #8
 8006e3c:	2d0c      	cmp	r5, #12
 8006e3e:	bf38      	it	cc
 8006e40:	250c      	movcc	r5, #12
 8006e42:	2d00      	cmp	r5, #0
 8006e44:	4606      	mov	r6, r0
 8006e46:	db01      	blt.n	8006e4c <_malloc_r+0x1c>
 8006e48:	42a9      	cmp	r1, r5
 8006e4a:	d904      	bls.n	8006e56 <_malloc_r+0x26>
 8006e4c:	230c      	movs	r3, #12
 8006e4e:	6033      	str	r3, [r6, #0]
 8006e50:	2000      	movs	r0, #0
 8006e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f2c <_malloc_r+0xfc>
 8006e5a:	f000 f869 	bl	8006f30 <__malloc_lock>
 8006e5e:	f8d8 3000 	ldr.w	r3, [r8]
 8006e62:	461c      	mov	r4, r3
 8006e64:	bb44      	cbnz	r4, 8006eb8 <_malloc_r+0x88>
 8006e66:	4629      	mov	r1, r5
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f7ff ffbf 	bl	8006dec <sbrk_aligned>
 8006e6e:	1c43      	adds	r3, r0, #1
 8006e70:	4604      	mov	r4, r0
 8006e72:	d158      	bne.n	8006f26 <_malloc_r+0xf6>
 8006e74:	f8d8 4000 	ldr.w	r4, [r8]
 8006e78:	4627      	mov	r7, r4
 8006e7a:	2f00      	cmp	r7, #0
 8006e7c:	d143      	bne.n	8006f06 <_malloc_r+0xd6>
 8006e7e:	2c00      	cmp	r4, #0
 8006e80:	d04b      	beq.n	8006f1a <_malloc_r+0xea>
 8006e82:	6823      	ldr	r3, [r4, #0]
 8006e84:	4639      	mov	r1, r7
 8006e86:	4630      	mov	r0, r6
 8006e88:	eb04 0903 	add.w	r9, r4, r3
 8006e8c:	f001 ffb4 	bl	8008df8 <_sbrk_r>
 8006e90:	4581      	cmp	r9, r0
 8006e92:	d142      	bne.n	8006f1a <_malloc_r+0xea>
 8006e94:	6821      	ldr	r1, [r4, #0]
 8006e96:	1a6d      	subs	r5, r5, r1
 8006e98:	4629      	mov	r1, r5
 8006e9a:	4630      	mov	r0, r6
 8006e9c:	f7ff ffa6 	bl	8006dec <sbrk_aligned>
 8006ea0:	3001      	adds	r0, #1
 8006ea2:	d03a      	beq.n	8006f1a <_malloc_r+0xea>
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	442b      	add	r3, r5
 8006ea8:	6023      	str	r3, [r4, #0]
 8006eaa:	f8d8 3000 	ldr.w	r3, [r8]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	bb62      	cbnz	r2, 8006f0c <_malloc_r+0xdc>
 8006eb2:	f8c8 7000 	str.w	r7, [r8]
 8006eb6:	e00f      	b.n	8006ed8 <_malloc_r+0xa8>
 8006eb8:	6822      	ldr	r2, [r4, #0]
 8006eba:	1b52      	subs	r2, r2, r5
 8006ebc:	d420      	bmi.n	8006f00 <_malloc_r+0xd0>
 8006ebe:	2a0b      	cmp	r2, #11
 8006ec0:	d917      	bls.n	8006ef2 <_malloc_r+0xc2>
 8006ec2:	1961      	adds	r1, r4, r5
 8006ec4:	42a3      	cmp	r3, r4
 8006ec6:	6025      	str	r5, [r4, #0]
 8006ec8:	bf18      	it	ne
 8006eca:	6059      	strne	r1, [r3, #4]
 8006ecc:	6863      	ldr	r3, [r4, #4]
 8006ece:	bf08      	it	eq
 8006ed0:	f8c8 1000 	streq.w	r1, [r8]
 8006ed4:	5162      	str	r2, [r4, r5]
 8006ed6:	604b      	str	r3, [r1, #4]
 8006ed8:	4630      	mov	r0, r6
 8006eda:	f000 f82f 	bl	8006f3c <__malloc_unlock>
 8006ede:	f104 000b 	add.w	r0, r4, #11
 8006ee2:	1d23      	adds	r3, r4, #4
 8006ee4:	f020 0007 	bic.w	r0, r0, #7
 8006ee8:	1ac2      	subs	r2, r0, r3
 8006eea:	bf1c      	itt	ne
 8006eec:	1a1b      	subne	r3, r3, r0
 8006eee:	50a3      	strne	r3, [r4, r2]
 8006ef0:	e7af      	b.n	8006e52 <_malloc_r+0x22>
 8006ef2:	6862      	ldr	r2, [r4, #4]
 8006ef4:	42a3      	cmp	r3, r4
 8006ef6:	bf0c      	ite	eq
 8006ef8:	f8c8 2000 	streq.w	r2, [r8]
 8006efc:	605a      	strne	r2, [r3, #4]
 8006efe:	e7eb      	b.n	8006ed8 <_malloc_r+0xa8>
 8006f00:	4623      	mov	r3, r4
 8006f02:	6864      	ldr	r4, [r4, #4]
 8006f04:	e7ae      	b.n	8006e64 <_malloc_r+0x34>
 8006f06:	463c      	mov	r4, r7
 8006f08:	687f      	ldr	r7, [r7, #4]
 8006f0a:	e7b6      	b.n	8006e7a <_malloc_r+0x4a>
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	42a3      	cmp	r3, r4
 8006f12:	d1fb      	bne.n	8006f0c <_malloc_r+0xdc>
 8006f14:	2300      	movs	r3, #0
 8006f16:	6053      	str	r3, [r2, #4]
 8006f18:	e7de      	b.n	8006ed8 <_malloc_r+0xa8>
 8006f1a:	230c      	movs	r3, #12
 8006f1c:	6033      	str	r3, [r6, #0]
 8006f1e:	4630      	mov	r0, r6
 8006f20:	f000 f80c 	bl	8006f3c <__malloc_unlock>
 8006f24:	e794      	b.n	8006e50 <_malloc_r+0x20>
 8006f26:	6005      	str	r5, [r0, #0]
 8006f28:	e7d6      	b.n	8006ed8 <_malloc_r+0xa8>
 8006f2a:	bf00      	nop
 8006f2c:	20000d0c 	.word	0x20000d0c

08006f30 <__malloc_lock>:
 8006f30:	4801      	ldr	r0, [pc, #4]	@ (8006f38 <__malloc_lock+0x8>)
 8006f32:	f7ff b874 	b.w	800601e <__retarget_lock_acquire_recursive>
 8006f36:	bf00      	nop
 8006f38:	20000d04 	.word	0x20000d04

08006f3c <__malloc_unlock>:
 8006f3c:	4801      	ldr	r0, [pc, #4]	@ (8006f44 <__malloc_unlock+0x8>)
 8006f3e:	f7ff b86f 	b.w	8006020 <__retarget_lock_release_recursive>
 8006f42:	bf00      	nop
 8006f44:	20000d04 	.word	0x20000d04

08006f48 <_Balloc>:
 8006f48:	b570      	push	{r4, r5, r6, lr}
 8006f4a:	69c6      	ldr	r6, [r0, #28]
 8006f4c:	4604      	mov	r4, r0
 8006f4e:	460d      	mov	r5, r1
 8006f50:	b976      	cbnz	r6, 8006f70 <_Balloc+0x28>
 8006f52:	2010      	movs	r0, #16
 8006f54:	f7ff ff42 	bl	8006ddc <malloc>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	61e0      	str	r0, [r4, #28]
 8006f5c:	b920      	cbnz	r0, 8006f68 <_Balloc+0x20>
 8006f5e:	4b18      	ldr	r3, [pc, #96]	@ (8006fc0 <_Balloc+0x78>)
 8006f60:	4818      	ldr	r0, [pc, #96]	@ (8006fc4 <_Balloc+0x7c>)
 8006f62:	216b      	movs	r1, #107	@ 0x6b
 8006f64:	f7ff f87a 	bl	800605c <__assert_func>
 8006f68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f6c:	6006      	str	r6, [r0, #0]
 8006f6e:	60c6      	str	r6, [r0, #12]
 8006f70:	69e6      	ldr	r6, [r4, #28]
 8006f72:	68f3      	ldr	r3, [r6, #12]
 8006f74:	b183      	cbz	r3, 8006f98 <_Balloc+0x50>
 8006f76:	69e3      	ldr	r3, [r4, #28]
 8006f78:	68db      	ldr	r3, [r3, #12]
 8006f7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f7e:	b9b8      	cbnz	r0, 8006fb0 <_Balloc+0x68>
 8006f80:	2101      	movs	r1, #1
 8006f82:	fa01 f605 	lsl.w	r6, r1, r5
 8006f86:	1d72      	adds	r2, r6, #5
 8006f88:	0092      	lsls	r2, r2, #2
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f001 ff53 	bl	8008e36 <_calloc_r>
 8006f90:	b160      	cbz	r0, 8006fac <_Balloc+0x64>
 8006f92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f96:	e00e      	b.n	8006fb6 <_Balloc+0x6e>
 8006f98:	2221      	movs	r2, #33	@ 0x21
 8006f9a:	2104      	movs	r1, #4
 8006f9c:	4620      	mov	r0, r4
 8006f9e:	f001 ff4a 	bl	8008e36 <_calloc_r>
 8006fa2:	69e3      	ldr	r3, [r4, #28]
 8006fa4:	60f0      	str	r0, [r6, #12]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e4      	bne.n	8006f76 <_Balloc+0x2e>
 8006fac:	2000      	movs	r0, #0
 8006fae:	bd70      	pop	{r4, r5, r6, pc}
 8006fb0:	6802      	ldr	r2, [r0, #0]
 8006fb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006fbc:	e7f7      	b.n	8006fae <_Balloc+0x66>
 8006fbe:	bf00      	nop
 8006fc0:	08009991 	.word	0x08009991
 8006fc4:	08009ab4 	.word	0x08009ab4

08006fc8 <_Bfree>:
 8006fc8:	b570      	push	{r4, r5, r6, lr}
 8006fca:	69c6      	ldr	r6, [r0, #28]
 8006fcc:	4605      	mov	r5, r0
 8006fce:	460c      	mov	r4, r1
 8006fd0:	b976      	cbnz	r6, 8006ff0 <_Bfree+0x28>
 8006fd2:	2010      	movs	r0, #16
 8006fd4:	f7ff ff02 	bl	8006ddc <malloc>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	61e8      	str	r0, [r5, #28]
 8006fdc:	b920      	cbnz	r0, 8006fe8 <_Bfree+0x20>
 8006fde:	4b09      	ldr	r3, [pc, #36]	@ (8007004 <_Bfree+0x3c>)
 8006fe0:	4809      	ldr	r0, [pc, #36]	@ (8007008 <_Bfree+0x40>)
 8006fe2:	218f      	movs	r1, #143	@ 0x8f
 8006fe4:	f7ff f83a 	bl	800605c <__assert_func>
 8006fe8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fec:	6006      	str	r6, [r0, #0]
 8006fee:	60c6      	str	r6, [r0, #12]
 8006ff0:	b13c      	cbz	r4, 8007002 <_Bfree+0x3a>
 8006ff2:	69eb      	ldr	r3, [r5, #28]
 8006ff4:	6862      	ldr	r2, [r4, #4]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006ffc:	6021      	str	r1, [r4, #0]
 8006ffe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007002:	bd70      	pop	{r4, r5, r6, pc}
 8007004:	08009991 	.word	0x08009991
 8007008:	08009ab4 	.word	0x08009ab4

0800700c <__multadd>:
 800700c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007010:	690d      	ldr	r5, [r1, #16]
 8007012:	4607      	mov	r7, r0
 8007014:	460c      	mov	r4, r1
 8007016:	461e      	mov	r6, r3
 8007018:	f101 0c14 	add.w	ip, r1, #20
 800701c:	2000      	movs	r0, #0
 800701e:	f8dc 3000 	ldr.w	r3, [ip]
 8007022:	b299      	uxth	r1, r3
 8007024:	fb02 6101 	mla	r1, r2, r1, r6
 8007028:	0c1e      	lsrs	r6, r3, #16
 800702a:	0c0b      	lsrs	r3, r1, #16
 800702c:	fb02 3306 	mla	r3, r2, r6, r3
 8007030:	b289      	uxth	r1, r1
 8007032:	3001      	adds	r0, #1
 8007034:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007038:	4285      	cmp	r5, r0
 800703a:	f84c 1b04 	str.w	r1, [ip], #4
 800703e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007042:	dcec      	bgt.n	800701e <__multadd+0x12>
 8007044:	b30e      	cbz	r6, 800708a <__multadd+0x7e>
 8007046:	68a3      	ldr	r3, [r4, #8]
 8007048:	42ab      	cmp	r3, r5
 800704a:	dc19      	bgt.n	8007080 <__multadd+0x74>
 800704c:	6861      	ldr	r1, [r4, #4]
 800704e:	4638      	mov	r0, r7
 8007050:	3101      	adds	r1, #1
 8007052:	f7ff ff79 	bl	8006f48 <_Balloc>
 8007056:	4680      	mov	r8, r0
 8007058:	b928      	cbnz	r0, 8007066 <__multadd+0x5a>
 800705a:	4602      	mov	r2, r0
 800705c:	4b0c      	ldr	r3, [pc, #48]	@ (8007090 <__multadd+0x84>)
 800705e:	480d      	ldr	r0, [pc, #52]	@ (8007094 <__multadd+0x88>)
 8007060:	21ba      	movs	r1, #186	@ 0xba
 8007062:	f7fe fffb 	bl	800605c <__assert_func>
 8007066:	6922      	ldr	r2, [r4, #16]
 8007068:	3202      	adds	r2, #2
 800706a:	f104 010c 	add.w	r1, r4, #12
 800706e:	0092      	lsls	r2, r2, #2
 8007070:	300c      	adds	r0, #12
 8007072:	f7fe ffde 	bl	8006032 <memcpy>
 8007076:	4621      	mov	r1, r4
 8007078:	4638      	mov	r0, r7
 800707a:	f7ff ffa5 	bl	8006fc8 <_Bfree>
 800707e:	4644      	mov	r4, r8
 8007080:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007084:	3501      	adds	r5, #1
 8007086:	615e      	str	r6, [r3, #20]
 8007088:	6125      	str	r5, [r4, #16]
 800708a:	4620      	mov	r0, r4
 800708c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007090:	08009aa3 	.word	0x08009aa3
 8007094:	08009ab4 	.word	0x08009ab4

08007098 <__s2b>:
 8007098:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800709c:	460c      	mov	r4, r1
 800709e:	4615      	mov	r5, r2
 80070a0:	461f      	mov	r7, r3
 80070a2:	2209      	movs	r2, #9
 80070a4:	3308      	adds	r3, #8
 80070a6:	4606      	mov	r6, r0
 80070a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80070ac:	2100      	movs	r1, #0
 80070ae:	2201      	movs	r2, #1
 80070b0:	429a      	cmp	r2, r3
 80070b2:	db09      	blt.n	80070c8 <__s2b+0x30>
 80070b4:	4630      	mov	r0, r6
 80070b6:	f7ff ff47 	bl	8006f48 <_Balloc>
 80070ba:	b940      	cbnz	r0, 80070ce <__s2b+0x36>
 80070bc:	4602      	mov	r2, r0
 80070be:	4b19      	ldr	r3, [pc, #100]	@ (8007124 <__s2b+0x8c>)
 80070c0:	4819      	ldr	r0, [pc, #100]	@ (8007128 <__s2b+0x90>)
 80070c2:	21d3      	movs	r1, #211	@ 0xd3
 80070c4:	f7fe ffca 	bl	800605c <__assert_func>
 80070c8:	0052      	lsls	r2, r2, #1
 80070ca:	3101      	adds	r1, #1
 80070cc:	e7f0      	b.n	80070b0 <__s2b+0x18>
 80070ce:	9b08      	ldr	r3, [sp, #32]
 80070d0:	6143      	str	r3, [r0, #20]
 80070d2:	2d09      	cmp	r5, #9
 80070d4:	f04f 0301 	mov.w	r3, #1
 80070d8:	6103      	str	r3, [r0, #16]
 80070da:	dd16      	ble.n	800710a <__s2b+0x72>
 80070dc:	f104 0909 	add.w	r9, r4, #9
 80070e0:	46c8      	mov	r8, r9
 80070e2:	442c      	add	r4, r5
 80070e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80070e8:	4601      	mov	r1, r0
 80070ea:	3b30      	subs	r3, #48	@ 0x30
 80070ec:	220a      	movs	r2, #10
 80070ee:	4630      	mov	r0, r6
 80070f0:	f7ff ff8c 	bl	800700c <__multadd>
 80070f4:	45a0      	cmp	r8, r4
 80070f6:	d1f5      	bne.n	80070e4 <__s2b+0x4c>
 80070f8:	f1a5 0408 	sub.w	r4, r5, #8
 80070fc:	444c      	add	r4, r9
 80070fe:	1b2d      	subs	r5, r5, r4
 8007100:	1963      	adds	r3, r4, r5
 8007102:	42bb      	cmp	r3, r7
 8007104:	db04      	blt.n	8007110 <__s2b+0x78>
 8007106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800710a:	340a      	adds	r4, #10
 800710c:	2509      	movs	r5, #9
 800710e:	e7f6      	b.n	80070fe <__s2b+0x66>
 8007110:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007114:	4601      	mov	r1, r0
 8007116:	3b30      	subs	r3, #48	@ 0x30
 8007118:	220a      	movs	r2, #10
 800711a:	4630      	mov	r0, r6
 800711c:	f7ff ff76 	bl	800700c <__multadd>
 8007120:	e7ee      	b.n	8007100 <__s2b+0x68>
 8007122:	bf00      	nop
 8007124:	08009aa3 	.word	0x08009aa3
 8007128:	08009ab4 	.word	0x08009ab4

0800712c <__hi0bits>:
 800712c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007130:	4603      	mov	r3, r0
 8007132:	bf36      	itet	cc
 8007134:	0403      	lslcc	r3, r0, #16
 8007136:	2000      	movcs	r0, #0
 8007138:	2010      	movcc	r0, #16
 800713a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800713e:	bf3c      	itt	cc
 8007140:	021b      	lslcc	r3, r3, #8
 8007142:	3008      	addcc	r0, #8
 8007144:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007148:	bf3c      	itt	cc
 800714a:	011b      	lslcc	r3, r3, #4
 800714c:	3004      	addcc	r0, #4
 800714e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007152:	bf3c      	itt	cc
 8007154:	009b      	lslcc	r3, r3, #2
 8007156:	3002      	addcc	r0, #2
 8007158:	2b00      	cmp	r3, #0
 800715a:	db05      	blt.n	8007168 <__hi0bits+0x3c>
 800715c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007160:	f100 0001 	add.w	r0, r0, #1
 8007164:	bf08      	it	eq
 8007166:	2020      	moveq	r0, #32
 8007168:	4770      	bx	lr

0800716a <__lo0bits>:
 800716a:	6803      	ldr	r3, [r0, #0]
 800716c:	4602      	mov	r2, r0
 800716e:	f013 0007 	ands.w	r0, r3, #7
 8007172:	d00b      	beq.n	800718c <__lo0bits+0x22>
 8007174:	07d9      	lsls	r1, r3, #31
 8007176:	d421      	bmi.n	80071bc <__lo0bits+0x52>
 8007178:	0798      	lsls	r0, r3, #30
 800717a:	bf49      	itett	mi
 800717c:	085b      	lsrmi	r3, r3, #1
 800717e:	089b      	lsrpl	r3, r3, #2
 8007180:	2001      	movmi	r0, #1
 8007182:	6013      	strmi	r3, [r2, #0]
 8007184:	bf5c      	itt	pl
 8007186:	6013      	strpl	r3, [r2, #0]
 8007188:	2002      	movpl	r0, #2
 800718a:	4770      	bx	lr
 800718c:	b299      	uxth	r1, r3
 800718e:	b909      	cbnz	r1, 8007194 <__lo0bits+0x2a>
 8007190:	0c1b      	lsrs	r3, r3, #16
 8007192:	2010      	movs	r0, #16
 8007194:	b2d9      	uxtb	r1, r3
 8007196:	b909      	cbnz	r1, 800719c <__lo0bits+0x32>
 8007198:	3008      	adds	r0, #8
 800719a:	0a1b      	lsrs	r3, r3, #8
 800719c:	0719      	lsls	r1, r3, #28
 800719e:	bf04      	itt	eq
 80071a0:	091b      	lsreq	r3, r3, #4
 80071a2:	3004      	addeq	r0, #4
 80071a4:	0799      	lsls	r1, r3, #30
 80071a6:	bf04      	itt	eq
 80071a8:	089b      	lsreq	r3, r3, #2
 80071aa:	3002      	addeq	r0, #2
 80071ac:	07d9      	lsls	r1, r3, #31
 80071ae:	d403      	bmi.n	80071b8 <__lo0bits+0x4e>
 80071b0:	085b      	lsrs	r3, r3, #1
 80071b2:	f100 0001 	add.w	r0, r0, #1
 80071b6:	d003      	beq.n	80071c0 <__lo0bits+0x56>
 80071b8:	6013      	str	r3, [r2, #0]
 80071ba:	4770      	bx	lr
 80071bc:	2000      	movs	r0, #0
 80071be:	4770      	bx	lr
 80071c0:	2020      	movs	r0, #32
 80071c2:	4770      	bx	lr

080071c4 <__i2b>:
 80071c4:	b510      	push	{r4, lr}
 80071c6:	460c      	mov	r4, r1
 80071c8:	2101      	movs	r1, #1
 80071ca:	f7ff febd 	bl	8006f48 <_Balloc>
 80071ce:	4602      	mov	r2, r0
 80071d0:	b928      	cbnz	r0, 80071de <__i2b+0x1a>
 80071d2:	4b05      	ldr	r3, [pc, #20]	@ (80071e8 <__i2b+0x24>)
 80071d4:	4805      	ldr	r0, [pc, #20]	@ (80071ec <__i2b+0x28>)
 80071d6:	f240 1145 	movw	r1, #325	@ 0x145
 80071da:	f7fe ff3f 	bl	800605c <__assert_func>
 80071de:	2301      	movs	r3, #1
 80071e0:	6144      	str	r4, [r0, #20]
 80071e2:	6103      	str	r3, [r0, #16]
 80071e4:	bd10      	pop	{r4, pc}
 80071e6:	bf00      	nop
 80071e8:	08009aa3 	.word	0x08009aa3
 80071ec:	08009ab4 	.word	0x08009ab4

080071f0 <__multiply>:
 80071f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071f4:	4617      	mov	r7, r2
 80071f6:	690a      	ldr	r2, [r1, #16]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	bfa8      	it	ge
 80071fe:	463b      	movge	r3, r7
 8007200:	4689      	mov	r9, r1
 8007202:	bfa4      	itt	ge
 8007204:	460f      	movge	r7, r1
 8007206:	4699      	movge	r9, r3
 8007208:	693d      	ldr	r5, [r7, #16]
 800720a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	6879      	ldr	r1, [r7, #4]
 8007212:	eb05 060a 	add.w	r6, r5, sl
 8007216:	42b3      	cmp	r3, r6
 8007218:	b085      	sub	sp, #20
 800721a:	bfb8      	it	lt
 800721c:	3101      	addlt	r1, #1
 800721e:	f7ff fe93 	bl	8006f48 <_Balloc>
 8007222:	b930      	cbnz	r0, 8007232 <__multiply+0x42>
 8007224:	4602      	mov	r2, r0
 8007226:	4b41      	ldr	r3, [pc, #260]	@ (800732c <__multiply+0x13c>)
 8007228:	4841      	ldr	r0, [pc, #260]	@ (8007330 <__multiply+0x140>)
 800722a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800722e:	f7fe ff15 	bl	800605c <__assert_func>
 8007232:	f100 0414 	add.w	r4, r0, #20
 8007236:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800723a:	4623      	mov	r3, r4
 800723c:	2200      	movs	r2, #0
 800723e:	4573      	cmp	r3, lr
 8007240:	d320      	bcc.n	8007284 <__multiply+0x94>
 8007242:	f107 0814 	add.w	r8, r7, #20
 8007246:	f109 0114 	add.w	r1, r9, #20
 800724a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800724e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007252:	9302      	str	r3, [sp, #8]
 8007254:	1beb      	subs	r3, r5, r7
 8007256:	3b15      	subs	r3, #21
 8007258:	f023 0303 	bic.w	r3, r3, #3
 800725c:	3304      	adds	r3, #4
 800725e:	3715      	adds	r7, #21
 8007260:	42bd      	cmp	r5, r7
 8007262:	bf38      	it	cc
 8007264:	2304      	movcc	r3, #4
 8007266:	9301      	str	r3, [sp, #4]
 8007268:	9b02      	ldr	r3, [sp, #8]
 800726a:	9103      	str	r1, [sp, #12]
 800726c:	428b      	cmp	r3, r1
 800726e:	d80c      	bhi.n	800728a <__multiply+0x9a>
 8007270:	2e00      	cmp	r6, #0
 8007272:	dd03      	ble.n	800727c <__multiply+0x8c>
 8007274:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007278:	2b00      	cmp	r3, #0
 800727a:	d055      	beq.n	8007328 <__multiply+0x138>
 800727c:	6106      	str	r6, [r0, #16]
 800727e:	b005      	add	sp, #20
 8007280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007284:	f843 2b04 	str.w	r2, [r3], #4
 8007288:	e7d9      	b.n	800723e <__multiply+0x4e>
 800728a:	f8b1 a000 	ldrh.w	sl, [r1]
 800728e:	f1ba 0f00 	cmp.w	sl, #0
 8007292:	d01f      	beq.n	80072d4 <__multiply+0xe4>
 8007294:	46c4      	mov	ip, r8
 8007296:	46a1      	mov	r9, r4
 8007298:	2700      	movs	r7, #0
 800729a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800729e:	f8d9 3000 	ldr.w	r3, [r9]
 80072a2:	fa1f fb82 	uxth.w	fp, r2
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	fb0a 330b 	mla	r3, sl, fp, r3
 80072ac:	443b      	add	r3, r7
 80072ae:	f8d9 7000 	ldr.w	r7, [r9]
 80072b2:	0c12      	lsrs	r2, r2, #16
 80072b4:	0c3f      	lsrs	r7, r7, #16
 80072b6:	fb0a 7202 	mla	r2, sl, r2, r7
 80072ba:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80072be:	b29b      	uxth	r3, r3
 80072c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80072c4:	4565      	cmp	r5, ip
 80072c6:	f849 3b04 	str.w	r3, [r9], #4
 80072ca:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80072ce:	d8e4      	bhi.n	800729a <__multiply+0xaa>
 80072d0:	9b01      	ldr	r3, [sp, #4]
 80072d2:	50e7      	str	r7, [r4, r3]
 80072d4:	9b03      	ldr	r3, [sp, #12]
 80072d6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80072da:	3104      	adds	r1, #4
 80072dc:	f1b9 0f00 	cmp.w	r9, #0
 80072e0:	d020      	beq.n	8007324 <__multiply+0x134>
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	4647      	mov	r7, r8
 80072e6:	46a4      	mov	ip, r4
 80072e8:	f04f 0a00 	mov.w	sl, #0
 80072ec:	f8b7 b000 	ldrh.w	fp, [r7]
 80072f0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80072f4:	fb09 220b 	mla	r2, r9, fp, r2
 80072f8:	4452      	add	r2, sl
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007300:	f84c 3b04 	str.w	r3, [ip], #4
 8007304:	f857 3b04 	ldr.w	r3, [r7], #4
 8007308:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800730c:	f8bc 3000 	ldrh.w	r3, [ip]
 8007310:	fb09 330a 	mla	r3, r9, sl, r3
 8007314:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007318:	42bd      	cmp	r5, r7
 800731a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800731e:	d8e5      	bhi.n	80072ec <__multiply+0xfc>
 8007320:	9a01      	ldr	r2, [sp, #4]
 8007322:	50a3      	str	r3, [r4, r2]
 8007324:	3404      	adds	r4, #4
 8007326:	e79f      	b.n	8007268 <__multiply+0x78>
 8007328:	3e01      	subs	r6, #1
 800732a:	e7a1      	b.n	8007270 <__multiply+0x80>
 800732c:	08009aa3 	.word	0x08009aa3
 8007330:	08009ab4 	.word	0x08009ab4

08007334 <__pow5mult>:
 8007334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007338:	4615      	mov	r5, r2
 800733a:	f012 0203 	ands.w	r2, r2, #3
 800733e:	4607      	mov	r7, r0
 8007340:	460e      	mov	r6, r1
 8007342:	d007      	beq.n	8007354 <__pow5mult+0x20>
 8007344:	4c25      	ldr	r4, [pc, #148]	@ (80073dc <__pow5mult+0xa8>)
 8007346:	3a01      	subs	r2, #1
 8007348:	2300      	movs	r3, #0
 800734a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800734e:	f7ff fe5d 	bl	800700c <__multadd>
 8007352:	4606      	mov	r6, r0
 8007354:	10ad      	asrs	r5, r5, #2
 8007356:	d03d      	beq.n	80073d4 <__pow5mult+0xa0>
 8007358:	69fc      	ldr	r4, [r7, #28]
 800735a:	b97c      	cbnz	r4, 800737c <__pow5mult+0x48>
 800735c:	2010      	movs	r0, #16
 800735e:	f7ff fd3d 	bl	8006ddc <malloc>
 8007362:	4602      	mov	r2, r0
 8007364:	61f8      	str	r0, [r7, #28]
 8007366:	b928      	cbnz	r0, 8007374 <__pow5mult+0x40>
 8007368:	4b1d      	ldr	r3, [pc, #116]	@ (80073e0 <__pow5mult+0xac>)
 800736a:	481e      	ldr	r0, [pc, #120]	@ (80073e4 <__pow5mult+0xb0>)
 800736c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007370:	f7fe fe74 	bl	800605c <__assert_func>
 8007374:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007378:	6004      	str	r4, [r0, #0]
 800737a:	60c4      	str	r4, [r0, #12]
 800737c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007380:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007384:	b94c      	cbnz	r4, 800739a <__pow5mult+0x66>
 8007386:	f240 2171 	movw	r1, #625	@ 0x271
 800738a:	4638      	mov	r0, r7
 800738c:	f7ff ff1a 	bl	80071c4 <__i2b>
 8007390:	2300      	movs	r3, #0
 8007392:	f8c8 0008 	str.w	r0, [r8, #8]
 8007396:	4604      	mov	r4, r0
 8007398:	6003      	str	r3, [r0, #0]
 800739a:	f04f 0900 	mov.w	r9, #0
 800739e:	07eb      	lsls	r3, r5, #31
 80073a0:	d50a      	bpl.n	80073b8 <__pow5mult+0x84>
 80073a2:	4631      	mov	r1, r6
 80073a4:	4622      	mov	r2, r4
 80073a6:	4638      	mov	r0, r7
 80073a8:	f7ff ff22 	bl	80071f0 <__multiply>
 80073ac:	4631      	mov	r1, r6
 80073ae:	4680      	mov	r8, r0
 80073b0:	4638      	mov	r0, r7
 80073b2:	f7ff fe09 	bl	8006fc8 <_Bfree>
 80073b6:	4646      	mov	r6, r8
 80073b8:	106d      	asrs	r5, r5, #1
 80073ba:	d00b      	beq.n	80073d4 <__pow5mult+0xa0>
 80073bc:	6820      	ldr	r0, [r4, #0]
 80073be:	b938      	cbnz	r0, 80073d0 <__pow5mult+0x9c>
 80073c0:	4622      	mov	r2, r4
 80073c2:	4621      	mov	r1, r4
 80073c4:	4638      	mov	r0, r7
 80073c6:	f7ff ff13 	bl	80071f0 <__multiply>
 80073ca:	6020      	str	r0, [r4, #0]
 80073cc:	f8c0 9000 	str.w	r9, [r0]
 80073d0:	4604      	mov	r4, r0
 80073d2:	e7e4      	b.n	800739e <__pow5mult+0x6a>
 80073d4:	4630      	mov	r0, r6
 80073d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073da:	bf00      	nop
 80073dc:	08009b88 	.word	0x08009b88
 80073e0:	08009991 	.word	0x08009991
 80073e4:	08009ab4 	.word	0x08009ab4

080073e8 <__lshift>:
 80073e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ec:	460c      	mov	r4, r1
 80073ee:	6849      	ldr	r1, [r1, #4]
 80073f0:	6923      	ldr	r3, [r4, #16]
 80073f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073f6:	68a3      	ldr	r3, [r4, #8]
 80073f8:	4607      	mov	r7, r0
 80073fa:	4691      	mov	r9, r2
 80073fc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007400:	f108 0601 	add.w	r6, r8, #1
 8007404:	42b3      	cmp	r3, r6
 8007406:	db0b      	blt.n	8007420 <__lshift+0x38>
 8007408:	4638      	mov	r0, r7
 800740a:	f7ff fd9d 	bl	8006f48 <_Balloc>
 800740e:	4605      	mov	r5, r0
 8007410:	b948      	cbnz	r0, 8007426 <__lshift+0x3e>
 8007412:	4602      	mov	r2, r0
 8007414:	4b28      	ldr	r3, [pc, #160]	@ (80074b8 <__lshift+0xd0>)
 8007416:	4829      	ldr	r0, [pc, #164]	@ (80074bc <__lshift+0xd4>)
 8007418:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800741c:	f7fe fe1e 	bl	800605c <__assert_func>
 8007420:	3101      	adds	r1, #1
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	e7ee      	b.n	8007404 <__lshift+0x1c>
 8007426:	2300      	movs	r3, #0
 8007428:	f100 0114 	add.w	r1, r0, #20
 800742c:	f100 0210 	add.w	r2, r0, #16
 8007430:	4618      	mov	r0, r3
 8007432:	4553      	cmp	r3, sl
 8007434:	db33      	blt.n	800749e <__lshift+0xb6>
 8007436:	6920      	ldr	r0, [r4, #16]
 8007438:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800743c:	f104 0314 	add.w	r3, r4, #20
 8007440:	f019 091f 	ands.w	r9, r9, #31
 8007444:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007448:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800744c:	d02b      	beq.n	80074a6 <__lshift+0xbe>
 800744e:	f1c9 0e20 	rsb	lr, r9, #32
 8007452:	468a      	mov	sl, r1
 8007454:	2200      	movs	r2, #0
 8007456:	6818      	ldr	r0, [r3, #0]
 8007458:	fa00 f009 	lsl.w	r0, r0, r9
 800745c:	4310      	orrs	r0, r2
 800745e:	f84a 0b04 	str.w	r0, [sl], #4
 8007462:	f853 2b04 	ldr.w	r2, [r3], #4
 8007466:	459c      	cmp	ip, r3
 8007468:	fa22 f20e 	lsr.w	r2, r2, lr
 800746c:	d8f3      	bhi.n	8007456 <__lshift+0x6e>
 800746e:	ebac 0304 	sub.w	r3, ip, r4
 8007472:	3b15      	subs	r3, #21
 8007474:	f023 0303 	bic.w	r3, r3, #3
 8007478:	3304      	adds	r3, #4
 800747a:	f104 0015 	add.w	r0, r4, #21
 800747e:	4560      	cmp	r0, ip
 8007480:	bf88      	it	hi
 8007482:	2304      	movhi	r3, #4
 8007484:	50ca      	str	r2, [r1, r3]
 8007486:	b10a      	cbz	r2, 800748c <__lshift+0xa4>
 8007488:	f108 0602 	add.w	r6, r8, #2
 800748c:	3e01      	subs	r6, #1
 800748e:	4638      	mov	r0, r7
 8007490:	612e      	str	r6, [r5, #16]
 8007492:	4621      	mov	r1, r4
 8007494:	f7ff fd98 	bl	8006fc8 <_Bfree>
 8007498:	4628      	mov	r0, r5
 800749a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800749e:	f842 0f04 	str.w	r0, [r2, #4]!
 80074a2:	3301      	adds	r3, #1
 80074a4:	e7c5      	b.n	8007432 <__lshift+0x4a>
 80074a6:	3904      	subs	r1, #4
 80074a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80074ac:	f841 2f04 	str.w	r2, [r1, #4]!
 80074b0:	459c      	cmp	ip, r3
 80074b2:	d8f9      	bhi.n	80074a8 <__lshift+0xc0>
 80074b4:	e7ea      	b.n	800748c <__lshift+0xa4>
 80074b6:	bf00      	nop
 80074b8:	08009aa3 	.word	0x08009aa3
 80074bc:	08009ab4 	.word	0x08009ab4

080074c0 <__mcmp>:
 80074c0:	690a      	ldr	r2, [r1, #16]
 80074c2:	4603      	mov	r3, r0
 80074c4:	6900      	ldr	r0, [r0, #16]
 80074c6:	1a80      	subs	r0, r0, r2
 80074c8:	b530      	push	{r4, r5, lr}
 80074ca:	d10e      	bne.n	80074ea <__mcmp+0x2a>
 80074cc:	3314      	adds	r3, #20
 80074ce:	3114      	adds	r1, #20
 80074d0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80074d4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80074d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80074dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80074e0:	4295      	cmp	r5, r2
 80074e2:	d003      	beq.n	80074ec <__mcmp+0x2c>
 80074e4:	d205      	bcs.n	80074f2 <__mcmp+0x32>
 80074e6:	f04f 30ff 	mov.w	r0, #4294967295
 80074ea:	bd30      	pop	{r4, r5, pc}
 80074ec:	42a3      	cmp	r3, r4
 80074ee:	d3f3      	bcc.n	80074d8 <__mcmp+0x18>
 80074f0:	e7fb      	b.n	80074ea <__mcmp+0x2a>
 80074f2:	2001      	movs	r0, #1
 80074f4:	e7f9      	b.n	80074ea <__mcmp+0x2a>
	...

080074f8 <__mdiff>:
 80074f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074fc:	4689      	mov	r9, r1
 80074fe:	4606      	mov	r6, r0
 8007500:	4611      	mov	r1, r2
 8007502:	4648      	mov	r0, r9
 8007504:	4614      	mov	r4, r2
 8007506:	f7ff ffdb 	bl	80074c0 <__mcmp>
 800750a:	1e05      	subs	r5, r0, #0
 800750c:	d112      	bne.n	8007534 <__mdiff+0x3c>
 800750e:	4629      	mov	r1, r5
 8007510:	4630      	mov	r0, r6
 8007512:	f7ff fd19 	bl	8006f48 <_Balloc>
 8007516:	4602      	mov	r2, r0
 8007518:	b928      	cbnz	r0, 8007526 <__mdiff+0x2e>
 800751a:	4b3f      	ldr	r3, [pc, #252]	@ (8007618 <__mdiff+0x120>)
 800751c:	f240 2137 	movw	r1, #567	@ 0x237
 8007520:	483e      	ldr	r0, [pc, #248]	@ (800761c <__mdiff+0x124>)
 8007522:	f7fe fd9b 	bl	800605c <__assert_func>
 8007526:	2301      	movs	r3, #1
 8007528:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800752c:	4610      	mov	r0, r2
 800752e:	b003      	add	sp, #12
 8007530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007534:	bfbc      	itt	lt
 8007536:	464b      	movlt	r3, r9
 8007538:	46a1      	movlt	r9, r4
 800753a:	4630      	mov	r0, r6
 800753c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007540:	bfba      	itte	lt
 8007542:	461c      	movlt	r4, r3
 8007544:	2501      	movlt	r5, #1
 8007546:	2500      	movge	r5, #0
 8007548:	f7ff fcfe 	bl	8006f48 <_Balloc>
 800754c:	4602      	mov	r2, r0
 800754e:	b918      	cbnz	r0, 8007558 <__mdiff+0x60>
 8007550:	4b31      	ldr	r3, [pc, #196]	@ (8007618 <__mdiff+0x120>)
 8007552:	f240 2145 	movw	r1, #581	@ 0x245
 8007556:	e7e3      	b.n	8007520 <__mdiff+0x28>
 8007558:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800755c:	6926      	ldr	r6, [r4, #16]
 800755e:	60c5      	str	r5, [r0, #12]
 8007560:	f109 0310 	add.w	r3, r9, #16
 8007564:	f109 0514 	add.w	r5, r9, #20
 8007568:	f104 0e14 	add.w	lr, r4, #20
 800756c:	f100 0b14 	add.w	fp, r0, #20
 8007570:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007574:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007578:	9301      	str	r3, [sp, #4]
 800757a:	46d9      	mov	r9, fp
 800757c:	f04f 0c00 	mov.w	ip, #0
 8007580:	9b01      	ldr	r3, [sp, #4]
 8007582:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007586:	f853 af04 	ldr.w	sl, [r3, #4]!
 800758a:	9301      	str	r3, [sp, #4]
 800758c:	fa1f f38a 	uxth.w	r3, sl
 8007590:	4619      	mov	r1, r3
 8007592:	b283      	uxth	r3, r0
 8007594:	1acb      	subs	r3, r1, r3
 8007596:	0c00      	lsrs	r0, r0, #16
 8007598:	4463      	add	r3, ip
 800759a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800759e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80075a8:	4576      	cmp	r6, lr
 80075aa:	f849 3b04 	str.w	r3, [r9], #4
 80075ae:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80075b2:	d8e5      	bhi.n	8007580 <__mdiff+0x88>
 80075b4:	1b33      	subs	r3, r6, r4
 80075b6:	3b15      	subs	r3, #21
 80075b8:	f023 0303 	bic.w	r3, r3, #3
 80075bc:	3415      	adds	r4, #21
 80075be:	3304      	adds	r3, #4
 80075c0:	42a6      	cmp	r6, r4
 80075c2:	bf38      	it	cc
 80075c4:	2304      	movcc	r3, #4
 80075c6:	441d      	add	r5, r3
 80075c8:	445b      	add	r3, fp
 80075ca:	461e      	mov	r6, r3
 80075cc:	462c      	mov	r4, r5
 80075ce:	4544      	cmp	r4, r8
 80075d0:	d30e      	bcc.n	80075f0 <__mdiff+0xf8>
 80075d2:	f108 0103 	add.w	r1, r8, #3
 80075d6:	1b49      	subs	r1, r1, r5
 80075d8:	f021 0103 	bic.w	r1, r1, #3
 80075dc:	3d03      	subs	r5, #3
 80075de:	45a8      	cmp	r8, r5
 80075e0:	bf38      	it	cc
 80075e2:	2100      	movcc	r1, #0
 80075e4:	440b      	add	r3, r1
 80075e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80075ea:	b191      	cbz	r1, 8007612 <__mdiff+0x11a>
 80075ec:	6117      	str	r7, [r2, #16]
 80075ee:	e79d      	b.n	800752c <__mdiff+0x34>
 80075f0:	f854 1b04 	ldr.w	r1, [r4], #4
 80075f4:	46e6      	mov	lr, ip
 80075f6:	0c08      	lsrs	r0, r1, #16
 80075f8:	fa1c fc81 	uxtah	ip, ip, r1
 80075fc:	4471      	add	r1, lr
 80075fe:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007602:	b289      	uxth	r1, r1
 8007604:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007608:	f846 1b04 	str.w	r1, [r6], #4
 800760c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007610:	e7dd      	b.n	80075ce <__mdiff+0xd6>
 8007612:	3f01      	subs	r7, #1
 8007614:	e7e7      	b.n	80075e6 <__mdiff+0xee>
 8007616:	bf00      	nop
 8007618:	08009aa3 	.word	0x08009aa3
 800761c:	08009ab4 	.word	0x08009ab4

08007620 <__ulp>:
 8007620:	b082      	sub	sp, #8
 8007622:	ed8d 0b00 	vstr	d0, [sp]
 8007626:	9a01      	ldr	r2, [sp, #4]
 8007628:	4b0f      	ldr	r3, [pc, #60]	@ (8007668 <__ulp+0x48>)
 800762a:	4013      	ands	r3, r2
 800762c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007630:	2b00      	cmp	r3, #0
 8007632:	dc08      	bgt.n	8007646 <__ulp+0x26>
 8007634:	425b      	negs	r3, r3
 8007636:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800763a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800763e:	da04      	bge.n	800764a <__ulp+0x2a>
 8007640:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007644:	4113      	asrs	r3, r2
 8007646:	2200      	movs	r2, #0
 8007648:	e008      	b.n	800765c <__ulp+0x3c>
 800764a:	f1a2 0314 	sub.w	r3, r2, #20
 800764e:	2b1e      	cmp	r3, #30
 8007650:	bfda      	itte	le
 8007652:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007656:	40da      	lsrle	r2, r3
 8007658:	2201      	movgt	r2, #1
 800765a:	2300      	movs	r3, #0
 800765c:	4619      	mov	r1, r3
 800765e:	4610      	mov	r0, r2
 8007660:	ec41 0b10 	vmov	d0, r0, r1
 8007664:	b002      	add	sp, #8
 8007666:	4770      	bx	lr
 8007668:	7ff00000 	.word	0x7ff00000

0800766c <__b2d>:
 800766c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007670:	6906      	ldr	r6, [r0, #16]
 8007672:	f100 0814 	add.w	r8, r0, #20
 8007676:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800767a:	1f37      	subs	r7, r6, #4
 800767c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007680:	4610      	mov	r0, r2
 8007682:	f7ff fd53 	bl	800712c <__hi0bits>
 8007686:	f1c0 0320 	rsb	r3, r0, #32
 800768a:	280a      	cmp	r0, #10
 800768c:	600b      	str	r3, [r1, #0]
 800768e:	491b      	ldr	r1, [pc, #108]	@ (80076fc <__b2d+0x90>)
 8007690:	dc15      	bgt.n	80076be <__b2d+0x52>
 8007692:	f1c0 0c0b 	rsb	ip, r0, #11
 8007696:	fa22 f30c 	lsr.w	r3, r2, ip
 800769a:	45b8      	cmp	r8, r7
 800769c:	ea43 0501 	orr.w	r5, r3, r1
 80076a0:	bf34      	ite	cc
 80076a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80076a6:	2300      	movcs	r3, #0
 80076a8:	3015      	adds	r0, #21
 80076aa:	fa02 f000 	lsl.w	r0, r2, r0
 80076ae:	fa23 f30c 	lsr.w	r3, r3, ip
 80076b2:	4303      	orrs	r3, r0
 80076b4:	461c      	mov	r4, r3
 80076b6:	ec45 4b10 	vmov	d0, r4, r5
 80076ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076be:	45b8      	cmp	r8, r7
 80076c0:	bf3a      	itte	cc
 80076c2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80076c6:	f1a6 0708 	subcc.w	r7, r6, #8
 80076ca:	2300      	movcs	r3, #0
 80076cc:	380b      	subs	r0, #11
 80076ce:	d012      	beq.n	80076f6 <__b2d+0x8a>
 80076d0:	f1c0 0120 	rsb	r1, r0, #32
 80076d4:	fa23 f401 	lsr.w	r4, r3, r1
 80076d8:	4082      	lsls	r2, r0
 80076da:	4322      	orrs	r2, r4
 80076dc:	4547      	cmp	r7, r8
 80076de:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80076e2:	bf8c      	ite	hi
 80076e4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80076e8:	2200      	movls	r2, #0
 80076ea:	4083      	lsls	r3, r0
 80076ec:	40ca      	lsrs	r2, r1
 80076ee:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80076f2:	4313      	orrs	r3, r2
 80076f4:	e7de      	b.n	80076b4 <__b2d+0x48>
 80076f6:	ea42 0501 	orr.w	r5, r2, r1
 80076fa:	e7db      	b.n	80076b4 <__b2d+0x48>
 80076fc:	3ff00000 	.word	0x3ff00000

08007700 <__d2b>:
 8007700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007704:	460f      	mov	r7, r1
 8007706:	2101      	movs	r1, #1
 8007708:	ec59 8b10 	vmov	r8, r9, d0
 800770c:	4616      	mov	r6, r2
 800770e:	f7ff fc1b 	bl	8006f48 <_Balloc>
 8007712:	4604      	mov	r4, r0
 8007714:	b930      	cbnz	r0, 8007724 <__d2b+0x24>
 8007716:	4602      	mov	r2, r0
 8007718:	4b23      	ldr	r3, [pc, #140]	@ (80077a8 <__d2b+0xa8>)
 800771a:	4824      	ldr	r0, [pc, #144]	@ (80077ac <__d2b+0xac>)
 800771c:	f240 310f 	movw	r1, #783	@ 0x30f
 8007720:	f7fe fc9c 	bl	800605c <__assert_func>
 8007724:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007728:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800772c:	b10d      	cbz	r5, 8007732 <__d2b+0x32>
 800772e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007732:	9301      	str	r3, [sp, #4]
 8007734:	f1b8 0300 	subs.w	r3, r8, #0
 8007738:	d023      	beq.n	8007782 <__d2b+0x82>
 800773a:	4668      	mov	r0, sp
 800773c:	9300      	str	r3, [sp, #0]
 800773e:	f7ff fd14 	bl	800716a <__lo0bits>
 8007742:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007746:	b1d0      	cbz	r0, 800777e <__d2b+0x7e>
 8007748:	f1c0 0320 	rsb	r3, r0, #32
 800774c:	fa02 f303 	lsl.w	r3, r2, r3
 8007750:	430b      	orrs	r3, r1
 8007752:	40c2      	lsrs	r2, r0
 8007754:	6163      	str	r3, [r4, #20]
 8007756:	9201      	str	r2, [sp, #4]
 8007758:	9b01      	ldr	r3, [sp, #4]
 800775a:	61a3      	str	r3, [r4, #24]
 800775c:	2b00      	cmp	r3, #0
 800775e:	bf0c      	ite	eq
 8007760:	2201      	moveq	r2, #1
 8007762:	2202      	movne	r2, #2
 8007764:	6122      	str	r2, [r4, #16]
 8007766:	b1a5      	cbz	r5, 8007792 <__d2b+0x92>
 8007768:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800776c:	4405      	add	r5, r0
 800776e:	603d      	str	r5, [r7, #0]
 8007770:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007774:	6030      	str	r0, [r6, #0]
 8007776:	4620      	mov	r0, r4
 8007778:	b003      	add	sp, #12
 800777a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800777e:	6161      	str	r1, [r4, #20]
 8007780:	e7ea      	b.n	8007758 <__d2b+0x58>
 8007782:	a801      	add	r0, sp, #4
 8007784:	f7ff fcf1 	bl	800716a <__lo0bits>
 8007788:	9b01      	ldr	r3, [sp, #4]
 800778a:	6163      	str	r3, [r4, #20]
 800778c:	3020      	adds	r0, #32
 800778e:	2201      	movs	r2, #1
 8007790:	e7e8      	b.n	8007764 <__d2b+0x64>
 8007792:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007796:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800779a:	6038      	str	r0, [r7, #0]
 800779c:	6918      	ldr	r0, [r3, #16]
 800779e:	f7ff fcc5 	bl	800712c <__hi0bits>
 80077a2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077a6:	e7e5      	b.n	8007774 <__d2b+0x74>
 80077a8:	08009aa3 	.word	0x08009aa3
 80077ac:	08009ab4 	.word	0x08009ab4

080077b0 <__ratio>:
 80077b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077b4:	b085      	sub	sp, #20
 80077b6:	e9cd 1000 	strd	r1, r0, [sp]
 80077ba:	a902      	add	r1, sp, #8
 80077bc:	f7ff ff56 	bl	800766c <__b2d>
 80077c0:	9800      	ldr	r0, [sp, #0]
 80077c2:	a903      	add	r1, sp, #12
 80077c4:	ec55 4b10 	vmov	r4, r5, d0
 80077c8:	f7ff ff50 	bl	800766c <__b2d>
 80077cc:	9b01      	ldr	r3, [sp, #4]
 80077ce:	6919      	ldr	r1, [r3, #16]
 80077d0:	9b00      	ldr	r3, [sp, #0]
 80077d2:	691b      	ldr	r3, [r3, #16]
 80077d4:	1ac9      	subs	r1, r1, r3
 80077d6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80077da:	1a9b      	subs	r3, r3, r2
 80077dc:	ec5b ab10 	vmov	sl, fp, d0
 80077e0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	bfce      	itee	gt
 80077e8:	462a      	movgt	r2, r5
 80077ea:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80077ee:	465a      	movle	r2, fp
 80077f0:	462f      	mov	r7, r5
 80077f2:	46d9      	mov	r9, fp
 80077f4:	bfcc      	ite	gt
 80077f6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80077fa:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80077fe:	464b      	mov	r3, r9
 8007800:	4652      	mov	r2, sl
 8007802:	4620      	mov	r0, r4
 8007804:	4639      	mov	r1, r7
 8007806:	f7f9 f839 	bl	800087c <__aeabi_ddiv>
 800780a:	ec41 0b10 	vmov	d0, r0, r1
 800780e:	b005      	add	sp, #20
 8007810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007814 <__copybits>:
 8007814:	3901      	subs	r1, #1
 8007816:	b570      	push	{r4, r5, r6, lr}
 8007818:	1149      	asrs	r1, r1, #5
 800781a:	6914      	ldr	r4, [r2, #16]
 800781c:	3101      	adds	r1, #1
 800781e:	f102 0314 	add.w	r3, r2, #20
 8007822:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007826:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800782a:	1f05      	subs	r5, r0, #4
 800782c:	42a3      	cmp	r3, r4
 800782e:	d30c      	bcc.n	800784a <__copybits+0x36>
 8007830:	1aa3      	subs	r3, r4, r2
 8007832:	3b11      	subs	r3, #17
 8007834:	f023 0303 	bic.w	r3, r3, #3
 8007838:	3211      	adds	r2, #17
 800783a:	42a2      	cmp	r2, r4
 800783c:	bf88      	it	hi
 800783e:	2300      	movhi	r3, #0
 8007840:	4418      	add	r0, r3
 8007842:	2300      	movs	r3, #0
 8007844:	4288      	cmp	r0, r1
 8007846:	d305      	bcc.n	8007854 <__copybits+0x40>
 8007848:	bd70      	pop	{r4, r5, r6, pc}
 800784a:	f853 6b04 	ldr.w	r6, [r3], #4
 800784e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007852:	e7eb      	b.n	800782c <__copybits+0x18>
 8007854:	f840 3b04 	str.w	r3, [r0], #4
 8007858:	e7f4      	b.n	8007844 <__copybits+0x30>

0800785a <__any_on>:
 800785a:	f100 0214 	add.w	r2, r0, #20
 800785e:	6900      	ldr	r0, [r0, #16]
 8007860:	114b      	asrs	r3, r1, #5
 8007862:	4298      	cmp	r0, r3
 8007864:	b510      	push	{r4, lr}
 8007866:	db11      	blt.n	800788c <__any_on+0x32>
 8007868:	dd0a      	ble.n	8007880 <__any_on+0x26>
 800786a:	f011 011f 	ands.w	r1, r1, #31
 800786e:	d007      	beq.n	8007880 <__any_on+0x26>
 8007870:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007874:	fa24 f001 	lsr.w	r0, r4, r1
 8007878:	fa00 f101 	lsl.w	r1, r0, r1
 800787c:	428c      	cmp	r4, r1
 800787e:	d10b      	bne.n	8007898 <__any_on+0x3e>
 8007880:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007884:	4293      	cmp	r3, r2
 8007886:	d803      	bhi.n	8007890 <__any_on+0x36>
 8007888:	2000      	movs	r0, #0
 800788a:	bd10      	pop	{r4, pc}
 800788c:	4603      	mov	r3, r0
 800788e:	e7f7      	b.n	8007880 <__any_on+0x26>
 8007890:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007894:	2900      	cmp	r1, #0
 8007896:	d0f5      	beq.n	8007884 <__any_on+0x2a>
 8007898:	2001      	movs	r0, #1
 800789a:	e7f6      	b.n	800788a <__any_on+0x30>

0800789c <sulp>:
 800789c:	b570      	push	{r4, r5, r6, lr}
 800789e:	4604      	mov	r4, r0
 80078a0:	460d      	mov	r5, r1
 80078a2:	ec45 4b10 	vmov	d0, r4, r5
 80078a6:	4616      	mov	r6, r2
 80078a8:	f7ff feba 	bl	8007620 <__ulp>
 80078ac:	ec51 0b10 	vmov	r0, r1, d0
 80078b0:	b17e      	cbz	r6, 80078d2 <sulp+0x36>
 80078b2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80078b6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	dd09      	ble.n	80078d2 <sulp+0x36>
 80078be:	051b      	lsls	r3, r3, #20
 80078c0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80078c4:	2400      	movs	r4, #0
 80078c6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80078ca:	4622      	mov	r2, r4
 80078cc:	462b      	mov	r3, r5
 80078ce:	f7f8 feab 	bl	8000628 <__aeabi_dmul>
 80078d2:	ec41 0b10 	vmov	d0, r0, r1
 80078d6:	bd70      	pop	{r4, r5, r6, pc}

080078d8 <_strtod_l>:
 80078d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078dc:	b09f      	sub	sp, #124	@ 0x7c
 80078de:	460c      	mov	r4, r1
 80078e0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80078e2:	2200      	movs	r2, #0
 80078e4:	921a      	str	r2, [sp, #104]	@ 0x68
 80078e6:	9005      	str	r0, [sp, #20]
 80078e8:	f04f 0a00 	mov.w	sl, #0
 80078ec:	f04f 0b00 	mov.w	fp, #0
 80078f0:	460a      	mov	r2, r1
 80078f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80078f4:	7811      	ldrb	r1, [r2, #0]
 80078f6:	292b      	cmp	r1, #43	@ 0x2b
 80078f8:	d04a      	beq.n	8007990 <_strtod_l+0xb8>
 80078fa:	d838      	bhi.n	800796e <_strtod_l+0x96>
 80078fc:	290d      	cmp	r1, #13
 80078fe:	d832      	bhi.n	8007966 <_strtod_l+0x8e>
 8007900:	2908      	cmp	r1, #8
 8007902:	d832      	bhi.n	800796a <_strtod_l+0x92>
 8007904:	2900      	cmp	r1, #0
 8007906:	d03b      	beq.n	8007980 <_strtod_l+0xa8>
 8007908:	2200      	movs	r2, #0
 800790a:	920e      	str	r2, [sp, #56]	@ 0x38
 800790c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800790e:	782a      	ldrb	r2, [r5, #0]
 8007910:	2a30      	cmp	r2, #48	@ 0x30
 8007912:	f040 80b2 	bne.w	8007a7a <_strtod_l+0x1a2>
 8007916:	786a      	ldrb	r2, [r5, #1]
 8007918:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800791c:	2a58      	cmp	r2, #88	@ 0x58
 800791e:	d16e      	bne.n	80079fe <_strtod_l+0x126>
 8007920:	9302      	str	r3, [sp, #8]
 8007922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007924:	9301      	str	r3, [sp, #4]
 8007926:	ab1a      	add	r3, sp, #104	@ 0x68
 8007928:	9300      	str	r3, [sp, #0]
 800792a:	4a8f      	ldr	r2, [pc, #572]	@ (8007b68 <_strtod_l+0x290>)
 800792c:	9805      	ldr	r0, [sp, #20]
 800792e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007930:	a919      	add	r1, sp, #100	@ 0x64
 8007932:	f001 fafb 	bl	8008f2c <__gethex>
 8007936:	f010 060f 	ands.w	r6, r0, #15
 800793a:	4604      	mov	r4, r0
 800793c:	d005      	beq.n	800794a <_strtod_l+0x72>
 800793e:	2e06      	cmp	r6, #6
 8007940:	d128      	bne.n	8007994 <_strtod_l+0xbc>
 8007942:	3501      	adds	r5, #1
 8007944:	2300      	movs	r3, #0
 8007946:	9519      	str	r5, [sp, #100]	@ 0x64
 8007948:	930e      	str	r3, [sp, #56]	@ 0x38
 800794a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800794c:	2b00      	cmp	r3, #0
 800794e:	f040 858e 	bne.w	800846e <_strtod_l+0xb96>
 8007952:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007954:	b1cb      	cbz	r3, 800798a <_strtod_l+0xb2>
 8007956:	4652      	mov	r2, sl
 8007958:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800795c:	ec43 2b10 	vmov	d0, r2, r3
 8007960:	b01f      	add	sp, #124	@ 0x7c
 8007962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007966:	2920      	cmp	r1, #32
 8007968:	d1ce      	bne.n	8007908 <_strtod_l+0x30>
 800796a:	3201      	adds	r2, #1
 800796c:	e7c1      	b.n	80078f2 <_strtod_l+0x1a>
 800796e:	292d      	cmp	r1, #45	@ 0x2d
 8007970:	d1ca      	bne.n	8007908 <_strtod_l+0x30>
 8007972:	2101      	movs	r1, #1
 8007974:	910e      	str	r1, [sp, #56]	@ 0x38
 8007976:	1c51      	adds	r1, r2, #1
 8007978:	9119      	str	r1, [sp, #100]	@ 0x64
 800797a:	7852      	ldrb	r2, [r2, #1]
 800797c:	2a00      	cmp	r2, #0
 800797e:	d1c5      	bne.n	800790c <_strtod_l+0x34>
 8007980:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007982:	9419      	str	r4, [sp, #100]	@ 0x64
 8007984:	2b00      	cmp	r3, #0
 8007986:	f040 8570 	bne.w	800846a <_strtod_l+0xb92>
 800798a:	4652      	mov	r2, sl
 800798c:	465b      	mov	r3, fp
 800798e:	e7e5      	b.n	800795c <_strtod_l+0x84>
 8007990:	2100      	movs	r1, #0
 8007992:	e7ef      	b.n	8007974 <_strtod_l+0x9c>
 8007994:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007996:	b13a      	cbz	r2, 80079a8 <_strtod_l+0xd0>
 8007998:	2135      	movs	r1, #53	@ 0x35
 800799a:	a81c      	add	r0, sp, #112	@ 0x70
 800799c:	f7ff ff3a 	bl	8007814 <__copybits>
 80079a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079a2:	9805      	ldr	r0, [sp, #20]
 80079a4:	f7ff fb10 	bl	8006fc8 <_Bfree>
 80079a8:	3e01      	subs	r6, #1
 80079aa:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80079ac:	2e04      	cmp	r6, #4
 80079ae:	d806      	bhi.n	80079be <_strtod_l+0xe6>
 80079b0:	e8df f006 	tbb	[pc, r6]
 80079b4:	201d0314 	.word	0x201d0314
 80079b8:	14          	.byte	0x14
 80079b9:	00          	.byte	0x00
 80079ba:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80079be:	05e1      	lsls	r1, r4, #23
 80079c0:	bf48      	it	mi
 80079c2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80079c6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80079ca:	0d1b      	lsrs	r3, r3, #20
 80079cc:	051b      	lsls	r3, r3, #20
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1bb      	bne.n	800794a <_strtod_l+0x72>
 80079d2:	f7fe faf9 	bl	8005fc8 <__errno>
 80079d6:	2322      	movs	r3, #34	@ 0x22
 80079d8:	6003      	str	r3, [r0, #0]
 80079da:	e7b6      	b.n	800794a <_strtod_l+0x72>
 80079dc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80079e0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80079e4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80079e8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80079ec:	e7e7      	b.n	80079be <_strtod_l+0xe6>
 80079ee:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8007b70 <_strtod_l+0x298>
 80079f2:	e7e4      	b.n	80079be <_strtod_l+0xe6>
 80079f4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80079f8:	f04f 3aff 	mov.w	sl, #4294967295
 80079fc:	e7df      	b.n	80079be <_strtod_l+0xe6>
 80079fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a00:	1c5a      	adds	r2, r3, #1
 8007a02:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a04:	785b      	ldrb	r3, [r3, #1]
 8007a06:	2b30      	cmp	r3, #48	@ 0x30
 8007a08:	d0f9      	beq.n	80079fe <_strtod_l+0x126>
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d09d      	beq.n	800794a <_strtod_l+0x72>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	2700      	movs	r7, #0
 8007a12:	9308      	str	r3, [sp, #32]
 8007a14:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a16:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a18:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007a1a:	46b9      	mov	r9, r7
 8007a1c:	220a      	movs	r2, #10
 8007a1e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007a20:	7805      	ldrb	r5, [r0, #0]
 8007a22:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007a26:	b2d9      	uxtb	r1, r3
 8007a28:	2909      	cmp	r1, #9
 8007a2a:	d928      	bls.n	8007a7e <_strtod_l+0x1a6>
 8007a2c:	494f      	ldr	r1, [pc, #316]	@ (8007b6c <_strtod_l+0x294>)
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f7fe f9fb 	bl	8005e2a <strncmp>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	d032      	beq.n	8007a9e <_strtod_l+0x1c6>
 8007a38:	2000      	movs	r0, #0
 8007a3a:	462a      	mov	r2, r5
 8007a3c:	900a      	str	r0, [sp, #40]	@ 0x28
 8007a3e:	464d      	mov	r5, r9
 8007a40:	4603      	mov	r3, r0
 8007a42:	2a65      	cmp	r2, #101	@ 0x65
 8007a44:	d001      	beq.n	8007a4a <_strtod_l+0x172>
 8007a46:	2a45      	cmp	r2, #69	@ 0x45
 8007a48:	d114      	bne.n	8007a74 <_strtod_l+0x19c>
 8007a4a:	b91d      	cbnz	r5, 8007a54 <_strtod_l+0x17c>
 8007a4c:	9a08      	ldr	r2, [sp, #32]
 8007a4e:	4302      	orrs	r2, r0
 8007a50:	d096      	beq.n	8007980 <_strtod_l+0xa8>
 8007a52:	2500      	movs	r5, #0
 8007a54:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007a56:	1c62      	adds	r2, r4, #1
 8007a58:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a5a:	7862      	ldrb	r2, [r4, #1]
 8007a5c:	2a2b      	cmp	r2, #43	@ 0x2b
 8007a5e:	d07a      	beq.n	8007b56 <_strtod_l+0x27e>
 8007a60:	2a2d      	cmp	r2, #45	@ 0x2d
 8007a62:	d07e      	beq.n	8007b62 <_strtod_l+0x28a>
 8007a64:	f04f 0c00 	mov.w	ip, #0
 8007a68:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007a6c:	2909      	cmp	r1, #9
 8007a6e:	f240 8085 	bls.w	8007b7c <_strtod_l+0x2a4>
 8007a72:	9419      	str	r4, [sp, #100]	@ 0x64
 8007a74:	f04f 0800 	mov.w	r8, #0
 8007a78:	e0a5      	b.n	8007bc6 <_strtod_l+0x2ee>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	e7c8      	b.n	8007a10 <_strtod_l+0x138>
 8007a7e:	f1b9 0f08 	cmp.w	r9, #8
 8007a82:	bfd8      	it	le
 8007a84:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8007a86:	f100 0001 	add.w	r0, r0, #1
 8007a8a:	bfda      	itte	le
 8007a8c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a90:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8007a92:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007a96:	f109 0901 	add.w	r9, r9, #1
 8007a9a:	9019      	str	r0, [sp, #100]	@ 0x64
 8007a9c:	e7bf      	b.n	8007a1e <_strtod_l+0x146>
 8007a9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	9219      	str	r2, [sp, #100]	@ 0x64
 8007aa4:	785a      	ldrb	r2, [r3, #1]
 8007aa6:	f1b9 0f00 	cmp.w	r9, #0
 8007aaa:	d03b      	beq.n	8007b24 <_strtod_l+0x24c>
 8007aac:	900a      	str	r0, [sp, #40]	@ 0x28
 8007aae:	464d      	mov	r5, r9
 8007ab0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007ab4:	2b09      	cmp	r3, #9
 8007ab6:	d912      	bls.n	8007ade <_strtod_l+0x206>
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e7c2      	b.n	8007a42 <_strtod_l+0x16a>
 8007abc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007abe:	1c5a      	adds	r2, r3, #1
 8007ac0:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ac2:	785a      	ldrb	r2, [r3, #1]
 8007ac4:	3001      	adds	r0, #1
 8007ac6:	2a30      	cmp	r2, #48	@ 0x30
 8007ac8:	d0f8      	beq.n	8007abc <_strtod_l+0x1e4>
 8007aca:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007ace:	2b08      	cmp	r3, #8
 8007ad0:	f200 84d2 	bhi.w	8008478 <_strtod_l+0xba0>
 8007ad4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ad6:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ad8:	2000      	movs	r0, #0
 8007ada:	930c      	str	r3, [sp, #48]	@ 0x30
 8007adc:	4605      	mov	r5, r0
 8007ade:	3a30      	subs	r2, #48	@ 0x30
 8007ae0:	f100 0301 	add.w	r3, r0, #1
 8007ae4:	d018      	beq.n	8007b18 <_strtod_l+0x240>
 8007ae6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007ae8:	4419      	add	r1, r3
 8007aea:	910a      	str	r1, [sp, #40]	@ 0x28
 8007aec:	462e      	mov	r6, r5
 8007aee:	f04f 0e0a 	mov.w	lr, #10
 8007af2:	1c71      	adds	r1, r6, #1
 8007af4:	eba1 0c05 	sub.w	ip, r1, r5
 8007af8:	4563      	cmp	r3, ip
 8007afa:	dc15      	bgt.n	8007b28 <_strtod_l+0x250>
 8007afc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007b00:	182b      	adds	r3, r5, r0
 8007b02:	2b08      	cmp	r3, #8
 8007b04:	f105 0501 	add.w	r5, r5, #1
 8007b08:	4405      	add	r5, r0
 8007b0a:	dc1a      	bgt.n	8007b42 <_strtod_l+0x26a>
 8007b0c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007b0e:	230a      	movs	r3, #10
 8007b10:	fb03 2301 	mla	r3, r3, r1, r2
 8007b14:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b16:	2300      	movs	r3, #0
 8007b18:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b1a:	1c51      	adds	r1, r2, #1
 8007b1c:	9119      	str	r1, [sp, #100]	@ 0x64
 8007b1e:	7852      	ldrb	r2, [r2, #1]
 8007b20:	4618      	mov	r0, r3
 8007b22:	e7c5      	b.n	8007ab0 <_strtod_l+0x1d8>
 8007b24:	4648      	mov	r0, r9
 8007b26:	e7ce      	b.n	8007ac6 <_strtod_l+0x1ee>
 8007b28:	2e08      	cmp	r6, #8
 8007b2a:	dc05      	bgt.n	8007b38 <_strtod_l+0x260>
 8007b2c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007b2e:	fb0e f606 	mul.w	r6, lr, r6
 8007b32:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007b34:	460e      	mov	r6, r1
 8007b36:	e7dc      	b.n	8007af2 <_strtod_l+0x21a>
 8007b38:	2910      	cmp	r1, #16
 8007b3a:	bfd8      	it	le
 8007b3c:	fb0e f707 	mulle.w	r7, lr, r7
 8007b40:	e7f8      	b.n	8007b34 <_strtod_l+0x25c>
 8007b42:	2b0f      	cmp	r3, #15
 8007b44:	bfdc      	itt	le
 8007b46:	230a      	movle	r3, #10
 8007b48:	fb03 2707 	mlale	r7, r3, r7, r2
 8007b4c:	e7e3      	b.n	8007b16 <_strtod_l+0x23e>
 8007b4e:	2300      	movs	r3, #0
 8007b50:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b52:	2301      	movs	r3, #1
 8007b54:	e77a      	b.n	8007a4c <_strtod_l+0x174>
 8007b56:	f04f 0c00 	mov.w	ip, #0
 8007b5a:	1ca2      	adds	r2, r4, #2
 8007b5c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007b5e:	78a2      	ldrb	r2, [r4, #2]
 8007b60:	e782      	b.n	8007a68 <_strtod_l+0x190>
 8007b62:	f04f 0c01 	mov.w	ip, #1
 8007b66:	e7f8      	b.n	8007b5a <_strtod_l+0x282>
 8007b68:	08009c9c 	.word	0x08009c9c
 8007b6c:	08009b0d 	.word	0x08009b0d
 8007b70:	7ff00000 	.word	0x7ff00000
 8007b74:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b76:	1c51      	adds	r1, r2, #1
 8007b78:	9119      	str	r1, [sp, #100]	@ 0x64
 8007b7a:	7852      	ldrb	r2, [r2, #1]
 8007b7c:	2a30      	cmp	r2, #48	@ 0x30
 8007b7e:	d0f9      	beq.n	8007b74 <_strtod_l+0x29c>
 8007b80:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007b84:	2908      	cmp	r1, #8
 8007b86:	f63f af75 	bhi.w	8007a74 <_strtod_l+0x19c>
 8007b8a:	3a30      	subs	r2, #48	@ 0x30
 8007b8c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b8e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b90:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007b92:	f04f 080a 	mov.w	r8, #10
 8007b96:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007b98:	1c56      	adds	r6, r2, #1
 8007b9a:	9619      	str	r6, [sp, #100]	@ 0x64
 8007b9c:	7852      	ldrb	r2, [r2, #1]
 8007b9e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007ba2:	f1be 0f09 	cmp.w	lr, #9
 8007ba6:	d939      	bls.n	8007c1c <_strtod_l+0x344>
 8007ba8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007baa:	1a76      	subs	r6, r6, r1
 8007bac:	2e08      	cmp	r6, #8
 8007bae:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007bb2:	dc03      	bgt.n	8007bbc <_strtod_l+0x2e4>
 8007bb4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007bb6:	4588      	cmp	r8, r1
 8007bb8:	bfa8      	it	ge
 8007bba:	4688      	movge	r8, r1
 8007bbc:	f1bc 0f00 	cmp.w	ip, #0
 8007bc0:	d001      	beq.n	8007bc6 <_strtod_l+0x2ee>
 8007bc2:	f1c8 0800 	rsb	r8, r8, #0
 8007bc6:	2d00      	cmp	r5, #0
 8007bc8:	d14e      	bne.n	8007c68 <_strtod_l+0x390>
 8007bca:	9908      	ldr	r1, [sp, #32]
 8007bcc:	4308      	orrs	r0, r1
 8007bce:	f47f aebc 	bne.w	800794a <_strtod_l+0x72>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f47f aed4 	bne.w	8007980 <_strtod_l+0xa8>
 8007bd8:	2a69      	cmp	r2, #105	@ 0x69
 8007bda:	d028      	beq.n	8007c2e <_strtod_l+0x356>
 8007bdc:	dc25      	bgt.n	8007c2a <_strtod_l+0x352>
 8007bde:	2a49      	cmp	r2, #73	@ 0x49
 8007be0:	d025      	beq.n	8007c2e <_strtod_l+0x356>
 8007be2:	2a4e      	cmp	r2, #78	@ 0x4e
 8007be4:	f47f aecc 	bne.w	8007980 <_strtod_l+0xa8>
 8007be8:	499a      	ldr	r1, [pc, #616]	@ (8007e54 <_strtod_l+0x57c>)
 8007bea:	a819      	add	r0, sp, #100	@ 0x64
 8007bec:	f001 fbc0 	bl	8009370 <__match>
 8007bf0:	2800      	cmp	r0, #0
 8007bf2:	f43f aec5 	beq.w	8007980 <_strtod_l+0xa8>
 8007bf6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	2b28      	cmp	r3, #40	@ 0x28
 8007bfc:	d12e      	bne.n	8007c5c <_strtod_l+0x384>
 8007bfe:	4996      	ldr	r1, [pc, #600]	@ (8007e58 <_strtod_l+0x580>)
 8007c00:	aa1c      	add	r2, sp, #112	@ 0x70
 8007c02:	a819      	add	r0, sp, #100	@ 0x64
 8007c04:	f001 fbc8 	bl	8009398 <__hexnan>
 8007c08:	2805      	cmp	r0, #5
 8007c0a:	d127      	bne.n	8007c5c <_strtod_l+0x384>
 8007c0c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007c0e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007c12:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007c16:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007c1a:	e696      	b.n	800794a <_strtod_l+0x72>
 8007c1c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007c1e:	fb08 2101 	mla	r1, r8, r1, r2
 8007c22:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007c26:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c28:	e7b5      	b.n	8007b96 <_strtod_l+0x2be>
 8007c2a:	2a6e      	cmp	r2, #110	@ 0x6e
 8007c2c:	e7da      	b.n	8007be4 <_strtod_l+0x30c>
 8007c2e:	498b      	ldr	r1, [pc, #556]	@ (8007e5c <_strtod_l+0x584>)
 8007c30:	a819      	add	r0, sp, #100	@ 0x64
 8007c32:	f001 fb9d 	bl	8009370 <__match>
 8007c36:	2800      	cmp	r0, #0
 8007c38:	f43f aea2 	beq.w	8007980 <_strtod_l+0xa8>
 8007c3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c3e:	4988      	ldr	r1, [pc, #544]	@ (8007e60 <_strtod_l+0x588>)
 8007c40:	3b01      	subs	r3, #1
 8007c42:	a819      	add	r0, sp, #100	@ 0x64
 8007c44:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c46:	f001 fb93 	bl	8009370 <__match>
 8007c4a:	b910      	cbnz	r0, 8007c52 <_strtod_l+0x37a>
 8007c4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c4e:	3301      	adds	r3, #1
 8007c50:	9319      	str	r3, [sp, #100]	@ 0x64
 8007c52:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8007e70 <_strtod_l+0x598>
 8007c56:	f04f 0a00 	mov.w	sl, #0
 8007c5a:	e676      	b.n	800794a <_strtod_l+0x72>
 8007c5c:	4881      	ldr	r0, [pc, #516]	@ (8007e64 <_strtod_l+0x58c>)
 8007c5e:	f001 f8db 	bl	8008e18 <nan>
 8007c62:	ec5b ab10 	vmov	sl, fp, d0
 8007c66:	e670      	b.n	800794a <_strtod_l+0x72>
 8007c68:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c6a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8007c6c:	eba8 0303 	sub.w	r3, r8, r3
 8007c70:	f1b9 0f00 	cmp.w	r9, #0
 8007c74:	bf08      	it	eq
 8007c76:	46a9      	moveq	r9, r5
 8007c78:	2d10      	cmp	r5, #16
 8007c7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c7c:	462c      	mov	r4, r5
 8007c7e:	bfa8      	it	ge
 8007c80:	2410      	movge	r4, #16
 8007c82:	f7f8 fc57 	bl	8000534 <__aeabi_ui2d>
 8007c86:	2d09      	cmp	r5, #9
 8007c88:	4682      	mov	sl, r0
 8007c8a:	468b      	mov	fp, r1
 8007c8c:	dc13      	bgt.n	8007cb6 <_strtod_l+0x3de>
 8007c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	f43f ae5a 	beq.w	800794a <_strtod_l+0x72>
 8007c96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c98:	dd78      	ble.n	8007d8c <_strtod_l+0x4b4>
 8007c9a:	2b16      	cmp	r3, #22
 8007c9c:	dc5f      	bgt.n	8007d5e <_strtod_l+0x486>
 8007c9e:	4972      	ldr	r1, [pc, #456]	@ (8007e68 <_strtod_l+0x590>)
 8007ca0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ca4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ca8:	4652      	mov	r2, sl
 8007caa:	465b      	mov	r3, fp
 8007cac:	f7f8 fcbc 	bl	8000628 <__aeabi_dmul>
 8007cb0:	4682      	mov	sl, r0
 8007cb2:	468b      	mov	fp, r1
 8007cb4:	e649      	b.n	800794a <_strtod_l+0x72>
 8007cb6:	4b6c      	ldr	r3, [pc, #432]	@ (8007e68 <_strtod_l+0x590>)
 8007cb8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007cbc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007cc0:	f7f8 fcb2 	bl	8000628 <__aeabi_dmul>
 8007cc4:	4682      	mov	sl, r0
 8007cc6:	4638      	mov	r0, r7
 8007cc8:	468b      	mov	fp, r1
 8007cca:	f7f8 fc33 	bl	8000534 <__aeabi_ui2d>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	460b      	mov	r3, r1
 8007cd2:	4650      	mov	r0, sl
 8007cd4:	4659      	mov	r1, fp
 8007cd6:	f7f8 faf1 	bl	80002bc <__adddf3>
 8007cda:	2d0f      	cmp	r5, #15
 8007cdc:	4682      	mov	sl, r0
 8007cde:	468b      	mov	fp, r1
 8007ce0:	ddd5      	ble.n	8007c8e <_strtod_l+0x3b6>
 8007ce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ce4:	1b2c      	subs	r4, r5, r4
 8007ce6:	441c      	add	r4, r3
 8007ce8:	2c00      	cmp	r4, #0
 8007cea:	f340 8093 	ble.w	8007e14 <_strtod_l+0x53c>
 8007cee:	f014 030f 	ands.w	r3, r4, #15
 8007cf2:	d00a      	beq.n	8007d0a <_strtod_l+0x432>
 8007cf4:	495c      	ldr	r1, [pc, #368]	@ (8007e68 <_strtod_l+0x590>)
 8007cf6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007cfa:	4652      	mov	r2, sl
 8007cfc:	465b      	mov	r3, fp
 8007cfe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d02:	f7f8 fc91 	bl	8000628 <__aeabi_dmul>
 8007d06:	4682      	mov	sl, r0
 8007d08:	468b      	mov	fp, r1
 8007d0a:	f034 040f 	bics.w	r4, r4, #15
 8007d0e:	d073      	beq.n	8007df8 <_strtod_l+0x520>
 8007d10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007d14:	dd49      	ble.n	8007daa <_strtod_l+0x4d2>
 8007d16:	2400      	movs	r4, #0
 8007d18:	46a0      	mov	r8, r4
 8007d1a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007d1c:	46a1      	mov	r9, r4
 8007d1e:	9a05      	ldr	r2, [sp, #20]
 8007d20:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8007e70 <_strtod_l+0x598>
 8007d24:	2322      	movs	r3, #34	@ 0x22
 8007d26:	6013      	str	r3, [r2, #0]
 8007d28:	f04f 0a00 	mov.w	sl, #0
 8007d2c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	f43f ae0b 	beq.w	800794a <_strtod_l+0x72>
 8007d34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d36:	9805      	ldr	r0, [sp, #20]
 8007d38:	f7ff f946 	bl	8006fc8 <_Bfree>
 8007d3c:	9805      	ldr	r0, [sp, #20]
 8007d3e:	4649      	mov	r1, r9
 8007d40:	f7ff f942 	bl	8006fc8 <_Bfree>
 8007d44:	9805      	ldr	r0, [sp, #20]
 8007d46:	4641      	mov	r1, r8
 8007d48:	f7ff f93e 	bl	8006fc8 <_Bfree>
 8007d4c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d4e:	9805      	ldr	r0, [sp, #20]
 8007d50:	f7ff f93a 	bl	8006fc8 <_Bfree>
 8007d54:	9805      	ldr	r0, [sp, #20]
 8007d56:	4621      	mov	r1, r4
 8007d58:	f7ff f936 	bl	8006fc8 <_Bfree>
 8007d5c:	e5f5      	b.n	800794a <_strtod_l+0x72>
 8007d5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d60:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007d64:	4293      	cmp	r3, r2
 8007d66:	dbbc      	blt.n	8007ce2 <_strtod_l+0x40a>
 8007d68:	4c3f      	ldr	r4, [pc, #252]	@ (8007e68 <_strtod_l+0x590>)
 8007d6a:	f1c5 050f 	rsb	r5, r5, #15
 8007d6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007d72:	4652      	mov	r2, sl
 8007d74:	465b      	mov	r3, fp
 8007d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d7a:	f7f8 fc55 	bl	8000628 <__aeabi_dmul>
 8007d7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d80:	1b5d      	subs	r5, r3, r5
 8007d82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007d86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007d8a:	e78f      	b.n	8007cac <_strtod_l+0x3d4>
 8007d8c:	3316      	adds	r3, #22
 8007d8e:	dba8      	blt.n	8007ce2 <_strtod_l+0x40a>
 8007d90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d92:	eba3 0808 	sub.w	r8, r3, r8
 8007d96:	4b34      	ldr	r3, [pc, #208]	@ (8007e68 <_strtod_l+0x590>)
 8007d98:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007d9c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007da0:	4650      	mov	r0, sl
 8007da2:	4659      	mov	r1, fp
 8007da4:	f7f8 fd6a 	bl	800087c <__aeabi_ddiv>
 8007da8:	e782      	b.n	8007cb0 <_strtod_l+0x3d8>
 8007daa:	2300      	movs	r3, #0
 8007dac:	4f2f      	ldr	r7, [pc, #188]	@ (8007e6c <_strtod_l+0x594>)
 8007dae:	1124      	asrs	r4, r4, #4
 8007db0:	4650      	mov	r0, sl
 8007db2:	4659      	mov	r1, fp
 8007db4:	461e      	mov	r6, r3
 8007db6:	2c01      	cmp	r4, #1
 8007db8:	dc21      	bgt.n	8007dfe <_strtod_l+0x526>
 8007dba:	b10b      	cbz	r3, 8007dc0 <_strtod_l+0x4e8>
 8007dbc:	4682      	mov	sl, r0
 8007dbe:	468b      	mov	fp, r1
 8007dc0:	492a      	ldr	r1, [pc, #168]	@ (8007e6c <_strtod_l+0x594>)
 8007dc2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007dc6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007dca:	4652      	mov	r2, sl
 8007dcc:	465b      	mov	r3, fp
 8007dce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007dd2:	f7f8 fc29 	bl	8000628 <__aeabi_dmul>
 8007dd6:	4b26      	ldr	r3, [pc, #152]	@ (8007e70 <_strtod_l+0x598>)
 8007dd8:	460a      	mov	r2, r1
 8007dda:	400b      	ands	r3, r1
 8007ddc:	4925      	ldr	r1, [pc, #148]	@ (8007e74 <_strtod_l+0x59c>)
 8007dde:	428b      	cmp	r3, r1
 8007de0:	4682      	mov	sl, r0
 8007de2:	d898      	bhi.n	8007d16 <_strtod_l+0x43e>
 8007de4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007de8:	428b      	cmp	r3, r1
 8007dea:	bf86      	itte	hi
 8007dec:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8007e78 <_strtod_l+0x5a0>
 8007df0:	f04f 3aff 	movhi.w	sl, #4294967295
 8007df4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007df8:	2300      	movs	r3, #0
 8007dfa:	9308      	str	r3, [sp, #32]
 8007dfc:	e076      	b.n	8007eec <_strtod_l+0x614>
 8007dfe:	07e2      	lsls	r2, r4, #31
 8007e00:	d504      	bpl.n	8007e0c <_strtod_l+0x534>
 8007e02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e06:	f7f8 fc0f 	bl	8000628 <__aeabi_dmul>
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	3601      	adds	r6, #1
 8007e0e:	1064      	asrs	r4, r4, #1
 8007e10:	3708      	adds	r7, #8
 8007e12:	e7d0      	b.n	8007db6 <_strtod_l+0x4de>
 8007e14:	d0f0      	beq.n	8007df8 <_strtod_l+0x520>
 8007e16:	4264      	negs	r4, r4
 8007e18:	f014 020f 	ands.w	r2, r4, #15
 8007e1c:	d00a      	beq.n	8007e34 <_strtod_l+0x55c>
 8007e1e:	4b12      	ldr	r3, [pc, #72]	@ (8007e68 <_strtod_l+0x590>)
 8007e20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e24:	4650      	mov	r0, sl
 8007e26:	4659      	mov	r1, fp
 8007e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2c:	f7f8 fd26 	bl	800087c <__aeabi_ddiv>
 8007e30:	4682      	mov	sl, r0
 8007e32:	468b      	mov	fp, r1
 8007e34:	1124      	asrs	r4, r4, #4
 8007e36:	d0df      	beq.n	8007df8 <_strtod_l+0x520>
 8007e38:	2c1f      	cmp	r4, #31
 8007e3a:	dd1f      	ble.n	8007e7c <_strtod_l+0x5a4>
 8007e3c:	2400      	movs	r4, #0
 8007e3e:	46a0      	mov	r8, r4
 8007e40:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007e42:	46a1      	mov	r9, r4
 8007e44:	9a05      	ldr	r2, [sp, #20]
 8007e46:	2322      	movs	r3, #34	@ 0x22
 8007e48:	f04f 0a00 	mov.w	sl, #0
 8007e4c:	f04f 0b00 	mov.w	fp, #0
 8007e50:	6013      	str	r3, [r2, #0]
 8007e52:	e76b      	b.n	8007d2c <_strtod_l+0x454>
 8007e54:	08009965 	.word	0x08009965
 8007e58:	08009c88 	.word	0x08009c88
 8007e5c:	0800995d 	.word	0x0800995d
 8007e60:	08009a41 	.word	0x08009a41
 8007e64:	08009a3d 	.word	0x08009a3d
 8007e68:	08009bc0 	.word	0x08009bc0
 8007e6c:	08009b98 	.word	0x08009b98
 8007e70:	7ff00000 	.word	0x7ff00000
 8007e74:	7ca00000 	.word	0x7ca00000
 8007e78:	7fefffff 	.word	0x7fefffff
 8007e7c:	f014 0310 	ands.w	r3, r4, #16
 8007e80:	bf18      	it	ne
 8007e82:	236a      	movne	r3, #106	@ 0x6a
 8007e84:	4ea9      	ldr	r6, [pc, #676]	@ (800812c <_strtod_l+0x854>)
 8007e86:	9308      	str	r3, [sp, #32]
 8007e88:	4650      	mov	r0, sl
 8007e8a:	4659      	mov	r1, fp
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	07e7      	lsls	r7, r4, #31
 8007e90:	d504      	bpl.n	8007e9c <_strtod_l+0x5c4>
 8007e92:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007e96:	f7f8 fbc7 	bl	8000628 <__aeabi_dmul>
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	1064      	asrs	r4, r4, #1
 8007e9e:	f106 0608 	add.w	r6, r6, #8
 8007ea2:	d1f4      	bne.n	8007e8e <_strtod_l+0x5b6>
 8007ea4:	b10b      	cbz	r3, 8007eaa <_strtod_l+0x5d2>
 8007ea6:	4682      	mov	sl, r0
 8007ea8:	468b      	mov	fp, r1
 8007eaa:	9b08      	ldr	r3, [sp, #32]
 8007eac:	b1b3      	cbz	r3, 8007edc <_strtod_l+0x604>
 8007eae:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007eb2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	4659      	mov	r1, fp
 8007eba:	dd0f      	ble.n	8007edc <_strtod_l+0x604>
 8007ebc:	2b1f      	cmp	r3, #31
 8007ebe:	dd56      	ble.n	8007f6e <_strtod_l+0x696>
 8007ec0:	2b34      	cmp	r3, #52	@ 0x34
 8007ec2:	bfde      	ittt	le
 8007ec4:	f04f 33ff 	movle.w	r3, #4294967295
 8007ec8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007ecc:	4093      	lslle	r3, r2
 8007ece:	f04f 0a00 	mov.w	sl, #0
 8007ed2:	bfcc      	ite	gt
 8007ed4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007ed8:	ea03 0b01 	andle.w	fp, r3, r1
 8007edc:	2200      	movs	r2, #0
 8007ede:	2300      	movs	r3, #0
 8007ee0:	4650      	mov	r0, sl
 8007ee2:	4659      	mov	r1, fp
 8007ee4:	f7f8 fe08 	bl	8000af8 <__aeabi_dcmpeq>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d1a7      	bne.n	8007e3c <_strtod_l+0x564>
 8007eec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007eee:	9300      	str	r3, [sp, #0]
 8007ef0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007ef2:	9805      	ldr	r0, [sp, #20]
 8007ef4:	462b      	mov	r3, r5
 8007ef6:	464a      	mov	r2, r9
 8007ef8:	f7ff f8ce 	bl	8007098 <__s2b>
 8007efc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007efe:	2800      	cmp	r0, #0
 8007f00:	f43f af09 	beq.w	8007d16 <_strtod_l+0x43e>
 8007f04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f06:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f08:	2a00      	cmp	r2, #0
 8007f0a:	eba3 0308 	sub.w	r3, r3, r8
 8007f0e:	bfa8      	it	ge
 8007f10:	2300      	movge	r3, #0
 8007f12:	9312      	str	r3, [sp, #72]	@ 0x48
 8007f14:	2400      	movs	r4, #0
 8007f16:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007f1a:	9316      	str	r3, [sp, #88]	@ 0x58
 8007f1c:	46a0      	mov	r8, r4
 8007f1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f20:	9805      	ldr	r0, [sp, #20]
 8007f22:	6859      	ldr	r1, [r3, #4]
 8007f24:	f7ff f810 	bl	8006f48 <_Balloc>
 8007f28:	4681      	mov	r9, r0
 8007f2a:	2800      	cmp	r0, #0
 8007f2c:	f43f aef7 	beq.w	8007d1e <_strtod_l+0x446>
 8007f30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f32:	691a      	ldr	r2, [r3, #16]
 8007f34:	3202      	adds	r2, #2
 8007f36:	f103 010c 	add.w	r1, r3, #12
 8007f3a:	0092      	lsls	r2, r2, #2
 8007f3c:	300c      	adds	r0, #12
 8007f3e:	f7fe f878 	bl	8006032 <memcpy>
 8007f42:	ec4b ab10 	vmov	d0, sl, fp
 8007f46:	9805      	ldr	r0, [sp, #20]
 8007f48:	aa1c      	add	r2, sp, #112	@ 0x70
 8007f4a:	a91b      	add	r1, sp, #108	@ 0x6c
 8007f4c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007f50:	f7ff fbd6 	bl	8007700 <__d2b>
 8007f54:	901a      	str	r0, [sp, #104]	@ 0x68
 8007f56:	2800      	cmp	r0, #0
 8007f58:	f43f aee1 	beq.w	8007d1e <_strtod_l+0x446>
 8007f5c:	9805      	ldr	r0, [sp, #20]
 8007f5e:	2101      	movs	r1, #1
 8007f60:	f7ff f930 	bl	80071c4 <__i2b>
 8007f64:	4680      	mov	r8, r0
 8007f66:	b948      	cbnz	r0, 8007f7c <_strtod_l+0x6a4>
 8007f68:	f04f 0800 	mov.w	r8, #0
 8007f6c:	e6d7      	b.n	8007d1e <_strtod_l+0x446>
 8007f6e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f72:	fa02 f303 	lsl.w	r3, r2, r3
 8007f76:	ea03 0a0a 	and.w	sl, r3, sl
 8007f7a:	e7af      	b.n	8007edc <_strtod_l+0x604>
 8007f7c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007f7e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007f80:	2d00      	cmp	r5, #0
 8007f82:	bfab      	itete	ge
 8007f84:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007f86:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007f88:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007f8a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007f8c:	bfac      	ite	ge
 8007f8e:	18ef      	addge	r7, r5, r3
 8007f90:	1b5e      	sublt	r6, r3, r5
 8007f92:	9b08      	ldr	r3, [sp, #32]
 8007f94:	1aed      	subs	r5, r5, r3
 8007f96:	4415      	add	r5, r2
 8007f98:	4b65      	ldr	r3, [pc, #404]	@ (8008130 <_strtod_l+0x858>)
 8007f9a:	3d01      	subs	r5, #1
 8007f9c:	429d      	cmp	r5, r3
 8007f9e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007fa2:	da50      	bge.n	8008046 <_strtod_l+0x76e>
 8007fa4:	1b5b      	subs	r3, r3, r5
 8007fa6:	2b1f      	cmp	r3, #31
 8007fa8:	eba2 0203 	sub.w	r2, r2, r3
 8007fac:	f04f 0101 	mov.w	r1, #1
 8007fb0:	dc3d      	bgt.n	800802e <_strtod_l+0x756>
 8007fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8007fb6:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007fb8:	2300      	movs	r3, #0
 8007fba:	9310      	str	r3, [sp, #64]	@ 0x40
 8007fbc:	18bd      	adds	r5, r7, r2
 8007fbe:	9b08      	ldr	r3, [sp, #32]
 8007fc0:	42af      	cmp	r7, r5
 8007fc2:	4416      	add	r6, r2
 8007fc4:	441e      	add	r6, r3
 8007fc6:	463b      	mov	r3, r7
 8007fc8:	bfa8      	it	ge
 8007fca:	462b      	movge	r3, r5
 8007fcc:	42b3      	cmp	r3, r6
 8007fce:	bfa8      	it	ge
 8007fd0:	4633      	movge	r3, r6
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	bfc2      	ittt	gt
 8007fd6:	1aed      	subgt	r5, r5, r3
 8007fd8:	1af6      	subgt	r6, r6, r3
 8007fda:	1aff      	subgt	r7, r7, r3
 8007fdc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	dd16      	ble.n	8008010 <_strtod_l+0x738>
 8007fe2:	4641      	mov	r1, r8
 8007fe4:	9805      	ldr	r0, [sp, #20]
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	f7ff f9a4 	bl	8007334 <__pow5mult>
 8007fec:	4680      	mov	r8, r0
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	d0ba      	beq.n	8007f68 <_strtod_l+0x690>
 8007ff2:	4601      	mov	r1, r0
 8007ff4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007ff6:	9805      	ldr	r0, [sp, #20]
 8007ff8:	f7ff f8fa 	bl	80071f0 <__multiply>
 8007ffc:	900a      	str	r0, [sp, #40]	@ 0x28
 8007ffe:	2800      	cmp	r0, #0
 8008000:	f43f ae8d 	beq.w	8007d1e <_strtod_l+0x446>
 8008004:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008006:	9805      	ldr	r0, [sp, #20]
 8008008:	f7fe ffde 	bl	8006fc8 <_Bfree>
 800800c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800800e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008010:	2d00      	cmp	r5, #0
 8008012:	dc1d      	bgt.n	8008050 <_strtod_l+0x778>
 8008014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008016:	2b00      	cmp	r3, #0
 8008018:	dd23      	ble.n	8008062 <_strtod_l+0x78a>
 800801a:	4649      	mov	r1, r9
 800801c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800801e:	9805      	ldr	r0, [sp, #20]
 8008020:	f7ff f988 	bl	8007334 <__pow5mult>
 8008024:	4681      	mov	r9, r0
 8008026:	b9e0      	cbnz	r0, 8008062 <_strtod_l+0x78a>
 8008028:	f04f 0900 	mov.w	r9, #0
 800802c:	e677      	b.n	8007d1e <_strtod_l+0x446>
 800802e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8008032:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8008036:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800803a:	35e2      	adds	r5, #226	@ 0xe2
 800803c:	fa01 f305 	lsl.w	r3, r1, r5
 8008040:	9310      	str	r3, [sp, #64]	@ 0x40
 8008042:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008044:	e7ba      	b.n	8007fbc <_strtod_l+0x6e4>
 8008046:	2300      	movs	r3, #0
 8008048:	9310      	str	r3, [sp, #64]	@ 0x40
 800804a:	2301      	movs	r3, #1
 800804c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800804e:	e7b5      	b.n	8007fbc <_strtod_l+0x6e4>
 8008050:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008052:	9805      	ldr	r0, [sp, #20]
 8008054:	462a      	mov	r2, r5
 8008056:	f7ff f9c7 	bl	80073e8 <__lshift>
 800805a:	901a      	str	r0, [sp, #104]	@ 0x68
 800805c:	2800      	cmp	r0, #0
 800805e:	d1d9      	bne.n	8008014 <_strtod_l+0x73c>
 8008060:	e65d      	b.n	8007d1e <_strtod_l+0x446>
 8008062:	2e00      	cmp	r6, #0
 8008064:	dd07      	ble.n	8008076 <_strtod_l+0x79e>
 8008066:	4649      	mov	r1, r9
 8008068:	9805      	ldr	r0, [sp, #20]
 800806a:	4632      	mov	r2, r6
 800806c:	f7ff f9bc 	bl	80073e8 <__lshift>
 8008070:	4681      	mov	r9, r0
 8008072:	2800      	cmp	r0, #0
 8008074:	d0d8      	beq.n	8008028 <_strtod_l+0x750>
 8008076:	2f00      	cmp	r7, #0
 8008078:	dd08      	ble.n	800808c <_strtod_l+0x7b4>
 800807a:	4641      	mov	r1, r8
 800807c:	9805      	ldr	r0, [sp, #20]
 800807e:	463a      	mov	r2, r7
 8008080:	f7ff f9b2 	bl	80073e8 <__lshift>
 8008084:	4680      	mov	r8, r0
 8008086:	2800      	cmp	r0, #0
 8008088:	f43f ae49 	beq.w	8007d1e <_strtod_l+0x446>
 800808c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800808e:	9805      	ldr	r0, [sp, #20]
 8008090:	464a      	mov	r2, r9
 8008092:	f7ff fa31 	bl	80074f8 <__mdiff>
 8008096:	4604      	mov	r4, r0
 8008098:	2800      	cmp	r0, #0
 800809a:	f43f ae40 	beq.w	8007d1e <_strtod_l+0x446>
 800809e:	68c3      	ldr	r3, [r0, #12]
 80080a0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80080a2:	2300      	movs	r3, #0
 80080a4:	60c3      	str	r3, [r0, #12]
 80080a6:	4641      	mov	r1, r8
 80080a8:	f7ff fa0a 	bl	80074c0 <__mcmp>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	da45      	bge.n	800813c <_strtod_l+0x864>
 80080b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080b2:	ea53 030a 	orrs.w	r3, r3, sl
 80080b6:	d16b      	bne.n	8008190 <_strtod_l+0x8b8>
 80080b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d167      	bne.n	8008190 <_strtod_l+0x8b8>
 80080c0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080c4:	0d1b      	lsrs	r3, r3, #20
 80080c6:	051b      	lsls	r3, r3, #20
 80080c8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80080cc:	d960      	bls.n	8008190 <_strtod_l+0x8b8>
 80080ce:	6963      	ldr	r3, [r4, #20]
 80080d0:	b913      	cbnz	r3, 80080d8 <_strtod_l+0x800>
 80080d2:	6923      	ldr	r3, [r4, #16]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	dd5b      	ble.n	8008190 <_strtod_l+0x8b8>
 80080d8:	4621      	mov	r1, r4
 80080da:	2201      	movs	r2, #1
 80080dc:	9805      	ldr	r0, [sp, #20]
 80080de:	f7ff f983 	bl	80073e8 <__lshift>
 80080e2:	4641      	mov	r1, r8
 80080e4:	4604      	mov	r4, r0
 80080e6:	f7ff f9eb 	bl	80074c0 <__mcmp>
 80080ea:	2800      	cmp	r0, #0
 80080ec:	dd50      	ble.n	8008190 <_strtod_l+0x8b8>
 80080ee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80080f2:	9a08      	ldr	r2, [sp, #32]
 80080f4:	0d1b      	lsrs	r3, r3, #20
 80080f6:	051b      	lsls	r3, r3, #20
 80080f8:	2a00      	cmp	r2, #0
 80080fa:	d06a      	beq.n	80081d2 <_strtod_l+0x8fa>
 80080fc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008100:	d867      	bhi.n	80081d2 <_strtod_l+0x8fa>
 8008102:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008106:	f67f ae9d 	bls.w	8007e44 <_strtod_l+0x56c>
 800810a:	4b0a      	ldr	r3, [pc, #40]	@ (8008134 <_strtod_l+0x85c>)
 800810c:	4650      	mov	r0, sl
 800810e:	4659      	mov	r1, fp
 8008110:	2200      	movs	r2, #0
 8008112:	f7f8 fa89 	bl	8000628 <__aeabi_dmul>
 8008116:	4b08      	ldr	r3, [pc, #32]	@ (8008138 <_strtod_l+0x860>)
 8008118:	400b      	ands	r3, r1
 800811a:	4682      	mov	sl, r0
 800811c:	468b      	mov	fp, r1
 800811e:	2b00      	cmp	r3, #0
 8008120:	f47f ae08 	bne.w	8007d34 <_strtod_l+0x45c>
 8008124:	9a05      	ldr	r2, [sp, #20]
 8008126:	2322      	movs	r3, #34	@ 0x22
 8008128:	6013      	str	r3, [r2, #0]
 800812a:	e603      	b.n	8007d34 <_strtod_l+0x45c>
 800812c:	08009cb0 	.word	0x08009cb0
 8008130:	fffffc02 	.word	0xfffffc02
 8008134:	39500000 	.word	0x39500000
 8008138:	7ff00000 	.word	0x7ff00000
 800813c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008140:	d165      	bne.n	800820e <_strtod_l+0x936>
 8008142:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008144:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008148:	b35a      	cbz	r2, 80081a2 <_strtod_l+0x8ca>
 800814a:	4a9f      	ldr	r2, [pc, #636]	@ (80083c8 <_strtod_l+0xaf0>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d12b      	bne.n	80081a8 <_strtod_l+0x8d0>
 8008150:	9b08      	ldr	r3, [sp, #32]
 8008152:	4651      	mov	r1, sl
 8008154:	b303      	cbz	r3, 8008198 <_strtod_l+0x8c0>
 8008156:	4b9d      	ldr	r3, [pc, #628]	@ (80083cc <_strtod_l+0xaf4>)
 8008158:	465a      	mov	r2, fp
 800815a:	4013      	ands	r3, r2
 800815c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008160:	f04f 32ff 	mov.w	r2, #4294967295
 8008164:	d81b      	bhi.n	800819e <_strtod_l+0x8c6>
 8008166:	0d1b      	lsrs	r3, r3, #20
 8008168:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800816c:	fa02 f303 	lsl.w	r3, r2, r3
 8008170:	4299      	cmp	r1, r3
 8008172:	d119      	bne.n	80081a8 <_strtod_l+0x8d0>
 8008174:	4b96      	ldr	r3, [pc, #600]	@ (80083d0 <_strtod_l+0xaf8>)
 8008176:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008178:	429a      	cmp	r2, r3
 800817a:	d102      	bne.n	8008182 <_strtod_l+0x8aa>
 800817c:	3101      	adds	r1, #1
 800817e:	f43f adce 	beq.w	8007d1e <_strtod_l+0x446>
 8008182:	4b92      	ldr	r3, [pc, #584]	@ (80083cc <_strtod_l+0xaf4>)
 8008184:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008186:	401a      	ands	r2, r3
 8008188:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800818c:	f04f 0a00 	mov.w	sl, #0
 8008190:	9b08      	ldr	r3, [sp, #32]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d1b9      	bne.n	800810a <_strtod_l+0x832>
 8008196:	e5cd      	b.n	8007d34 <_strtod_l+0x45c>
 8008198:	f04f 33ff 	mov.w	r3, #4294967295
 800819c:	e7e8      	b.n	8008170 <_strtod_l+0x898>
 800819e:	4613      	mov	r3, r2
 80081a0:	e7e6      	b.n	8008170 <_strtod_l+0x898>
 80081a2:	ea53 030a 	orrs.w	r3, r3, sl
 80081a6:	d0a2      	beq.n	80080ee <_strtod_l+0x816>
 80081a8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80081aa:	b1db      	cbz	r3, 80081e4 <_strtod_l+0x90c>
 80081ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081ae:	4213      	tst	r3, r2
 80081b0:	d0ee      	beq.n	8008190 <_strtod_l+0x8b8>
 80081b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80081b4:	9a08      	ldr	r2, [sp, #32]
 80081b6:	4650      	mov	r0, sl
 80081b8:	4659      	mov	r1, fp
 80081ba:	b1bb      	cbz	r3, 80081ec <_strtod_l+0x914>
 80081bc:	f7ff fb6e 	bl	800789c <sulp>
 80081c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081c4:	ec53 2b10 	vmov	r2, r3, d0
 80081c8:	f7f8 f878 	bl	80002bc <__adddf3>
 80081cc:	4682      	mov	sl, r0
 80081ce:	468b      	mov	fp, r1
 80081d0:	e7de      	b.n	8008190 <_strtod_l+0x8b8>
 80081d2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80081d6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80081da:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80081de:	f04f 3aff 	mov.w	sl, #4294967295
 80081e2:	e7d5      	b.n	8008190 <_strtod_l+0x8b8>
 80081e4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80081e6:	ea13 0f0a 	tst.w	r3, sl
 80081ea:	e7e1      	b.n	80081b0 <_strtod_l+0x8d8>
 80081ec:	f7ff fb56 	bl	800789c <sulp>
 80081f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80081f4:	ec53 2b10 	vmov	r2, r3, d0
 80081f8:	f7f8 f85e 	bl	80002b8 <__aeabi_dsub>
 80081fc:	2200      	movs	r2, #0
 80081fe:	2300      	movs	r3, #0
 8008200:	4682      	mov	sl, r0
 8008202:	468b      	mov	fp, r1
 8008204:	f7f8 fc78 	bl	8000af8 <__aeabi_dcmpeq>
 8008208:	2800      	cmp	r0, #0
 800820a:	d0c1      	beq.n	8008190 <_strtod_l+0x8b8>
 800820c:	e61a      	b.n	8007e44 <_strtod_l+0x56c>
 800820e:	4641      	mov	r1, r8
 8008210:	4620      	mov	r0, r4
 8008212:	f7ff facd 	bl	80077b0 <__ratio>
 8008216:	ec57 6b10 	vmov	r6, r7, d0
 800821a:	2200      	movs	r2, #0
 800821c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008220:	4630      	mov	r0, r6
 8008222:	4639      	mov	r1, r7
 8008224:	f7f8 fc7c 	bl	8000b20 <__aeabi_dcmple>
 8008228:	2800      	cmp	r0, #0
 800822a:	d06f      	beq.n	800830c <_strtod_l+0xa34>
 800822c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800822e:	2b00      	cmp	r3, #0
 8008230:	d17a      	bne.n	8008328 <_strtod_l+0xa50>
 8008232:	f1ba 0f00 	cmp.w	sl, #0
 8008236:	d158      	bne.n	80082ea <_strtod_l+0xa12>
 8008238:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800823a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800823e:	2b00      	cmp	r3, #0
 8008240:	d15a      	bne.n	80082f8 <_strtod_l+0xa20>
 8008242:	4b64      	ldr	r3, [pc, #400]	@ (80083d4 <_strtod_l+0xafc>)
 8008244:	2200      	movs	r2, #0
 8008246:	4630      	mov	r0, r6
 8008248:	4639      	mov	r1, r7
 800824a:	f7f8 fc5f 	bl	8000b0c <__aeabi_dcmplt>
 800824e:	2800      	cmp	r0, #0
 8008250:	d159      	bne.n	8008306 <_strtod_l+0xa2e>
 8008252:	4630      	mov	r0, r6
 8008254:	4639      	mov	r1, r7
 8008256:	4b60      	ldr	r3, [pc, #384]	@ (80083d8 <_strtod_l+0xb00>)
 8008258:	2200      	movs	r2, #0
 800825a:	f7f8 f9e5 	bl	8000628 <__aeabi_dmul>
 800825e:	4606      	mov	r6, r0
 8008260:	460f      	mov	r7, r1
 8008262:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008266:	9606      	str	r6, [sp, #24]
 8008268:	9307      	str	r3, [sp, #28]
 800826a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800826e:	4d57      	ldr	r5, [pc, #348]	@ (80083cc <_strtod_l+0xaf4>)
 8008270:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008274:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008276:	401d      	ands	r5, r3
 8008278:	4b58      	ldr	r3, [pc, #352]	@ (80083dc <_strtod_l+0xb04>)
 800827a:	429d      	cmp	r5, r3
 800827c:	f040 80b2 	bne.w	80083e4 <_strtod_l+0xb0c>
 8008280:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008282:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008286:	ec4b ab10 	vmov	d0, sl, fp
 800828a:	f7ff f9c9 	bl	8007620 <__ulp>
 800828e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008292:	ec51 0b10 	vmov	r0, r1, d0
 8008296:	f7f8 f9c7 	bl	8000628 <__aeabi_dmul>
 800829a:	4652      	mov	r2, sl
 800829c:	465b      	mov	r3, fp
 800829e:	f7f8 f80d 	bl	80002bc <__adddf3>
 80082a2:	460b      	mov	r3, r1
 80082a4:	4949      	ldr	r1, [pc, #292]	@ (80083cc <_strtod_l+0xaf4>)
 80082a6:	4a4e      	ldr	r2, [pc, #312]	@ (80083e0 <_strtod_l+0xb08>)
 80082a8:	4019      	ands	r1, r3
 80082aa:	4291      	cmp	r1, r2
 80082ac:	4682      	mov	sl, r0
 80082ae:	d942      	bls.n	8008336 <_strtod_l+0xa5e>
 80082b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80082b2:	4b47      	ldr	r3, [pc, #284]	@ (80083d0 <_strtod_l+0xaf8>)
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d103      	bne.n	80082c0 <_strtod_l+0x9e8>
 80082b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082ba:	3301      	adds	r3, #1
 80082bc:	f43f ad2f 	beq.w	8007d1e <_strtod_l+0x446>
 80082c0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80083d0 <_strtod_l+0xaf8>
 80082c4:	f04f 3aff 	mov.w	sl, #4294967295
 80082c8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80082ca:	9805      	ldr	r0, [sp, #20]
 80082cc:	f7fe fe7c 	bl	8006fc8 <_Bfree>
 80082d0:	9805      	ldr	r0, [sp, #20]
 80082d2:	4649      	mov	r1, r9
 80082d4:	f7fe fe78 	bl	8006fc8 <_Bfree>
 80082d8:	9805      	ldr	r0, [sp, #20]
 80082da:	4641      	mov	r1, r8
 80082dc:	f7fe fe74 	bl	8006fc8 <_Bfree>
 80082e0:	9805      	ldr	r0, [sp, #20]
 80082e2:	4621      	mov	r1, r4
 80082e4:	f7fe fe70 	bl	8006fc8 <_Bfree>
 80082e8:	e619      	b.n	8007f1e <_strtod_l+0x646>
 80082ea:	f1ba 0f01 	cmp.w	sl, #1
 80082ee:	d103      	bne.n	80082f8 <_strtod_l+0xa20>
 80082f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	f43f ada6 	beq.w	8007e44 <_strtod_l+0x56c>
 80082f8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80083a8 <_strtod_l+0xad0>
 80082fc:	4f35      	ldr	r7, [pc, #212]	@ (80083d4 <_strtod_l+0xafc>)
 80082fe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008302:	2600      	movs	r6, #0
 8008304:	e7b1      	b.n	800826a <_strtod_l+0x992>
 8008306:	4f34      	ldr	r7, [pc, #208]	@ (80083d8 <_strtod_l+0xb00>)
 8008308:	2600      	movs	r6, #0
 800830a:	e7aa      	b.n	8008262 <_strtod_l+0x98a>
 800830c:	4b32      	ldr	r3, [pc, #200]	@ (80083d8 <_strtod_l+0xb00>)
 800830e:	4630      	mov	r0, r6
 8008310:	4639      	mov	r1, r7
 8008312:	2200      	movs	r2, #0
 8008314:	f7f8 f988 	bl	8000628 <__aeabi_dmul>
 8008318:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800831a:	4606      	mov	r6, r0
 800831c:	460f      	mov	r7, r1
 800831e:	2b00      	cmp	r3, #0
 8008320:	d09f      	beq.n	8008262 <_strtod_l+0x98a>
 8008322:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008326:	e7a0      	b.n	800826a <_strtod_l+0x992>
 8008328:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80083b0 <_strtod_l+0xad8>
 800832c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008330:	ec57 6b17 	vmov	r6, r7, d7
 8008334:	e799      	b.n	800826a <_strtod_l+0x992>
 8008336:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800833a:	9b08      	ldr	r3, [sp, #32]
 800833c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1c1      	bne.n	80082c8 <_strtod_l+0x9f0>
 8008344:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008348:	0d1b      	lsrs	r3, r3, #20
 800834a:	051b      	lsls	r3, r3, #20
 800834c:	429d      	cmp	r5, r3
 800834e:	d1bb      	bne.n	80082c8 <_strtod_l+0x9f0>
 8008350:	4630      	mov	r0, r6
 8008352:	4639      	mov	r1, r7
 8008354:	f7f8 fcc8 	bl	8000ce8 <__aeabi_d2lz>
 8008358:	f7f8 f938 	bl	80005cc <__aeabi_l2d>
 800835c:	4602      	mov	r2, r0
 800835e:	460b      	mov	r3, r1
 8008360:	4630      	mov	r0, r6
 8008362:	4639      	mov	r1, r7
 8008364:	f7f7 ffa8 	bl	80002b8 <__aeabi_dsub>
 8008368:	460b      	mov	r3, r1
 800836a:	4602      	mov	r2, r0
 800836c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008370:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008376:	ea46 060a 	orr.w	r6, r6, sl
 800837a:	431e      	orrs	r6, r3
 800837c:	d06f      	beq.n	800845e <_strtod_l+0xb86>
 800837e:	a30e      	add	r3, pc, #56	@ (adr r3, 80083b8 <_strtod_l+0xae0>)
 8008380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008384:	f7f8 fbc2 	bl	8000b0c <__aeabi_dcmplt>
 8008388:	2800      	cmp	r0, #0
 800838a:	f47f acd3 	bne.w	8007d34 <_strtod_l+0x45c>
 800838e:	a30c      	add	r3, pc, #48	@ (adr r3, 80083c0 <_strtod_l+0xae8>)
 8008390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008394:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008398:	f7f8 fbd6 	bl	8000b48 <__aeabi_dcmpgt>
 800839c:	2800      	cmp	r0, #0
 800839e:	d093      	beq.n	80082c8 <_strtod_l+0x9f0>
 80083a0:	e4c8      	b.n	8007d34 <_strtod_l+0x45c>
 80083a2:	bf00      	nop
 80083a4:	f3af 8000 	nop.w
 80083a8:	00000000 	.word	0x00000000
 80083ac:	bff00000 	.word	0xbff00000
 80083b0:	00000000 	.word	0x00000000
 80083b4:	3ff00000 	.word	0x3ff00000
 80083b8:	94a03595 	.word	0x94a03595
 80083bc:	3fdfffff 	.word	0x3fdfffff
 80083c0:	35afe535 	.word	0x35afe535
 80083c4:	3fe00000 	.word	0x3fe00000
 80083c8:	000fffff 	.word	0x000fffff
 80083cc:	7ff00000 	.word	0x7ff00000
 80083d0:	7fefffff 	.word	0x7fefffff
 80083d4:	3ff00000 	.word	0x3ff00000
 80083d8:	3fe00000 	.word	0x3fe00000
 80083dc:	7fe00000 	.word	0x7fe00000
 80083e0:	7c9fffff 	.word	0x7c9fffff
 80083e4:	9b08      	ldr	r3, [sp, #32]
 80083e6:	b323      	cbz	r3, 8008432 <_strtod_l+0xb5a>
 80083e8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80083ec:	d821      	bhi.n	8008432 <_strtod_l+0xb5a>
 80083ee:	a328      	add	r3, pc, #160	@ (adr r3, 8008490 <_strtod_l+0xbb8>)
 80083f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f4:	4630      	mov	r0, r6
 80083f6:	4639      	mov	r1, r7
 80083f8:	f7f8 fb92 	bl	8000b20 <__aeabi_dcmple>
 80083fc:	b1a0      	cbz	r0, 8008428 <_strtod_l+0xb50>
 80083fe:	4639      	mov	r1, r7
 8008400:	4630      	mov	r0, r6
 8008402:	f7f8 fbe9 	bl	8000bd8 <__aeabi_d2uiz>
 8008406:	2801      	cmp	r0, #1
 8008408:	bf38      	it	cc
 800840a:	2001      	movcc	r0, #1
 800840c:	f7f8 f892 	bl	8000534 <__aeabi_ui2d>
 8008410:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008412:	4606      	mov	r6, r0
 8008414:	460f      	mov	r7, r1
 8008416:	b9fb      	cbnz	r3, 8008458 <_strtod_l+0xb80>
 8008418:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800841c:	9014      	str	r0, [sp, #80]	@ 0x50
 800841e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008420:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008424:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008428:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800842a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800842e:	1b5b      	subs	r3, r3, r5
 8008430:	9311      	str	r3, [sp, #68]	@ 0x44
 8008432:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008436:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800843a:	f7ff f8f1 	bl	8007620 <__ulp>
 800843e:	4650      	mov	r0, sl
 8008440:	ec53 2b10 	vmov	r2, r3, d0
 8008444:	4659      	mov	r1, fp
 8008446:	f7f8 f8ef 	bl	8000628 <__aeabi_dmul>
 800844a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800844e:	f7f7 ff35 	bl	80002bc <__adddf3>
 8008452:	4682      	mov	sl, r0
 8008454:	468b      	mov	fp, r1
 8008456:	e770      	b.n	800833a <_strtod_l+0xa62>
 8008458:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800845c:	e7e0      	b.n	8008420 <_strtod_l+0xb48>
 800845e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008498 <_strtod_l+0xbc0>)
 8008460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008464:	f7f8 fb52 	bl	8000b0c <__aeabi_dcmplt>
 8008468:	e798      	b.n	800839c <_strtod_l+0xac4>
 800846a:	2300      	movs	r3, #0
 800846c:	930e      	str	r3, [sp, #56]	@ 0x38
 800846e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008470:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008472:	6013      	str	r3, [r2, #0]
 8008474:	f7ff ba6d 	b.w	8007952 <_strtod_l+0x7a>
 8008478:	2a65      	cmp	r2, #101	@ 0x65
 800847a:	f43f ab68 	beq.w	8007b4e <_strtod_l+0x276>
 800847e:	2a45      	cmp	r2, #69	@ 0x45
 8008480:	f43f ab65 	beq.w	8007b4e <_strtod_l+0x276>
 8008484:	2301      	movs	r3, #1
 8008486:	f7ff bba0 	b.w	8007bca <_strtod_l+0x2f2>
 800848a:	bf00      	nop
 800848c:	f3af 8000 	nop.w
 8008490:	ffc00000 	.word	0xffc00000
 8008494:	41dfffff 	.word	0x41dfffff
 8008498:	94a03595 	.word	0x94a03595
 800849c:	3fcfffff 	.word	0x3fcfffff

080084a0 <_strtod_r>:
 80084a0:	4b01      	ldr	r3, [pc, #4]	@ (80084a8 <_strtod_r+0x8>)
 80084a2:	f7ff ba19 	b.w	80078d8 <_strtod_l>
 80084a6:	bf00      	nop
 80084a8:	2000006c 	.word	0x2000006c

080084ac <_strtol_l.isra.0>:
 80084ac:	2b24      	cmp	r3, #36	@ 0x24
 80084ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084b2:	4686      	mov	lr, r0
 80084b4:	4690      	mov	r8, r2
 80084b6:	d801      	bhi.n	80084bc <_strtol_l.isra.0+0x10>
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d106      	bne.n	80084ca <_strtol_l.isra.0+0x1e>
 80084bc:	f7fd fd84 	bl	8005fc8 <__errno>
 80084c0:	2316      	movs	r3, #22
 80084c2:	6003      	str	r3, [r0, #0]
 80084c4:	2000      	movs	r0, #0
 80084c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ca:	4834      	ldr	r0, [pc, #208]	@ (800859c <_strtol_l.isra.0+0xf0>)
 80084cc:	460d      	mov	r5, r1
 80084ce:	462a      	mov	r2, r5
 80084d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084d4:	5d06      	ldrb	r6, [r0, r4]
 80084d6:	f016 0608 	ands.w	r6, r6, #8
 80084da:	d1f8      	bne.n	80084ce <_strtol_l.isra.0+0x22>
 80084dc:	2c2d      	cmp	r4, #45	@ 0x2d
 80084de:	d110      	bne.n	8008502 <_strtol_l.isra.0+0x56>
 80084e0:	782c      	ldrb	r4, [r5, #0]
 80084e2:	2601      	movs	r6, #1
 80084e4:	1c95      	adds	r5, r2, #2
 80084e6:	f033 0210 	bics.w	r2, r3, #16
 80084ea:	d115      	bne.n	8008518 <_strtol_l.isra.0+0x6c>
 80084ec:	2c30      	cmp	r4, #48	@ 0x30
 80084ee:	d10d      	bne.n	800850c <_strtol_l.isra.0+0x60>
 80084f0:	782a      	ldrb	r2, [r5, #0]
 80084f2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80084f6:	2a58      	cmp	r2, #88	@ 0x58
 80084f8:	d108      	bne.n	800850c <_strtol_l.isra.0+0x60>
 80084fa:	786c      	ldrb	r4, [r5, #1]
 80084fc:	3502      	adds	r5, #2
 80084fe:	2310      	movs	r3, #16
 8008500:	e00a      	b.n	8008518 <_strtol_l.isra.0+0x6c>
 8008502:	2c2b      	cmp	r4, #43	@ 0x2b
 8008504:	bf04      	itt	eq
 8008506:	782c      	ldrbeq	r4, [r5, #0]
 8008508:	1c95      	addeq	r5, r2, #2
 800850a:	e7ec      	b.n	80084e6 <_strtol_l.isra.0+0x3a>
 800850c:	2b00      	cmp	r3, #0
 800850e:	d1f6      	bne.n	80084fe <_strtol_l.isra.0+0x52>
 8008510:	2c30      	cmp	r4, #48	@ 0x30
 8008512:	bf14      	ite	ne
 8008514:	230a      	movne	r3, #10
 8008516:	2308      	moveq	r3, #8
 8008518:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800851c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008520:	2200      	movs	r2, #0
 8008522:	fbbc f9f3 	udiv	r9, ip, r3
 8008526:	4610      	mov	r0, r2
 8008528:	fb03 ca19 	mls	sl, r3, r9, ip
 800852c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008530:	2f09      	cmp	r7, #9
 8008532:	d80f      	bhi.n	8008554 <_strtol_l.isra.0+0xa8>
 8008534:	463c      	mov	r4, r7
 8008536:	42a3      	cmp	r3, r4
 8008538:	dd1b      	ble.n	8008572 <_strtol_l.isra.0+0xc6>
 800853a:	1c57      	adds	r7, r2, #1
 800853c:	d007      	beq.n	800854e <_strtol_l.isra.0+0xa2>
 800853e:	4581      	cmp	r9, r0
 8008540:	d314      	bcc.n	800856c <_strtol_l.isra.0+0xc0>
 8008542:	d101      	bne.n	8008548 <_strtol_l.isra.0+0x9c>
 8008544:	45a2      	cmp	sl, r4
 8008546:	db11      	blt.n	800856c <_strtol_l.isra.0+0xc0>
 8008548:	fb00 4003 	mla	r0, r0, r3, r4
 800854c:	2201      	movs	r2, #1
 800854e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008552:	e7eb      	b.n	800852c <_strtol_l.isra.0+0x80>
 8008554:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008558:	2f19      	cmp	r7, #25
 800855a:	d801      	bhi.n	8008560 <_strtol_l.isra.0+0xb4>
 800855c:	3c37      	subs	r4, #55	@ 0x37
 800855e:	e7ea      	b.n	8008536 <_strtol_l.isra.0+0x8a>
 8008560:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008564:	2f19      	cmp	r7, #25
 8008566:	d804      	bhi.n	8008572 <_strtol_l.isra.0+0xc6>
 8008568:	3c57      	subs	r4, #87	@ 0x57
 800856a:	e7e4      	b.n	8008536 <_strtol_l.isra.0+0x8a>
 800856c:	f04f 32ff 	mov.w	r2, #4294967295
 8008570:	e7ed      	b.n	800854e <_strtol_l.isra.0+0xa2>
 8008572:	1c53      	adds	r3, r2, #1
 8008574:	d108      	bne.n	8008588 <_strtol_l.isra.0+0xdc>
 8008576:	2322      	movs	r3, #34	@ 0x22
 8008578:	f8ce 3000 	str.w	r3, [lr]
 800857c:	4660      	mov	r0, ip
 800857e:	f1b8 0f00 	cmp.w	r8, #0
 8008582:	d0a0      	beq.n	80084c6 <_strtol_l.isra.0+0x1a>
 8008584:	1e69      	subs	r1, r5, #1
 8008586:	e006      	b.n	8008596 <_strtol_l.isra.0+0xea>
 8008588:	b106      	cbz	r6, 800858c <_strtol_l.isra.0+0xe0>
 800858a:	4240      	negs	r0, r0
 800858c:	f1b8 0f00 	cmp.w	r8, #0
 8008590:	d099      	beq.n	80084c6 <_strtol_l.isra.0+0x1a>
 8008592:	2a00      	cmp	r2, #0
 8008594:	d1f6      	bne.n	8008584 <_strtol_l.isra.0+0xd8>
 8008596:	f8c8 1000 	str.w	r1, [r8]
 800859a:	e794      	b.n	80084c6 <_strtol_l.isra.0+0x1a>
 800859c:	08009cd9 	.word	0x08009cd9

080085a0 <_strtol_r>:
 80085a0:	f7ff bf84 	b.w	80084ac <_strtol_l.isra.0>

080085a4 <__ssputs_r>:
 80085a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085a8:	688e      	ldr	r6, [r1, #8]
 80085aa:	461f      	mov	r7, r3
 80085ac:	42be      	cmp	r6, r7
 80085ae:	680b      	ldr	r3, [r1, #0]
 80085b0:	4682      	mov	sl, r0
 80085b2:	460c      	mov	r4, r1
 80085b4:	4690      	mov	r8, r2
 80085b6:	d82d      	bhi.n	8008614 <__ssputs_r+0x70>
 80085b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80085bc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80085c0:	d026      	beq.n	8008610 <__ssputs_r+0x6c>
 80085c2:	6965      	ldr	r5, [r4, #20]
 80085c4:	6909      	ldr	r1, [r1, #16]
 80085c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80085ca:	eba3 0901 	sub.w	r9, r3, r1
 80085ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085d2:	1c7b      	adds	r3, r7, #1
 80085d4:	444b      	add	r3, r9
 80085d6:	106d      	asrs	r5, r5, #1
 80085d8:	429d      	cmp	r5, r3
 80085da:	bf38      	it	cc
 80085dc:	461d      	movcc	r5, r3
 80085de:	0553      	lsls	r3, r2, #21
 80085e0:	d527      	bpl.n	8008632 <__ssputs_r+0x8e>
 80085e2:	4629      	mov	r1, r5
 80085e4:	f7fe fc24 	bl	8006e30 <_malloc_r>
 80085e8:	4606      	mov	r6, r0
 80085ea:	b360      	cbz	r0, 8008646 <__ssputs_r+0xa2>
 80085ec:	6921      	ldr	r1, [r4, #16]
 80085ee:	464a      	mov	r2, r9
 80085f0:	f7fd fd1f 	bl	8006032 <memcpy>
 80085f4:	89a3      	ldrh	r3, [r4, #12]
 80085f6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80085fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085fe:	81a3      	strh	r3, [r4, #12]
 8008600:	6126      	str	r6, [r4, #16]
 8008602:	6165      	str	r5, [r4, #20]
 8008604:	444e      	add	r6, r9
 8008606:	eba5 0509 	sub.w	r5, r5, r9
 800860a:	6026      	str	r6, [r4, #0]
 800860c:	60a5      	str	r5, [r4, #8]
 800860e:	463e      	mov	r6, r7
 8008610:	42be      	cmp	r6, r7
 8008612:	d900      	bls.n	8008616 <__ssputs_r+0x72>
 8008614:	463e      	mov	r6, r7
 8008616:	6820      	ldr	r0, [r4, #0]
 8008618:	4632      	mov	r2, r6
 800861a:	4641      	mov	r1, r8
 800861c:	f000 fbb0 	bl	8008d80 <memmove>
 8008620:	68a3      	ldr	r3, [r4, #8]
 8008622:	1b9b      	subs	r3, r3, r6
 8008624:	60a3      	str	r3, [r4, #8]
 8008626:	6823      	ldr	r3, [r4, #0]
 8008628:	4433      	add	r3, r6
 800862a:	6023      	str	r3, [r4, #0]
 800862c:	2000      	movs	r0, #0
 800862e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008632:	462a      	mov	r2, r5
 8008634:	f000 ff5d 	bl	80094f2 <_realloc_r>
 8008638:	4606      	mov	r6, r0
 800863a:	2800      	cmp	r0, #0
 800863c:	d1e0      	bne.n	8008600 <__ssputs_r+0x5c>
 800863e:	6921      	ldr	r1, [r4, #16]
 8008640:	4650      	mov	r0, sl
 8008642:	f7fe fb81 	bl	8006d48 <_free_r>
 8008646:	230c      	movs	r3, #12
 8008648:	f8ca 3000 	str.w	r3, [sl]
 800864c:	89a3      	ldrh	r3, [r4, #12]
 800864e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008652:	81a3      	strh	r3, [r4, #12]
 8008654:	f04f 30ff 	mov.w	r0, #4294967295
 8008658:	e7e9      	b.n	800862e <__ssputs_r+0x8a>
	...

0800865c <_svfiprintf_r>:
 800865c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008660:	4698      	mov	r8, r3
 8008662:	898b      	ldrh	r3, [r1, #12]
 8008664:	061b      	lsls	r3, r3, #24
 8008666:	b09d      	sub	sp, #116	@ 0x74
 8008668:	4607      	mov	r7, r0
 800866a:	460d      	mov	r5, r1
 800866c:	4614      	mov	r4, r2
 800866e:	d510      	bpl.n	8008692 <_svfiprintf_r+0x36>
 8008670:	690b      	ldr	r3, [r1, #16]
 8008672:	b973      	cbnz	r3, 8008692 <_svfiprintf_r+0x36>
 8008674:	2140      	movs	r1, #64	@ 0x40
 8008676:	f7fe fbdb 	bl	8006e30 <_malloc_r>
 800867a:	6028      	str	r0, [r5, #0]
 800867c:	6128      	str	r0, [r5, #16]
 800867e:	b930      	cbnz	r0, 800868e <_svfiprintf_r+0x32>
 8008680:	230c      	movs	r3, #12
 8008682:	603b      	str	r3, [r7, #0]
 8008684:	f04f 30ff 	mov.w	r0, #4294967295
 8008688:	b01d      	add	sp, #116	@ 0x74
 800868a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800868e:	2340      	movs	r3, #64	@ 0x40
 8008690:	616b      	str	r3, [r5, #20]
 8008692:	2300      	movs	r3, #0
 8008694:	9309      	str	r3, [sp, #36]	@ 0x24
 8008696:	2320      	movs	r3, #32
 8008698:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800869c:	f8cd 800c 	str.w	r8, [sp, #12]
 80086a0:	2330      	movs	r3, #48	@ 0x30
 80086a2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008840 <_svfiprintf_r+0x1e4>
 80086a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086aa:	f04f 0901 	mov.w	r9, #1
 80086ae:	4623      	mov	r3, r4
 80086b0:	469a      	mov	sl, r3
 80086b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086b6:	b10a      	cbz	r2, 80086bc <_svfiprintf_r+0x60>
 80086b8:	2a25      	cmp	r2, #37	@ 0x25
 80086ba:	d1f9      	bne.n	80086b0 <_svfiprintf_r+0x54>
 80086bc:	ebba 0b04 	subs.w	fp, sl, r4
 80086c0:	d00b      	beq.n	80086da <_svfiprintf_r+0x7e>
 80086c2:	465b      	mov	r3, fp
 80086c4:	4622      	mov	r2, r4
 80086c6:	4629      	mov	r1, r5
 80086c8:	4638      	mov	r0, r7
 80086ca:	f7ff ff6b 	bl	80085a4 <__ssputs_r>
 80086ce:	3001      	adds	r0, #1
 80086d0:	f000 80a7 	beq.w	8008822 <_svfiprintf_r+0x1c6>
 80086d4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086d6:	445a      	add	r2, fp
 80086d8:	9209      	str	r2, [sp, #36]	@ 0x24
 80086da:	f89a 3000 	ldrb.w	r3, [sl]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	f000 809f 	beq.w	8008822 <_svfiprintf_r+0x1c6>
 80086e4:	2300      	movs	r3, #0
 80086e6:	f04f 32ff 	mov.w	r2, #4294967295
 80086ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086ee:	f10a 0a01 	add.w	sl, sl, #1
 80086f2:	9304      	str	r3, [sp, #16]
 80086f4:	9307      	str	r3, [sp, #28]
 80086f6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80086fa:	931a      	str	r3, [sp, #104]	@ 0x68
 80086fc:	4654      	mov	r4, sl
 80086fe:	2205      	movs	r2, #5
 8008700:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008704:	484e      	ldr	r0, [pc, #312]	@ (8008840 <_svfiprintf_r+0x1e4>)
 8008706:	f7f7 fd7b 	bl	8000200 <memchr>
 800870a:	9a04      	ldr	r2, [sp, #16]
 800870c:	b9d8      	cbnz	r0, 8008746 <_svfiprintf_r+0xea>
 800870e:	06d0      	lsls	r0, r2, #27
 8008710:	bf44      	itt	mi
 8008712:	2320      	movmi	r3, #32
 8008714:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008718:	0711      	lsls	r1, r2, #28
 800871a:	bf44      	itt	mi
 800871c:	232b      	movmi	r3, #43	@ 0x2b
 800871e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008722:	f89a 3000 	ldrb.w	r3, [sl]
 8008726:	2b2a      	cmp	r3, #42	@ 0x2a
 8008728:	d015      	beq.n	8008756 <_svfiprintf_r+0xfa>
 800872a:	9a07      	ldr	r2, [sp, #28]
 800872c:	4654      	mov	r4, sl
 800872e:	2000      	movs	r0, #0
 8008730:	f04f 0c0a 	mov.w	ip, #10
 8008734:	4621      	mov	r1, r4
 8008736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800873a:	3b30      	subs	r3, #48	@ 0x30
 800873c:	2b09      	cmp	r3, #9
 800873e:	d94b      	bls.n	80087d8 <_svfiprintf_r+0x17c>
 8008740:	b1b0      	cbz	r0, 8008770 <_svfiprintf_r+0x114>
 8008742:	9207      	str	r2, [sp, #28]
 8008744:	e014      	b.n	8008770 <_svfiprintf_r+0x114>
 8008746:	eba0 0308 	sub.w	r3, r0, r8
 800874a:	fa09 f303 	lsl.w	r3, r9, r3
 800874e:	4313      	orrs	r3, r2
 8008750:	9304      	str	r3, [sp, #16]
 8008752:	46a2      	mov	sl, r4
 8008754:	e7d2      	b.n	80086fc <_svfiprintf_r+0xa0>
 8008756:	9b03      	ldr	r3, [sp, #12]
 8008758:	1d19      	adds	r1, r3, #4
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	9103      	str	r1, [sp, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	bfbb      	ittet	lt
 8008762:	425b      	neglt	r3, r3
 8008764:	f042 0202 	orrlt.w	r2, r2, #2
 8008768:	9307      	strge	r3, [sp, #28]
 800876a:	9307      	strlt	r3, [sp, #28]
 800876c:	bfb8      	it	lt
 800876e:	9204      	strlt	r2, [sp, #16]
 8008770:	7823      	ldrb	r3, [r4, #0]
 8008772:	2b2e      	cmp	r3, #46	@ 0x2e
 8008774:	d10a      	bne.n	800878c <_svfiprintf_r+0x130>
 8008776:	7863      	ldrb	r3, [r4, #1]
 8008778:	2b2a      	cmp	r3, #42	@ 0x2a
 800877a:	d132      	bne.n	80087e2 <_svfiprintf_r+0x186>
 800877c:	9b03      	ldr	r3, [sp, #12]
 800877e:	1d1a      	adds	r2, r3, #4
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	9203      	str	r2, [sp, #12]
 8008784:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008788:	3402      	adds	r4, #2
 800878a:	9305      	str	r3, [sp, #20]
 800878c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008850 <_svfiprintf_r+0x1f4>
 8008790:	7821      	ldrb	r1, [r4, #0]
 8008792:	2203      	movs	r2, #3
 8008794:	4650      	mov	r0, sl
 8008796:	f7f7 fd33 	bl	8000200 <memchr>
 800879a:	b138      	cbz	r0, 80087ac <_svfiprintf_r+0x150>
 800879c:	9b04      	ldr	r3, [sp, #16]
 800879e:	eba0 000a 	sub.w	r0, r0, sl
 80087a2:	2240      	movs	r2, #64	@ 0x40
 80087a4:	4082      	lsls	r2, r0
 80087a6:	4313      	orrs	r3, r2
 80087a8:	3401      	adds	r4, #1
 80087aa:	9304      	str	r3, [sp, #16]
 80087ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087b0:	4824      	ldr	r0, [pc, #144]	@ (8008844 <_svfiprintf_r+0x1e8>)
 80087b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80087b6:	2206      	movs	r2, #6
 80087b8:	f7f7 fd22 	bl	8000200 <memchr>
 80087bc:	2800      	cmp	r0, #0
 80087be:	d036      	beq.n	800882e <_svfiprintf_r+0x1d2>
 80087c0:	4b21      	ldr	r3, [pc, #132]	@ (8008848 <_svfiprintf_r+0x1ec>)
 80087c2:	bb1b      	cbnz	r3, 800880c <_svfiprintf_r+0x1b0>
 80087c4:	9b03      	ldr	r3, [sp, #12]
 80087c6:	3307      	adds	r3, #7
 80087c8:	f023 0307 	bic.w	r3, r3, #7
 80087cc:	3308      	adds	r3, #8
 80087ce:	9303      	str	r3, [sp, #12]
 80087d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087d2:	4433      	add	r3, r6
 80087d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80087d6:	e76a      	b.n	80086ae <_svfiprintf_r+0x52>
 80087d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80087dc:	460c      	mov	r4, r1
 80087de:	2001      	movs	r0, #1
 80087e0:	e7a8      	b.n	8008734 <_svfiprintf_r+0xd8>
 80087e2:	2300      	movs	r3, #0
 80087e4:	3401      	adds	r4, #1
 80087e6:	9305      	str	r3, [sp, #20]
 80087e8:	4619      	mov	r1, r3
 80087ea:	f04f 0c0a 	mov.w	ip, #10
 80087ee:	4620      	mov	r0, r4
 80087f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087f4:	3a30      	subs	r2, #48	@ 0x30
 80087f6:	2a09      	cmp	r2, #9
 80087f8:	d903      	bls.n	8008802 <_svfiprintf_r+0x1a6>
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d0c6      	beq.n	800878c <_svfiprintf_r+0x130>
 80087fe:	9105      	str	r1, [sp, #20]
 8008800:	e7c4      	b.n	800878c <_svfiprintf_r+0x130>
 8008802:	fb0c 2101 	mla	r1, ip, r1, r2
 8008806:	4604      	mov	r4, r0
 8008808:	2301      	movs	r3, #1
 800880a:	e7f0      	b.n	80087ee <_svfiprintf_r+0x192>
 800880c:	ab03      	add	r3, sp, #12
 800880e:	9300      	str	r3, [sp, #0]
 8008810:	462a      	mov	r2, r5
 8008812:	4b0e      	ldr	r3, [pc, #56]	@ (800884c <_svfiprintf_r+0x1f0>)
 8008814:	a904      	add	r1, sp, #16
 8008816:	4638      	mov	r0, r7
 8008818:	f7fc fafa 	bl	8004e10 <_printf_float>
 800881c:	1c42      	adds	r2, r0, #1
 800881e:	4606      	mov	r6, r0
 8008820:	d1d6      	bne.n	80087d0 <_svfiprintf_r+0x174>
 8008822:	89ab      	ldrh	r3, [r5, #12]
 8008824:	065b      	lsls	r3, r3, #25
 8008826:	f53f af2d 	bmi.w	8008684 <_svfiprintf_r+0x28>
 800882a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800882c:	e72c      	b.n	8008688 <_svfiprintf_r+0x2c>
 800882e:	ab03      	add	r3, sp, #12
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	462a      	mov	r2, r5
 8008834:	4b05      	ldr	r3, [pc, #20]	@ (800884c <_svfiprintf_r+0x1f0>)
 8008836:	a904      	add	r1, sp, #16
 8008838:	4638      	mov	r0, r7
 800883a:	f7fc fd81 	bl	8005340 <_printf_i>
 800883e:	e7ed      	b.n	800881c <_svfiprintf_r+0x1c0>
 8008840:	08009b0f 	.word	0x08009b0f
 8008844:	08009b19 	.word	0x08009b19
 8008848:	08004e11 	.word	0x08004e11
 800884c:	080085a5 	.word	0x080085a5
 8008850:	08009b15 	.word	0x08009b15

08008854 <__sfputc_r>:
 8008854:	6893      	ldr	r3, [r2, #8]
 8008856:	3b01      	subs	r3, #1
 8008858:	2b00      	cmp	r3, #0
 800885a:	b410      	push	{r4}
 800885c:	6093      	str	r3, [r2, #8]
 800885e:	da08      	bge.n	8008872 <__sfputc_r+0x1e>
 8008860:	6994      	ldr	r4, [r2, #24]
 8008862:	42a3      	cmp	r3, r4
 8008864:	db01      	blt.n	800886a <__sfputc_r+0x16>
 8008866:	290a      	cmp	r1, #10
 8008868:	d103      	bne.n	8008872 <__sfputc_r+0x1e>
 800886a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800886e:	f7fd ba32 	b.w	8005cd6 <__swbuf_r>
 8008872:	6813      	ldr	r3, [r2, #0]
 8008874:	1c58      	adds	r0, r3, #1
 8008876:	6010      	str	r0, [r2, #0]
 8008878:	7019      	strb	r1, [r3, #0]
 800887a:	4608      	mov	r0, r1
 800887c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008880:	4770      	bx	lr

08008882 <__sfputs_r>:
 8008882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008884:	4606      	mov	r6, r0
 8008886:	460f      	mov	r7, r1
 8008888:	4614      	mov	r4, r2
 800888a:	18d5      	adds	r5, r2, r3
 800888c:	42ac      	cmp	r4, r5
 800888e:	d101      	bne.n	8008894 <__sfputs_r+0x12>
 8008890:	2000      	movs	r0, #0
 8008892:	e007      	b.n	80088a4 <__sfputs_r+0x22>
 8008894:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008898:	463a      	mov	r2, r7
 800889a:	4630      	mov	r0, r6
 800889c:	f7ff ffda 	bl	8008854 <__sfputc_r>
 80088a0:	1c43      	adds	r3, r0, #1
 80088a2:	d1f3      	bne.n	800888c <__sfputs_r+0xa>
 80088a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080088a8 <_vfiprintf_r>:
 80088a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ac:	460d      	mov	r5, r1
 80088ae:	b09d      	sub	sp, #116	@ 0x74
 80088b0:	4614      	mov	r4, r2
 80088b2:	4698      	mov	r8, r3
 80088b4:	4606      	mov	r6, r0
 80088b6:	b118      	cbz	r0, 80088c0 <_vfiprintf_r+0x18>
 80088b8:	6a03      	ldr	r3, [r0, #32]
 80088ba:	b90b      	cbnz	r3, 80088c0 <_vfiprintf_r+0x18>
 80088bc:	f7fd f8f8 	bl	8005ab0 <__sinit>
 80088c0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088c2:	07d9      	lsls	r1, r3, #31
 80088c4:	d405      	bmi.n	80088d2 <_vfiprintf_r+0x2a>
 80088c6:	89ab      	ldrh	r3, [r5, #12]
 80088c8:	059a      	lsls	r2, r3, #22
 80088ca:	d402      	bmi.n	80088d2 <_vfiprintf_r+0x2a>
 80088cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088ce:	f7fd fba6 	bl	800601e <__retarget_lock_acquire_recursive>
 80088d2:	89ab      	ldrh	r3, [r5, #12]
 80088d4:	071b      	lsls	r3, r3, #28
 80088d6:	d501      	bpl.n	80088dc <_vfiprintf_r+0x34>
 80088d8:	692b      	ldr	r3, [r5, #16]
 80088da:	b99b      	cbnz	r3, 8008904 <_vfiprintf_r+0x5c>
 80088dc:	4629      	mov	r1, r5
 80088de:	4630      	mov	r0, r6
 80088e0:	f7fd fa38 	bl	8005d54 <__swsetup_r>
 80088e4:	b170      	cbz	r0, 8008904 <_vfiprintf_r+0x5c>
 80088e6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088e8:	07dc      	lsls	r4, r3, #31
 80088ea:	d504      	bpl.n	80088f6 <_vfiprintf_r+0x4e>
 80088ec:	f04f 30ff 	mov.w	r0, #4294967295
 80088f0:	b01d      	add	sp, #116	@ 0x74
 80088f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f6:	89ab      	ldrh	r3, [r5, #12]
 80088f8:	0598      	lsls	r0, r3, #22
 80088fa:	d4f7      	bmi.n	80088ec <_vfiprintf_r+0x44>
 80088fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088fe:	f7fd fb8f 	bl	8006020 <__retarget_lock_release_recursive>
 8008902:	e7f3      	b.n	80088ec <_vfiprintf_r+0x44>
 8008904:	2300      	movs	r3, #0
 8008906:	9309      	str	r3, [sp, #36]	@ 0x24
 8008908:	2320      	movs	r3, #32
 800890a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800890e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008912:	2330      	movs	r3, #48	@ 0x30
 8008914:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008ac4 <_vfiprintf_r+0x21c>
 8008918:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800891c:	f04f 0901 	mov.w	r9, #1
 8008920:	4623      	mov	r3, r4
 8008922:	469a      	mov	sl, r3
 8008924:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008928:	b10a      	cbz	r2, 800892e <_vfiprintf_r+0x86>
 800892a:	2a25      	cmp	r2, #37	@ 0x25
 800892c:	d1f9      	bne.n	8008922 <_vfiprintf_r+0x7a>
 800892e:	ebba 0b04 	subs.w	fp, sl, r4
 8008932:	d00b      	beq.n	800894c <_vfiprintf_r+0xa4>
 8008934:	465b      	mov	r3, fp
 8008936:	4622      	mov	r2, r4
 8008938:	4629      	mov	r1, r5
 800893a:	4630      	mov	r0, r6
 800893c:	f7ff ffa1 	bl	8008882 <__sfputs_r>
 8008940:	3001      	adds	r0, #1
 8008942:	f000 80a7 	beq.w	8008a94 <_vfiprintf_r+0x1ec>
 8008946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008948:	445a      	add	r2, fp
 800894a:	9209      	str	r2, [sp, #36]	@ 0x24
 800894c:	f89a 3000 	ldrb.w	r3, [sl]
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 809f 	beq.w	8008a94 <_vfiprintf_r+0x1ec>
 8008956:	2300      	movs	r3, #0
 8008958:	f04f 32ff 	mov.w	r2, #4294967295
 800895c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008960:	f10a 0a01 	add.w	sl, sl, #1
 8008964:	9304      	str	r3, [sp, #16]
 8008966:	9307      	str	r3, [sp, #28]
 8008968:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800896c:	931a      	str	r3, [sp, #104]	@ 0x68
 800896e:	4654      	mov	r4, sl
 8008970:	2205      	movs	r2, #5
 8008972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008976:	4853      	ldr	r0, [pc, #332]	@ (8008ac4 <_vfiprintf_r+0x21c>)
 8008978:	f7f7 fc42 	bl	8000200 <memchr>
 800897c:	9a04      	ldr	r2, [sp, #16]
 800897e:	b9d8      	cbnz	r0, 80089b8 <_vfiprintf_r+0x110>
 8008980:	06d1      	lsls	r1, r2, #27
 8008982:	bf44      	itt	mi
 8008984:	2320      	movmi	r3, #32
 8008986:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800898a:	0713      	lsls	r3, r2, #28
 800898c:	bf44      	itt	mi
 800898e:	232b      	movmi	r3, #43	@ 0x2b
 8008990:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008994:	f89a 3000 	ldrb.w	r3, [sl]
 8008998:	2b2a      	cmp	r3, #42	@ 0x2a
 800899a:	d015      	beq.n	80089c8 <_vfiprintf_r+0x120>
 800899c:	9a07      	ldr	r2, [sp, #28]
 800899e:	4654      	mov	r4, sl
 80089a0:	2000      	movs	r0, #0
 80089a2:	f04f 0c0a 	mov.w	ip, #10
 80089a6:	4621      	mov	r1, r4
 80089a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80089ac:	3b30      	subs	r3, #48	@ 0x30
 80089ae:	2b09      	cmp	r3, #9
 80089b0:	d94b      	bls.n	8008a4a <_vfiprintf_r+0x1a2>
 80089b2:	b1b0      	cbz	r0, 80089e2 <_vfiprintf_r+0x13a>
 80089b4:	9207      	str	r2, [sp, #28]
 80089b6:	e014      	b.n	80089e2 <_vfiprintf_r+0x13a>
 80089b8:	eba0 0308 	sub.w	r3, r0, r8
 80089bc:	fa09 f303 	lsl.w	r3, r9, r3
 80089c0:	4313      	orrs	r3, r2
 80089c2:	9304      	str	r3, [sp, #16]
 80089c4:	46a2      	mov	sl, r4
 80089c6:	e7d2      	b.n	800896e <_vfiprintf_r+0xc6>
 80089c8:	9b03      	ldr	r3, [sp, #12]
 80089ca:	1d19      	adds	r1, r3, #4
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	9103      	str	r1, [sp, #12]
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bfbb      	ittet	lt
 80089d4:	425b      	neglt	r3, r3
 80089d6:	f042 0202 	orrlt.w	r2, r2, #2
 80089da:	9307      	strge	r3, [sp, #28]
 80089dc:	9307      	strlt	r3, [sp, #28]
 80089de:	bfb8      	it	lt
 80089e0:	9204      	strlt	r2, [sp, #16]
 80089e2:	7823      	ldrb	r3, [r4, #0]
 80089e4:	2b2e      	cmp	r3, #46	@ 0x2e
 80089e6:	d10a      	bne.n	80089fe <_vfiprintf_r+0x156>
 80089e8:	7863      	ldrb	r3, [r4, #1]
 80089ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80089ec:	d132      	bne.n	8008a54 <_vfiprintf_r+0x1ac>
 80089ee:	9b03      	ldr	r3, [sp, #12]
 80089f0:	1d1a      	adds	r2, r3, #4
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	9203      	str	r2, [sp, #12]
 80089f6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089fa:	3402      	adds	r4, #2
 80089fc:	9305      	str	r3, [sp, #20]
 80089fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008ad4 <_vfiprintf_r+0x22c>
 8008a02:	7821      	ldrb	r1, [r4, #0]
 8008a04:	2203      	movs	r2, #3
 8008a06:	4650      	mov	r0, sl
 8008a08:	f7f7 fbfa 	bl	8000200 <memchr>
 8008a0c:	b138      	cbz	r0, 8008a1e <_vfiprintf_r+0x176>
 8008a0e:	9b04      	ldr	r3, [sp, #16]
 8008a10:	eba0 000a 	sub.w	r0, r0, sl
 8008a14:	2240      	movs	r2, #64	@ 0x40
 8008a16:	4082      	lsls	r2, r0
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	3401      	adds	r4, #1
 8008a1c:	9304      	str	r3, [sp, #16]
 8008a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a22:	4829      	ldr	r0, [pc, #164]	@ (8008ac8 <_vfiprintf_r+0x220>)
 8008a24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008a28:	2206      	movs	r2, #6
 8008a2a:	f7f7 fbe9 	bl	8000200 <memchr>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d03f      	beq.n	8008ab2 <_vfiprintf_r+0x20a>
 8008a32:	4b26      	ldr	r3, [pc, #152]	@ (8008acc <_vfiprintf_r+0x224>)
 8008a34:	bb1b      	cbnz	r3, 8008a7e <_vfiprintf_r+0x1d6>
 8008a36:	9b03      	ldr	r3, [sp, #12]
 8008a38:	3307      	adds	r3, #7
 8008a3a:	f023 0307 	bic.w	r3, r3, #7
 8008a3e:	3308      	adds	r3, #8
 8008a40:	9303      	str	r3, [sp, #12]
 8008a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a44:	443b      	add	r3, r7
 8008a46:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a48:	e76a      	b.n	8008920 <_vfiprintf_r+0x78>
 8008a4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a4e:	460c      	mov	r4, r1
 8008a50:	2001      	movs	r0, #1
 8008a52:	e7a8      	b.n	80089a6 <_vfiprintf_r+0xfe>
 8008a54:	2300      	movs	r3, #0
 8008a56:	3401      	adds	r4, #1
 8008a58:	9305      	str	r3, [sp, #20]
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	f04f 0c0a 	mov.w	ip, #10
 8008a60:	4620      	mov	r0, r4
 8008a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a66:	3a30      	subs	r2, #48	@ 0x30
 8008a68:	2a09      	cmp	r2, #9
 8008a6a:	d903      	bls.n	8008a74 <_vfiprintf_r+0x1cc>
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d0c6      	beq.n	80089fe <_vfiprintf_r+0x156>
 8008a70:	9105      	str	r1, [sp, #20]
 8008a72:	e7c4      	b.n	80089fe <_vfiprintf_r+0x156>
 8008a74:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a78:	4604      	mov	r4, r0
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e7f0      	b.n	8008a60 <_vfiprintf_r+0x1b8>
 8008a7e:	ab03      	add	r3, sp, #12
 8008a80:	9300      	str	r3, [sp, #0]
 8008a82:	462a      	mov	r2, r5
 8008a84:	4b12      	ldr	r3, [pc, #72]	@ (8008ad0 <_vfiprintf_r+0x228>)
 8008a86:	a904      	add	r1, sp, #16
 8008a88:	4630      	mov	r0, r6
 8008a8a:	f7fc f9c1 	bl	8004e10 <_printf_float>
 8008a8e:	4607      	mov	r7, r0
 8008a90:	1c78      	adds	r0, r7, #1
 8008a92:	d1d6      	bne.n	8008a42 <_vfiprintf_r+0x19a>
 8008a94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a96:	07d9      	lsls	r1, r3, #31
 8008a98:	d405      	bmi.n	8008aa6 <_vfiprintf_r+0x1fe>
 8008a9a:	89ab      	ldrh	r3, [r5, #12]
 8008a9c:	059a      	lsls	r2, r3, #22
 8008a9e:	d402      	bmi.n	8008aa6 <_vfiprintf_r+0x1fe>
 8008aa0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008aa2:	f7fd fabd 	bl	8006020 <__retarget_lock_release_recursive>
 8008aa6:	89ab      	ldrh	r3, [r5, #12]
 8008aa8:	065b      	lsls	r3, r3, #25
 8008aaa:	f53f af1f 	bmi.w	80088ec <_vfiprintf_r+0x44>
 8008aae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008ab0:	e71e      	b.n	80088f0 <_vfiprintf_r+0x48>
 8008ab2:	ab03      	add	r3, sp, #12
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	462a      	mov	r2, r5
 8008ab8:	4b05      	ldr	r3, [pc, #20]	@ (8008ad0 <_vfiprintf_r+0x228>)
 8008aba:	a904      	add	r1, sp, #16
 8008abc:	4630      	mov	r0, r6
 8008abe:	f7fc fc3f 	bl	8005340 <_printf_i>
 8008ac2:	e7e4      	b.n	8008a8e <_vfiprintf_r+0x1e6>
 8008ac4:	08009b0f 	.word	0x08009b0f
 8008ac8:	08009b19 	.word	0x08009b19
 8008acc:	08004e11 	.word	0x08004e11
 8008ad0:	08008883 	.word	0x08008883
 8008ad4:	08009b15 	.word	0x08009b15

08008ad8 <__sflush_r>:
 8008ad8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008adc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ae0:	0716      	lsls	r6, r2, #28
 8008ae2:	4605      	mov	r5, r0
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	d454      	bmi.n	8008b92 <__sflush_r+0xba>
 8008ae8:	684b      	ldr	r3, [r1, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	dc02      	bgt.n	8008af4 <__sflush_r+0x1c>
 8008aee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	dd48      	ble.n	8008b86 <__sflush_r+0xae>
 8008af4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008af6:	2e00      	cmp	r6, #0
 8008af8:	d045      	beq.n	8008b86 <__sflush_r+0xae>
 8008afa:	2300      	movs	r3, #0
 8008afc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008b00:	682f      	ldr	r7, [r5, #0]
 8008b02:	6a21      	ldr	r1, [r4, #32]
 8008b04:	602b      	str	r3, [r5, #0]
 8008b06:	d030      	beq.n	8008b6a <__sflush_r+0x92>
 8008b08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008b0a:	89a3      	ldrh	r3, [r4, #12]
 8008b0c:	0759      	lsls	r1, r3, #29
 8008b0e:	d505      	bpl.n	8008b1c <__sflush_r+0x44>
 8008b10:	6863      	ldr	r3, [r4, #4]
 8008b12:	1ad2      	subs	r2, r2, r3
 8008b14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008b16:	b10b      	cbz	r3, 8008b1c <__sflush_r+0x44>
 8008b18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008b1a:	1ad2      	subs	r2, r2, r3
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008b20:	6a21      	ldr	r1, [r4, #32]
 8008b22:	4628      	mov	r0, r5
 8008b24:	47b0      	blx	r6
 8008b26:	1c43      	adds	r3, r0, #1
 8008b28:	89a3      	ldrh	r3, [r4, #12]
 8008b2a:	d106      	bne.n	8008b3a <__sflush_r+0x62>
 8008b2c:	6829      	ldr	r1, [r5, #0]
 8008b2e:	291d      	cmp	r1, #29
 8008b30:	d82b      	bhi.n	8008b8a <__sflush_r+0xb2>
 8008b32:	4a2a      	ldr	r2, [pc, #168]	@ (8008bdc <__sflush_r+0x104>)
 8008b34:	40ca      	lsrs	r2, r1
 8008b36:	07d6      	lsls	r6, r2, #31
 8008b38:	d527      	bpl.n	8008b8a <__sflush_r+0xb2>
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	6062      	str	r2, [r4, #4]
 8008b3e:	04d9      	lsls	r1, r3, #19
 8008b40:	6922      	ldr	r2, [r4, #16]
 8008b42:	6022      	str	r2, [r4, #0]
 8008b44:	d504      	bpl.n	8008b50 <__sflush_r+0x78>
 8008b46:	1c42      	adds	r2, r0, #1
 8008b48:	d101      	bne.n	8008b4e <__sflush_r+0x76>
 8008b4a:	682b      	ldr	r3, [r5, #0]
 8008b4c:	b903      	cbnz	r3, 8008b50 <__sflush_r+0x78>
 8008b4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008b50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008b52:	602f      	str	r7, [r5, #0]
 8008b54:	b1b9      	cbz	r1, 8008b86 <__sflush_r+0xae>
 8008b56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008b5a:	4299      	cmp	r1, r3
 8008b5c:	d002      	beq.n	8008b64 <__sflush_r+0x8c>
 8008b5e:	4628      	mov	r0, r5
 8008b60:	f7fe f8f2 	bl	8006d48 <_free_r>
 8008b64:	2300      	movs	r3, #0
 8008b66:	6363      	str	r3, [r4, #52]	@ 0x34
 8008b68:	e00d      	b.n	8008b86 <__sflush_r+0xae>
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	47b0      	blx	r6
 8008b70:	4602      	mov	r2, r0
 8008b72:	1c50      	adds	r0, r2, #1
 8008b74:	d1c9      	bne.n	8008b0a <__sflush_r+0x32>
 8008b76:	682b      	ldr	r3, [r5, #0]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d0c6      	beq.n	8008b0a <__sflush_r+0x32>
 8008b7c:	2b1d      	cmp	r3, #29
 8008b7e:	d001      	beq.n	8008b84 <__sflush_r+0xac>
 8008b80:	2b16      	cmp	r3, #22
 8008b82:	d11e      	bne.n	8008bc2 <__sflush_r+0xea>
 8008b84:	602f      	str	r7, [r5, #0]
 8008b86:	2000      	movs	r0, #0
 8008b88:	e022      	b.n	8008bd0 <__sflush_r+0xf8>
 8008b8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008b8e:	b21b      	sxth	r3, r3
 8008b90:	e01b      	b.n	8008bca <__sflush_r+0xf2>
 8008b92:	690f      	ldr	r7, [r1, #16]
 8008b94:	2f00      	cmp	r7, #0
 8008b96:	d0f6      	beq.n	8008b86 <__sflush_r+0xae>
 8008b98:	0793      	lsls	r3, r2, #30
 8008b9a:	680e      	ldr	r6, [r1, #0]
 8008b9c:	bf08      	it	eq
 8008b9e:	694b      	ldreq	r3, [r1, #20]
 8008ba0:	600f      	str	r7, [r1, #0]
 8008ba2:	bf18      	it	ne
 8008ba4:	2300      	movne	r3, #0
 8008ba6:	eba6 0807 	sub.w	r8, r6, r7
 8008baa:	608b      	str	r3, [r1, #8]
 8008bac:	f1b8 0f00 	cmp.w	r8, #0
 8008bb0:	dde9      	ble.n	8008b86 <__sflush_r+0xae>
 8008bb2:	6a21      	ldr	r1, [r4, #32]
 8008bb4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008bb6:	4643      	mov	r3, r8
 8008bb8:	463a      	mov	r2, r7
 8008bba:	4628      	mov	r0, r5
 8008bbc:	47b0      	blx	r6
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	dc08      	bgt.n	8008bd4 <__sflush_r+0xfc>
 8008bc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bca:	81a3      	strh	r3, [r4, #12]
 8008bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bd4:	4407      	add	r7, r0
 8008bd6:	eba8 0800 	sub.w	r8, r8, r0
 8008bda:	e7e7      	b.n	8008bac <__sflush_r+0xd4>
 8008bdc:	20400001 	.word	0x20400001

08008be0 <_fflush_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	690b      	ldr	r3, [r1, #16]
 8008be4:	4605      	mov	r5, r0
 8008be6:	460c      	mov	r4, r1
 8008be8:	b913      	cbnz	r3, 8008bf0 <_fflush_r+0x10>
 8008bea:	2500      	movs	r5, #0
 8008bec:	4628      	mov	r0, r5
 8008bee:	bd38      	pop	{r3, r4, r5, pc}
 8008bf0:	b118      	cbz	r0, 8008bfa <_fflush_r+0x1a>
 8008bf2:	6a03      	ldr	r3, [r0, #32]
 8008bf4:	b90b      	cbnz	r3, 8008bfa <_fflush_r+0x1a>
 8008bf6:	f7fc ff5b 	bl	8005ab0 <__sinit>
 8008bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d0f3      	beq.n	8008bea <_fflush_r+0xa>
 8008c02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008c04:	07d0      	lsls	r0, r2, #31
 8008c06:	d404      	bmi.n	8008c12 <_fflush_r+0x32>
 8008c08:	0599      	lsls	r1, r3, #22
 8008c0a:	d402      	bmi.n	8008c12 <_fflush_r+0x32>
 8008c0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c0e:	f7fd fa06 	bl	800601e <__retarget_lock_acquire_recursive>
 8008c12:	4628      	mov	r0, r5
 8008c14:	4621      	mov	r1, r4
 8008c16:	f7ff ff5f 	bl	8008ad8 <__sflush_r>
 8008c1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008c1c:	07da      	lsls	r2, r3, #31
 8008c1e:	4605      	mov	r5, r0
 8008c20:	d4e4      	bmi.n	8008bec <_fflush_r+0xc>
 8008c22:	89a3      	ldrh	r3, [r4, #12]
 8008c24:	059b      	lsls	r3, r3, #22
 8008c26:	d4e1      	bmi.n	8008bec <_fflush_r+0xc>
 8008c28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008c2a:	f7fd f9f9 	bl	8006020 <__retarget_lock_release_recursive>
 8008c2e:	e7dd      	b.n	8008bec <_fflush_r+0xc>

08008c30 <fiprintf>:
 8008c30:	b40e      	push	{r1, r2, r3}
 8008c32:	b503      	push	{r0, r1, lr}
 8008c34:	4601      	mov	r1, r0
 8008c36:	ab03      	add	r3, sp, #12
 8008c38:	4805      	ldr	r0, [pc, #20]	@ (8008c50 <fiprintf+0x20>)
 8008c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c3e:	6800      	ldr	r0, [r0, #0]
 8008c40:	9301      	str	r3, [sp, #4]
 8008c42:	f7ff fe31 	bl	80088a8 <_vfiprintf_r>
 8008c46:	b002      	add	sp, #8
 8008c48:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c4c:	b003      	add	sp, #12
 8008c4e:	4770      	bx	lr
 8008c50:	2000001c 	.word	0x2000001c

08008c54 <__swhatbuf_r>:
 8008c54:	b570      	push	{r4, r5, r6, lr}
 8008c56:	460c      	mov	r4, r1
 8008c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c5c:	2900      	cmp	r1, #0
 8008c5e:	b096      	sub	sp, #88	@ 0x58
 8008c60:	4615      	mov	r5, r2
 8008c62:	461e      	mov	r6, r3
 8008c64:	da0d      	bge.n	8008c82 <__swhatbuf_r+0x2e>
 8008c66:	89a3      	ldrh	r3, [r4, #12]
 8008c68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008c6c:	f04f 0100 	mov.w	r1, #0
 8008c70:	bf14      	ite	ne
 8008c72:	2340      	movne	r3, #64	@ 0x40
 8008c74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008c78:	2000      	movs	r0, #0
 8008c7a:	6031      	str	r1, [r6, #0]
 8008c7c:	602b      	str	r3, [r5, #0]
 8008c7e:	b016      	add	sp, #88	@ 0x58
 8008c80:	bd70      	pop	{r4, r5, r6, pc}
 8008c82:	466a      	mov	r2, sp
 8008c84:	f000 f896 	bl	8008db4 <_fstat_r>
 8008c88:	2800      	cmp	r0, #0
 8008c8a:	dbec      	blt.n	8008c66 <__swhatbuf_r+0x12>
 8008c8c:	9901      	ldr	r1, [sp, #4]
 8008c8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008c92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008c96:	4259      	negs	r1, r3
 8008c98:	4159      	adcs	r1, r3
 8008c9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c9e:	e7eb      	b.n	8008c78 <__swhatbuf_r+0x24>

08008ca0 <__smakebuf_r>:
 8008ca0:	898b      	ldrh	r3, [r1, #12]
 8008ca2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ca4:	079d      	lsls	r5, r3, #30
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	460c      	mov	r4, r1
 8008caa:	d507      	bpl.n	8008cbc <__smakebuf_r+0x1c>
 8008cac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008cb0:	6023      	str	r3, [r4, #0]
 8008cb2:	6123      	str	r3, [r4, #16]
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	6163      	str	r3, [r4, #20]
 8008cb8:	b003      	add	sp, #12
 8008cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cbc:	ab01      	add	r3, sp, #4
 8008cbe:	466a      	mov	r2, sp
 8008cc0:	f7ff ffc8 	bl	8008c54 <__swhatbuf_r>
 8008cc4:	9f00      	ldr	r7, [sp, #0]
 8008cc6:	4605      	mov	r5, r0
 8008cc8:	4639      	mov	r1, r7
 8008cca:	4630      	mov	r0, r6
 8008ccc:	f7fe f8b0 	bl	8006e30 <_malloc_r>
 8008cd0:	b948      	cbnz	r0, 8008ce6 <__smakebuf_r+0x46>
 8008cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cd6:	059a      	lsls	r2, r3, #22
 8008cd8:	d4ee      	bmi.n	8008cb8 <__smakebuf_r+0x18>
 8008cda:	f023 0303 	bic.w	r3, r3, #3
 8008cde:	f043 0302 	orr.w	r3, r3, #2
 8008ce2:	81a3      	strh	r3, [r4, #12]
 8008ce4:	e7e2      	b.n	8008cac <__smakebuf_r+0xc>
 8008ce6:	89a3      	ldrh	r3, [r4, #12]
 8008ce8:	6020      	str	r0, [r4, #0]
 8008cea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008cee:	81a3      	strh	r3, [r4, #12]
 8008cf0:	9b01      	ldr	r3, [sp, #4]
 8008cf2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008cf6:	b15b      	cbz	r3, 8008d10 <__smakebuf_r+0x70>
 8008cf8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cfc:	4630      	mov	r0, r6
 8008cfe:	f000 f86b 	bl	8008dd8 <_isatty_r>
 8008d02:	b128      	cbz	r0, 8008d10 <__smakebuf_r+0x70>
 8008d04:	89a3      	ldrh	r3, [r4, #12]
 8008d06:	f023 0303 	bic.w	r3, r3, #3
 8008d0a:	f043 0301 	orr.w	r3, r3, #1
 8008d0e:	81a3      	strh	r3, [r4, #12]
 8008d10:	89a3      	ldrh	r3, [r4, #12]
 8008d12:	431d      	orrs	r5, r3
 8008d14:	81a5      	strh	r5, [r4, #12]
 8008d16:	e7cf      	b.n	8008cb8 <__smakebuf_r+0x18>

08008d18 <_putc_r>:
 8008d18:	b570      	push	{r4, r5, r6, lr}
 8008d1a:	460d      	mov	r5, r1
 8008d1c:	4614      	mov	r4, r2
 8008d1e:	4606      	mov	r6, r0
 8008d20:	b118      	cbz	r0, 8008d2a <_putc_r+0x12>
 8008d22:	6a03      	ldr	r3, [r0, #32]
 8008d24:	b90b      	cbnz	r3, 8008d2a <_putc_r+0x12>
 8008d26:	f7fc fec3 	bl	8005ab0 <__sinit>
 8008d2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d2c:	07d8      	lsls	r0, r3, #31
 8008d2e:	d405      	bmi.n	8008d3c <_putc_r+0x24>
 8008d30:	89a3      	ldrh	r3, [r4, #12]
 8008d32:	0599      	lsls	r1, r3, #22
 8008d34:	d402      	bmi.n	8008d3c <_putc_r+0x24>
 8008d36:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d38:	f7fd f971 	bl	800601e <__retarget_lock_acquire_recursive>
 8008d3c:	68a3      	ldr	r3, [r4, #8]
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	60a3      	str	r3, [r4, #8]
 8008d44:	da05      	bge.n	8008d52 <_putc_r+0x3a>
 8008d46:	69a2      	ldr	r2, [r4, #24]
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	db12      	blt.n	8008d72 <_putc_r+0x5a>
 8008d4c:	b2eb      	uxtb	r3, r5
 8008d4e:	2b0a      	cmp	r3, #10
 8008d50:	d00f      	beq.n	8008d72 <_putc_r+0x5a>
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	1c5a      	adds	r2, r3, #1
 8008d56:	6022      	str	r2, [r4, #0]
 8008d58:	701d      	strb	r5, [r3, #0]
 8008d5a:	b2ed      	uxtb	r5, r5
 8008d5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008d5e:	07da      	lsls	r2, r3, #31
 8008d60:	d405      	bmi.n	8008d6e <_putc_r+0x56>
 8008d62:	89a3      	ldrh	r3, [r4, #12]
 8008d64:	059b      	lsls	r3, r3, #22
 8008d66:	d402      	bmi.n	8008d6e <_putc_r+0x56>
 8008d68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008d6a:	f7fd f959 	bl	8006020 <__retarget_lock_release_recursive>
 8008d6e:	4628      	mov	r0, r5
 8008d70:	bd70      	pop	{r4, r5, r6, pc}
 8008d72:	4629      	mov	r1, r5
 8008d74:	4622      	mov	r2, r4
 8008d76:	4630      	mov	r0, r6
 8008d78:	f7fc ffad 	bl	8005cd6 <__swbuf_r>
 8008d7c:	4605      	mov	r5, r0
 8008d7e:	e7ed      	b.n	8008d5c <_putc_r+0x44>

08008d80 <memmove>:
 8008d80:	4288      	cmp	r0, r1
 8008d82:	b510      	push	{r4, lr}
 8008d84:	eb01 0402 	add.w	r4, r1, r2
 8008d88:	d902      	bls.n	8008d90 <memmove+0x10>
 8008d8a:	4284      	cmp	r4, r0
 8008d8c:	4623      	mov	r3, r4
 8008d8e:	d807      	bhi.n	8008da0 <memmove+0x20>
 8008d90:	1e43      	subs	r3, r0, #1
 8008d92:	42a1      	cmp	r1, r4
 8008d94:	d008      	beq.n	8008da8 <memmove+0x28>
 8008d96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d9e:	e7f8      	b.n	8008d92 <memmove+0x12>
 8008da0:	4402      	add	r2, r0
 8008da2:	4601      	mov	r1, r0
 8008da4:	428a      	cmp	r2, r1
 8008da6:	d100      	bne.n	8008daa <memmove+0x2a>
 8008da8:	bd10      	pop	{r4, pc}
 8008daa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008dae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008db2:	e7f7      	b.n	8008da4 <memmove+0x24>

08008db4 <_fstat_r>:
 8008db4:	b538      	push	{r3, r4, r5, lr}
 8008db6:	4d07      	ldr	r5, [pc, #28]	@ (8008dd4 <_fstat_r+0x20>)
 8008db8:	2300      	movs	r3, #0
 8008dba:	4604      	mov	r4, r0
 8008dbc:	4608      	mov	r0, r1
 8008dbe:	4611      	mov	r1, r2
 8008dc0:	602b      	str	r3, [r5, #0]
 8008dc2:	f7f9 f943 	bl	800204c <_fstat>
 8008dc6:	1c43      	adds	r3, r0, #1
 8008dc8:	d102      	bne.n	8008dd0 <_fstat_r+0x1c>
 8008dca:	682b      	ldr	r3, [r5, #0]
 8008dcc:	b103      	cbz	r3, 8008dd0 <_fstat_r+0x1c>
 8008dce:	6023      	str	r3, [r4, #0]
 8008dd0:	bd38      	pop	{r3, r4, r5, pc}
 8008dd2:	bf00      	nop
 8008dd4:	20000d00 	.word	0x20000d00

08008dd8 <_isatty_r>:
 8008dd8:	b538      	push	{r3, r4, r5, lr}
 8008dda:	4d06      	ldr	r5, [pc, #24]	@ (8008df4 <_isatty_r+0x1c>)
 8008ddc:	2300      	movs	r3, #0
 8008dde:	4604      	mov	r4, r0
 8008de0:	4608      	mov	r0, r1
 8008de2:	602b      	str	r3, [r5, #0]
 8008de4:	f7f9 f942 	bl	800206c <_isatty>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d102      	bne.n	8008df2 <_isatty_r+0x1a>
 8008dec:	682b      	ldr	r3, [r5, #0]
 8008dee:	b103      	cbz	r3, 8008df2 <_isatty_r+0x1a>
 8008df0:	6023      	str	r3, [r4, #0]
 8008df2:	bd38      	pop	{r3, r4, r5, pc}
 8008df4:	20000d00 	.word	0x20000d00

08008df8 <_sbrk_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4d06      	ldr	r5, [pc, #24]	@ (8008e14 <_sbrk_r+0x1c>)
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	4604      	mov	r4, r0
 8008e00:	4608      	mov	r0, r1
 8008e02:	602b      	str	r3, [r5, #0]
 8008e04:	f7f9 f94a 	bl	800209c <_sbrk>
 8008e08:	1c43      	adds	r3, r0, #1
 8008e0a:	d102      	bne.n	8008e12 <_sbrk_r+0x1a>
 8008e0c:	682b      	ldr	r3, [r5, #0]
 8008e0e:	b103      	cbz	r3, 8008e12 <_sbrk_r+0x1a>
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	bd38      	pop	{r3, r4, r5, pc}
 8008e14:	20000d00 	.word	0x20000d00

08008e18 <nan>:
 8008e18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008e20 <nan+0x8>
 8008e1c:	4770      	bx	lr
 8008e1e:	bf00      	nop
 8008e20:	00000000 	.word	0x00000000
 8008e24:	7ff80000 	.word	0x7ff80000

08008e28 <abort>:
 8008e28:	b508      	push	{r3, lr}
 8008e2a:	2006      	movs	r0, #6
 8008e2c:	f000 fbc4 	bl	80095b8 <raise>
 8008e30:	2001      	movs	r0, #1
 8008e32:	f7f9 f8bb 	bl	8001fac <_exit>

08008e36 <_calloc_r>:
 8008e36:	b570      	push	{r4, r5, r6, lr}
 8008e38:	fba1 5402 	umull	r5, r4, r1, r2
 8008e3c:	b934      	cbnz	r4, 8008e4c <_calloc_r+0x16>
 8008e3e:	4629      	mov	r1, r5
 8008e40:	f7fd fff6 	bl	8006e30 <_malloc_r>
 8008e44:	4606      	mov	r6, r0
 8008e46:	b928      	cbnz	r0, 8008e54 <_calloc_r+0x1e>
 8008e48:	4630      	mov	r0, r6
 8008e4a:	bd70      	pop	{r4, r5, r6, pc}
 8008e4c:	220c      	movs	r2, #12
 8008e4e:	6002      	str	r2, [r0, #0]
 8008e50:	2600      	movs	r6, #0
 8008e52:	e7f9      	b.n	8008e48 <_calloc_r+0x12>
 8008e54:	462a      	mov	r2, r5
 8008e56:	4621      	mov	r1, r4
 8008e58:	f7fc ffd2 	bl	8005e00 <memset>
 8008e5c:	e7f4      	b.n	8008e48 <_calloc_r+0x12>

08008e5e <rshift>:
 8008e5e:	6903      	ldr	r3, [r0, #16]
 8008e60:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008e64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e68:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008e6c:	f100 0414 	add.w	r4, r0, #20
 8008e70:	dd45      	ble.n	8008efe <rshift+0xa0>
 8008e72:	f011 011f 	ands.w	r1, r1, #31
 8008e76:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008e7a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008e7e:	d10c      	bne.n	8008e9a <rshift+0x3c>
 8008e80:	f100 0710 	add.w	r7, r0, #16
 8008e84:	4629      	mov	r1, r5
 8008e86:	42b1      	cmp	r1, r6
 8008e88:	d334      	bcc.n	8008ef4 <rshift+0x96>
 8008e8a:	1a9b      	subs	r3, r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	1eea      	subs	r2, r5, #3
 8008e90:	4296      	cmp	r6, r2
 8008e92:	bf38      	it	cc
 8008e94:	2300      	movcc	r3, #0
 8008e96:	4423      	add	r3, r4
 8008e98:	e015      	b.n	8008ec6 <rshift+0x68>
 8008e9a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008e9e:	f1c1 0820 	rsb	r8, r1, #32
 8008ea2:	40cf      	lsrs	r7, r1
 8008ea4:	f105 0e04 	add.w	lr, r5, #4
 8008ea8:	46a1      	mov	r9, r4
 8008eaa:	4576      	cmp	r6, lr
 8008eac:	46f4      	mov	ip, lr
 8008eae:	d815      	bhi.n	8008edc <rshift+0x7e>
 8008eb0:	1a9a      	subs	r2, r3, r2
 8008eb2:	0092      	lsls	r2, r2, #2
 8008eb4:	3a04      	subs	r2, #4
 8008eb6:	3501      	adds	r5, #1
 8008eb8:	42ae      	cmp	r6, r5
 8008eba:	bf38      	it	cc
 8008ebc:	2200      	movcc	r2, #0
 8008ebe:	18a3      	adds	r3, r4, r2
 8008ec0:	50a7      	str	r7, [r4, r2]
 8008ec2:	b107      	cbz	r7, 8008ec6 <rshift+0x68>
 8008ec4:	3304      	adds	r3, #4
 8008ec6:	1b1a      	subs	r2, r3, r4
 8008ec8:	42a3      	cmp	r3, r4
 8008eca:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008ece:	bf08      	it	eq
 8008ed0:	2300      	moveq	r3, #0
 8008ed2:	6102      	str	r2, [r0, #16]
 8008ed4:	bf08      	it	eq
 8008ed6:	6143      	streq	r3, [r0, #20]
 8008ed8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008edc:	f8dc c000 	ldr.w	ip, [ip]
 8008ee0:	fa0c fc08 	lsl.w	ip, ip, r8
 8008ee4:	ea4c 0707 	orr.w	r7, ip, r7
 8008ee8:	f849 7b04 	str.w	r7, [r9], #4
 8008eec:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ef0:	40cf      	lsrs	r7, r1
 8008ef2:	e7da      	b.n	8008eaa <rshift+0x4c>
 8008ef4:	f851 cb04 	ldr.w	ip, [r1], #4
 8008ef8:	f847 cf04 	str.w	ip, [r7, #4]!
 8008efc:	e7c3      	b.n	8008e86 <rshift+0x28>
 8008efe:	4623      	mov	r3, r4
 8008f00:	e7e1      	b.n	8008ec6 <rshift+0x68>

08008f02 <__hexdig_fun>:
 8008f02:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008f06:	2b09      	cmp	r3, #9
 8008f08:	d802      	bhi.n	8008f10 <__hexdig_fun+0xe>
 8008f0a:	3820      	subs	r0, #32
 8008f0c:	b2c0      	uxtb	r0, r0
 8008f0e:	4770      	bx	lr
 8008f10:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008f14:	2b05      	cmp	r3, #5
 8008f16:	d801      	bhi.n	8008f1c <__hexdig_fun+0x1a>
 8008f18:	3847      	subs	r0, #71	@ 0x47
 8008f1a:	e7f7      	b.n	8008f0c <__hexdig_fun+0xa>
 8008f1c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008f20:	2b05      	cmp	r3, #5
 8008f22:	d801      	bhi.n	8008f28 <__hexdig_fun+0x26>
 8008f24:	3827      	subs	r0, #39	@ 0x27
 8008f26:	e7f1      	b.n	8008f0c <__hexdig_fun+0xa>
 8008f28:	2000      	movs	r0, #0
 8008f2a:	4770      	bx	lr

08008f2c <__gethex>:
 8008f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f30:	b085      	sub	sp, #20
 8008f32:	468a      	mov	sl, r1
 8008f34:	9302      	str	r3, [sp, #8]
 8008f36:	680b      	ldr	r3, [r1, #0]
 8008f38:	9001      	str	r0, [sp, #4]
 8008f3a:	4690      	mov	r8, r2
 8008f3c:	1c9c      	adds	r4, r3, #2
 8008f3e:	46a1      	mov	r9, r4
 8008f40:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008f44:	2830      	cmp	r0, #48	@ 0x30
 8008f46:	d0fa      	beq.n	8008f3e <__gethex+0x12>
 8008f48:	eba9 0303 	sub.w	r3, r9, r3
 8008f4c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008f50:	f7ff ffd7 	bl	8008f02 <__hexdig_fun>
 8008f54:	4605      	mov	r5, r0
 8008f56:	2800      	cmp	r0, #0
 8008f58:	d168      	bne.n	800902c <__gethex+0x100>
 8008f5a:	49a0      	ldr	r1, [pc, #640]	@ (80091dc <__gethex+0x2b0>)
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	4648      	mov	r0, r9
 8008f60:	f7fc ff63 	bl	8005e2a <strncmp>
 8008f64:	4607      	mov	r7, r0
 8008f66:	2800      	cmp	r0, #0
 8008f68:	d167      	bne.n	800903a <__gethex+0x10e>
 8008f6a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008f6e:	4626      	mov	r6, r4
 8008f70:	f7ff ffc7 	bl	8008f02 <__hexdig_fun>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	d062      	beq.n	800903e <__gethex+0x112>
 8008f78:	4623      	mov	r3, r4
 8008f7a:	7818      	ldrb	r0, [r3, #0]
 8008f7c:	2830      	cmp	r0, #48	@ 0x30
 8008f7e:	4699      	mov	r9, r3
 8008f80:	f103 0301 	add.w	r3, r3, #1
 8008f84:	d0f9      	beq.n	8008f7a <__gethex+0x4e>
 8008f86:	f7ff ffbc 	bl	8008f02 <__hexdig_fun>
 8008f8a:	fab0 f580 	clz	r5, r0
 8008f8e:	096d      	lsrs	r5, r5, #5
 8008f90:	f04f 0b01 	mov.w	fp, #1
 8008f94:	464a      	mov	r2, r9
 8008f96:	4616      	mov	r6, r2
 8008f98:	3201      	adds	r2, #1
 8008f9a:	7830      	ldrb	r0, [r6, #0]
 8008f9c:	f7ff ffb1 	bl	8008f02 <__hexdig_fun>
 8008fa0:	2800      	cmp	r0, #0
 8008fa2:	d1f8      	bne.n	8008f96 <__gethex+0x6a>
 8008fa4:	498d      	ldr	r1, [pc, #564]	@ (80091dc <__gethex+0x2b0>)
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	4630      	mov	r0, r6
 8008faa:	f7fc ff3e 	bl	8005e2a <strncmp>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	d13f      	bne.n	8009032 <__gethex+0x106>
 8008fb2:	b944      	cbnz	r4, 8008fc6 <__gethex+0x9a>
 8008fb4:	1c74      	adds	r4, r6, #1
 8008fb6:	4622      	mov	r2, r4
 8008fb8:	4616      	mov	r6, r2
 8008fba:	3201      	adds	r2, #1
 8008fbc:	7830      	ldrb	r0, [r6, #0]
 8008fbe:	f7ff ffa0 	bl	8008f02 <__hexdig_fun>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	d1f8      	bne.n	8008fb8 <__gethex+0x8c>
 8008fc6:	1ba4      	subs	r4, r4, r6
 8008fc8:	00a7      	lsls	r7, r4, #2
 8008fca:	7833      	ldrb	r3, [r6, #0]
 8008fcc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008fd0:	2b50      	cmp	r3, #80	@ 0x50
 8008fd2:	d13e      	bne.n	8009052 <__gethex+0x126>
 8008fd4:	7873      	ldrb	r3, [r6, #1]
 8008fd6:	2b2b      	cmp	r3, #43	@ 0x2b
 8008fd8:	d033      	beq.n	8009042 <__gethex+0x116>
 8008fda:	2b2d      	cmp	r3, #45	@ 0x2d
 8008fdc:	d034      	beq.n	8009048 <__gethex+0x11c>
 8008fde:	1c71      	adds	r1, r6, #1
 8008fe0:	2400      	movs	r4, #0
 8008fe2:	7808      	ldrb	r0, [r1, #0]
 8008fe4:	f7ff ff8d 	bl	8008f02 <__hexdig_fun>
 8008fe8:	1e43      	subs	r3, r0, #1
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	2b18      	cmp	r3, #24
 8008fee:	d830      	bhi.n	8009052 <__gethex+0x126>
 8008ff0:	f1a0 0210 	sub.w	r2, r0, #16
 8008ff4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008ff8:	f7ff ff83 	bl	8008f02 <__hexdig_fun>
 8008ffc:	f100 3cff 	add.w	ip, r0, #4294967295
 8009000:	fa5f fc8c 	uxtb.w	ip, ip
 8009004:	f1bc 0f18 	cmp.w	ip, #24
 8009008:	f04f 030a 	mov.w	r3, #10
 800900c:	d91e      	bls.n	800904c <__gethex+0x120>
 800900e:	b104      	cbz	r4, 8009012 <__gethex+0xe6>
 8009010:	4252      	negs	r2, r2
 8009012:	4417      	add	r7, r2
 8009014:	f8ca 1000 	str.w	r1, [sl]
 8009018:	b1ed      	cbz	r5, 8009056 <__gethex+0x12a>
 800901a:	f1bb 0f00 	cmp.w	fp, #0
 800901e:	bf0c      	ite	eq
 8009020:	2506      	moveq	r5, #6
 8009022:	2500      	movne	r5, #0
 8009024:	4628      	mov	r0, r5
 8009026:	b005      	add	sp, #20
 8009028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800902c:	2500      	movs	r5, #0
 800902e:	462c      	mov	r4, r5
 8009030:	e7b0      	b.n	8008f94 <__gethex+0x68>
 8009032:	2c00      	cmp	r4, #0
 8009034:	d1c7      	bne.n	8008fc6 <__gethex+0x9a>
 8009036:	4627      	mov	r7, r4
 8009038:	e7c7      	b.n	8008fca <__gethex+0x9e>
 800903a:	464e      	mov	r6, r9
 800903c:	462f      	mov	r7, r5
 800903e:	2501      	movs	r5, #1
 8009040:	e7c3      	b.n	8008fca <__gethex+0x9e>
 8009042:	2400      	movs	r4, #0
 8009044:	1cb1      	adds	r1, r6, #2
 8009046:	e7cc      	b.n	8008fe2 <__gethex+0xb6>
 8009048:	2401      	movs	r4, #1
 800904a:	e7fb      	b.n	8009044 <__gethex+0x118>
 800904c:	fb03 0002 	mla	r0, r3, r2, r0
 8009050:	e7ce      	b.n	8008ff0 <__gethex+0xc4>
 8009052:	4631      	mov	r1, r6
 8009054:	e7de      	b.n	8009014 <__gethex+0xe8>
 8009056:	eba6 0309 	sub.w	r3, r6, r9
 800905a:	3b01      	subs	r3, #1
 800905c:	4629      	mov	r1, r5
 800905e:	2b07      	cmp	r3, #7
 8009060:	dc0a      	bgt.n	8009078 <__gethex+0x14c>
 8009062:	9801      	ldr	r0, [sp, #4]
 8009064:	f7fd ff70 	bl	8006f48 <_Balloc>
 8009068:	4604      	mov	r4, r0
 800906a:	b940      	cbnz	r0, 800907e <__gethex+0x152>
 800906c:	4b5c      	ldr	r3, [pc, #368]	@ (80091e0 <__gethex+0x2b4>)
 800906e:	4602      	mov	r2, r0
 8009070:	21e4      	movs	r1, #228	@ 0xe4
 8009072:	485c      	ldr	r0, [pc, #368]	@ (80091e4 <__gethex+0x2b8>)
 8009074:	f7fc fff2 	bl	800605c <__assert_func>
 8009078:	3101      	adds	r1, #1
 800907a:	105b      	asrs	r3, r3, #1
 800907c:	e7ef      	b.n	800905e <__gethex+0x132>
 800907e:	f100 0a14 	add.w	sl, r0, #20
 8009082:	2300      	movs	r3, #0
 8009084:	4655      	mov	r5, sl
 8009086:	469b      	mov	fp, r3
 8009088:	45b1      	cmp	r9, r6
 800908a:	d337      	bcc.n	80090fc <__gethex+0x1d0>
 800908c:	f845 bb04 	str.w	fp, [r5], #4
 8009090:	eba5 050a 	sub.w	r5, r5, sl
 8009094:	10ad      	asrs	r5, r5, #2
 8009096:	6125      	str	r5, [r4, #16]
 8009098:	4658      	mov	r0, fp
 800909a:	f7fe f847 	bl	800712c <__hi0bits>
 800909e:	016d      	lsls	r5, r5, #5
 80090a0:	f8d8 6000 	ldr.w	r6, [r8]
 80090a4:	1a2d      	subs	r5, r5, r0
 80090a6:	42b5      	cmp	r5, r6
 80090a8:	dd54      	ble.n	8009154 <__gethex+0x228>
 80090aa:	1bad      	subs	r5, r5, r6
 80090ac:	4629      	mov	r1, r5
 80090ae:	4620      	mov	r0, r4
 80090b0:	f7fe fbd3 	bl	800785a <__any_on>
 80090b4:	4681      	mov	r9, r0
 80090b6:	b178      	cbz	r0, 80090d8 <__gethex+0x1ac>
 80090b8:	1e6b      	subs	r3, r5, #1
 80090ba:	1159      	asrs	r1, r3, #5
 80090bc:	f003 021f 	and.w	r2, r3, #31
 80090c0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80090c4:	f04f 0901 	mov.w	r9, #1
 80090c8:	fa09 f202 	lsl.w	r2, r9, r2
 80090cc:	420a      	tst	r2, r1
 80090ce:	d003      	beq.n	80090d8 <__gethex+0x1ac>
 80090d0:	454b      	cmp	r3, r9
 80090d2:	dc36      	bgt.n	8009142 <__gethex+0x216>
 80090d4:	f04f 0902 	mov.w	r9, #2
 80090d8:	4629      	mov	r1, r5
 80090da:	4620      	mov	r0, r4
 80090dc:	f7ff febf 	bl	8008e5e <rshift>
 80090e0:	442f      	add	r7, r5
 80090e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80090e6:	42bb      	cmp	r3, r7
 80090e8:	da42      	bge.n	8009170 <__gethex+0x244>
 80090ea:	9801      	ldr	r0, [sp, #4]
 80090ec:	4621      	mov	r1, r4
 80090ee:	f7fd ff6b 	bl	8006fc8 <_Bfree>
 80090f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80090f4:	2300      	movs	r3, #0
 80090f6:	6013      	str	r3, [r2, #0]
 80090f8:	25a3      	movs	r5, #163	@ 0xa3
 80090fa:	e793      	b.n	8009024 <__gethex+0xf8>
 80090fc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009100:	2a2e      	cmp	r2, #46	@ 0x2e
 8009102:	d012      	beq.n	800912a <__gethex+0x1fe>
 8009104:	2b20      	cmp	r3, #32
 8009106:	d104      	bne.n	8009112 <__gethex+0x1e6>
 8009108:	f845 bb04 	str.w	fp, [r5], #4
 800910c:	f04f 0b00 	mov.w	fp, #0
 8009110:	465b      	mov	r3, fp
 8009112:	7830      	ldrb	r0, [r6, #0]
 8009114:	9303      	str	r3, [sp, #12]
 8009116:	f7ff fef4 	bl	8008f02 <__hexdig_fun>
 800911a:	9b03      	ldr	r3, [sp, #12]
 800911c:	f000 000f 	and.w	r0, r0, #15
 8009120:	4098      	lsls	r0, r3
 8009122:	ea4b 0b00 	orr.w	fp, fp, r0
 8009126:	3304      	adds	r3, #4
 8009128:	e7ae      	b.n	8009088 <__gethex+0x15c>
 800912a:	45b1      	cmp	r9, r6
 800912c:	d8ea      	bhi.n	8009104 <__gethex+0x1d8>
 800912e:	492b      	ldr	r1, [pc, #172]	@ (80091dc <__gethex+0x2b0>)
 8009130:	9303      	str	r3, [sp, #12]
 8009132:	2201      	movs	r2, #1
 8009134:	4630      	mov	r0, r6
 8009136:	f7fc fe78 	bl	8005e2a <strncmp>
 800913a:	9b03      	ldr	r3, [sp, #12]
 800913c:	2800      	cmp	r0, #0
 800913e:	d1e1      	bne.n	8009104 <__gethex+0x1d8>
 8009140:	e7a2      	b.n	8009088 <__gethex+0x15c>
 8009142:	1ea9      	subs	r1, r5, #2
 8009144:	4620      	mov	r0, r4
 8009146:	f7fe fb88 	bl	800785a <__any_on>
 800914a:	2800      	cmp	r0, #0
 800914c:	d0c2      	beq.n	80090d4 <__gethex+0x1a8>
 800914e:	f04f 0903 	mov.w	r9, #3
 8009152:	e7c1      	b.n	80090d8 <__gethex+0x1ac>
 8009154:	da09      	bge.n	800916a <__gethex+0x23e>
 8009156:	1b75      	subs	r5, r6, r5
 8009158:	4621      	mov	r1, r4
 800915a:	9801      	ldr	r0, [sp, #4]
 800915c:	462a      	mov	r2, r5
 800915e:	f7fe f943 	bl	80073e8 <__lshift>
 8009162:	1b7f      	subs	r7, r7, r5
 8009164:	4604      	mov	r4, r0
 8009166:	f100 0a14 	add.w	sl, r0, #20
 800916a:	f04f 0900 	mov.w	r9, #0
 800916e:	e7b8      	b.n	80090e2 <__gethex+0x1b6>
 8009170:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009174:	42bd      	cmp	r5, r7
 8009176:	dd6f      	ble.n	8009258 <__gethex+0x32c>
 8009178:	1bed      	subs	r5, r5, r7
 800917a:	42ae      	cmp	r6, r5
 800917c:	dc34      	bgt.n	80091e8 <__gethex+0x2bc>
 800917e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009182:	2b02      	cmp	r3, #2
 8009184:	d022      	beq.n	80091cc <__gethex+0x2a0>
 8009186:	2b03      	cmp	r3, #3
 8009188:	d024      	beq.n	80091d4 <__gethex+0x2a8>
 800918a:	2b01      	cmp	r3, #1
 800918c:	d115      	bne.n	80091ba <__gethex+0x28e>
 800918e:	42ae      	cmp	r6, r5
 8009190:	d113      	bne.n	80091ba <__gethex+0x28e>
 8009192:	2e01      	cmp	r6, #1
 8009194:	d10b      	bne.n	80091ae <__gethex+0x282>
 8009196:	9a02      	ldr	r2, [sp, #8]
 8009198:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	2301      	movs	r3, #1
 80091a0:	6123      	str	r3, [r4, #16]
 80091a2:	f8ca 3000 	str.w	r3, [sl]
 80091a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091a8:	2562      	movs	r5, #98	@ 0x62
 80091aa:	601c      	str	r4, [r3, #0]
 80091ac:	e73a      	b.n	8009024 <__gethex+0xf8>
 80091ae:	1e71      	subs	r1, r6, #1
 80091b0:	4620      	mov	r0, r4
 80091b2:	f7fe fb52 	bl	800785a <__any_on>
 80091b6:	2800      	cmp	r0, #0
 80091b8:	d1ed      	bne.n	8009196 <__gethex+0x26a>
 80091ba:	9801      	ldr	r0, [sp, #4]
 80091bc:	4621      	mov	r1, r4
 80091be:	f7fd ff03 	bl	8006fc8 <_Bfree>
 80091c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80091c4:	2300      	movs	r3, #0
 80091c6:	6013      	str	r3, [r2, #0]
 80091c8:	2550      	movs	r5, #80	@ 0x50
 80091ca:	e72b      	b.n	8009024 <__gethex+0xf8>
 80091cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d1f3      	bne.n	80091ba <__gethex+0x28e>
 80091d2:	e7e0      	b.n	8009196 <__gethex+0x26a>
 80091d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1dd      	bne.n	8009196 <__gethex+0x26a>
 80091da:	e7ee      	b.n	80091ba <__gethex+0x28e>
 80091dc:	08009b0d 	.word	0x08009b0d
 80091e0:	08009aa3 	.word	0x08009aa3
 80091e4:	08009b28 	.word	0x08009b28
 80091e8:	1e6f      	subs	r7, r5, #1
 80091ea:	f1b9 0f00 	cmp.w	r9, #0
 80091ee:	d130      	bne.n	8009252 <__gethex+0x326>
 80091f0:	b127      	cbz	r7, 80091fc <__gethex+0x2d0>
 80091f2:	4639      	mov	r1, r7
 80091f4:	4620      	mov	r0, r4
 80091f6:	f7fe fb30 	bl	800785a <__any_on>
 80091fa:	4681      	mov	r9, r0
 80091fc:	117a      	asrs	r2, r7, #5
 80091fe:	2301      	movs	r3, #1
 8009200:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009204:	f007 071f 	and.w	r7, r7, #31
 8009208:	40bb      	lsls	r3, r7
 800920a:	4213      	tst	r3, r2
 800920c:	4629      	mov	r1, r5
 800920e:	4620      	mov	r0, r4
 8009210:	bf18      	it	ne
 8009212:	f049 0902 	orrne.w	r9, r9, #2
 8009216:	f7ff fe22 	bl	8008e5e <rshift>
 800921a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800921e:	1b76      	subs	r6, r6, r5
 8009220:	2502      	movs	r5, #2
 8009222:	f1b9 0f00 	cmp.w	r9, #0
 8009226:	d047      	beq.n	80092b8 <__gethex+0x38c>
 8009228:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800922c:	2b02      	cmp	r3, #2
 800922e:	d015      	beq.n	800925c <__gethex+0x330>
 8009230:	2b03      	cmp	r3, #3
 8009232:	d017      	beq.n	8009264 <__gethex+0x338>
 8009234:	2b01      	cmp	r3, #1
 8009236:	d109      	bne.n	800924c <__gethex+0x320>
 8009238:	f019 0f02 	tst.w	r9, #2
 800923c:	d006      	beq.n	800924c <__gethex+0x320>
 800923e:	f8da 3000 	ldr.w	r3, [sl]
 8009242:	ea49 0903 	orr.w	r9, r9, r3
 8009246:	f019 0f01 	tst.w	r9, #1
 800924a:	d10e      	bne.n	800926a <__gethex+0x33e>
 800924c:	f045 0510 	orr.w	r5, r5, #16
 8009250:	e032      	b.n	80092b8 <__gethex+0x38c>
 8009252:	f04f 0901 	mov.w	r9, #1
 8009256:	e7d1      	b.n	80091fc <__gethex+0x2d0>
 8009258:	2501      	movs	r5, #1
 800925a:	e7e2      	b.n	8009222 <__gethex+0x2f6>
 800925c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800925e:	f1c3 0301 	rsb	r3, r3, #1
 8009262:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0f0      	beq.n	800924c <__gethex+0x320>
 800926a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800926e:	f104 0314 	add.w	r3, r4, #20
 8009272:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009276:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800927a:	f04f 0c00 	mov.w	ip, #0
 800927e:	4618      	mov	r0, r3
 8009280:	f853 2b04 	ldr.w	r2, [r3], #4
 8009284:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009288:	d01b      	beq.n	80092c2 <__gethex+0x396>
 800928a:	3201      	adds	r2, #1
 800928c:	6002      	str	r2, [r0, #0]
 800928e:	2d02      	cmp	r5, #2
 8009290:	f104 0314 	add.w	r3, r4, #20
 8009294:	d13c      	bne.n	8009310 <__gethex+0x3e4>
 8009296:	f8d8 2000 	ldr.w	r2, [r8]
 800929a:	3a01      	subs	r2, #1
 800929c:	42b2      	cmp	r2, r6
 800929e:	d109      	bne.n	80092b4 <__gethex+0x388>
 80092a0:	1171      	asrs	r1, r6, #5
 80092a2:	2201      	movs	r2, #1
 80092a4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80092a8:	f006 061f 	and.w	r6, r6, #31
 80092ac:	fa02 f606 	lsl.w	r6, r2, r6
 80092b0:	421e      	tst	r6, r3
 80092b2:	d13a      	bne.n	800932a <__gethex+0x3fe>
 80092b4:	f045 0520 	orr.w	r5, r5, #32
 80092b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092ba:	601c      	str	r4, [r3, #0]
 80092bc:	9b02      	ldr	r3, [sp, #8]
 80092be:	601f      	str	r7, [r3, #0]
 80092c0:	e6b0      	b.n	8009024 <__gethex+0xf8>
 80092c2:	4299      	cmp	r1, r3
 80092c4:	f843 cc04 	str.w	ip, [r3, #-4]
 80092c8:	d8d9      	bhi.n	800927e <__gethex+0x352>
 80092ca:	68a3      	ldr	r3, [r4, #8]
 80092cc:	459b      	cmp	fp, r3
 80092ce:	db17      	blt.n	8009300 <__gethex+0x3d4>
 80092d0:	6861      	ldr	r1, [r4, #4]
 80092d2:	9801      	ldr	r0, [sp, #4]
 80092d4:	3101      	adds	r1, #1
 80092d6:	f7fd fe37 	bl	8006f48 <_Balloc>
 80092da:	4681      	mov	r9, r0
 80092dc:	b918      	cbnz	r0, 80092e6 <__gethex+0x3ba>
 80092de:	4b1a      	ldr	r3, [pc, #104]	@ (8009348 <__gethex+0x41c>)
 80092e0:	4602      	mov	r2, r0
 80092e2:	2184      	movs	r1, #132	@ 0x84
 80092e4:	e6c5      	b.n	8009072 <__gethex+0x146>
 80092e6:	6922      	ldr	r2, [r4, #16]
 80092e8:	3202      	adds	r2, #2
 80092ea:	f104 010c 	add.w	r1, r4, #12
 80092ee:	0092      	lsls	r2, r2, #2
 80092f0:	300c      	adds	r0, #12
 80092f2:	f7fc fe9e 	bl	8006032 <memcpy>
 80092f6:	4621      	mov	r1, r4
 80092f8:	9801      	ldr	r0, [sp, #4]
 80092fa:	f7fd fe65 	bl	8006fc8 <_Bfree>
 80092fe:	464c      	mov	r4, r9
 8009300:	6923      	ldr	r3, [r4, #16]
 8009302:	1c5a      	adds	r2, r3, #1
 8009304:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009308:	6122      	str	r2, [r4, #16]
 800930a:	2201      	movs	r2, #1
 800930c:	615a      	str	r2, [r3, #20]
 800930e:	e7be      	b.n	800928e <__gethex+0x362>
 8009310:	6922      	ldr	r2, [r4, #16]
 8009312:	455a      	cmp	r2, fp
 8009314:	dd0b      	ble.n	800932e <__gethex+0x402>
 8009316:	2101      	movs	r1, #1
 8009318:	4620      	mov	r0, r4
 800931a:	f7ff fda0 	bl	8008e5e <rshift>
 800931e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009322:	3701      	adds	r7, #1
 8009324:	42bb      	cmp	r3, r7
 8009326:	f6ff aee0 	blt.w	80090ea <__gethex+0x1be>
 800932a:	2501      	movs	r5, #1
 800932c:	e7c2      	b.n	80092b4 <__gethex+0x388>
 800932e:	f016 061f 	ands.w	r6, r6, #31
 8009332:	d0fa      	beq.n	800932a <__gethex+0x3fe>
 8009334:	4453      	add	r3, sl
 8009336:	f1c6 0620 	rsb	r6, r6, #32
 800933a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800933e:	f7fd fef5 	bl	800712c <__hi0bits>
 8009342:	42b0      	cmp	r0, r6
 8009344:	dbe7      	blt.n	8009316 <__gethex+0x3ea>
 8009346:	e7f0      	b.n	800932a <__gethex+0x3fe>
 8009348:	08009aa3 	.word	0x08009aa3

0800934c <L_shift>:
 800934c:	f1c2 0208 	rsb	r2, r2, #8
 8009350:	0092      	lsls	r2, r2, #2
 8009352:	b570      	push	{r4, r5, r6, lr}
 8009354:	f1c2 0620 	rsb	r6, r2, #32
 8009358:	6843      	ldr	r3, [r0, #4]
 800935a:	6804      	ldr	r4, [r0, #0]
 800935c:	fa03 f506 	lsl.w	r5, r3, r6
 8009360:	432c      	orrs	r4, r5
 8009362:	40d3      	lsrs	r3, r2
 8009364:	6004      	str	r4, [r0, #0]
 8009366:	f840 3f04 	str.w	r3, [r0, #4]!
 800936a:	4288      	cmp	r0, r1
 800936c:	d3f4      	bcc.n	8009358 <L_shift+0xc>
 800936e:	bd70      	pop	{r4, r5, r6, pc}

08009370 <__match>:
 8009370:	b530      	push	{r4, r5, lr}
 8009372:	6803      	ldr	r3, [r0, #0]
 8009374:	3301      	adds	r3, #1
 8009376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800937a:	b914      	cbnz	r4, 8009382 <__match+0x12>
 800937c:	6003      	str	r3, [r0, #0]
 800937e:	2001      	movs	r0, #1
 8009380:	bd30      	pop	{r4, r5, pc}
 8009382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009386:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800938a:	2d19      	cmp	r5, #25
 800938c:	bf98      	it	ls
 800938e:	3220      	addls	r2, #32
 8009390:	42a2      	cmp	r2, r4
 8009392:	d0f0      	beq.n	8009376 <__match+0x6>
 8009394:	2000      	movs	r0, #0
 8009396:	e7f3      	b.n	8009380 <__match+0x10>

08009398 <__hexnan>:
 8009398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939c:	680b      	ldr	r3, [r1, #0]
 800939e:	6801      	ldr	r1, [r0, #0]
 80093a0:	115e      	asrs	r6, r3, #5
 80093a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80093a6:	f013 031f 	ands.w	r3, r3, #31
 80093aa:	b087      	sub	sp, #28
 80093ac:	bf18      	it	ne
 80093ae:	3604      	addne	r6, #4
 80093b0:	2500      	movs	r5, #0
 80093b2:	1f37      	subs	r7, r6, #4
 80093b4:	4682      	mov	sl, r0
 80093b6:	4690      	mov	r8, r2
 80093b8:	9301      	str	r3, [sp, #4]
 80093ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80093be:	46b9      	mov	r9, r7
 80093c0:	463c      	mov	r4, r7
 80093c2:	9502      	str	r5, [sp, #8]
 80093c4:	46ab      	mov	fp, r5
 80093c6:	784a      	ldrb	r2, [r1, #1]
 80093c8:	1c4b      	adds	r3, r1, #1
 80093ca:	9303      	str	r3, [sp, #12]
 80093cc:	b342      	cbz	r2, 8009420 <__hexnan+0x88>
 80093ce:	4610      	mov	r0, r2
 80093d0:	9105      	str	r1, [sp, #20]
 80093d2:	9204      	str	r2, [sp, #16]
 80093d4:	f7ff fd95 	bl	8008f02 <__hexdig_fun>
 80093d8:	2800      	cmp	r0, #0
 80093da:	d151      	bne.n	8009480 <__hexnan+0xe8>
 80093dc:	9a04      	ldr	r2, [sp, #16]
 80093de:	9905      	ldr	r1, [sp, #20]
 80093e0:	2a20      	cmp	r2, #32
 80093e2:	d818      	bhi.n	8009416 <__hexnan+0x7e>
 80093e4:	9b02      	ldr	r3, [sp, #8]
 80093e6:	459b      	cmp	fp, r3
 80093e8:	dd13      	ble.n	8009412 <__hexnan+0x7a>
 80093ea:	454c      	cmp	r4, r9
 80093ec:	d206      	bcs.n	80093fc <__hexnan+0x64>
 80093ee:	2d07      	cmp	r5, #7
 80093f0:	dc04      	bgt.n	80093fc <__hexnan+0x64>
 80093f2:	462a      	mov	r2, r5
 80093f4:	4649      	mov	r1, r9
 80093f6:	4620      	mov	r0, r4
 80093f8:	f7ff ffa8 	bl	800934c <L_shift>
 80093fc:	4544      	cmp	r4, r8
 80093fe:	d952      	bls.n	80094a6 <__hexnan+0x10e>
 8009400:	2300      	movs	r3, #0
 8009402:	f1a4 0904 	sub.w	r9, r4, #4
 8009406:	f844 3c04 	str.w	r3, [r4, #-4]
 800940a:	f8cd b008 	str.w	fp, [sp, #8]
 800940e:	464c      	mov	r4, r9
 8009410:	461d      	mov	r5, r3
 8009412:	9903      	ldr	r1, [sp, #12]
 8009414:	e7d7      	b.n	80093c6 <__hexnan+0x2e>
 8009416:	2a29      	cmp	r2, #41	@ 0x29
 8009418:	d157      	bne.n	80094ca <__hexnan+0x132>
 800941a:	3102      	adds	r1, #2
 800941c:	f8ca 1000 	str.w	r1, [sl]
 8009420:	f1bb 0f00 	cmp.w	fp, #0
 8009424:	d051      	beq.n	80094ca <__hexnan+0x132>
 8009426:	454c      	cmp	r4, r9
 8009428:	d206      	bcs.n	8009438 <__hexnan+0xa0>
 800942a:	2d07      	cmp	r5, #7
 800942c:	dc04      	bgt.n	8009438 <__hexnan+0xa0>
 800942e:	462a      	mov	r2, r5
 8009430:	4649      	mov	r1, r9
 8009432:	4620      	mov	r0, r4
 8009434:	f7ff ff8a 	bl	800934c <L_shift>
 8009438:	4544      	cmp	r4, r8
 800943a:	d936      	bls.n	80094aa <__hexnan+0x112>
 800943c:	f1a8 0204 	sub.w	r2, r8, #4
 8009440:	4623      	mov	r3, r4
 8009442:	f853 1b04 	ldr.w	r1, [r3], #4
 8009446:	f842 1f04 	str.w	r1, [r2, #4]!
 800944a:	429f      	cmp	r7, r3
 800944c:	d2f9      	bcs.n	8009442 <__hexnan+0xaa>
 800944e:	1b3b      	subs	r3, r7, r4
 8009450:	f023 0303 	bic.w	r3, r3, #3
 8009454:	3304      	adds	r3, #4
 8009456:	3401      	adds	r4, #1
 8009458:	3e03      	subs	r6, #3
 800945a:	42b4      	cmp	r4, r6
 800945c:	bf88      	it	hi
 800945e:	2304      	movhi	r3, #4
 8009460:	4443      	add	r3, r8
 8009462:	2200      	movs	r2, #0
 8009464:	f843 2b04 	str.w	r2, [r3], #4
 8009468:	429f      	cmp	r7, r3
 800946a:	d2fb      	bcs.n	8009464 <__hexnan+0xcc>
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	b91b      	cbnz	r3, 8009478 <__hexnan+0xe0>
 8009470:	4547      	cmp	r7, r8
 8009472:	d128      	bne.n	80094c6 <__hexnan+0x12e>
 8009474:	2301      	movs	r3, #1
 8009476:	603b      	str	r3, [r7, #0]
 8009478:	2005      	movs	r0, #5
 800947a:	b007      	add	sp, #28
 800947c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009480:	3501      	adds	r5, #1
 8009482:	2d08      	cmp	r5, #8
 8009484:	f10b 0b01 	add.w	fp, fp, #1
 8009488:	dd06      	ble.n	8009498 <__hexnan+0x100>
 800948a:	4544      	cmp	r4, r8
 800948c:	d9c1      	bls.n	8009412 <__hexnan+0x7a>
 800948e:	2300      	movs	r3, #0
 8009490:	f844 3c04 	str.w	r3, [r4, #-4]
 8009494:	2501      	movs	r5, #1
 8009496:	3c04      	subs	r4, #4
 8009498:	6822      	ldr	r2, [r4, #0]
 800949a:	f000 000f 	and.w	r0, r0, #15
 800949e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80094a2:	6020      	str	r0, [r4, #0]
 80094a4:	e7b5      	b.n	8009412 <__hexnan+0x7a>
 80094a6:	2508      	movs	r5, #8
 80094a8:	e7b3      	b.n	8009412 <__hexnan+0x7a>
 80094aa:	9b01      	ldr	r3, [sp, #4]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d0dd      	beq.n	800946c <__hexnan+0xd4>
 80094b0:	f1c3 0320 	rsb	r3, r3, #32
 80094b4:	f04f 32ff 	mov.w	r2, #4294967295
 80094b8:	40da      	lsrs	r2, r3
 80094ba:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80094be:	4013      	ands	r3, r2
 80094c0:	f846 3c04 	str.w	r3, [r6, #-4]
 80094c4:	e7d2      	b.n	800946c <__hexnan+0xd4>
 80094c6:	3f04      	subs	r7, #4
 80094c8:	e7d0      	b.n	800946c <__hexnan+0xd4>
 80094ca:	2004      	movs	r0, #4
 80094cc:	e7d5      	b.n	800947a <__hexnan+0xe2>

080094ce <__ascii_mbtowc>:
 80094ce:	b082      	sub	sp, #8
 80094d0:	b901      	cbnz	r1, 80094d4 <__ascii_mbtowc+0x6>
 80094d2:	a901      	add	r1, sp, #4
 80094d4:	b142      	cbz	r2, 80094e8 <__ascii_mbtowc+0x1a>
 80094d6:	b14b      	cbz	r3, 80094ec <__ascii_mbtowc+0x1e>
 80094d8:	7813      	ldrb	r3, [r2, #0]
 80094da:	600b      	str	r3, [r1, #0]
 80094dc:	7812      	ldrb	r2, [r2, #0]
 80094de:	1e10      	subs	r0, r2, #0
 80094e0:	bf18      	it	ne
 80094e2:	2001      	movne	r0, #1
 80094e4:	b002      	add	sp, #8
 80094e6:	4770      	bx	lr
 80094e8:	4610      	mov	r0, r2
 80094ea:	e7fb      	b.n	80094e4 <__ascii_mbtowc+0x16>
 80094ec:	f06f 0001 	mvn.w	r0, #1
 80094f0:	e7f8      	b.n	80094e4 <__ascii_mbtowc+0x16>

080094f2 <_realloc_r>:
 80094f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f6:	4607      	mov	r7, r0
 80094f8:	4614      	mov	r4, r2
 80094fa:	460d      	mov	r5, r1
 80094fc:	b921      	cbnz	r1, 8009508 <_realloc_r+0x16>
 80094fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009502:	4611      	mov	r1, r2
 8009504:	f7fd bc94 	b.w	8006e30 <_malloc_r>
 8009508:	b92a      	cbnz	r2, 8009516 <_realloc_r+0x24>
 800950a:	f7fd fc1d 	bl	8006d48 <_free_r>
 800950e:	4625      	mov	r5, r4
 8009510:	4628      	mov	r0, r5
 8009512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009516:	f000 f86b 	bl	80095f0 <_malloc_usable_size_r>
 800951a:	4284      	cmp	r4, r0
 800951c:	4606      	mov	r6, r0
 800951e:	d802      	bhi.n	8009526 <_realloc_r+0x34>
 8009520:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009524:	d8f4      	bhi.n	8009510 <_realloc_r+0x1e>
 8009526:	4621      	mov	r1, r4
 8009528:	4638      	mov	r0, r7
 800952a:	f7fd fc81 	bl	8006e30 <_malloc_r>
 800952e:	4680      	mov	r8, r0
 8009530:	b908      	cbnz	r0, 8009536 <_realloc_r+0x44>
 8009532:	4645      	mov	r5, r8
 8009534:	e7ec      	b.n	8009510 <_realloc_r+0x1e>
 8009536:	42b4      	cmp	r4, r6
 8009538:	4622      	mov	r2, r4
 800953a:	4629      	mov	r1, r5
 800953c:	bf28      	it	cs
 800953e:	4632      	movcs	r2, r6
 8009540:	f7fc fd77 	bl	8006032 <memcpy>
 8009544:	4629      	mov	r1, r5
 8009546:	4638      	mov	r0, r7
 8009548:	f7fd fbfe 	bl	8006d48 <_free_r>
 800954c:	e7f1      	b.n	8009532 <_realloc_r+0x40>

0800954e <__ascii_wctomb>:
 800954e:	4603      	mov	r3, r0
 8009550:	4608      	mov	r0, r1
 8009552:	b141      	cbz	r1, 8009566 <__ascii_wctomb+0x18>
 8009554:	2aff      	cmp	r2, #255	@ 0xff
 8009556:	d904      	bls.n	8009562 <__ascii_wctomb+0x14>
 8009558:	228a      	movs	r2, #138	@ 0x8a
 800955a:	601a      	str	r2, [r3, #0]
 800955c:	f04f 30ff 	mov.w	r0, #4294967295
 8009560:	4770      	bx	lr
 8009562:	700a      	strb	r2, [r1, #0]
 8009564:	2001      	movs	r0, #1
 8009566:	4770      	bx	lr

08009568 <_raise_r>:
 8009568:	291f      	cmp	r1, #31
 800956a:	b538      	push	{r3, r4, r5, lr}
 800956c:	4605      	mov	r5, r0
 800956e:	460c      	mov	r4, r1
 8009570:	d904      	bls.n	800957c <_raise_r+0x14>
 8009572:	2316      	movs	r3, #22
 8009574:	6003      	str	r3, [r0, #0]
 8009576:	f04f 30ff 	mov.w	r0, #4294967295
 800957a:	bd38      	pop	{r3, r4, r5, pc}
 800957c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800957e:	b112      	cbz	r2, 8009586 <_raise_r+0x1e>
 8009580:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009584:	b94b      	cbnz	r3, 800959a <_raise_r+0x32>
 8009586:	4628      	mov	r0, r5
 8009588:	f000 f830 	bl	80095ec <_getpid_r>
 800958c:	4622      	mov	r2, r4
 800958e:	4601      	mov	r1, r0
 8009590:	4628      	mov	r0, r5
 8009592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009596:	f000 b817 	b.w	80095c8 <_kill_r>
 800959a:	2b01      	cmp	r3, #1
 800959c:	d00a      	beq.n	80095b4 <_raise_r+0x4c>
 800959e:	1c59      	adds	r1, r3, #1
 80095a0:	d103      	bne.n	80095aa <_raise_r+0x42>
 80095a2:	2316      	movs	r3, #22
 80095a4:	6003      	str	r3, [r0, #0]
 80095a6:	2001      	movs	r0, #1
 80095a8:	e7e7      	b.n	800957a <_raise_r+0x12>
 80095aa:	2100      	movs	r1, #0
 80095ac:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80095b0:	4620      	mov	r0, r4
 80095b2:	4798      	blx	r3
 80095b4:	2000      	movs	r0, #0
 80095b6:	e7e0      	b.n	800957a <_raise_r+0x12>

080095b8 <raise>:
 80095b8:	4b02      	ldr	r3, [pc, #8]	@ (80095c4 <raise+0xc>)
 80095ba:	4601      	mov	r1, r0
 80095bc:	6818      	ldr	r0, [r3, #0]
 80095be:	f7ff bfd3 	b.w	8009568 <_raise_r>
 80095c2:	bf00      	nop
 80095c4:	2000001c 	.word	0x2000001c

080095c8 <_kill_r>:
 80095c8:	b538      	push	{r3, r4, r5, lr}
 80095ca:	4d07      	ldr	r5, [pc, #28]	@ (80095e8 <_kill_r+0x20>)
 80095cc:	2300      	movs	r3, #0
 80095ce:	4604      	mov	r4, r0
 80095d0:	4608      	mov	r0, r1
 80095d2:	4611      	mov	r1, r2
 80095d4:	602b      	str	r3, [r5, #0]
 80095d6:	f7f8 fcd9 	bl	8001f8c <_kill>
 80095da:	1c43      	adds	r3, r0, #1
 80095dc:	d102      	bne.n	80095e4 <_kill_r+0x1c>
 80095de:	682b      	ldr	r3, [r5, #0]
 80095e0:	b103      	cbz	r3, 80095e4 <_kill_r+0x1c>
 80095e2:	6023      	str	r3, [r4, #0]
 80095e4:	bd38      	pop	{r3, r4, r5, pc}
 80095e6:	bf00      	nop
 80095e8:	20000d00 	.word	0x20000d00

080095ec <_getpid_r>:
 80095ec:	f7f8 bcc6 	b.w	8001f7c <_getpid>

080095f0 <_malloc_usable_size_r>:
 80095f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095f4:	1f18      	subs	r0, r3, #4
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	bfbc      	itt	lt
 80095fa:	580b      	ldrlt	r3, [r1, r0]
 80095fc:	18c0      	addlt	r0, r0, r3
 80095fe:	4770      	bx	lr

08009600 <_init>:
 8009600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009602:	bf00      	nop
 8009604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009606:	bc08      	pop	{r3}
 8009608:	469e      	mov	lr, r3
 800960a:	4770      	bx	lr

0800960c <_fini>:
 800960c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960e:	bf00      	nop
 8009610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009612:	bc08      	pop	{r3}
 8009614:	469e      	mov	lr, r3
 8009616:	4770      	bx	lr
